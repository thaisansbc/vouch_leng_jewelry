<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Schools extends MY_Controller
{
	function __construct()
    {
        parent::__construct();
        if (!$this->loggedIn) {
            $this->session->set_userdata('requested_page', $this->uri->uri_string());
            admin_redirect('login');
        }
        $this->lang->admin_load('schools', $this->Settings->user_language);
		$this->load->library('ion_auth');
        $this->load->library('form_validation');
        $this->load->admin_model('schools_model');
        $this->load->admin_model('sales_model');
        $this->load->admin_model('sales_order_model');
        $this->load->admin_model('projects_model');
        $this->load->admin_model('hr_model');		
		$this->digital_upload_path = 'files/';
        $this->upload_path = 'assets/uploads/';
        $this->thumbs_path = 'assets/uploads/thumbs/';
        $this->image_types = 'gif|jpg|jpeg|png|tif';
        $this->digital_file_types = 'zip|psd|ai|rar|pdf|doc|docx|xls|xlsx|ppt|pptx|gif|jpg|jpeg|png|tif|txt';
        $this->allowed_file_size = '10240';
    }

	function admissions($biller_id = null, $academic_year = null)
    {
        $this->bpas->checkPermissions();
		if($biller_id == "null"){
			$biller_id = null;
		}
		if($academic_year == "null"){
			$academic_year = null;
		}
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if(isset($action)) {
        	$this->data['action'] = $action;
        }
		$this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year']  = ($academic_year ? $academic_year : ($this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y')));
		$this->data['billers']       = $this->site->getBillers();
		$this->data['biller']        = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
		//$this->data['subjects'] = $this->schools_model->getSubjects();
		$this->data['programs']      = $this->schools_model->getPrograms();
        $this->data['skills']        = $this->schools_model->getSkills();

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('admissions')));
        $meta = array('page_title' => lang('admissions'), 'bc' => $bc);
        $this->page_construct('schools/admissions', $meta, $this->data);
    }

    function getAdmissions($biller_id = null, $academic_year = null)
    {
    	$this->bpas->checkPermissions('index');
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
		$biller        = $this->input->get('biller') ? $this->input->get('biller') : null;
        $academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date('Y');
        $admission_no  = $this->input->get('admission_no') ? $this->input->get('admission_no') : null;
        $student_name  = $this->input->get('student_name') ? $this->input->get('student_name') : null;
        $gender        = $this->input->get('gender') ? $this->input->get('gender') : null;
        $program       = $this->input->get('program') ? $this->input->get('program') : null;
        $skill         = $this->input->get('skill') ? $this->input->get('skill') : null;
        $timeshift     = $this->input->get('timeshift') ? $this->input->get('timeshift') : null;
        $start_date    = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date      = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date . ' 00:00:00');
            $end_date   = $this->bpas->fld($end_date . ' 23:59:00');
        }
        $this->load->library('datatables');
        if($this->Admin || $this->Owner || $this->GP['schools-approved_admission']){
			$approve_link = "<a href='#' class='po approved_admission' title='" . $this->lang->line("approved_admission") . "' data-content=\"<p>"
			. lang('r_u_sure') . "</p><a class='btn btn-success' href='" . admin_url('schools/approved_admission/$1/' . $academic_year) . "'>"
			. lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-check\"></i> "
			. lang('approved_admission') . "</a>";
			$unapprove_link = "<a href='#' class='po unapproved_admission' title='<b>" . $this->lang->line("unapproved_admission") . "</b>' data-content=\"<p>"
			. lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/unapproved_admission/$1/' . $academic_year) . "'>"
			. lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-times\"></i> "
			. lang('unapproved_admission') . "</a>";
			$rejected_link = "<a href='#' class='po rejected_admission' title='<b>" . $this->lang->line("rejected_admission") . "</b>' data-content=\"<p>"
			. lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/rejected_admission/$1/' . $academic_year) . "'>"
			. lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-times\"></i> "
			. lang('rejected_admission') . "</a>";
			$accepted_link = "<a href='#' class='po accepted_admission' title='<b>" . $this->lang->line("accepted_admission") . "</b>' data-content=\"<p>"
			. lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/accepted_admission/$1/' . $academic_year) . "'>"
			. lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-check\"></i> "
			. lang('accepted_admission') . "</a>";
			$enroll_link = "<a href='#' class='po enroll_admission' title='<b>" . $this->lang->line("enroll_admission") . "</b>' data-content=\"<p>"
			. lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/enroll_admission/$1/' . $academic_year) . "'>"
			. lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class='fa fa-pencil-square-o'></i> "
			. lang('enroll_admission') . "</a>";
			$progress_link = "<a href='#' class='po progress_admission' title='<b>" . $this->lang->line("progress_admission") . "</b>' data-content=\"<p>"
			. lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/progress_admission/$1/' . $academic_year) . "'>"
			. lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-cog\"></i> "
			. lang('progress_admission') . "</a>";
		}

		$detail_link = anchor('admin/schools/view_admission/$1', '<i class="fa fa-file-text-o"></i> ' . lang('student_details'));
		$delete_link = "<a href='#' class='po delete_student' title='" . lang("delete_student") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_student/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_student') . "</a>";

		$action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
							<ul class="dropdown-menu pull-right" role="menu">
								<li class="approved_admission hide">' . $approve_link . '</li>
								<li class="accepted_admission">' . $accepted_link . '</li>
								<li class="enroll_admission">' . $enroll_link . '</li>
								<li class="progress_admission">' . $progress_link . '</li>
								<li class="rejected_admission">' . $rejected_link . '</li>
								<li class="unapprove_admission">' . $unapprove_link . '</li>
								<li>'.$detail_link.'</li>
								<li><a class="edit_student" href="'.admin_url('schools/edit_student/$1/' . $academic_year).'" ><i class="fa fa fa-edit"></i>'.lang('edit_student').'</a></li>
					            <li>'.$delete_link.'</li>
							</ul>
						</div>';
						
        $this->datatables->select("
			sh_students.id as id,
			sh_students.photo,
			CONCAT(".$this->db->dbprefix('sh_students').".academic_year,' - ',".$this->db->dbprefix('sh_students').".academic_year + 1) as academic_year,
			DATE_FORMAT(".$this->db->dbprefix('sh_students').".date, '%Y-%m-%d %T') as date,
			sh_students.number,
			sh_students.code,
			CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as full_name_kh,
			CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as full_name,
			sh_students.gender,
			DATE_FORMAT(".$this->db->dbprefix('sh_students').".dob, '%Y-%m-%d') as dob,
			sh_students.phone,
			zones.zone_name as zonename,
			sh_programs.name as pr_name,
			sh_skills.name,
			custom_field.name as timeshift,
			sh_scholarships.name as sch_name,
			sh_students.approval_status,
			sh_students.type
		")
		->from("sh_students")
		->join("companies","companies.id = sh_students.biller_id","left")
		->join("sh_programs","sh_programs.id = sh_students.program_id","left")
		->join("sh_skills","sh_skills.id = sh_students.skill_id","left")
		->join("zones","zones.id = sh_students.city_id","left")
		->join("custom_field", "custom_field.id = sh_students.timeshift_id", "left")
		->join("sh_scholarships", "sh_scholarships.id = sh_students.scholarship_id", "left")
		->group_by("sh_students.id")
		->add_column("Actions", $action_link, "id");
		
		// $this->datatables->where('sh_students.is_admission', 1);		
		if ($academic_year) {
			$this->datatables->where('sh_students.academic_year', $academic_year);
        }
		if ($biller_id) {
			$this->datatables->where('sh_students.biller_id', $biller_id);
        } 
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_students.biller_id', $this->session->userdata('biller_id'));
		}
		if ($biller) {
            $this->datatables->where('sh_students.biller_id', $biller);
        }
        if ($admission_no) {
            $this->datatables->where('sh_students.number', $admission_no);
        }
        if ($student_name) {
            $this->db->like("{$this->db->dbprefix('sh_students')}.firstname", $student_name, 'both');
            $this->db->or_like("{$this->db->dbprefix('sh_students')}.lastname", $student_name, 'both');
            $this->db->or_like("CONCAT({$this->db->dbprefix('sh_students')}.firstname, ' ', {$this->db->dbprefix('sh_students')}.lastname)", $student_name, 'both');

            $this->db->or_like("{$this->db->dbprefix('sh_students')}.firstname_other", $student_name, 'both');
            $this->db->or_like("{$this->db->dbprefix('sh_students')}.lastname_other", $student_name, 'both');
            $this->db->or_like("CONCAT({$this->db->dbprefix('sh_students')}.firstname_other, ' ', {$this->db->dbprefix('sh_students')}.lastname_other)", $student_name, 'both');
        }
        if ($gender) {
            $this->datatables->where('sh_students.gender', $gender);
        }
        if ($program) {
            $this->datatables->where('sh_students.program_id', $program);
        }
        if ($skill) {
            $this->datatables->where('sh_students.skill_id', $skill);
        }
        if ($timeshift) {
            $this->datatables->where('sh_students.timeshift_id', $timeshift);
        }
        if ($start_date) {
            $this->datatables->where($this->db->dbprefix('sh_students') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
        }
        echo $this->datatables->generate();
    }

    public function approved_admission($id = null, $academic_year = null)
    {
        $this->bpas->checkPermissions(NULL, true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
        if ($this->schools_model->updateAdmissionStatus($id, "approved")) {
            $this->session->set_flashdata('message', lang('admission_unapproved'));
            admin_redirect('schools/admissions/null/' . $academic_year);
        }
    }

	public function unapproved_admission($id = null, $academic_year = null)
	{
        $this->bpas->checkPermissions("unapproved_admission", true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		if ($this->schools_model->updateAdmissionStatus($id, "pending")) {
            $this->session->set_flashdata('message', lang('admission_unapproved'));
        }
		admin_redirect('schools/admissions/null/' . $academic_year);
    }

    public function rejected_admission($id = null, $academic_year = null)
    {
    	$this->bpas->checkPermissions("rejected_admission", true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		if ($this->schools_model->updateAdmissionStatus($id, "rejected")) {
            $this->session->set_flashdata('message', lang('admission_rejected'));
        }
		admin_redirect('schools/admissions/null/' . $academic_year);
    }

    public function accepted_admission($id = null, $academic_year = null)
    {
    	$this->bpas->checkPermissions("accepted_admission", true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		if ($this->schools_model->updateAdmissionStatus($id, "accepted")) {
            $this->session->set_flashdata('message', lang('admission_accepted'));
        }
		admin_redirect('schools/admissions/null/' . $academic_year);
    }

    public function enroll_admission($id = null, $academic_year = null)
    {
    	$this->bpas->checkPermissions("enroll_admission", true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		if ($this->schools_model->updateAdmissionStatus($id, "enroll")) {
            $this->session->set_flashdata('message', lang('admission_enroll'));
        }
		admin_redirect('schools/admissions/null/' . $academic_year);
    }

    public function progress_admission($id = null, $academic_year = null)
    {
    	$this->bpas->checkPermissions("progress_admission", true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		if ($this->schools_model->updateAdmissionStatus($id, "progress")) {
            $this->session->set_flashdata('message', lang('admission_progress'));
        }
		admin_redirect('schools/admissions/null/' . $academic_year);
    }

	public function getScholarshipsByAcademicYear($academic_year)
	{
    	if ($academic_year) {
    		if ($scholarships = $this->schools_model->getScholarships($academic_year)) {
    			$this->bpas->send_json($scholarships);
	    	}	
	    	$this->bpas->send_json(false);
    	}
    	$this->bpas->send_json(false);
	}

    public function assign_student()
    {
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('program_id', $this->lang->line("program"), 'required');
		$this->form_validation->set_rules('status', $this->lang->line("status"), 'required');
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('skill', $this->lang->line("skill"), 'required');
		$this->form_validation->set_rules('grade_id', $this->lang->line("grade"), 'required');
		$this->form_validation->set_rules('section', $this->lang->line("section"), 'required');
		$this->form_validation->set_rules('timeshift', $this->lang->line("timeshift"), 'required');
		$this->form_validation->set_rules('class_id', $this->lang->line("class"), 'required');
        if ($this->form_validation->run() == true) {
			$date          = $this->bpas->fld(trim($this->input->post('date')));
			$biller_id     = $this->input->post('biller');
			$program_id    = $this->input->post('program_id');
			$program       = $this->input->post('program');
			$status        = $this->input->post('status');
			$academic_year = $this->input->post('academic_year');
			$skill_id      = $this->input->post('skill');
			$grade_id      = $this->input->post('grade_id');
			$grade         = $this->input->post('grade');
			$section_id    = $this->input->post('section');
			$timeshift_id  = $this->input->post('timeshift');
			$class_id      = $this->input->post('class_id');
			$class         = $this->input->post('class');
            $note          = $this->input->post('note') ? $this->bpas->clear_tags($this->input->post('note')) : null;
            $generation    = $this->input->post('generation') ? $this->bpas->clear_tags($this->input->post('generation')) : null;
            $batch         = $this->input->post('batch') ? $this->bpas->clear_tags($this->input->post('batch')) : null;
			$scholarship   = $this->input->post('scholarship') ? $this->input->post('scholarship') : null;
			$attachment    = null;
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $attachment = $photo;
            }
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
            	$student_id = $_POST['student_id'][$r];
				$data[] = array(
					'date'            => $date,
					'student_id'      => $student_id,
					'biller_id'       => $biller_id,
					'program_id'      => $program_id,
					'program'         => $program,
					'academic_year'   => $academic_year,
					'skill_id'		  => $skill_id,
					'grade_id'        => $grade_id,
					'grade'           => $grade,
					'section_id'      => $section_id,
					'timeshift_id'    => $timeshift_id,
					'class_id'        => $class_id,
					'class'  	      => $class,
					'description'     => $note,
					'generation'      => $generation,
					'batch'           => $batch,
					'status'          => $status,
					'attachment'      => $attachment,
					'created_by'      => $this->session->userdata('user_id'),
					'created_at'      => date('Y-m-d H:i:s'),
					'scholarship_id'  => $scholarship,
				);
			}
			// $this->bpas->print_arrays($data);
        }
        if ($this->form_validation->run() == true && $this->schools_model->assignStudent($data)) {
            $this->session->set_userdata('remove_stls', 1);
            $this->session->set_flashdata('message', $this->lang->line("assign_student_added"));
			admin_redirect('schools');
        } else {
            $this->data['error']    = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers']  =  $this->site->getBillers();
			$this->data['programs'] = $this->schools_model->getPrograms();	
			$this->data['grades']   = $this->schools_model->getGrades();	
			$this->data['skills']   = $this->schools_model->getSkills();
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('schools'), 'page' => lang('school')), array('link' => site_url('schools/assign_student'), 'page' => lang('assign_student')), array('link' => '#', 'page' => lang('assign_student')));
			$meta = array('page_title' => lang('assign_student'), 'bc' => $bc);
            $this->page_construct('schools/assign_student', $meta, $this->data);
        }
    }

	public function edit_assign_student($id = null)
    {
    	$this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('program_id', $this->lang->line("program"), 'required');
		$this->form_validation->set_rules('status', $this->lang->line("status"), 'required');
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('skill', $this->lang->line("skill"), 'required');
		$this->form_validation->set_rules('grade_id', $this->lang->line("grade"), 'required');
		$this->form_validation->set_rules('section', $this->lang->line("section"), 'required');
		$this->form_validation->set_rules('timeshift', $this->lang->line("timeshift"), 'required');
		$this->form_validation->set_rules('class_id', $this->lang->line("class"), 'required');
        if ($this->form_validation->run() == true) {
			$date          = $this->bpas->fld(trim($this->input->post('date')));
			$biller_id     = $this->input->post('biller');
			$program_id    = $this->input->post('program_id');
			$program       = $this->input->post('program');
			$status        = $this->input->post('status');
			$academic_year = $this->input->post('academic_year');
			$skill_id      = $this->input->post('skill');
			$grade_id      = $this->input->post('grade_id');
			$grade         = $this->input->post('grade');
			$section_id    = $this->input->post('section');
			$timeshift_id  = $this->input->post('timeshift');
			$class_id      = $this->input->post('class_id');
			$class         = $this->input->post('class');
            $note          = $this->input->post('note') ? $this->bpas->clear_tags($this->input->post('note')) : null;
            $generation    = $this->input->post('generation') ? $this->bpas->clear_tags($this->input->post('generation')) : null;
            $batch         = $this->input->post('batch') ? $this->bpas->clear_tags($this->input->post('batch')) : null;
			$scholarship   = $this->input->post('scholarship') ? $this->input->post('scholarship') : null;
			$attachment    = null;

			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $attachment = $photo;
            }
			
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
            	$student_id = $_POST['student_id'][$r];
				$data = array(
					'date'            => $date,
					'student_id'      => $student_id,
					'biller_id'       => $biller_id,
					'program_id'      => $program_id,
					'program'         => $program,
					'academic_year'   => $academic_year,
					'skill_id'		  => $skill_id,
					'grade_id'        => $grade_id,
					'grade'           => $grade,
					'section_id'      => $section_id,
					'timeshift_id'    => $timeshift_id,
					'class_id'        => $class_id,
					'class'  	      => $class,
					'description'     => $note,
					'generation'      => $generation,
					'batch'           => $batch,
					'status'          => $status,
					'attachment'      => $attachment,
					'created_by'      => $this->session->userdata('user_id'),
					'created_at'      => date('Y-m-d H:i:s'),
					'scholarship_id'  => $scholarship,
				);
			}

			// $this->bpas->print_arrays($data);
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateAssignStudent($id, $data)) {
            $this->session->set_userdata('remove_stls', 1);
            $this->session->set_flashdata('message', $this->lang->line("assign_student_updated"));
			admin_redirect('schools');
        } else {
        	$pr = [];
        	if ($id) {
				$study_info = $this->schools_model->getStudyInfoByID($id);
				$row = $this->schools_model->getStudentByID($study_info->student_id);
				if ($row) {
					$row->gender = lang($row->gender);
					$pr[] = array('id' => $row->id, 'item_id' => $row->id, 'label' => $row->number . " - " . $row->lastname . ' ' . $row->firstname, 'row' => $row);
				}
        	}

            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['study_info_id'] = $id;
			$this->data['study_info']    = isset($study_info) ? $study_info : null;
			$this->data['student']       = !empty($pr) ? json_encode($pr) : null;
            $this->data['billers']       = $this->site->getBillers();
			$this->data['programs']      = $this->schools_model->getPrograms();	
			$this->data['grades']        = $this->schools_model->getGrades();	
			$this->data['skills']        = $this->schools_model->getSkills();
			$this->data['scholarships'] = ((isset($study_info) && !empty($study_info)) ? $this->schools_model->getScholarships($study_info->academic_year) : null);
			
            $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/edit_assign_student'), 'page' => lang('edit_assign_student')), array('link' => '#', 'page' => lang('edit_assign_student')));
			$meta = array('page_title' => lang('edit_assign_student'), 'bc' => $bc);
            $this->page_construct('schools/edit_assign_student', $meta, $this->data);
        }
    }

	public function delete_assign_student($id) 
	{
		$this->bpas->checkPermissions('delete');
        if ($id != null){
        	$delete = $this->schools_model->deleteAssignStudentByStudyInfoID($id);
        	if($delete){
        		$this->session->set_flashdata('message', lang("assign_student_deleted"));
        	} 
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
	}

	public function add_forms()
    {
        $year = $this->input->post('year') ? $this->input->post('year') : date("Y");
        $month = $this->input->post('month') ? $this->input->post('month') : date("m");
        $this->bpas->checkPermissions('expenses');
        $this->form_validation->set_rules('from', lang('from'), 'required');

        // if ($_POST) {
        //     $this->data['categories'] = $this->site->getAllTickets($_POST);
        // }
        // $this->data['expenses'] =$this->site->getAllSuspendAndSaleItem($year,$month);
        // $this->data['users'] = $this->site->getStaff();
        // $this->data['billers'] = $this->site->getAllCompanies('biller');
		
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('Form_School'), 'page' => lang('Form_School')), array('link' => '#', 'page' => lang('Form_School')));
        $meta = array('page_title' => lang('Form_School'), 'bc' => $bc);
        $this->page_construct('schools/add_forms', $meta, $this->data);
    }

	function index($biller_id = null, $academic_year = null)
    {
        $this->bpas->checkPermissions();
		if($biller_id == "null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if(isset($action)) {
        	$this->data['action'] = $action;
        }
		$this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year'] = ($academic_year ? $academic_year : date('Y'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;

		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['skills'] = $this->schools_model->getSkills();
		$this->data['scholarships'] = $this->schools_model->getScholarships($this->data['academic_year']);

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('students')));
        $meta = array('page_title' => lang('students'), 'bc' => $bc);
        $this->page_construct('schools/index', $meta, $this->data);
    }

	function getStudents($biller_id = null, $academic_year = null)
    {
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
		$biller        = $this->input->get('biller') ? $this->input->get('biller') : null;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date('Y');
		$student_id    = $this->input->get('student_id') ? $this->input->get('student_id') : null;
		$student_name  = $this->input->get('student_name') ? $this->input->get('student_name') : null;
		$gender        = $this->input->get('gender') ? $this->input->get('gender') : null;
		$program       = $this->input->get('program') ? $this->input->get('program') : null;
		$skill         = $this->input->get('skill') ? $this->input->get('skill') : null;
		$grade         = $this->input->get('grade') ? $this->input->get('grade') : null;
		$class         = $this->input->get('class') ? $this->input->get('class') : null;
		$timeshift     = $this->input->get('timeshift') ? $this->input->get('timeshift') : null;
		$batch         = $this->input->get('batch') ? $this->input->get('batch') : null;
		$generation    = $this->input->get('generation') ? $this->input->get('generation') : null;
		$scholarship   = $this->input->get('scholarship') ? $this->input->get('scholarship') : null;
		$start_date    = $this->input->get('start_date') ? $this->input->get('start_date') : null;
		$end_date      = $this->input->get('end_date') ? $this->input->get('end_date') : null;

		if ($start_date) {
	        $start_date = $this->bpas->fld($start_date . ' 00:00:00');
	        $end_date   = $this->bpas->fld($end_date . ' 23:59:00');
	    }

		$this->bpas->checkPermissions('index');
        $this->load->library('datatables');
		$detail_link = anchor('admin/schools/view_student/0/$1', '<i class="fa fa-file-text-o"></i> ' . lang('student_details'));
		$delete_link = "<a href='#' class='po delete_student' title='" . lang("delete_assign_student") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_assign_student/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_assign_student') . "</a>";


		$action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
							<ul class="dropdown-menu pull-right" role="menu">
								<li>'.$detail_link.'</li>
								<li><a class="edit_assign_student" href="'.admin_url('schools/edit_assign_student/$1').'" ><i class="fa fa fa-edit"></i>'.lang('edit_assign_student').'</a></li>
					            <li>'.$delete_link.'</li>
							</ul>
						</div>';
						
        $this->datatables->select("
				sh_study_infos.id as id,
				sh_students.photo,
				CONCAT(".$this->db->dbprefix('sh_study_infos').".academic_year,' - ',".$this->db->dbprefix('sh_study_infos').".academic_year + 1) as academic_year,
				sh_students.code,
				CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as full_name,
				CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as full_name_kh,
				sh_students.gender,
				sh_study_infos.program,
				CONCAT({$this->db->dbprefix('sh_skills')}.code, ' - ', {$this->db->dbprefix('sh_skills')}.name) as skill,
				sh_grades.name as grade,
				sh_study_infos.class,
				custom_field.name as timeshift,
				sh_study_infos.batch,
				sh_study_infos.id as info_id
			")

		->from("sh_students")
		->join("sh_study_infos","sh_study_infos.student_id = sh_students.id","inner")
		->join("sh_grades", "sh_grades.id=sh_study_infos.grade_id", "left")
		->join("sh_skills", "sh_skills.id=sh_study_infos.skill_id", "left")
		->join("custom_field", "custom_field.id=sh_study_infos.timeshift_id", "left")
		->join("companies","companies.id=sh_study_infos.biller_id", "left")
		// ->where('sh_students.is_admission', 0)
		->group_by("sh_study_infos.id")
		->add_column("Actions", $action_link, "info_id");

		$this->datatables->unset_column('info_id');
		if ($academic_year) {
			$this->datatables->where('sh_study_infos.academic_year', $academic_year);
        }
		if ($biller_id) {
			$this->datatables->where('sh_study_infos.biller_id', $biller_id);
        } 
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_study_infos.biller_id', $this->session->userdata('biller_id'));
		}
		if ($biller) {
			$this->datatables->where('sh_study_infos.biller_id', $biller);
		}
		if ($student_id) {
			$this->datatables->where('sh_students.code', $student_id);
		}
		if ($student_name) {
			$this->db->like("{$this->db->dbprefix('sh_students')}.firstname", $student_name, 'both');
			$this->db->or_like("{$this->db->dbprefix('sh_students')}.lastname", $student_name, 'both');
			$this->db->or_like("CONCAT({$this->db->dbprefix('sh_students')}.firstname, ' ', {$this->db->dbprefix('sh_students')}.lastname)", $student_name, 'both');

			$this->db->or_like("{$this->db->dbprefix('sh_students')}.firstname_other", $student_name, 'both');
			$this->db->or_like("{$this->db->dbprefix('sh_students')}.lastname_other", $student_name, 'both');
			$this->db->or_like("CONCAT({$this->db->dbprefix('sh_students')}.firstname_other, ' ', {$this->db->dbprefix('sh_students')}.lastname_other)", $student_name, 'both');
		}
		if ($gender) {
			$this->datatables->where('sh_students.gender', $gender);
		}
		if ($program) {
			$this->datatables->where('sh_study_infos.program_id', $program);
		}
		if ($skill) {
			$this->datatables->where('sh_study_infos.skill_id', $skill);
		}
		if ($grade) {
			$this->datatables->where('sh_study_infos.grade_id', $grade);
		}
		if ($class) {
			$this->datatables->where('sh_study_infos.class', $class);
		}
		if ($timeshift) {
			$this->datatables->where('sh_study_infos.timeshift_id', $timeshift);
		}
		if ($batch) {
			$this->datatables->where('sh_study_infos.batch', $batch);
		}
		if ($generation) {
			$this->datatables->where('sh_study_infos.generation', $generation);
		}
		if ($scholarship) {
			$this->datatables->where('sh_study_infos.scholarship_id', $scholarship);
		}
		if ($start_date) {
			$this->datatables->where($this->db->dbprefix('sh_study_infos') . '.created_at BETWEEN "' . $start_date . '" and "' . $end_date . '"');
		}

        echo $this->datatables->generate();
    }
	
	function view_student($id = NULL, $study_info_id = null)
    {
        $this->bpas->checkPermissions('index');
        $id = ($id ? $id : ($study_info_id ? $this->schools_model->getStudyInfoByID($study_info_id)->student_id : null));
        $student = $this->schools_model->getStudentByID($id);
        $this->data['student'] = $student;
		$this->data['id'] = $id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => $student->lastname.' '.$student->firstname));
        $meta = array('page_title' => $student->lastname.' '.$student->firstname, 'bc' => $bc);
        $this->page_construct('schools/view_student', $meta, $this->data);
    }

	function view_admission($id = NULL)
    {
        $this->bpas->checkPermissions('index');
        $student = $this->schools_model->getStudentByID($id);
        $this->data['student'] = $student;
		$this->data['id'] = $id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => $student->lastname.' '.$student->firstname));
        $meta = array('page_title' => $student->lastname.' '.$student->firstname, 'bc' => $bc);
        $this->page_construct('schools/view_admission', $meta, $this->data);
    }

	function admission_actions()
	{
        if (!$this->Owner && !$this->Admin && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
				if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('delete');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteStudentByID($id);
                    }
                    $this->session->set_flashdata('message', lang("student_deleted"));
                    admin_redirect('schools/admissions/null/' . $_POST['academic_year_action']);
                } else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('student');
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('admission_no'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('first_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('last_name'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('gender'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $student = $this->schools_model->getStudentByID($id);
		
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $student->number);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $student->lastname);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $student->firstname);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->hrsd($student->date));
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($student->gender));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $student->phone);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang($student->status));
						$row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);


                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'student_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                } else if ($this->input->post('form_action') == 'accepted_admission') {
					foreach ($_POST['val'] as $id) {
						$this->schools_model->updateAdmissionStatus($id, "accepted");
					}
					$this->session->set_flashdata('message', lang('admission_accepted'));
					admin_redirect('schools/admissions/null/' . $_POST['academic_year_action']);
				} else if ($this->input->post('form_action') == 'enroll_admission') {
					foreach ($_POST['val'] as $id) {
						$this->schools_model->updateAdmissionStatus($id, "enroll");
					}
					$this->session->set_flashdata('message', lang('admission_enroll'));
					admin_redirect('schools/admissions/null/' . $_POST['academic_year_action']);
				} else if ($this->input->post('form_action') == 'progress_admission') {
					foreach ($_POST['val'] as $id) {
						$this->schools_model->updateAdmissionStatus($id, "progress");
					}
					$this->session->set_flashdata('message', lang('admission_progress'));
					admin_redirect('schools/admissions/null/' . $_POST['academic_year_action']);
				} else if ($this->input->post('form_action') == 'rejected_admission') {
					foreach ($_POST['val'] as $id) {
						$this->schools_model->updateAdmissionStatus($id, "rejected");
					}
					$this->session->set_flashdata('message', lang('admission_rejected'));
					admin_redirect('schools/admissions/null/' . $_POST['academic_year_action']);
				} else if ($this->input->post('form_action') == 'unapprove_admission') {
					foreach ($_POST['val'] as $id) {
						$this->schools_model->updateAdmissionStatus($id, "pending");
					}
					$this->session->set_flashdata('message', lang('admission_unapproved'));
					admin_redirect('schools/admissions/null/' . $_POST['academic_year_action']);
				}
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }

	function student_actions()
	{
        if (!$this->Owner && !$this->Admin && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
				if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('delete');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteAssignStudent($id);
                    }
                    $this->session->set_flashdata('message', lang("assign_students_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                } else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('student');
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('acedemic_year'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('first_name'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('last_name'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('gender'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('email'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('program'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('skill'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('grade'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('class'));
					$this->excel->getActiveSheet()->SetCellValue('L1', lang('section'));
					$this->excel->getActiveSheet()->SetCellValue('M1', lang('batch'));
					$this->excel->getActiveSheet()->SetCellValue('N1', lang('timeshift'));
					$this->excel->getActiveSheet()->SetCellValue('O1', lang('scholarship'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        // $study_info  = $this->schools_model->getStudentStudyInfoByID($id);
                        $study_info  = $this->schools_model->getStudentStudyDetails($id);
                        $student     = $this->schools_model->getStudentByID($study_info->student_id);
                        $scholarship = ((!empty($study_info->scholarship_id) && $study_info->scholarship_id != '') ? $this->schools_model->getScholarshipByID($study_info->scholarship_id) : null);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $study_info->academic_year);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $student->code);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $student->lastname);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $student->firstname);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($student->gender));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $student->phone);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $student->email);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $study_info->program_name);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $study_info->skill_name);
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $study_info->grade_name);
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $study_info->class_name);
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $study_info->section_name);
						$this->excel->getActiveSheet()->SetCellValue('M' . $row, $study_info->batch);
						$this->excel->getActiveSheet()->SetCellValue('N' . $row, $study_info->timeshift_name);
						$this->excel->getActiveSheet()->SetCellValue('O' . $row, (!empty($scholarship) ? $scholarship->name : ''));
						$row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);


                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'student_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	function add_student()
	{
		$this->bpas->checkPermissions('add');	
		$post = $this->input->post();
		$this->form_validation->set_rules('number', lang("number"), 'is_unique[sh_students.number]');
		if(isset($post['code']) && trim($post['code']) != '') { 
			$this->form_validation->set_rules('code', lang('student') . ' ' . lang("id"), 'is_unique[sh_students.code]');
		}
		$this->form_validation->set_rules('first_name', lang("first_name"), 'required');
		$this->form_validation->set_rules('last_name', lang("last_name"), 'required');
		$this->form_validation->set_rules('firstname_other', lang("firstname_other"), 'required');
		$this->form_validation->set_rules('lastname_other', lang("lastname_other"), 'required');
		$this->form_validation->set_rules('dob', lang("dob"), 'required');
		$this->form_validation->set_rules('city_id', lang("city_id"), 'required');
		if ($this->form_validation->run() == true) {
			$biller  = $this->site->getCompanyByID($post['biller']);
			$program = $this->schools_model->getProgramByID($post['program']);
			$data = array(
				'biller' 	 	 	=> $biller->name,
				'biller_id' 	 	=> $biller->id,
				'code' 		 	 	=> $post['code'],
				'number' 		 	=> $post['number'],
				'date' 	 		 	=> $this->bpas->fld(trim($post['date'])),
				'lastname' 	 		=> $post['last_name'],
				'firstname' 		=> $post['first_name'],
				'firstname_other' 	=> $post['firstname_other'],
				'lastname_other' 	=> $post['lastname_other'],
				'dob' 			 	=> $this->bpas->fsd(trim($post['dob'])),				
				'gender' 			=> $post['gender'],
				'phone' 			=> $post['phone'],
				'second_phone' 	    => $post['phone_2'],
				'email' 		 	=> $post['email'],
				'nationality'	 	=> $post['nationality'],
				'address' 		 	=> $post['address'],
				'city_id' 		 	=> $post['city_id'],
				'district_id' 		=> $post['district_id'],
				'commune_id' 		=> $post['commune_id'],
				'child_no' 			=> $post['child_no'],
				'scholarship_id' 	=> $post['scholarship'],
				'religion' 			=> $post['religion'],
				'hs_degree_year' 	=> $post['hc_year'],
				'custom_field_1' 	=> $post['cf_1'],
				'custom_field_2' 	=> $post['cf_1'],
				'testing_student' 	=> $post['testing_student'],
				'created_at'	 	=> date('Y-m-d H:i:s'),
				'created_by'	 	=> $this->session->userdata('user_id'),
				'academic_year'     => $post['academic_year'],
				'program_id' 	    => $post['program'],
				'skill_id' 		    => $post['skill'],
				'timeshift_id' 	    => $post['timeshift'] ? $post['timeshift'] : null,
				'previous_education'  => ($post['previous_education'] ? $post['previous_education'] : null),
				'secondary_education' => ($post['secondary_education'] ? $post['secondary_education'] : null),
				'higher_education'    => ($post['higher_education'] ? $post['higher_education'] : null),
			);
			// $this->bpas->print_arrays($data);
			$city = $this->site->getZoneByID($post['city_id']);
			if($post['district_id']){
				$district = $this->site->getZoneByID($post['district_id']);
			}
			if($post['commune_id']){
				$commune = $this->site->getZoneByID($post['commune_id']);			
			}
			$full_address = $post['address'] . " " . (isset($commune->zone_name) ? $commune->zone_name : '') . " " . (isset($district->zone_name) ? $district->zone_name : '') . " " . (isset($city->zone_name) ? $city->zone_name : '');
			$customer = array(
				'code'       => $post['number'],
				'company'    => ($post['last_name'].' '.$post['first_name']),
				'name'       => ($post['lastname_other'].' '.$post['firstname_other']),
				'email'      => $post['email'],
				'group_id'   => '3',
				'group_name' => 'customer',
				'address'    => $full_address,
				'phone'      => $post['phone']
			);
			$study_info = false;
			if($post['family']){
				$family_info = $this->schools_model->getStudentByID($post['family']);
				$data['family_id'] = $family_info->family_id;
				$family = false;
			}else{
				$family = array(
					'father'   => $post['father'],
					'mother'   => $post['mother'],
					'guardian' => $post['guardian'],
				);
			}
			if ($_FILES['photo']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->upload_path;
                $config['allowed_types'] = $this->image_types;
                $config['max_size'] = $this->allowed_file_size;
				$config['max_width'] = $this->Settings->iwidth;
                $config['max_height'] = $this->Settings->iheight;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('photo')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['photo'] = $photo;
				
				$this->load->library('image_lib');
                $config['image_library'] = 'gd2';
                $config['source_image'] = $this->upload_path . $photo;
                $config['new_image'] = $this->thumbs_path . $photo;
                $config['maintain_ratio'] = TRUE;
                $config['width'] = $this->Settings->twidth;
                $config['height'] = $this->Settings->theight;
                $this->image_lib->clear();
                $this->image_lib->initialize($config);
				if (!$this->image_lib->resize()) {
                    echo $this->image_lib->display_errors();
                }
            }
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
			
			if ($_FILES['attached_application']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('attached_application')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $attached_application = $this->upload->file_name;
                $data['attached_application'] = $attached_application;
            }
			if ($_FILES['attached_test']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('attached_test')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $attached_test = $this->upload->file_name;
                $data['attached_test'] = $attached_test;
            }
			if($id = $this->schools_model->addStudent($data, $study_info, $customer, $family)){
				$this->session->set_flashdata('message', lang("student_added"));
				if($this->input->post('add_student_next')){
					admin_redirect('schools/edit_student/'.$id.'/#family_info');
				} else {
					admin_redirect('schools/admissions');
				}
			}
		} else {
			$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));			
			$this->data['last_student'] = $this->schools_model->getLastStudent();
			$this->data['student_adm']  = $this->site->getReference('sh_std_adm');
			$this->data['student_code'] = $this->site->getReference('sh_std_code');
			$this->data['billers']      = $this->site->getAllCompanies('biller');
			$this->data['cities']       = $this->site->getCities();
			$this->data['programs']     = $this->schools_model->getPrograms();
			$this->data['grades']       = $this->schools_model->getGrades();
			$this->data['families']     = $this->schools_model->getStudents();
			$this->data['family_black_lists'] = $this->schools_model->getFamilyBlackLists();
			$this->data['skills']       = $this->schools_model->getSkills();
			$this->data['testing_students'] = $this->schools_model->getTestingStudents(0,"accepted");
			$bc   = array(array('link' => admin_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('students')), array('link' => '#', 'page' => lang('add_student')));
			$meta = array('page_title' => lang('add_student'), 'bc' => $bc);
			$this->page_construct('schools/add_student', $meta, $this->data);
		}
	}

	function edit_student($id = false, $academic_year = null)
	{
		$this->bpas->checkPermissions('edit');	
		$post = $this->input->post();
		$student = $this->schools_model->getStudentByID($id);
		if(isset($post['number']) && $post['number'] != $student->number) {
			$this->form_validation->set_rules('number', lang("number"), 'is_unique[sh_students.number]');
		} else {
			$this->form_validation->set_rules('number', lang("number"), 'required');
		}
		if (isset($post['code']) && $post['code'] != '' && $post['code'] != $student->code) {
			$this->form_validation->set_rules('code', lang('student') . ' ' . lang("id"), 'is_unique[sh_students.code]');
		}
		$this->form_validation->set_rules('first_name', lang("first_name"), 'required');
		$this->form_validation->set_rules('last_name', lang("last_name"), 'required');
		$this->form_validation->set_rules('firstname_other', lang("firstname_other"), 'required');
		$this->form_validation->set_rules('lastname_other', lang("lastname_other"), 'required');
		$this->form_validation->set_rules('dob', lang("dob"), 'required');
		$this->form_validation->set_rules('city_id', lang("city_id"), 'required');
		if ($this->form_validation->run() == true) {
			$biller = $this->site->getCompanyByID($post['biller']);
			$data = array(
				'date' 	 		 	=> $this->bpas->fld(trim($post['date'])),
				'biller' 	 	 	=> $biller->name,
				'biller_id' 	 	=> $biller->id,	
				'code' 		 	 	=> $post['code'],
				'number' 		 	=> $post['number'],
				'lastname' 	 		=> $post['last_name'],
				'firstname' 		=> $post['first_name'],
				'firstname_other' 	=> $post['firstname_other'],
				'lastname_other' 	=> $post['lastname_other'],
				'dob' 			 	=> $this->bpas->fsd(trim($post['dob'])),				
				'gender' 		 	=> $post['gender'],
				'phone' 		 	=> $post['phone'],
				'second_phone' 	    => $post['phone_2'],
				'pob' 		 	 	=> (isset($post['pob']) ? $post['pob'] : ''),
				'email' 		 	=> $post['email'],
				'nationality'	 	=> $post['nationality'],
				'address' 		 	=> $post['address'],
				'city_id' 		 	=> $post['city_id'],
				'district_id' 		=> $post['district_id'],
				'scholarship_id'    => $post['scholarship'],
				'commune_id' 		=> $post['commune_id'],
				'child_no' 			=> $post['child_no'],
				'order_child_no' 	=> $post['child_no'],
				'religion' 			=> $post['religion'],
				'hs_degree_year' 	=> $post['hc_year'],
				'custom_field_1' 	=> $post['cf_1'],
				'custom_field_2' 	=> $post['cf_1'],
				'updated_at'	 	=> date('Y-m-d H:i'),
				'updated_by'		=> $this->session->userdata('user_id'),
				'previous_education'  => ($post['previous_education'] ? $post['previous_education'] : null),
				'secondary_education' => ($post['secondary_education'] ? $post['secondary_education'] : null),
				'higher_education'    => ($post['higher_education'] ? $post['higher_education'] : null),
			);
			// $this->bpas->print_arrays($data);
			$full_address = $post['address'];
			$city         = $this->site->getZoneByID($post['city_id']);
			if($post['commune_id']){
				$commune = $this->site->getZoneByID($post['commune_id']);
				$full_address .= (" " . $commune->zone_name);
			}
			if($post['district_id']){
				$district = $this->site->getZoneByID($post['district_id']);
				$full_address .= (" " . $district->zone_nam);
			}
			$full_address .= (" " . $city->zone_name);
			$customer = array(
				'code' => $post['number'],
				'company' => ($post['last_name'].' '.$post['first_name']),
				'name' => ($post['lastname_other'].' '.$post['firstname_other']),
				'email' => $post['email'],
				'group_id' => '3',
				'group_name' => 'customer',
				'address' => $full_address,
				'phone' => $post['phone']
			);
							
			$study_info = false;
			if($post['study_info_id'] == '' || $post['study_info_id'] == null){
				$data['academic_year'] = $post['academic_year'];
				$data['program_id']	   = $post['program'];
				$data['skill_id']      = $post['skill'];
				$data['timeshift_id']  = ($post['timeshift'] ? $post['timeshift'] : null);
			}
			if($post['family']){
				$family_info = $this->schools_model->getStudentByID($post['family']);
				$data['family_id'] = $family_info->family_id;
			}
			if ($_FILES['photo']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->upload_path;
                $config['allowed_types'] = $this->image_types;
                $config['max_size'] = $this->allowed_file_size;
				$config['max_width'] = $this->Settings->iwidth;
                $config['max_height'] = $this->Settings->iheight;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('photo')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['photo'] = $photo;
				
				$this->load->library('image_lib');
                $config['image_library'] = 'gd2';
                $config['source_image'] = $this->upload_path . $photo;
                $config['new_image'] = $this->thumbs_path . $photo;
                $config['maintain_ratio'] = TRUE;
                $config['width'] = $this->Settings->twidth;
                $config['height'] = $this->Settings->theight;
                $this->image_lib->clear();
                $this->image_lib->initialize($config);
				if (!$this->image_lib->resize()) {
                    echo $this->image_lib->display_errors();
                }
            }
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
			
			if ($_FILES['attached_application']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('attached_application')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $attached_application = $this->upload->file_name;
                $data['attached_application'] = $attached_application;
            }
			
			if ($_FILES['attached_test']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('attached_test')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $attached_test = $this->upload->file_name;
                $data['attached_test'] = $attached_test;
            }
            // $this->bpas->print_arrays($data);
		}
		if ($this->form_validation->run() == true && $this->schools_model->updateStudent($id, $data, $study_info, $customer)) {
			if($this->input->post("update_close")){
				$this->session->set_flashdata('message', lang("student_updated"));
				admin_redirect('schools/admissions/null/' . $academic_year);
			}else{
				$this->session->set_flashdata('message', lang("student_updated"));
				admin_redirect('schools/edit_student/' . $id . '/' . $academic_year);
			}
		} else {
			$this->data['error'] 			= (validation_errors() ? validation_errors() : $this->session->flashdata('error'));			
			$this->data['id'] 				= $id;
			$this->data['billers'] 			= $this->site->getAllCompanies('biller');
			$this->data['student'] 			= $student;
			
			$this->data['cities'] 			= $this->site->getCities();
			$this->data['districts'] 		= $student->city_id > 0 ? $this->site->getDistricts($student->city_id) : false;
            $this->data['communes'] 		= $student->district_id > 0 ? $this->site->getCommunes($student->district_id) : false;
			$this->data['families'] 		= $this->schools_model->getStudents($id);
			$this->data['programs'] 		= $this->schools_model->getPrograms();
			$this->data['grades'] 			= $this->schools_model->getGrades();
			$this->data['skills'] 			= $this->schools_model->getSkills();
			$this->data['scholarships']     = $this->schools_model->getScholarships($student->academic_year);
			$this->data['study_info'] 		= $this->schools_model->getLastStudyInfo($id);
			$this->data['academic_year']    = $academic_year;
			
			$bc = array(array('link' => admin_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('students')), array('link' => '#', 'page' => lang('edit_student')));
			$meta = array('page_title' => lang('edit_student'), 'bc' => $bc);
			$this->page_construct('schools/edit_student', $meta, $this->data);
		}
	}
	
	function import_student()
    {
        $this->bpas->checkPermissions('add');
        $this->load->helper('security');
        $this->form_validation->set_rules('userfile', lang("upload_file"), 'xss_clean');
        if ($this->form_validation->run() == true) {
            if (isset($_FILES["userfile"])) {
				$this->load->library('excel');
				$path   = $_FILES["userfile"]["tmp_name"];
				$object = PHPExcel_IOFactory::load($path);
				foreach($object->getWorksheetIterator() as $worksheet){
					$highestRow    = $worksheet->getHighestRow();
					$highestColumn = $worksheet->getHighestColumn();
					for($row=2; $row<=$highestRow; $row++){
						$ex_academic_year 		= $worksheet->getCellByColumnAndRow(0, $row)->getValue();
						$ex_biller        		= $worksheet->getCellByColumnAndRow(1, $row)->getValue();
						$ex_code          		= $worksheet->getCellByColumnAndRow(2, $row)->getValue();
						$ex_number        		= $worksheet->getCellByColumnAndRow(3, $row)->getValue();
						$ex_regi_date     		= $worksheet->getCellByColumnAndRow(4, $row)->getValue();
						$ex_l_name        		= $worksheet->getCellByColumnAndRow(5, $row)->getValue();
						$ex_f_name        		= $worksheet->getCellByColumnAndRow(6, $row)->getValue();
						$ex_lo_name       		= $worksheet->getCellByColumnAndRow(7, $row)->getValue();
						$ex_fo_name       		= $worksheet->getCellByColumnAndRow(8, $row)->getValue();
						$ex_gender        		= $worksheet->getCellByColumnAndRow(9, $row)->getValue();
						$ex_dob           		= $worksheet->getCellByColumnAndRow(10, $row)->getValue();
						$ex_phone         		= $worksheet->getCellByColumnAndRow(11, $row)->getValue();
						$ex_phone_2       		= $worksheet->getCellByColumnAndRow(12, $row)->getValue();
						$ex_email         		= $worksheet->getCellByColumnAndRow(13, $row)->getValue();
						$ex_nationality   		= $worksheet->getCellByColumnAndRow(14, $row)->getValue();
						$ex_address       		= $worksheet->getCellByColumnAndRow(15, $row)->getValue();
						$ex_city_province    	= $worksheet->getCellByColumnAndRow(16, $row)->getValue();
						$ex_district    		= $worksheet->getCellByColumnAndRow(17, $row)->getValue();
						$ex_commune    			= $worksheet->getCellByColumnAndRow(18, $row)->getValue();
						$secondary_education    = $worksheet->getCellByColumnAndRow(19, $row)->getValue();
						$higher_education    	= $worksheet->getCellByColumnAndRow(20, $row)->getValue();
						$ex_program       		= $worksheet->getCellByColumnAndRow(21, $row)->getValue();
						$ex_skill         		= $worksheet->getCellByColumnAndRow(22, $row)->getValue();
						$ex_timeshift     		= $worksheet->getCellByColumnAndRow(23, $row)->getValue();
						$ex_hs_degree_year    	= $worksheet->getCellByColumnAndRow(24, $row)->getValue();
						$ex_cf_1    			= $worksheet->getCellByColumnAndRow(25, $row)->getValue();
						$ex_scholarship_id    	= $worksheet->getCellByColumnAndRow(26, $row)->getValue();
		
						if(trim($ex_code)!=''){
							if (strpos($ex_dob, '/') == false) {
								$ex_dob = PHPExcel_Shared_Date::ExcelToPHP($ex_dob);
								$ex_dob = date('d/m/Y', $ex_dob);
							}
							$final[] = array(
								'academic_year'			=> $ex_academic_year,
								'biller'       			=> $ex_biller,
								'code'         			=> $ex_code,
								'number'       			=> $ex_number,
								'regi_date'    			=> $ex_regi_date,
								'l_name'       			=> $ex_l_name,
								'f_name'       			=> $ex_f_name,
								'lo_name'      			=> $ex_lo_name,
								'fo_name'      			=> $ex_fo_name,
								'gender'       			=> strtolower($ex_gender),
								'dob'          			=> $ex_dob,
								'phone'        			=> $ex_phone,
							    'second_phone' 			=> $ex_phone_2,
								'email'        			=> $ex_email,
								'nationality'  			=> $ex_nationality,
								'address'      			=> $ex_address,
								'city_id'				=> $ex_city_province,
								'district_id'      		=> $ex_district,
								'commune_id'      		=> $ex_commune,
								'secondary_education' 	=> $secondary_education,
								'higher_education' 		=> $higher_education,
								'program' 				=> trim($ex_program),
								'skill' 				=> trim($ex_skill),
								'timeshift' 			=> trim($ex_timeshift),
								'hs_degree_year' 		=> $ex_hs_degree_year,
								'custom_field_1' 		=> $ex_cf_1,
								'scholarship_id' 		=> $ex_scholarship_id ,

							);	
						}
					}
				}
                $rw = 2;
				$checkCode = false;
                foreach ($final as $csv_pr) {
                    if (!$this->schools_model->getStudentByNumber(trim($csv_pr['number'])) && !$this->schools_model->getStudentByCode(trim($csv_pr['code']))) {
						if(isset($checkCode[trim($csv_pr['code'])]) && $checkCode[trim($csv_pr['code'])]){
							$this->session->set_flashdata('error', lang("student_code") . " (" . $csv_pr['code'] . "). " . lang("code__exist") . " " . lang("line_no") . " " . $rw);
							admin_redirect("schools/import_student");
						}
						$checkCode[trim($csv_pr['code'])] = true;
						$biller_info = $this->schools_model->getBillerByName(trim($csv_pr['biller']));
						if(!$biller_info){
							$this->session->set_flashdata('error', lang("biller") . " (" . $csv_pr['biller'] . "). " . lang("does_not_exist") . " " . lang("line_no") . " " . $rw);
							admin_redirect("schools/import_student");
						}
						if ($csv_pr['program'] != null && $csv_pr['program'] != '') {
							$program_info = $this->schools_model->getProgramByCode($csv_pr['program']);
							if (!$program_info) {
								$this->session->set_flashdata('error', lang("program") . " (" . $csv_pr['program'] . "). " . lang("does_not_exist") . " " . lang("line_no") . " " . $rw);
								admin_redirect("schools/import_student");		
							}
						}
						if($csv_pr['academic_year'] != null && $csv_pr['academic_year'] != '' && $csv_pr['scholarship_id'] != null && $csv_pr['scholarship_id'] != ''){
							$scholarship_info 	= $this->schools_model->getScholarshipByName($csv_pr['scholarship_id'], $csv_pr['academic_year']);
							if (!$scholarship_info) {
								$this->session->set_flashdata('error', lang("scholarship") . " (" . $csv_pr['scholarship_id'] . "). " . lang("does_not_exist") . " " . lang("line_no") . " " . $rw);
								admin_redirect("schools/import_student");		
							}
						}
						if ($csv_pr['city_id'] != null && $csv_pr['city_id'] != '') {
							$city_province = $this->schools_model->getAreaByName($csv_pr['city_id']);
							if (!$city_province) {
								$this->session->set_flashdata('error', lang("city_or_province") . " (" . $csv_pr['city_id'] . "). " . lang("does_not_exist") . " " . lang("line_no") . " " . $rw);
								admin_redirect("schools/import_student");		
							}
						}
						if ($csv_pr['district_id'] != null && $csv_pr['district_id'] != '') {
							$district_info = $this->schools_model->getAreaByName($csv_pr['district_id']);
							if (!$district_info) {
								$this->session->set_flashdata('error', lang("district_id") . " (" . $csv_pr['district_id'] . "). " . lang("does_not_exist") . " " . lang("line_no") . " " . $rw);
								admin_redirect("schools/import_student");		
							}
						}
						if ($csv_pr['commune_id'] != null && $csv_pr['commune_id'] != '') {
							$commune_info = $this->schools_model->getAreaByName($csv_pr['commune_id']);
							if (!$commune_info) {
								$this->session->set_flashdata('error', lang("commune_id") . " (" . $csv_pr['commune_id'] . "). " . lang("does_not_exist") . " " . lang("line_no") . " " . $rw);
								admin_redirect("schools/import_student");		
							}
						}
						if ($csv_pr['skill'] != null && $csv_pr['skill'] != '') {
							$skill_info = $this->schools_model->getSkillByCode($csv_pr['skill']);
							if (!$skill_info) {
								$this->session->set_flashdata('error', lang("skill") . " (" . $csv_pr['skill'] . "). " . lang("does_not_exist") . " " . lang("line_no") . " " . $rw);
								admin_redirect("schools/import_student");		
							}
						}
						if ($csv_pr['timeshift'] != null && $csv_pr['timeshift'] != '') {
							$timeshift_info = $this->schools_model->getTimeshiftByName($csv_pr['timeshift']);
							if (!$timeshift_info) {
								$this->session->set_flashdata('error', lang("timeshift") . " (" . $csv_pr['timeshift'] . "). " . lang("does_not_exist") . " " . lang("line_no") . " " . $rw);
								admin_redirect("schools/import_student");		
							}
						}
						// $area_info         = $this->schools_model->getAreaByCode($csv_pr['area']);
						$academic_year[]   		= trim($csv_pr['academic_year']);
						$biller[]          		= $biller_info->name;
						$biller_id[]       		= $biller_info->id;
						$code[]            		= trim($csv_pr['code']);
						$number[]          		= trim($csv_pr['number']);
						$date[]            		= $this->bpas->fsd(trim($csv_pr['regi_date']));
						$lastname[]        		= trim($csv_pr['l_name']);
						$firstname[]       		= trim($csv_pr['f_name']);
						$lastname_other[]  		= trim($csv_pr['lo_name']);
						$firstname_other[] 		= trim($csv_pr['fo_name']);
						$gender[]          		= trim($csv_pr['gender']);
						$dob[]             		= $this->bpas->fsd(trim($csv_pr['dob']));
						$phone[]           		= trim($csv_pr['phone']);
						$second_phone[]    		= trim($csv_pr['second_phone']);
						$email[]           		= trim($csv_pr['email']);
						$nationality[]     		= trim($csv_pr['nationality']);
						$address[]         		= trim($csv_pr['address']);
						$city_provinces[]  		= ((isset($city_province) && !empty($city_province)) ? $city_province->id : null);
						$district[]  			= ((isset($district_info) && !empty($district_info)) ? $district_info->id : null);
						$commune[]  			= ((isset($commune_info) && !empty($commune_info)) ? $commune_info->id : null);
						$secondary_educations[] = trim($csv_pr['secondary_education']);
						$higher_educations[]    = trim($csv_pr['higher_education']);
						$hs_degree_year[]    	= ($csv_pr['hs_degree_year'] != '') ? trim($csv_pr['hs_degree_year']) : null;
						$custom_field_1[]    	= ($csv_pr['custom_field_1'] != '') ? trim($csv_pr['custom_field_1']) : null ;
						$scholarship_id[]    	= ((isset($scholarship_info) && !empty($scholarship_info)) ? $scholarship_info->id : null);
						$program_id[]      		= ((isset($program_info) && !empty($program_info)) ? $program_info->id : null);
						$skill_id[]		   		= ((isset($skill_info) && !empty($skill_info)) ? $skill_info->id : null);
						$timeshift_id[]	   		= ((isset($timeshift_info) && !empty($timeshift_info)) ? $timeshift_info->id : null);
						$created_at[]      		= date('Y-m-d H:i');
						$created_by[]      		= $this->session->userdata('user_id');
						$full_address 			= trim($csv_pr['address']) . " " . (isset($commune_info->zone_name) ? $commune_info->zone_name : '') . " " . (isset($district_info->zone_name) ? $district_info->zone_name : '') . " " . (isset($city_province->zone_name) ? $city_province->zone_name : '');
						$customers[] = array(
							'code'       => trim($csv_pr['number']),
							'company'    => (trim($csv_pr['l_name']) . ' ' . trim($csv_pr['f_name'])),
							'name'       => (trim($csv_pr['lo_name']) . ' ' . trim($csv_pr['fo_name'])),
							'email'      => trim($csv_pr['email']),
							'group_id'   => '3',
							'group_name' => 'customer',
							'address'    => $full_address,
							'phone'      => trim($csv_pr['phone'])
						);
                    } else {
                        if ($this->schools_model->getStudentByNumber(trim($csv_pr['number']))) {
                    		$this->session->set_flashdata('error', lang("student") . ' ' . lang('number') . " (" . $csv_pr['number'] . "). " . lang("number__exist") . " " . lang("line_no") . " " . $rw);
							admin_redirect("schools/import_student");
                    	} elseif ($this->schools_model->getStudentByCode(trim($csv_pr['code']))) {
                    		$this->session->set_flashdata('error', lang("student") . ' ' . lang('id') . " (" . $csv_pr['code'] . "). " . lang("code__exist") . " " . lang("line_no") . " " . $rw);
							admin_redirect("schools/import_student");
                    	}
                    }
                    $rw++;
                }
            }
		
			// $this->bpas->print_arrays( $academic_year, $biller, $biller_id, $code, $number, $date, $lastname, $firstname, $lastname_other, $firstname_other, $gender, $dob, $phone, $second_phone, $email, $nationality, $address, $city_provinces, $district, $commune, $secondary_educations, $higher_educations, $program_id, $skill_id, $timeshift_id, $hs_degree_year ,$custom_field_1, $scholarship_id);
			$ikeys = array('academic_year', 'biller', 'biller_id', 'code', 'number', 'date', 'lastname', 'firstname', 'lastname_other', 'firstname_other', 'gender', 'dob', 'phone','second_phone','email', 'nationality', 'address', 'city_id', 'district_id', 'commune_id', 'secondary_education', 'higher_education' ,'program_id','skill_id', 'timeshift_id', 'hs_degree_year', 'custom_field_1', 'scholarship_id', 'created_at', 'created_by');
			$items = array();
            foreach (array_map(null, $academic_year, $biller, $biller_id, $code, $number, $date, $lastname, $firstname, $lastname_other, $firstname_other, $gender, $dob, $phone, $second_phone, $email, $nationality, $address, $city_provinces, $district, $commune, $secondary_educations, $higher_educations, $program_id, $skill_id, $timeshift_id, $hs_degree_year ,$custom_field_1, $scholarship_id, $created_at, $created_by) as $ikey => $value) {
                $items[] = array_combine($ikeys, $value);
            }
        }

		// $this->bpas->print_arrays($items);
        if ($this->form_validation->run() == true && $prs = $this->schools_model->importStudent($items, $customers)) {
            $this->session->set_flashdata('message', lang("student_added"));
            admin_redirect('schools/admissions');
        } else {
            $this->data['error'] 	= (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $bc 					= array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('import_student')));
			$meta 					= array('page_title' => lang('import_student'), 'bc' => $bc);
            $this->page_construct('schools/import_student', $meta, $this->data);
        }
    }

	public function delete_student($id = null)
    {		
		$this->bpas->checkPermissions('delete');
        if (isset($id) || $id != null){
        	$delete = $this->schools_model->deleteStudentByID($id);
        	if($delete){
        		$this->session->set_flashdata('message', lang("student_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	} else{
            	admin_redirect($_SERVER['HTTP_REFERER']);
            }
        }
    }
	
	public function inactive_student($id = null)
    {		
        if (isset($id) || $id != null){
        	$delete = $this->schools_model->inactiveStudentByID($id);
        	if($delete){
        		$this->session->set_flashdata('message', lang("student_inactived"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	} else{
            	admin_redirect($_SERVER['HTTP_REFERER']);
            }
        }
    }
	
	public function modal_view_student($id = null, $study_id = false)
    {
        $this->bpas->checkPermissions('index', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $student = $this->schools_model->getStudentByID($id);
		if($study_id){
			$this->data['study_info'] = $this->schools_model->getStudyInfoByID($study_id);
		}else{
			$this->data['study_info'] = $this->schools_model->getLastStudyInfo($id);
		}
		$this->data['child_no'] = $this->schools_model->getChildNo($id);
        $this->data['student'] = $student;
		$this->data['siblings'] = $this->schools_model->getSiblings($student->family_id);
		$this->data['father'] = $this->schools_model->getFamilyByRelationship($student->family_id,'Father');
		$this->data['mother'] = $this->schools_model->getFamilyByRelationship($student->family_id,'Mother');
        $this->data['guardian'] = $this->schools_model->getFamilyByRelationship($student->family_id,'Guardian');
		$this->data['emergencies'] = $this->schools_model->getEmergencyByFamily($student->family_id);
		$this->data['app_contacts'] = $this->schools_model->getContactApp($student->family_id);
		$this->data['banks'] = $this->schools_model->getFamilyBanks($student->family_id);
		$this->data['study_infos'] = $this->schools_model->getStudentStudyInfo($id);
		$this->load->view($this->theme . 'schools/modal_view_student', $this->data);
    }
	public function modal_view_student_admisssion($id = null, $study_id = false)
    {
        $this->bpas->checkPermissions('index', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $student = $this->schools_model->getStudentByID($id);
		if($study_id){
			$this->data['study_info'] = $this->schools_model->getStudyInfoByID($study_id);
		}else{
			$this->data['study_info'] = $this->schools_model->getLastStudyInfo($id);
		}
        $this->data['student'] = $student;
        $this->data['child_no'] = $this->schools_model->getChildNo($id);
		$this->data['siblings'] = $this->schools_model->getSiblings($student->family_id);
		$this->data['father'] = $this->schools_model->getFamilyByRelationship($student->family_id,'Father');
		$this->data['mother'] = $this->schools_model->getFamilyByRelationship($student->family_id,'Mother');
        $this->data['guardian'] = $this->schools_model->getFamilyByRelationship($student->family_id,'Guardian');
		$this->data['emergencies'] = $this->schools_model->getEmergencyByFamily($student->family_id);
		$this->data['app_contacts'] = $this->schools_model->getContactApp($student->family_id);
		$this->data['banks'] = $this->schools_model->getFamilyBanks($student->family_id);
		$this->data['study_infos'] = $this->schools_model->getStudentStudyInfo($id);
		$this->load->view($this->theme . 'schools/modal_view_student_admission', $this->data);
    }
	public function modal_view_study($id = null)
    {
        $this->bpas->checkPermissions('index', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$study_info = $this->schools_model->getStudyInfoByID($id);
		$this->data['study_info'] = $study_info;
        $student = $this->schools_model->getStudentByID($study_info->student_id);
		$this->data['child_no'] = $this->schools_model->getChildNo($study_info->student_id);
        $this->data['student'] = $student;
		$this->data['siblings'] = $this->schools_model->getSiblings($student->family_id);
		$this->data['father'] = $this->schools_model->getFamilyByRelationship($student->family_id,'father');
		$this->data['mother'] = $this->schools_model->getFamilyByRelationship($student->family_id,'mother');
        $this->data['guardian'] = $this->schools_model->getFamilyByRelationship($student->family_id,'guardian');
		$this->data['emergencies'] = $this->schools_model->getEmergencyByFamily($student->family_id);
		$this->data['app_contacts'] = $this->schools_model->getContactApp($student->family_id);
		$this->data['banks'] = $this->schools_model->getFamilyBanks($student->family_id);
		$this->load->view($this->theme . 'schools/modal_view_student', $this->data);
    }

	public function add_family_info($student_id = false)
	{
		$this->bpas->checkPermissions('add',true);	
		$this->form_validation->set_rules('f_full_name', lang("full_name"), 'required');
		if ($this->form_validation->run() == true) {	
			$student_info = $this->schools_model->getStudentByID($student_id);
			$data = array(
				'family_id'	=> $student_info->family_id,
				'relationship' => $this->input->post('f_relationship'),
				'school_app' => $this->input->post('f_school_app'),
				'full_name' => $this->input->post('f_full_name'),
				'ethnicity' => $this->input->post('f_ethnicity'),
				'nationality' => $this->input->post('f_nationality'),
				'highest_education' => $this->input->post('f_highest_education'),
				'occupation' => $this->input->post('f_occupation'),
				'phone' => $this->input->post('f_phone'),
				'email' => $this->input->post('f_email'),
				'facebook' => $this->input->post('f_facebook'),
				'city_id' => $this->input->post('f_city_id'),
				'district_id' => $this->input->post('f_district_id'),
				'commune_id' => $this->input->post('f_commune_id'),
				'address'  => $this->input->post('f_address'),
				'type'  => "family",
			);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->addFamily($data)) {
			$this->session->set_flashdata('message', $this->lang->line("family_added"));
            admin_redirect("schools/edit_student/".$student_id."/#family_info");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['student_id'] = $student_id;
			$this->data['cities'] = $this->site->getCities();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_family_info', $this->data);	
		}	
	}
	
	public function edit_family_info($id = false)
	{
		$this->bpas->checkPermissions('edit',true);
		$this->form_validation->set_rules('f_full_name', lang("full_name"), 'required');
		$family = $this->schools_model->getFamilyByID($id);
		if ($this->form_validation->run() == true) {	
			$data = array(
				'relationship' => $this->input->post('f_relationship'),
				'school_app' => $this->input->post('f_school_app'),
				'full_name' => $this->input->post('f_full_name'),
				'ethnicity' => $this->input->post('f_ethnicity'),
				'nationality' => $this->input->post('f_nationality'),
				'highest_education' => $this->input->post('f_highest_education'),
				'occupation' => $this->input->post('f_occupation'),
				'phone' => $this->input->post('f_phone'),
				'email' => $this->input->post('f_email'),
				'facebook' => $this->input->post('f_facebook'),
				'city_id' => $this->input->post('f_city_id'),
				'district_id' => $this->input->post('f_district_id'),
				'commune_id' => $this->input->post('f_commune_id'),
				'address'  => $this->input->post('f_address'),
				'type'  => "family",
			);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateFamily($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("family_updated"));
			admin_redirect($_SERVER["HTTP_REFERER"]."#family_info");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['row'] = $family;
			$this->data['cities'] = $this->site->getCities();
			$this->data['districts'] = $family->city_id > 0 ? $this->site->getDistricts($family->city_id) : false;
            $this->data['communes'] = $family->district_id > 0 ? $this->site->getCommunes($family->district_id) : false;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_family_info', $this->data);	
		}	
	}
	
	public function duplicate_family_info($id = false)
	{
		$this->bpas->checkPermissions('edit',true);
		$this->form_validation->set_rules('f_full_name', lang("full_name"), 'required');
		$family = $this->schools_model->getFamilyByID($id);
		if ($this->form_validation->run() == true) {	
			$data = array(
				'family_id' => $family->family_id,
				'relationship' => $this->input->post('f_relationship'),
				'school_app' => $this->input->post('f_school_app'),
				'full_name' => $this->input->post('f_full_name'),
				'ethnicity' => $this->input->post('f_ethnicity'),
				'nationality' => $this->input->post('f_nationality'),
				'highest_education' => $this->input->post('f_highest_education'),
				'occupation' => $this->input->post('f_occupation'),
				'phone' => $this->input->post('f_phone'),
				'email' => $this->input->post('f_email'),
				'facebook' => $this->input->post('f_facebook'),
				'city_id' => $this->input->post('f_city_id'),
				'district_id' => $this->input->post('f_district_id'),
				'commune_id' => $this->input->post('f_commune_id'),
				'address'  => $this->input->post('f_address'),
				'type'  => "family",
			);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->addFamily($data)) {
			$this->session->set_flashdata('message', $this->lang->line("family_added"));
			admin_redirect($_SERVER["HTTP_REFERER"]."#family_info");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['row'] = $family;
			$this->data['cities'] = $this->site->getCities();
			$this->data['districts'] = $family->city_id > 0 ? $this->site->getDistricts($family->city_id) : false;
            $this->data['communes'] = $family->district_id > 0 ? $this->site->getCommunes($family->district_id) : false;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/duplicate_family_info', $this->data);	
		}	
	}
	
	public function getFamilyInfo($family_id = false)
	{	
		$this->bpas->checkPermissions('index');
		if(!$family_id){
			$family_id = $this->input->get("family_id");
		}
        $this->load->library('datatables');
		$duplicate_link = anchor('admin/schools/duplicate_family_info/$1', '<i class="fa fa-plus"></i> ' . lang('duplicate_family'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_family") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_family/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_family') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li>'.$duplicate_link.'</li>
								<li><a href="'.admin_url('schools/edit_family_info/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_family').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_student_families.id as id,
					sh_student_families.relationship,
					sh_student_families.school_app,
					sh_student_families.full_name,
					sh_student_families.ethnicity,
					sh_student_families.nationality,
					sh_student_families.highest_education,
					sh_student_families.occupation,
					sh_student_families.phone,
					sh_student_families.email,
					sh_student_families.facebook,
					cities.zone_name as city, 
					districts.zone_name as district, 
					commune.zone_name as commune,
					sh_student_families.address")
            ->from("sh_student_families")
			->join("(SELECT id,zone_name FROM ".$this->db->dbprefix('zones')." WHERE IFNULL(city_id,0) = 0) as cities","cities.id = sh_student_families.city_id","left")
			->join("(SELECT id,zone_name FROM ".$this->db->dbprefix('zones')." WHERE city_id > 0 AND IFNULL(district_id,0) = 0) as districts","districts.id = sh_student_families.district_id","left")
            ->join("(SELECT id,zone_name FROM ".$this->db->dbprefix('zones')." WHERE district_id > 0 AND IFNULL(commune_id,0) = 0) as commune","commune.id = sh_student_families.commune_id","left")
			->where("sh_student_families.family_id",$family_id)
			->where("sh_student_families.type","family")
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}

	public function getSiblingInfo($family_id = false, $student_id = false)
	{	
		$this->bpas->checkPermissions('index');
		if(!$family_id){
			$family_id = $this->input->get("family_id");
		}
		if(!$student_id){
			$student_id = $this->input->get("student_id");
		}
        $this->load->library('datatables');
        $this->datatables->select("
					sh_study_infos.child_no,
					CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as full_name,
					sh_study_infos.grade,
					sh_study_infos.academic_year,
					sh_study_infos.biller_name")
            ->from("sh_students")
			->join("(
						SELECT 
							".$this->db->dbprefix('sh_study_infos').".student_id,
							".$this->db->dbprefix('sh_study_infos').".grade,
							".$this->db->dbprefix('sh_study_infos').".academic_year,
							".$this->db->dbprefix('companies').".company as biller_name,
							".$this->db->dbprefix('sh_study_infos').".child_no
						FROM 
							".$this->db->dbprefix('sh_study_infos')." 
						INNER JOIN ".$this->db->dbprefix('companies')." ON ".$this->db->dbprefix('companies').".id = ".$this->db->dbprefix('sh_study_infos')." .biller_id
						LEFT JOIN ".$this->db->dbprefix('sh_study_infos')." AS tmp ON tmp.student_id = ".$this->db->dbprefix('sh_study_infos').".student_id 
						AND ".$this->db->dbprefix('sh_study_infos').".academic_year <= tmp.academic_year 
						AND ".$this->db->dbprefix('sh_study_infos').".id < tmp.id 
						WHERE 
							".$this->db->dbprefix('sh_study_infos').".biller_id > 0
						AND tmp.id IS NULL
					)  as sh_study_infos","sh_study_infos.student_id = sh_students.id","left")
			->where("sh_students.family_id",$family_id);
        echo $this->datatables->generate();
	}

	
	public function delete_family($id = null)
    {
		$this->bpas->checkPermissions('delete');	
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteFamily($id)) {
				if ($this->input->is_ajax_request()) {
					$this->bpas->send_json(['error' => 0, 'msg' => lang('family_deleted')]);
				}
				$this->session->set_flashdata('message', lang('family_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	
	
	public function getDocuments($student_id = false)
	{
		$this->bpas->checkPermissions('index');
		if(!$student_id){
			$student_id = $this->input->get("student_id");
		}
		
		$this->load->library('datatables');
		
		$delete_link = "<a href='#' class='po' title='" . lang("delete_document") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_document/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_document') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_document/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_document').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
	
        $this->datatables
            ->select("
					sh_student_documents.id as id,
					sh_student_documents.name,
					description,
					users.first_name,
					created_date,
					attachment")
            ->from("sh_student_documents")
			->join("users","users.id=created_by","left")
			->where("student_id",$student_id)
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_document($student_id = false)
	{
		$this->bpas->checkPermissions('add',true);
		$this->form_validation->set_rules('d_name', lang("name"), 'required');
		if ($this->form_validation->run() == true) 
		{	
			$d_name			= $this->input->post('d_name');
			$d_description	= $this->input->post('d_description');
			
			$data = array(
					'name'			=> $d_name,
					'description'	=> $d_description,
					'created_by'	=> $this->session->userdata("user_id"),
					'created_date'	=> date("Y-m-d H:i"),
					'student_id'	=> $student_id,
				);
			
			if ($_FILES['d_document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('d_document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
			
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->addDocument($data)) {
			$this->session->set_flashdata('message', $this->lang->line("document_added"));
            admin_redirect("schools/edit_student/".$student_id."/#document_info");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['student_id'] = $student_id;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_document', $this->data);	
		}	
	}
	
	public function delete_document($id = null)
    {		
		$this->bpas->checkPermissions('delete');
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteDocument($id)) {
				if ($this->input->is_ajax_request()) {

					echo lang("document_deleted");
					die();
				}
				$this->session->set_flashdata('message', lang('document_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	public function edit_document($id = false)
	{
		$this->bpas->checkPermissions('edit',true);
		$this->form_validation->set_rules('d_name', lang("name"), 'required');
		$document = $this->schools_model->getDocumentByID($id);
		if ($this->form_validation->run() == true) 
		{	
			$d_name			= $this->input->post('d_name');
			$d_description	= $this->input->post('d_description');
			
			$data = array(
					'name'			=> $d_name,
					'description'	=> $d_description,
				);
			
			if ($_FILES['d_document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('d_document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
			
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateDocument($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("document_added"));
            admin_redirect("schools/edit_student/".$document->student_id."/#document_info");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['row'] = $document;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_document', $this->data);	
		}	
	}
	
	
	public function getFaults($student_id = false)
	{
		$this->bpas->checkPermissions('index');
		if(!$student_id){
			$student_id = $this->input->get("student_id");
		}
		
		$this->load->library('datatables');
		
		$delete_link = "<a href='#' class='po' title='" . lang("delete_fault") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_fault/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_fault') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_fault/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_fault').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
	
        $this->datatables
            ->select("
					sh_student_faults.id as id,
					sh_student_faults.date,
					sh_class_years.class_name,
					sh_student_faults.academic_year,
					sh_student_faults.description,
					IF(blacklist = 1, 'yes','no') as blacklist,
					users.first_name,
					sh_student_faults.created_date,
					sh_student_faults.attachment")
            ->from("sh_student_faults")
			->join("users","users.id=created_by","left")
			->join("sh_class_years","sh_class_years.academic_year = sh_student_faults.academic_year AND sh_class_years.academic_year = sh_student_faults.academic_year","LEFT")
			->where("student_id",$student_id)
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_fault($student_id = false)
	{
		$this->bpas->checkPermissions('add',true);
		$this->form_validation->set_rules('f_date', lang("date"), 'required');
		$this->form_validation->set_rules('f_class', lang("class"), 'required');
		$this->form_validation->set_rules('f_blacklist', lang("blacklist"), 'required');
		$this->form_validation->set_rules('f_description', lang("description"), 'required');
		
		if ($this->form_validation->run() == true){
			$class_year = explode('#',$this->input->post('f_class'));
			$data = array(
					'date'			=> $this->bpas->fsd(trim($this->input->post('f_date'))),
					'class_id'		=> $class_year[0],
					'academic_year'	=> $class_year[1],
					'description'	=> $this->input->post('f_description'),
					'blacklist'		=> $this->input->post('f_blacklist'),
					'created_by'	=> $this->session->userdata("user_id"),
					'created_date'	=> date("Y-m-d H:i"),
					'student_id'	=> $student_id,
				);
			
			if ($_FILES['f_document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('f_document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->addFault($data)) {
			$this->session->set_flashdata('message', $this->lang->line("fault_added"));
            admin_redirect("schools/edit_student/".$student_id."/#fault");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['student_id'] = $student_id;
			$this->data['study_infos'] = $this->schools_model->getStudentInfoByStudent($student_id);
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_fault', $this->data);	
		}	
	}
	
	public function delete_fault($id = null)
    {		
		$this->bpas->checkPermissions('delete');
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteFault($id)) {
				if ($this->input->is_ajax_request()) {
					$this->bpas->send_json(['error' => 0, 'msg' => lang('fault_deleted')]);
				
				}
				$this->session->set_flashdata('message', lang('fault_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	public function edit_fault($id = false)
	{
		$this->bpas->checkPermissions('edit',true);
		$this->form_validation->set_rules('f_date', lang("date"), 'required');
		$this->form_validation->set_rules('f_class', lang("class"), 'required');
		$this->form_validation->set_rules('f_blacklist', lang("blacklist"), 'required');
		$this->form_validation->set_rules('f_description', lang("description"), 'required');
		$fault = $this->schools_model->getFaultByID($id);
		if ($this->form_validation->run() == true) {	
			$class_year = explode('#',$this->input->post('f_class'));
			$data = array(
					'date'			=> $this->bpas->fsd(trim($this->input->post('f_date'))),
					'class_id'		=> $class_year[0],
					'academic_year'	=> $class_year[1],
					'description'	=> $this->input->post('f_description'),
					'blacklist'		=> $this->input->post('f_blacklist'),
					'created_by'	=> $this->session->userdata("user_id"),
					'created_date'	=> date("Y-m-d H:i"),
				);
			
				if ($_FILES['f_document']['size'] > 0) {
					$this->load->library('upload');
					$config['upload_path'] = $this->digital_upload_path;
					$config['allowed_types'] = $this->digital_file_types;
					$config['max_size'] = $this->allowed_file_size;
					$config['overwrite'] = FALSE;
					$config['encrypt_name'] = TRUE;
					$this->upload->initialize($config);
					if (!$this->upload->do_upload('f_document')) {
						$error = $this->upload->display_errors();
						$this->session->set_flashdata('error', $error);
						admin_redirect($_SERVER["HTTP_REFERER"]);
					}
					$photo = $this->upload->file_name;
					$data['attachment'] = $photo;
				}
			
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateFault($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("fault_added"));
            admin_redirect("schools/edit_student/".$fault->student_id."/#fault");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['study_infos'] = $this->schools_model->getStudentInfoByStudent($fault->student_id);
			$this->data['row'] = $fault;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_fault', $this->data);	
		}	
	}
	
	public function getStudyInfo($student_id = false){
		$this->bpas->checkPermissions('index');
		if(!$student_id){
			$student_id = $this->input->get("student_id");
		}
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_study_info") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_study_info/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_study_info') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_study_info/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_study_info').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_study_infos.id as id,
					sh_study_infos.date,
					sh_study_infos.program,
					sh_study_infos.grade,
					sh_study_infos.academic_year,
					IFNULL(".$this->db->dbprefix('companies').".name,'Other School') as biller_name,
					sh_study_infos.class,
					sh_study_infos.description,
					sh_study_infos.issue_invoice,
					sh_study_infos.attachment,
					sh_study_infos.id as study_id,
					")
            ->from("sh_study_infos")
			->join("companies","companies.id = sh_study_infos.biller_id","left")
			->where("sh_study_infos.student_id",$student_id)
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	
	public function add_study_info($student_id = false){
		$this->bpas->checkPermissions('add',true);
		$this->form_validation->set_rules('s_program', lang("program"), 'required');
		$this->form_validation->set_rules('s_grade', lang("grade"), 'required');
		if ($this->form_validation->run() == true){	
			$program = $this->schools_model->getProgramByID($this->input->post('s_program'));
			$grade = $this->schools_model->getGradeByID($this->input->post('s_grade'));
			$class = $this->schools_model->getClassByID($this->input->post('s_class'));
			$data = array(
					'student_id'  	=> $student_id,
					'biller_id' 	=> $this->input->post('s_biller'),
					'date' 			=> $this->bpas->fsd(trim($this->input->post('s_date'))),
					'academic_year' => $this->input->post('s_academic_year'),
					'class_id' 		=> $class->id,
					'class'			=> $class->name,
					'program_id' 	=> $program->id,
					'program' 		=> $program->name,
					'grade_id' 		=> $grade->id,
					'grade'			=> $grade->name,
					'child_no' 		=> $this->input->post('s_child_no'),
					'issue_invoice' => ($this->Settings->auto_invoice ? "yes" : "no"),
					'description' 	=> $this->bpas->clear_tags($this->input->post('s_description'))
				);
				
				if ($_FILES['s_document']['size'] > 0) {
					$this->load->library('upload');
					$config['upload_path'] = $this->digital_upload_path;
					$config['allowed_types'] = $this->digital_file_types;
					$config['max_size'] = $this->allowed_file_size;
					$config['overwrite'] = FALSE;
					$config['encrypt_name'] = TRUE;
					$this->upload->initialize($config);
					if (!$this->upload->do_upload('s_document')) {
						$error = $this->upload->display_errors();
						$this->session->set_flashdata('error', $error);
						admin_redirect($_SERVER["HTTP_REFERER"]);
					}
					$photo = $this->upload->file_name;
					$data['attachment'] = $photo;
				}
				
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->addStudyInfo($data)) {
			$this->session->set_flashdata('message', $this->lang->line("study_info_added"));
            admin_redirect("schools/edit_student/".$student_id."/#study");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$student = $this->schools_model->getStudentByID($student_id);
			$this->data['last_study'] = $this->schools_model->getLastStudyInfo($student_id);
			$this->data['student'] = $student;
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_study_info', $this->data);	
		}	
	}
	
	
	public function add_multi_study_info($id = null)
    {
		$this->bpas->checkPermissions('add',true);
		if(!$id){
			$id = $this->input->post('id');
		}
        $this->load->helper('security');
		$ids = explode('id',$id);
		$this->form_validation->set_rules('s_program', lang("program"), 'required');
		$this->form_validation->set_rules('s_grade', lang("grade"), 'required');
        if ($this->form_validation->run() == true) {
			$program = $this->schools_model->getProgramByID($this->input->post('s_program'));
			$grade = $this->schools_model->getGradeByID($this->input->post('s_grade'));
			$class = $this->schools_model->getClassByID($this->input->post('s_class'));
			$attachment = "";
			if ($_FILES['s_document']['size'] > 0) {
				$this->load->library('upload');
				$config['upload_path'] = $this->digital_upload_path;
				$config['allowed_types'] = $this->digital_file_types;
				$config['max_size'] = $this->allowed_file_size;
				$config['overwrite'] = FALSE;
				$config['encrypt_name'] = TRUE;
				$this->upload->initialize($config);
				if (!$this->upload->do_upload('s_document')) {
					$error = $this->upload->display_errors();
					$this->session->set_flashdata('error', $error);
					admin_redirect($_SERVER["HTTP_REFERER"]);
				}
				$photo = $this->upload->file_name;
				$attachment = $photo;
			}
			
			for($i=0; $i<count($ids); $i++){
				$student = $this->schools_model->getStudentByID($ids[$i]);
				$data[] = array(
					'student_id' 	=> $ids[$i],
					'child_no' 		=> $student->child_no,
					'biller_id' 	=> $this->input->post('s_biller'),
					'date' 			=> $this->bpas->fsd(trim($this->input->post('s_date'))),
					'academic_year' => $this->input->post('s_academic_year'),
					'class_id' 		=> $class->id,
					'class'			=> $class->name,
					'program_id' 	=> $program->id,
					'program' 		=> $program->name,
					'grade_id' 		=> $grade->id,
					'grade'			=> $grade->name,
					'issue_invoice' => ($this->Settings->auto_invoice ? "yes" : "no"),
					'description' 	=> $this->bpas->clear_tags($this->input->post('s_description')),
					'attachment'	=> $attachment
				);
			}

        } elseif ($this->input->post('add_study_info')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        if ($this->form_validation->run() == true && $this->schools_model->addMultiStudyInfo($data)) {
			$this->session->set_flashdata('message', $this->lang->line("study_info_added"));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['id'] = $id;
			$this->data['last_study'] = $this->schools_model->getLastStudyInfo($ids[0]);
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['programs'] = $this->schools_model->getPrograms();
            $this->load->view($this->theme . 'schools/add_multi_study_info', $this->data);
        }
    }
	
	
	public function edit_study_info($id = false)
	{
		$this->bpas->checkPermissions('edit',true);
		$this->form_validation->set_rules('s_program', lang("program"), 'required');
		$this->form_validation->set_rules('s_grade', lang("grade"), 'required');
		$study_info = $this->schools_model->getStudentInfoByID($id);
		if ($this->form_validation->run() == true){	
			$class = $this->schools_model->getClassByID($this->input->post('s_class'));
			$program = $this->schools_model->getProgramByID($this->input->post('s_program'));
			$grade = $this->schools_model->getGradeByID($this->input->post('s_grade'));
			$data = array(
					'date' 			=> $this->bpas->fsd(trim($this->input->post('s_date'))),
					'biller_id' 	=> $this->input->post('s_biller'),
					'academic_year' => $this->input->post('s_academic_year'),
					'class_id' 		=> $class->id,
					'class'			=> $class->name,
					'program_id' 	=> $program->id,
					'program' 		=> $program->name,
					'grade_id' 		=> $grade->id,
					'grade'			=> $grade->name,
					'child_no' 		=> $this->input->post('s_child_no'),
					'description' 	=> $this->bpas->clear_tags($this->input->post('s_description')),
					'issue_invoice' => ($this->Settings->auto_invoice ? "yes" : "no")
				);
			if ($_FILES['s_document']['size'] > 0) {
				$this->load->library('upload');
				$config['upload_path'] = $this->digital_upload_path;
				$config['allowed_types'] = $this->digital_file_types;
				$config['max_size'] = $this->allowed_file_size;
				$config['overwrite'] = FALSE;
				$config['encrypt_name'] = TRUE;
				$this->upload->initialize($config);
				if (!$this->upload->do_upload('s_document')) {
					$error = $this->upload->display_errors();
					$this->session->set_flashdata('error', $error);
					admin_redirect($_SERVER["HTTP_REFERER"]);
				}
				$photo = $this->upload->file_name;
				$data['attachment'] = $photo;
			}
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateStudyInfo($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("study_info_updated"));
            admin_redirect("schools/edit_student/".$study_info->student_id."/#study");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$student = $this->schools_model->getStudentByID($study_info->student_id);
			$this->data['student'] = $student;
			$this->data['id'] = $id;
			$this->data['study_info'] = $study_info;
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_study_info', $this->data);	
		}	
	}
	
	
	public function delete_study_info($id = null)
    {		
		$this->bpas->checkPermissions('delete');
        if (isset($id) || $id != null){
        	if ($this->schools_model->deleteStudyInfo($id)) {
				if ($this->input->is_ajax_request()) {
					$this->bpas->send_json(['error' => 0, 'msg' => lang('study_info_deleted')]);
					
				}
				$this->session->set_flashdata('message', lang('study_info_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	
	public function programs()
	{	
		$this->bpas->checkPermissions('programs');	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('programs')));
		$meta = array('page_title' => lang('programs'), 'bc' => $bc);
		$this->page_construct('schools/programs', $meta, $this->data);
	}

	public function getPrograms()
	{	
		$this->bpas->checkPermissions('programs');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_program") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_program/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_program') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_program/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_program').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					{$this->db->dbprefix('sh_programs')}.id as id, 
					{$this->db->dbprefix('sh_programs')}.code,
					{$this->db->dbprefix('sh_programs')}.name,
					{$this->db->dbprefix('sh_programs')}.description")
            ->from("sh_programs")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_program()
	{
		$this->bpas->checkPermissions('programs',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_programs.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true) 
		{	
			$data = array(
				'code'  => $post['code'],
				'name'  => $post['name'],
				'auto_invoice'  => $post['auto_invoice'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	

		if ($this->form_validation->run() == true && $id = $this->schools_model->addProgram($data)) {
            $this->session->set_flashdata('message', $this->lang->line("program_added"));
            admin_redirect("schools/programs");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_program', $this->data);	
		}	
	}
	
	public function edit_program($id = null)
	{		
		$this->bpas->checkPermissions('programs',true);
		$post = $this->input->post();		
		$program_info = $this->schools_model->getProgramByID($id);	
		if ($post && $post['code'] != $program_info->code) {
			$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_programs.code]');
        }
		$this->form_validation->set_rules('name', lang("name"), 'required');

		if ($this->form_validation->run() == true) 
		{						
			$data = array(
				'code'  => $post['code'],
				'name'  => $post['name'],
				'auto_invoice'  => $post['auto_invoice'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateProgram($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("program_updated"));
            admin_redirect("schools/programs");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $program_info;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_program', $this->data);
		}			
	}
	
	public function delete_program($id = null)
    {	
		$this->bpas->checkPermissions('programs');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteProgramByID($id)){
        		$this->session->set_flashdata('message', lang("program_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function program_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }

        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
				
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('programs');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteProgramByID($id);
                    }
                    $this->session->set_flashdata('message', lang("program_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('program');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $program = $this->schools_model->getProgramByID($id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $program->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $program->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->remove_tag($program->description));
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);


                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'program_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
    public function lesson()
	{	
		$this->bpas->checkPermissions('lesson');	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('lesson')));
		$meta = array('page_title' => lang('lesson'), 'bc' => $bc);
		$this->page_construct('schools/lesson', $meta, $this->data);
	}
	public function getLesson()
	{	
		$this->bpas->checkPermissions('lesson');
        $this->load->library('datatables');
		$student_link = anchor('admin/schools/grade_students/$1', '<i class="fa fa-user"></i> ' . lang('grade_students'), ' class="grade_students"');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_course") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_lesson/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_lesson') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
    							<li><a href="'.admin_url('schools/edit_lesson/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_lesson').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_lesson.id as id, 
					sh_lesson.image,
					sh_lesson.name,
					sh_lesson.url,
					sh_course.name as course,
					sh_lesson.description")
            ->from("sh_lesson")
            ->join("sh_course", "sh_course.id=sh_lesson.course_id", "left")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	public function add_lesson($id=null)
	{
		$this->bpas->checkPermissions('lesson',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true) 
		{	
			$data = array(
				'name'  		=> $this->input->post('name'),
				'course_id' 	=> $this->input->post('course'),
				'url'  			=> $this->input->post('video_url'),
				'description' 	=> $this->bpas->clear_tags($post['description']),
			);
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['image'] = $photo;
            }
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	

		if ($this->form_validation->run() == true && $id = $this->schools_model->addLesson($data)) {
            $this->session->set_flashdata('message', $this->lang->line("lesson_added"));
            admin_redirect("schools/lesson");
        }else{
			$this->data['error'] 		= validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] 	= $this->site->modal_js();
			$this->data['classes'] 		= $this->schools_model->getClasses();
			$this->data['teachers'] 	= $this->schools_model->getTeachers();
			$this->data['courses']   	= $this->schools_model->getCourses();
			$this->data['course_id']   	= $id ? $id:0;
			$this->load->view($this->theme . 'schools/add_lesson', $this->data);	
		}	
	}
	public function edit_lesson($id = null)
	{		
		$this->bpas->checkPermissions('lesson',true);
		$post = $this->input->post();		
		$lesson_info = $this->schools_model->getLessonByID($id);	

		$this->form_validation->set_rules('name', lang("name"), 'required');

		if ($this->form_validation->run() == true) 
		{						
			$data = array(
				'name'  		=> $this->input->post('name'),
				'course_id' 	=> $this->input->post('course'),
				'url'  			=> $this->input->post('video_url'),
				'description' 	=> $this->bpas->clear_tags($post['description']),
			);
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['image'] = $photo;
            }
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateLesson($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("lesson_updated"));
            admin_redirect("schools/lesson");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $lesson_info;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['classes'] = $this->schools_model->getClasses();
			$this->data['teachers'] = $this->schools_model->getTeachers();
			$this->data['courses']   = $this->schools_model->getCourses();
			$this->load->view($this->theme . 'schools/edit_lesson', $this->data);
		}			
	}
	public function delete_lesson($id = null)
    {	
		$this->bpas->checkPermissions('course');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteLessonByID($id)){
        		$this->session->set_flashdata('message', lang("lesson_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
    public function course()
	{	
		$this->bpas->checkPermissions('course');	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('course')));
		$meta = array('page_title' => lang('course'), 'bc' => $bc);
		$this->page_construct('schools/course', $meta, $this->data);
	}
	public function getCourses()
	{	
		$this->bpas->checkPermissions('course');
        $this->load->library('datatables');
        $detail_link = anchor('admin/schools/view_course/$1', '<i class="fa fa-file-text-o"></i> ' . lang('student_details'));
		$fee_link = anchor('admin/schools/add_lesson/$1', '<i class="fa fa-money"></i> ' . lang('add_lesson'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal" class="grade_fees"');
		$student_link = anchor('admin/schools/grade_students/$1', '<i class="fa fa-user"></i> ' . lang('grade_students'), ' class="grade_students"');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_course") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_course/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_course') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
								<li>'.$detail_link.'</li>
								<li>'.$fee_link.'</li>'
								;

	
    			$action_link .= '	<li><a href="'.admin_url('schools/edit_course/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_course').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_course.id as id, 
					sh_course.code,
					sh_course.name,
					sh_classes.name as class,
					concat(".$this->db->dbprefix('sh_teachers').".lastname,' ',".$this->db->dbprefix('sh_teachers').".firstname) as teacher,
					sh_course.description")
            ->from("sh_course")
 			->join("sh_teachers", "sh_teachers.id=sh_course.teacher_id", "left")
            ->join("sh_classes", "sh_classes.id=sh_course.class_id", "left")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	public function add_course()
	{
		$this->bpas->checkPermissions('grades',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_grades.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true) 
		{	
			$data = array(
				'code'  => $post['code'],
				'name'  => $post['name'],
				'class_id'  => $post['class_id'],
				'teacher_id'  => $post['teacher_id'],
				'description' => $this->bpas->clear_tags($post['description']),
				'created_by' => $this->session->userdata('user_id')
			);
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['image'] = $photo;
            }
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	

		if ($this->form_validation->run() == true && $id = $this->schools_model->addCourse($data)) {
            $this->session->set_flashdata('message', $this->lang->line("grade_added"));
            admin_redirect("schools/course");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['classes'] = $this->schools_model->getClasses();
			$this->data['teachers'] = $this->schools_model->getTeachers();
			$this->load->view($this->theme . 'schools/add_course', $this->data);	
		}	
	}
	public function edit_course($id = null)
	{		
		$this->bpas->checkPermissions('grades',true);
		$post = $this->input->post();		
		$grade_info = $this->schools_model->getCourseByID($id);	
		if ($post && $post['code'] != $grade_info->code) {
			$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_grades.code]');
        }
		$this->form_validation->set_rules('name', lang("name"), 'required');

		if ($this->form_validation->run() == true) 
		{						
			$data = array(
				'code'  => $post['code'],
				'name'  => $post['name'],
				'class_id'  => $post['class_id'],
				'teacher_id'  => $post['teacher_id'],
				'description' => $this->bpas->clear_tags($post['description']),
				'created_by' => $this->session->userdata('user_id')
			);
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['image'] = $photo;
            }
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateCourse($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("grade_updated"));
            admin_redirect("schools/course");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $grade_info;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['classes'] = $this->schools_model->getClasses();
			$this->data['teachers'] = $this->schools_model->getTeachers();
			$this->load->view($this->theme . 'schools/edit_course', $this->data);
		}			
	}
	public function delete_course($id = null)
    {	
		$this->bpas->checkPermissions('course');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteCourseByID($id)){
        		$this->session->set_flashdata('message', lang("course_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
    function view_course($id = NULL)
    {
        $this->bpas->checkPermissions('index');
        $courses = $this->schools_model->getCourseByID($id);
        $this->data['course']  = $courses;
        $this->data['classs'] = $this->schools_model->getClassByID($courses->class_id);
        $this->data['teachers'] = $this->schools_model->getTeacherByID($courses->teacher_id);
        $this->data['created_by']  = $this->site->getUser($courses->created_by);
        $this->data['lessons'] = $this->schools_model->getLessonByCourseID($id);
		$this->data['id'] = $id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' =>lang('view_course') ));
        $meta = array('page_title' => lang('view_course'), 'bc' => $bc);
        $this->page_construct('schools/view_course', $meta, $this->data);
    }

	public function grades()
	{	
		$this->bpas->checkPermissions('grades');	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('grades')));
		$meta = array('page_title' => lang('grades'), 'bc' => $bc);
		$this->page_construct('schools/grades', $meta, $this->data);
	}

	public function getGrades()
	{	
		$this->bpas->checkPermissions('grades');
        $this->load->library('datatables');
		$fee_link = anchor('admin/schools/grade_fees/$1', '<i class="fa fa-money"></i> ' . lang('grade_fees'), ' class="grade_fees"');
		$student_link = anchor('admin/schools/grade_students/$1', '<i class="fa fa-user"></i> ' . lang('grade_students'), ' class="grade_students"');
		$testing_link = anchor('admin/schools/grade_testings/$1', '<i class="fa fa-check"></i> ' . lang('grade_testings'), ' class="grade_testings"');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_grade") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_grade/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_grade') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
								<li>'.$fee_link.'</li>';

				if(!$this->config->item('university')){
		            $action_link .= '<li>' . $student_link . '</li>
		            			<li>' . $testing_link . '</li>';
		        }
    			$action_link .= '	<li><a href="'.admin_url('schools/edit_grade/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_grade').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					{$this->db->dbprefix('sh_grades')}.id as id, 
					{$this->db->dbprefix('sh_grades')}.code,
					{$this->db->dbprefix('sh_grades')}.name,
					{$this->db->dbprefix('sh_grades')}.description")
            ->from("sh_grades")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_grade()
	{
		$this->bpas->checkPermissions('grades',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_grades.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true) 
		{	
			$data = array(
				'code'  => $post['code'],
				'name'  => $post['name'],
				'graduate'  => $post['graduate'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	

		if ($this->form_validation->run() == true && $id = $this->schools_model->addGrade($data)) {
            $this->session->set_flashdata('message', $this->lang->line("grade_added"));
            admin_redirect("schools/grades");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_grade', $this->data);	
		}	
	}
	
	public function edit_grade($id = null)
	{		
		$this->bpas->checkPermissions('grades',true);
		$post = $this->input->post();		
		$grade_info = $this->schools_model->getGradeByID($id);	
		if ($post && $post['code'] != $grade_info->code) {
			$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_grades.code]');
        }
		$this->form_validation->set_rules('name', lang("name"), 'required');

		if ($this->form_validation->run() == true) 
		{						
			$data = array(
				'code'  => $post['code'],
				'name'  => $post['name'],
				'graduate'  => $post['graduate'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateGrade($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("grade_updated"));
            admin_redirect("schools/grades");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $grade_info;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_grade', $this->data);
		}			
	}
	
	public function delete_grade($id = null)
    {	
		$this->bpas->checkPermissions('grades');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteGradeByID($id)){
        		$this->session->set_flashdata('message', lang("grade_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	

	function grade_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }

        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
				
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('grades');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteGradeByID($id);
                    }
                    $this->session->set_flashdata('message', lang("grade_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('grade');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $grade = $this->schools_model->getGradeByID($id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $grade->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $grade->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->remove_tag($grade->description));
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);


                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'grade_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function subjects()
	{	
		$this->bpas->checkPermissions('subjects');	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('subjects')));
		$meta = array('page_title' => lang('subjects'), 'bc' => $bc);
		$this->page_construct('schools/subjects', $meta, $this->data);
	}

	public function getSubjects()
	{	
		$this->bpas->checkPermissions('subjects');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_subject") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_subject/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_subject') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_subject/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_subject').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
		$this->load->library('datatables');
        $this->datatables->select("
					{$this->db->dbprefix('sh_subjects')}.id as id, 
					{$this->db->dbprefix('sh_subjects')}.code,
					{$this->db->dbprefix('sh_subjects')}.name,
					{$this->db->dbprefix('sh_subjects')}.description,
					COALESCE({$this->db->dbprefix('sh_skills')}.name, ' ') as skill
				", false)
            ->from("sh_subjects")
            ->join("sh_skills", "sh_skills.id=sh_subjects.skill_id", "left")
			->order_by('sh_subjects.code')
			->order_by('sh_skills.id')
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_subject()
	{
		$this->bpas->checkPermissions('subjects',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('skill', lang("skill"), 'required');
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_subjects.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true) 
		{	
			$data = array(
				'skill_id'    => $post['skill'],
				'code'        => $post['code'],
				'name'        => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	

		if ($this->form_validation->run() == true && $id = $this->schools_model->addSubject($data)) {
            $this->session->set_flashdata('message', $this->lang->line("subject_added"));
            admin_redirect("schools/subjects");
        } else {
			$this->data['error']    = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['skills']   = $this->schools_model->getSkills();
			$this->load->view($this->theme . 'schools/add_subject', $this->data);	
		}	
	}
	
	public function edit_subject($id = null)
	{		
		$this->bpas->checkPermissions('subjects',true);
		$post = $this->input->post();		
		$subject_info = $this->schools_model->getSubjectByID($id);	
		if ($post && $post['code'] != $subject_info->code) {
			$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_subjects.code]');
        }
		$this->form_validation->set_rules('name', lang("name"), 'required');
		$this->form_validation->set_rules('skill', lang("skill"), 'required');
		if ($this->form_validation->run() == true) 
		{						
			$data = array(
				'skill_id'    => $post['skill'],
				'code'        => $post['code'],
				'name'        => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateSubject($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("subject_updated"));
            admin_redirect("schools/subjects");
        }else{
			$this->data['error']    = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']       = $id;
			$this->data['row']      = $subject_info;
			$this->data['skills']   = $this->schools_model->getSkills();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_subject', $this->data);
		}			
	}
	
	public function delete_subject($id = null)
    {	
		$this->bpas->checkPermissions('subjects');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteSubjectByID($id)){
        		$this->session->set_flashdata('message', lang("subject_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function subject_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('subjects');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteSubjectByID($id);
                    }
                    $this->session->set_flashdata('message', lang("subject_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                } else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('subject');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('skill'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $subject = $this->schools_model->getSubjectByID($id);
                        $skill   = $this->schools_model->getSkillByID($subject->skill_id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $subject->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $subject->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->remove_tag($subject->description));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, ($skill ? $skill->name : ''));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(65);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(35);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'subject_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function rooms($biller_id = false)
	{	
		$this->bpas->checkPermissions('rooms');	
		$this->data['billers'] = $this->site->getBillers();
        $this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('rooms')));
		$meta = array('page_title' => lang('rooms'), 'bc' => $bc);
		$this->page_construct('schools/rooms', $meta, $this->data);
	}

	public function getRooms($biller_id = false)
	{	
		$this->bpas->checkPermissions('rooms');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_room") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_room/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_room') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_room/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_room').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_rooms.id as id, 
					sh_rooms.code,
					sh_rooms.name,
					sh_rooms.description")
            ->from("sh_rooms")
            ->add_column("Actions", $action_link, "id");
		
		if ($biller_id) {
			$this->datatables->where('sh_rooms.biller_id', $biller_id);
        }else if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_rooms.biller_id =', $this->session->userdata('biller_id'));
		}		
			
        echo $this->datatables->generate();
	}
	
	public function add_room()
	{
		$this->bpas->checkPermissions('rooms',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_rooms.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true) 
		{	
			$data = array(
				'biller_id'  => $post['biller'],
				'code'  => $post['code'],
				'name'  => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	

		if ($this->form_validation->run() == true && $id = $this->schools_model->addRoom($data)) {
            $this->session->set_flashdata('message', $this->lang->line("room_added"));
            admin_redirect("schools/rooms");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_room', $this->data);	
		}	
	}
	
	public function edit_room($id = null)
	{		
		$this->bpas->checkPermissions('rooms',true);
		$post = $this->input->post();		
		$room_info = $this->schools_model->getRoomByID($id);	
		if ($post && $post['code'] != $room_info->code) {
			$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_rooms.code]');
        }
		$this->form_validation->set_rules('name', lang("name"), 'required');

		if ($this->form_validation->run() == true) 
		{						
			$data = array(
				'biller_id'  => $post['biller'],
				'code'  => $post['code'],
				'name'  => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateRoom($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("room_updated"));
            admin_redirect("schools/rooms");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $room_info;
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_room', $this->data);
		}			
	}
	
	public function delete_room($id = null)
    {	
		$this->bpas->checkPermissions('rooms');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteRoomByID($id)){
        		$this->session->set_flashdata('message', lang("room_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function room_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }

        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
				
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('rooms');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteRoomByID($id);
                    }
                    $this->session->set_flashdata('message', lang("room_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('program');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $program = $this->schools_model->getRoomByID($id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $program->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $program->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->remove_tag($program->description));
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);


                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'room_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function classes($biller_id = false)
	{	
		$this->bpas->checkPermissions('classes');	
		$this->data['billers'] = $this->site->getBillers();
        $this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('classes')));
		$meta = array('page_title' => lang('classes'), 'bc' => $bc);
		$this->page_construct('schools/classes', $meta, $this->data);
	}

	public function getClasses($biller_id = false)
	{	
		$this->bpas->checkPermissions('classes');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_class") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_class/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_class') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li class="hide"><a href="'.admin_url('schools/class_years/$1').'" ><i class="fa fa fa-clock-o"></i>'.lang('class_years').'</a></li>
								<li><a href="'.admin_url('schools/time_tables/$1').'" ><i class="fa fa fa-clock-o"></i>'.lang('time_tables').'</a></li>
								<li><a href="'.admin_url('schools/edit_class/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_class').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					{$this->db->dbprefix('sh_classes')}.id as id, 
					{$this->db->dbprefix('sh_classes')}.code,
					{$this->db->dbprefix('sh_classes')}.name,
					{$this->db->dbprefix('sh_programs')}.name as program,
					{$this->db->dbprefix('sh_skills')}.name as skills,
					{$this->db->dbprefix('sh_grades')}.name as grade,
					{$this->db->dbprefix('custom_field')}.name as timeshift,
					{$this->db->dbprefix('sh_classes')}.description")
            ->from("sh_classes")
			->join("sh_programs","sh_programs.id = sh_classes.program_id","left")
			->join("sh_skills","sh_skills.id = sh_classes.skill_id","left")
			->join("sh_grades","sh_grades.id = sh_classes.grade_id","left")
			->join("custom_field","custom_field.id = sh_classes.timeshift_id","left")
            ->add_column("Actions", $action_link, "id");
			
			if ($biller_id) {
				$this->datatables->where('sh_classes.biller_id', $biller_id);
			}else if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sh_classes.biller_id =', $this->session->userdata('biller_id'));
			}
			
        echo $this->datatables->generate();
	}
	
	public function add_class()
	{
		$this->bpas->checkPermissions('classes',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_classes.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true) {	
			$data = array(
				'biller_id'   => $post['biller'],
				'code'        => $post['code'],
				'name'        => $post['name'],
				'program_id'  => $post['program'],
				'grade_id'    => $post['grade'],
				'skill_id'    => $post['skill'] ? $post['skill'] : null,
				'timeshift_id'=> $post['timeshift'] ? $post['timeshift'] : null,
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	

		if ($this->form_validation->run() == true && $id = $this->schools_model->addClass($data)) {
            $this->session->set_flashdata('message', $this->lang->line("class_added"));
            admin_redirect("schools/classes");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['skills'] = $this->schools_model->getSkills();
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->load->view($this->theme . 'schools/add_class', $this->data);	
		}	
	}
	
	public function edit_class($id = null)
	{		
		$this->bpas->checkPermissions('classes',true);
		$post = $this->input->post();		
		$class_info = $this->schools_model->getClassByID($id);	
		if ($post && $post['code'] != $class_info->code) {
			$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_classes.code]');
        }
		$this->form_validation->set_rules('name', lang("name"), 'required');

		if ($this->form_validation->run() == true) 
		{						
			$data = array(
				'biller_id'    => $post['biller'],
				'code'         => $post['code'],
				'name'         => $post['name'],
				'program_id'   => $post['program'],
				'grade_id'     => $post['grade'],
				'skill_id'     => $post['skill'] ? $post['skill'] : null,
				'timeshift_id' => $post['timeshift'] ? $post['timeshift'] : null,
				'description'  => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateClass($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("class_updated"));
            admin_redirect("schools/classes");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $class_info;
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['skills'] = $this->schools_model->getSkills();
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['sections'] = $this->schools_model->getSection();
			$this->data['teachers'] = $this->schools_model->getTeachers($class_info->biller_id);
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_class', $this->data);
		}			
	}
	
	public function delete_class($id = null)
    {	
		$this->bpas->checkPermissions('classes');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteClassByID($id)){
        		$this->session->set_flashdata('message', lang("class_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function class_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }

        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
				
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('classes');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteClassByID($id);
                    }
                    $this->session->set_flashdata('message', lang("class_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('class');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('program'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('grade'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('description'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $class = $this->schools_model->getClassByID($id);
						$program = $this->schools_model->getProgramByID($class->program_id);
						$grade = $this->schools_model->getGradeByID($class->grade_id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $class->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $class->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $program->name);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $grade->name);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->remove_tag($class->description));
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);


                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'class_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function sections()
	{	
		$this->bpas->checkPermissions('sections');	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('sections')));
		$meta = array('page_title' => lang('sections'), 'bc' => $bc);
		$this->page_construct('schools/sections', $meta, $this->data);
	}

	public function getSections()
	{	
		$this->bpas->checkPermissions('sections');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_section") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_section/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_section') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_section/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_section').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					{$this->db->dbprefix('sh_sections')}.id as id, 
					{$this->db->dbprefix('sh_sections')}.code,
					{$this->db->dbprefix('sh_sections')}.name,
					{$this->db->dbprefix('sh_programs')}.name as program,
					{$this->db->dbprefix('sh_skills')}.name as skills,
					{$this->db->dbprefix('sh_grades')}.name as grade,
					{$this->db->dbprefix('sh_sections')}.score_type,
					{$this->db->dbprefix('sh_sections')}.description")
            ->from("sh_sections")
			->join("sh_programs","sh_programs.id = sh_sections.program_id","left")
			->join("sh_skills","sh_skills.id = sh_sections.skill_id","left")
			->join("sh_grades","sh_grades.id = sh_sections.grade_id","left")
            ->add_column("Actions", $action_link, "id");

        echo $this->datatables->generate();
	}
	
	public function add_section()
	{
		
		$this->bpas->checkPermissions('sections',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_sections.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true) {	
			$data = array(
				'code'        => $post['code'],
				'name'        => $post['name'],
				'score_type'  => $post['score_type'],
				'program_id'  => $post['program'],
				'grade_id'    => $post['grade'],
				'subject_id'  => json_encode($post['subject']),
				'skill_id'    => $post['skill'] ? $post['skill']:null,
				'description' => $this->bpas->clear_tags($post['description']),
			);

		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	
		if ($this->form_validation->run() == true && $id = $this->schools_model->addSection($data)) {
            $this->session->set_flashdata('message', $this->lang->line("section_added"));
            admin_redirect("schools/sections");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['skills'] = $this->schools_model->getSkills();
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['subjects'] = $this->schools_model->getSubjects();
			$this->load->view($this->theme . 'schools/add_section', $this->data);	
		}	
	}
	
	public function edit_section($id = null)
	{		
		$this->bpas->checkPermissions('sections',true);
		$post = $this->input->post();		
		
		$sectio_info = $this->schools_model->getSectionByID($id);	
		if ($post && $post['code'] != $sectio_info->code) {
			$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_sections.code]');
        }
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true) {	
			$data = array(
				'code'        => $post['code'],
				'name'        => $post['name'],
				'score_type'  => $post['score_type'],
				'program_id'  => $post['program'],
				'skill_id'    => $post['skill'] ? $post['skill']:null,
				'grade_id'    => $post['grade'],
				'subject_id'  => json_encode($post['subject']),
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateSection($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("section_updated"));
            admin_redirect("schools/sections");
        } else {
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $sectio_info;
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['skills'] = $this->schools_model->getSkills();
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['subjects'] = $this->schools_model->getSubjects();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_section', $this->data);
		}			
	}
	
	public function delete_section($id = null)
    {	
		$this->bpas->checkPermissions('sections');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteSectionByID($id)){
        		$this->session->set_flashdata('message', lang("section_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function section_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }

        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
				
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('sections');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteSectionByID($id);
                    }
                    $this->session->set_flashdata('message', lang("section_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('section');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('program'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('grade'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('score_type'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('description'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $section = $this->schools_model->getSectionByID($id);
						$program = $this->schools_model->getProgramByID($section->program_id);
						$grade = $this->schools_model->getGradeByID($section->grade_id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $section->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $section->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $program->name);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $grade->name);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($section->score_type));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->remove_tag($section->description));
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);


                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'section_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	public function time_tables($class_id = NULL)
    {
		$this->bpas->checkPermissions('time_tables');
        $this->form_validation->set_rules('section', lang("section"), 'required');
		$this->form_validation->set_rules('subject', lang("subject"), 'required');
		$this->form_validation->set_rules('day', lang("day"), 'required');
		$this->form_validation->set_rules('start_time', lang("start_time"), 'required');
		$this->form_validation->set_rules('end_time', lang("end_time"), 'required');
		
		if ($this->form_validation->run() == true) {
			$this->bpas->checkPermissions('time_tables');
			$section = $this->input->post('section');
			$subject = $this->input->post('subject');
			$teacher = $this->input->post('teacher');
			$room = $this->input->post('room');
			$day = $this->bpas->fld($this->input->post('day'));

			$academic_year = $this->input->post('academic_year');
			$start_time = $this->input->post('start_time');
			$end_time = $this->input->post('end_time');

			$data = array(
							'academic_year'	=> $academic_year,
							'class_id'		=> $class_id,
							'section_id'	=> $section,
							'subject_id'	=> $subject,
							'teacher_id'	=> $teacher,
							'room_id'		=> $room,
							'day'			=> $day,
							'start_time'	=> trim($start_time),
							'end_time'		=> trim($end_time)
						);
        }

        if ($this->form_validation->run() == true && $this->schools_model->addTimeTable($data)) {
            $this->session->set_flashdata('message', lang("time_table_added"));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
            $class = $this->schools_model->getClassByID($class_id);
			$this->data['class'] = $class;
			$this->data['rooms'] = $this->schools_model->getRooms($class->biller_id);
			$this->data['class_id'] = $class_id;
			$this->data['grade_id'] = $class->grade_id;	
			$this->data['sections'] = $this->schools_model->getSections($class->program_id, $class->skill_id,$class->grade_id);
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => admin_url('schools/classes'), 'page' => lang('classes')), array('link' => '#', 'page' => lang('time_tables')));
            $meta = array('page_title' => lang('time_tables'), 'bc' => $bc);
            $this->page_construct('schools/time_tables', $meta, $this->data);
        }
    }
	
	public function getTimeTables()
    {
        $this->bpas->checkPermissions('time_tables');
		$this->load->library('datatables');
		
		$delete_link = "<a href='#' class='po' title='" . lang("delete_time_table") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_time_table/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_time_table') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_time_table/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_time_table').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
		
		$this->datatables
		->select("sh_table_times.academic_year,sh_sections.name as section,sh_subjects.name as subject,concat(".$this->db->dbprefix('sh_teachers').".lastname,' ',".$this->db->dbprefix('sh_teachers').".firstname) as teacher, sh_rooms.name as room, sh_table_times.day, sh_table_times.start_time, sh_table_times.end_time,sh_table_times.id as id", false)
		->from('sh_table_times')
		->join('sh_sections', 'sh_sections.id=sh_table_times.section_id', 'left')
		->join('sh_subjects', 'sh_subjects.id=sh_table_times.subject_id', 'left')
		->join('sh_rooms', 'sh_rooms.id=sh_table_times.room_id', 'left')
		->join('sh_teachers', 'sh_teachers.id=sh_table_times.teacher_id', 'left')
		// ->where('sh_table_times.class_id', $class_id)
		->add_column("Actions", $action_link, "id")
		->unset_column('id');
		echo $this->datatables->generate();
        
    }
	public function edit_time_table($id = null)
	{		
		$this->bpas->checkPermissions('time_tables',true);
		$post = $this->input->post();
		$time_table = $this->schools_model->getTimeTableByID($id);	
		$this->form_validation->set_rules('po_section', lang("section"), 'required');
		$this->form_validation->set_rules('subject', lang("subject"), 'required');
		$this->form_validation->set_rules('po_day', lang("day"), 'required');
		$this->form_validation->set_rules('po_start_time', lang("start_time"), 'required');
		$this->form_validation->set_rules('po_end_time', lang("end_time"), 'required');
		if ($this->form_validation->run() == true) {	
		
			$data = array(
							'academic_year'=>$post['academic_year'],	
							'section_id'=>$post['po_section'],
							'subject_id'=>$post['subject'],
							'teacher_id'=>$post['teacher'],
							'room_id'	=>$post['po_room'],
							'day' 		=> $this->bpas->fsd($post['po_day']),
							'start_time'=>trim($post['po_start_time']),
							'end_time'	=>trim($post['po_end_time'])
						);
			
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $this->schools_model->updateTimeTable($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("time_table_updated"));
            admin_redirect("schools/time_tables/".$time_table->class_id);
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$class = $this->schools_model->getClassByID($time_table->class_id);
			$this->data['time_table'] = $time_table;
			$this->data['rooms'] = $this->schools_model->getRooms();
			$this->data['id'] = $id;
			$this->data['grade_id'] = $class->grade_id;
			$this->data['sections'] = $this->schools_model->getSectionByProgramGrade($class->program_id,$class->grade_id);
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_time_table', $this->data);
		}			
	}
	public function delete_time_table($id = null)
    {	
		$this->bpas->checkPermissions('time_tables');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteTimeTableByID($id)){
        		$this->session->set_flashdata('message', lang("time_table_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	public function class_years($class_id = NULL)
    {
		$this->bpas->checkPermissions('class_years');
        $this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		$class = $this->schools_model->getClassByID($class_id);
		if ($this->form_validation->run() == true) {
			$teacher = $this->schools_model->getTeacherByID($this->input->post('teacher'));
			$room = $this->schools_model->getRoomByID($this->input->post('room'));
			$biller= $this->site->getCompanyByID($class->biller_id);
			$program= $this->schools_model->getProgramByID($class->program_id);
			$grade= $this->schools_model->getGradeByID($class->grade_id);
			$academic_year = $this->input->post('academic_year');
			$data = array(
							'academic_year'=>$academic_year,
							'biller_id'=>$biller->id,
							'biller_name'=>$biller->name,
							'class_id'=>$class->id,
							'class_name'=>$class->name,
							'teacher_id'=>$teacher->id,
							'teacher_name'=>($teacher->lastname.' '.$teacher->firstname),
							'room_id'=>$room->id,
							'room_name'=>$room->name,
							'program_id'=>$program->id,
							'program_name'=>$program->name,
							'grade_id'=>$grade->id,
							'grade_name'=>$grade->name,

						);
			
        }

        if ($this->form_validation->run() == true && $this->schools_model->addClassYear($data)) {
            $this->session->set_flashdata('message', lang("class_year_added"));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
            
			$this->data['class'] = $class;
			$this->data['rooms'] = $this->schools_model->getRooms($class->biller_id);
			$this->data['teachers'] = $this->schools_model->getTeachers($class->biller_id);
			$this->data['class_id'] = $class_id;
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => admin_url('schools/classes'), 'page' => lang('classes')), array('link' => '#', 'page' => lang('class_years')));
            $meta = array('page_title' => lang('class_years'), 'bc' => $bc);
            $this->page_construct('schools/class_years', $meta, $this->data);
        }
    }
	
	
	public function getClassYears()
    {
        $this->bpas->checkPermissions('class_years');
		$this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_class_year") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_class_year/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_class_year') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_class_year/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_class_year').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
		
		$this->datatables
		->select("academic_year, room_name, teacher_name, id as id", false)
		->from('sh_class_years')
		->add_column("Actions", $action_link, "id")
		->unset_column('id');
		echo $this->datatables->generate();
        
    }
	
	
	public function edit_class_year($id = null)
	{		
		$this->bpas->checkPermissions('class_years',true);
		$post = $this->input->post();
		$class_year = $this->schools_model->getClassYearByID($id);	
		$class = $this->schools_model->getClassByID($class_year->class_id);
		$this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		if ($this->form_validation->run() == true) {	
			$teacher = $this->schools_model->getTeacherByID($this->input->post('teacher'));
			$room = $this->schools_model->getRoomByID($this->input->post('room'));
			$biller= $this->site->getCompanyByID($class->biller_id);
			$program= $this->schools_model->getProgramByID($class->program_id);
			$grade= $this->schools_model->getGradeByID($class->grade_id);
			$academic_year = $this->input->post('academic_year');
			$data = array(
							'academic_year'=>$academic_year,
							'biller_id'=>$biller->id,
							'biller_name'=>$biller->name,
							'class_id'=>$class->id,
							'class_name'=>$class->name,
							'teacher_id'=>$teacher->id,
							'teacher_name'=>($teacher->firstname.' '.$teacher->lastname),
							'room_id'=>$room->id,
							'room_name'=>$room->name,
							'program_id'=>$program->id,
							'program_name'=>$program->name,
							'grade_id'=>$grade->id,
							'grade_name'=>$grade->name,

						);
			
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $this->schools_model->updateClassYear($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("class_year_updated"));
            admin_redirect("schools/class_years/".$class_year->class_id);
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['class_year'] = $class_year;
			$this->data['rooms'] = $this->schools_model->getRooms($class->biller_id);
			$this->data['teachers'] = $this->schools_model->getTeachers($class->biller_id);
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_class_year', $this->data);
		}			
	}
	public function delete_class_year($id = null)
    {	
		$this->bpas->checkPermissions('class_years');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteClassYearByID($id)){
        		$this->session->set_flashdata('message', lang("class_year_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	
	public function get_section(){
		$class_id = $this->input->get("class_id");
		if($this->input->get("section")){
			$section_id = $this->input->get("section");
		}else{
			$section_id = '';
		}
		$class = $this->schools_model->getClassByID($class_id);
		$sections = $this->schools_model->getSectionByProgramGrade($class->program_id,$class->grade_id);
		$sec_opt = array();
		if($sections){
			foreach($sections as $section){
				$sec_opt[$section->id] = $section->code.' - '.$section->name;
			}
		}
		$section_select = form_dropdown('section', $sec_opt, $section_id, 'class="form-control" id="section" required');
		echo json_encode(array("result" => $section_select));
	}
	
	public function get_multi_subjects(){
		$section_id = $this->input->get("section");
		$section = $this->schools_model->getSectionByID($section_id);
		$sub_opt = array();
		if($section){
			$subject_ids = json_decode($section->subject_id);
			$rows = $this->schools_model->getSubjectByIDs($subject_ids);
			foreach($rows as $row){
				$sub_opt[$row->id] = $row->name;
			}
		}
		$subjects = form_dropdown('subject[]', $sub_opt, '', 'id="subject" class="form-control select" multiple');
		echo json_encode(array("result" => $subjects));
	}
	
	public function get_subject()
	{
		$section_id = $this->input->get("section");
		if($this->input->get("subject")){
			$subject_id = $this->input->get("subject");
		}else{
			$subject_id = '';
		}

		$section = $this->schools_model->getSectionByID($section_id);
		$sub_opt = array();

		if($this->input->get("blank")){
			$sub_opt[0] = lang('all_subjects');
		}

		if($section){
			$subject_ids = json_decode($section->subject_id);
			$rows = $this->schools_model->getSubjectByIDs($subject_ids);
			foreach($rows as $row){
				$sub_opt[$row->id] = $row->code.' - '.$row->name;
			}
		}

		$subjects = form_dropdown('subject', $sub_opt, $subject_id, 'id="subject" class="form-control select"');
		echo json_encode(array("result" => $subjects));

	}
	
	
	
	
	function teachers($biller_id = null)
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if(isset($action)) {
        	$this->data['action'] = $action;
        }
		$this->data['billers'] = $this->site->getBillers();
        $this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('teachers')));
        $meta = array('page_title' => lang('teachers'), 'bc' => $bc);
        $this->page_construct('schools/teachers', $meta, $this->data);
    }
	
	function getTeachers($biller_id = null)
    {
		$this->bpas->checkPermissions('teachers');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_teacher") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_teacher/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_teacher') . "</a>";

		$action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
							<ul class="dropdown-menu pull-right" role="menu">
								<li><a href="'.admin_url('schools/edit_teacher/$1').'" ><i class="fa fa fa-edit"></i>'.lang('edit_teacher').'</a></li>
					            <li>'.$delete_link.'</li>
							</ul>
						</div>';
						
        $this->datatables
            ->select("
				sh_teachers.id as id,
				sh_teachers.photo,
				sh_teachers.code,
				sh_teachers.lastname,
				sh_teachers.firstname,
				sh_teachers.bank_account,
				sh_teachers.gender,
				sh_teachers.phone,		
				sh_teachers.status")
            ->from("sh_teachers")
			->add_column("Actions", $action_link, "id");
		
		if ($biller_id) {
			$this->datatables->where('sh_teachers.biller_id', $biller_id);
        } 
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_teachers.biller_id =', $this->session->userdata('biller_id'));
		}
        echo $this->datatables->generate();
    }
	
	function teacher_actions(){
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
				if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('teachers-delete');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteTeacherByID($id);
                    }
                    $this->session->set_flashdata('message', lang("teacher_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('teacher');
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('first_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('last_name'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('gender'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $teacher = $this->schools_model->getTeacherByID($id);
		
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $teacher->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $teacher->lastname);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $teacher->firstname);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->hrsd($teacher->date));
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($teacher->gender));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $teacher->phone);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang($teacher->status));
						$row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);


                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'teacher_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	function add_teacher()
	{
		$this->bpas->checkPermissions('teachers-add');	
		$post = $this->input->post();
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_teachers.code]');
		$this->form_validation->set_rules('first_name', lang("first_name"), 'required');
		$this->form_validation->set_rules('last_name', lang("last_name"), 'required');
		if ($this->form_validation->run() == true) {
			$biller = $this->site->getCompanyByID($post['biller']);
			$area = $this->site->getZoneByID($post['area']);
			$data = array(
				'biller' 	 	 => $biller->name,
				'biller_id' 	 => $biller->id,
				'code' 		 	 => $post['code'],
				'date' 	 		 => $this->bpas->fsd(trim($post['date'])),
				'lastname' 	 		 => $post['last_name'],
				'firstname' 		 => $post['first_name'],
				'firstname_other' 	 => $post['firstname_other'],
				'lastname_other' 	 => $post['lastname_other'],
				'dob' 			 => $this->bpas->fsd(trim($post['dob'])),
				'pob' 		 	 => $post['pob'],				
				'gender' 		 => $post['gender'],
				'phone' 		 => $post['phone'],
				'email' 		 => $post['email'],
				'nationality'	 => $post['nationality'],
				'bank_account'   => $post['bank_account'],
				'address' 		 => $post['address'].' '.$area->name,
				'created_at'	 => date('Y-m-d H:i'),
				'created_by'	 => $this->session->userdata('user_id'),
			);
			
			if ($_FILES['photo']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->upload_path;
                $config['allowed_types'] = $this->image_types;
                $config['max_size'] = $this->allowed_file_size;
				$config['max_width'] = $this->Settings->iwidth;
                $config['max_height'] = $this->Settings->iheight;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('photo')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['photo'] = $photo;
				
				$this->load->library('image_lib');
                $config['image_library'] = 'gd2';
                $config['source_image'] = $this->upload_path . $photo;
                $config['new_image'] = $this->thumbs_path . $photo;
                $config['maintain_ratio'] = TRUE;
                $config['width'] = $this->Settings->twidth;
                $config['height'] = $this->Settings->theight;
                $this->image_lib->clear();
                $this->image_lib->initialize($config);
				if (!$this->image_lib->resize()) {
                    echo $this->image_lib->display_errors();
                }
            }
			if($id = $this->schools_model->addTeacher($data)){
				$this->session->set_flashdata('message', lang("teacher_added"));
				 if($this->input->post('add_teacher_next')){
					admin_redirect('schools/edit_teacher/'.$id.'/#teach');
				}else{
					admin_redirect('schools/teachers');
				}
				
			}
		}else{
			$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));			
			$this->data['last_teacher'] = $this->schools_model->getLastTeacher();
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['areas'] = $this->site->getAllZones();
			$bc = array(array('link' => admin_url(), 'page' => lang('home')), array('link' => admin_url('schools/teachers'), 'page' => lang('teachers')), array('link' => '#', 'page' => lang('add_teacher')));
			$meta = array('page_title' => lang('add_teacher'), 'bc' => $bc);
			$this->page_construct('schools/add_teacher', $meta, $this->data);
		}
	}
	
	function import_teacher()
    {
        $this->bpas->checkPermissions('teachers-add');
        $this->load->helper('security');
        $this->form_validation->set_rules('userfile', lang("upload_file"), 'xss_clean');
        if ($this->form_validation->run() == true) {
            if (isset($_FILES["userfile"])) {
				$this->load->library('excel');
				$path = $_FILES["userfile"]["tmp_name"];
				$object = PHPExcel_IOFactory::load($path);
				foreach($object->getWorksheetIterator() as $worksheet){
					$highestRow = $worksheet->getHighestRow();
					$highestColumn = $worksheet->getHighestColumn();
					for($row=2; $row<=$highestRow; $row++){
						$ex_biller = $worksheet->getCellByColumnAndRow(0, $row)->getValue();
						$ex_code = $worksheet->getCellByColumnAndRow(1, $row)->getValue();
						$ex_regi_date = $worksheet->getCellByColumnAndRow(2, $row)->getValue();
						$ex_l_name = $worksheet->getCellByColumnAndRow(3, $row)->getValue();
						$ex_f_name = $worksheet->getCellByColumnAndRow(4, $row)->getValue();
						$ex_lo_name = $worksheet->getCellByColumnAndRow(5, $row)->getValue();
						$ex_fo_name = $worksheet->getCellByColumnAndRow(6, $row)->getValue();
						$ex_gender = $worksheet->getCellByColumnAndRow(7, $row)->getValue();
						$ex_dob = $worksheet->getCellByColumnAndRow(8, $row)->getValue();
						$ex_phone = $worksheet->getCellByColumnAndRow(9, $row)->getValue();
						$ex_email = $worksheet->getCellByColumnAndRow(10, $row)->getValue();
						$ex_nationality = $worksheet->getCellByColumnAndRow(11, $row)->getValue();
						$ex_address = $worksheet->getCellByColumnAndRow(12, $row)->getValue();
						$ex_area = $worksheet->getCellByColumnAndRow(13, $row)->getValue();
						$ex_pob = $worksheet->getCellByColumnAndRow(14, $row)->getValue();

						if(trim($ex_code)!=''){
							$final[] = array(
								'biller'  => $ex_biller,
								'code'   => $ex_code,
								'regi_date'    => $ex_regi_date,
								'l_name'  => $ex_l_name,
								'f_name'   => $ex_f_name,
								'lo_name'   => $ex_lo_name,
								'fo_name'   => $ex_fo_name,
								'gender'   => $ex_gender,
								'dob'   => $ex_dob,
								'phone'   => $ex_phone,
								'email'   => $ex_email,
								'nationality'   => $ex_nationality,
								'address'   => $ex_address,
								'area'   => $ex_area,
								'pob'   => $ex_pob,
							);	
						}
					}
				}
			
                $rw = 2;
				$checkCode = false;
                foreach ($final as $csv_pr) {
                    if (!$this->schools_model->getTeacherByCode(trim($csv_pr['code']))) {
						if(isset($checkCode[trim($csv_pr['code'])]) && $checkCode[trim($csv_pr['code'])]){
							$this->session->set_flashdata('error', lang("teacher_code") . " (" . $csv_pr['code'] . "). " . lang("code__exist") . " " . lang("line_no") . " " . $rw);
							admin_redirect("schools/import_teacher");
						}
						$checkCode[trim($csv_pr['code'])] = true;
						$biller_info = $this->schools_model->getBillerByName(trim($csv_pr['biller']));
						if(!$biller_info){
							$this->session->set_flashdata('error', lang("biller") . " (" . $csv_pr['biller'] . "). " . lang("does_not_exist") . " " . lang("line_no") . " " . $rw);
							admin_redirect("schools/import_teacher");
						}
						$area_info = $this->schools_model->getAreaByCode($csv_pr['area']);
						$biller[] = $biller_info->name;
						$biller_id[] = $biller_info->id;
						$code[] = trim($csv_pr['code']);
						$date[] = $this->bpas->fsd(trim($csv_pr['regi_date']));
						$lastname[] = trim($csv_pr['l_name']);
						$firstname[] = trim($csv_pr['f_name']);
						$lastname_other[] = trim($csv_pr['lo_name']);
						$firstname_other[] = trim($csv_pr['fo_name']);
						$gender[] = trim($csv_pr['gender']);
						$dob[] = $this->bpas->fsd(trim($csv_pr['dob']));
						$phone[] = trim($csv_pr['phone']);
						$email[] = trim($csv_pr['email']);
						$nationality[] = trim($csv_pr['nationality']);
						$address[] = trim($csv_pr['address']).' '.$area_info->name;
						$pob[] = trim($csv_pr['pob']);
						$created_at[] = date('Y-m-d H:i');
						$created_by[] = $this->session->userdata('user_id');

                    }else{
                        $this->session->set_flashdata('error', lang("teacher_code") . " (" . $csv_pr['code'] . "). " . lang("code__exist") . " " . lang("line_no") . " " . $rw);
						admin_redirect("schools/import_teacher");
                    }
                    $rw++;
                }
            }

            $ikeys = array('biller', 'biller_id', 'code', 'date', 'lastname', 'firstname', 'lastname_other', 'firstname_other', 'gender', 'dob', 'phone', 'email', 'nationality', 'address', 'pob', 'created_at', 'created_by');
            $items = array();
            foreach (array_map(null, $biller, $biller_id, $code, $date, $lastname, $firstname, $lastname_other, $firstname_other, $gender, $dob, $phone, $email, $nationality, $address, $pob, $created_at, $created_by) as $ikey => $value) {
                $items[] = array_combine($ikeys, $value);
            }
        }

        if ($this->form_validation->run() == true && $prs = $this->schools_model->importTeacher($items)) {
            $this->session->set_flashdata('message', lang("teacher_added"));
            admin_redirect(admin_url('schools/teachers'));
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('import_teacher')));
			$meta = array('page_title' => lang('import_teacher'), 'bc' => $bc);
            $this->page_construct('schools/import_teacher', $meta, $this->data);
        }
    }

	function edit_teacher($id = false)
	{
		$this->bpas->checkPermissions('teachers-edit');	
		$post = $this->input->post();
		$teacher = $this->schools_model->getTeacherByID($id);
		if(isset($post['code']) && $post['code'] != $teacher->code){
			$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_teachers.code]');
		}
		$this->form_validation->set_rules('first_name', lang("first_name"), 'required');
		$this->form_validation->set_rules('last_name', lang("last_name"), 'required');
		if ($this->form_validation->run() == true) {
			$biller = $this->site->getCompanyByID($post['biller']);
			$data = array(
				'biller' 	 	 => $biller->name,
				'biller_id' 	 => $biller->id,
				'code' 		 	 => $post['code'],
				'date' 	 		 => $this->bpas->fsd(trim($post['date'])),
				'lastname' 	 		 => $post['last_name'],
				'firstname' 		 => $post['first_name'],
				'firstname_other' 	 => $post['firstname_other'],
				'lastname_other' 	 => $post['lastname_other'],
				'dob' 			 => $this->bpas->fsd(trim($post['dob'])),		
				'pob' 		 	 => $post['pob'],
				'gender' 		 => $post['gender'],
				'phone' 		 => $post['phone'],
				'email' 		 => $post['email'],
				'nationality'	 => $post['nationality'],
				'address' 		 => $post['address'],
				'bank_account'   => $post['bank_account'],
				'updated_at'	 => date('Y-m-d H:i'),
				'updated_by'	 => $this->session->userdata('user_id'),
			);
			
			if ($_FILES['photo']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->upload_path;
                $config['allowed_types'] = $this->image_types;
                $config['max_size'] = $this->allowed_file_size;
				$config['max_width'] = $this->Settings->iwidth;
                $config['max_height'] = $this->Settings->iheight;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('photo')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
				$data['photo'] = $photo;
				
                $this->load->library('image_lib');
                $config['image_library'] = 'gd2';
                $config['source_image'] = $this->upload_path . $photo;
                $config['new_image'] = $this->thumbs_path . $photo;
                $config['maintain_ratio'] = TRUE;
                $config['width'] = 150;
                $config['height'] = 150;
                $this->image_lib->clear();
                $this->image_lib->initialize($config);
				if (!$this->image_lib->resize()) {
                    echo $this->image_lib->display_errors();
                }
            }
		}
		
		if ($this->form_validation->run() == true && $this->schools_model->updateTeacher($id, $data)) {
			if($this->input->post("update_close")){
				$this->session->set_flashdata('message', lang("teacher_updated"));
				admin_redirect('schools/teachers');
			}else{
				$this->session->set_flashdata('message', lang("teacher_updated"));
				admin_redirect('schools/edit_teacher/'.$id);
			}
		}else{
			$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));			
			$this->data['id'] = $id;
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['teacher'] = $teacher;
			$this->data['currencies'] = $this->site->getAllCurrencies();
			$this->data['working_info'] = $this->schools_model->getTeachersWorkingInfoByEmployeeID($id);
			$this->data['types'] = $this->schools_model->getEmployeeTypes();
			$bc = array(array('link' => admin_url(), 'page' => lang('home')), array('link' => admin_url('schools/teachers'), 'page' => lang('teachers')), array('link' => '#', 'page' => lang('edit_teacher')));
			$meta = array('page_title' => lang('edit_teacher'), 'bc' => $bc);
			$this->page_construct('schools/edit_teacher', $meta, $this->data);
		}
	}
	function edit_teacher_working_info($id = false)
	{
		$this->bpas->checkPermissions('edit');	
		$post = $this->input->post();
		$this->form_validation->set_rules('biller', lang("biller"), 'required');
		if ($this->form_validation->run() == true) {
	
			if(isset($post['working_info_id'])){
				$data = array(
					'biller_id' => $post['biller'],
					'employee_id' => $id,
					'department_id' => $post['department_id'],
					'group_id' => $post['group_id'],
					'position_id' => $post['position_id'],
	
					'employee_date' => $this->bpas->fld($post['employee_date']),
					'employee_type_id' => $post['employee_type'],
					'monthly_rate' => $post['monthly_rate'],
					'currency' => $post['currency'],
					'net_salary' => $post['net_salary'],
					'self_tax' => $post['self_tax'],
					'salary_tax' => $post['salary_tax'],
					'tax_rate' => $post['tax_rate'],
				
					'status' => $post['status'],
					'additions' => $additions,
					'deductions' => $deductions,
				);
			}
		}
		if ($this->form_validation->run() == true && $this->schools_model->addTeacherWorkingInfo($id, $data)) {
			if($this->input->post("update_close")){
				$this->session->set_flashdata('message', lang("teacher_updated"));
				admin_redirect('schools/');
			}else{
				$this->session->set_flashdata('message', lang("teacher_updated"));
				admin_redirect('schools/edit_teacher/'.$id."#working");
			}
		}
	}
	public function delete_teacher($id = null)
    {		
		$this->bpas->checkPermissions('teachers-delete');
        if (isset($id) || $id != null){
        	$delete = $this->schools_model->deleteTeacherByID($id);
        	if($delete){
        		$this->session->set_flashdata('message', lang("teacher_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
            else{
            	admin_redirect($_SERVER['HTTP_REFERER']);
            }
        }
    }
	
	
	public function add_tc_family_info($teacher_id = false)
	{
		$this->bpas->checkPermissions('teachers-add',true);
		
		$this->form_validation->set_rules('f_first_name', lang("first_name"), 'required');
		$this->form_validation->set_rules('f_last_name', lang("last_name"), 'required');
		$this->form_validation->set_rules('f_relationship', lang("relationship"), 'required');
		
		if ($this->form_validation->run() == true) 
		{	
			$f_first_name 	= $this->input->post('f_first_name');
			$f_last_name  	= $this->input->post('f_last_name');
			$f_occupation 	= $this->input->post('f_occupation');
			$f_relationship = $this->input->post('f_relationship');
			$f_tel 		    = $this->input->post('f_tel');
			$f_dob			= $this->input->post('f_dob');
			$f_pob			= $this->input->post('f_pob');
			$f_address 		= $this->input->post('f_address');
		
			$data = array(
					'lastname'  	=> $f_last_name,
					'firstname' 	=> $f_first_name,
					'occupation' 	=> $f_occupation,
					'relationship' 	=> $f_relationship,
					'telephone' 	=> $f_tel,
					'dob'			=> $this->bpas->fld($f_dob),
					'pob'			=> $f_pob,
					'address'		=> $f_address,
					'teacher_id'	=> $teacher_id
				);
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->addTcFamily($data)) {
			$this->session->set_flashdata('message', $this->lang->line("family_added"));
            admin_redirect("schools/edit_teacher/".$teacher_id."/#family");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['teacher_id'] = $teacher_id;
			$this->data['relationships'] = $this->schools_model->getAllRelationShips();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_tc_family_info', $this->data);	
		}	
	}
	
	public function edit_tc_family_info($id = false)
	{
		$this->bpas->checkPermissions('teachers-edit',true);
		$this->form_validation->set_rules('f_first_name', lang("first_name"), 'required');
		$this->form_validation->set_rules('f_last_name', lang("last_name"), 'required');
		$this->form_validation->set_rules('f_relationship', lang("relationship"), 'required');
		
		$family = $this->schools_model->getTcFamilyByID($id);
		if ($this->form_validation->run() == true) 
		{	
			$f_first_name 	= $this->input->post('f_first_name');
			$f_last_name  	= $this->input->post('f_last_name');
			$f_occupation 	= $this->input->post('f_occupation');
			$f_relationship = $this->input->post('f_relationship');
			$f_tel 		    = $this->input->post('f_tel');
			$f_dob			= $this->input->post('f_dob');
			$f_pob			= $this->input->post('f_pob');
			$f_address 		= $this->input->post('f_address');
		
			$data = array(
					'lastname'  	=> $f_last_name,
					'firstname' 	=> $f_first_name,
					'occupation' 	=> $f_occupation,
					'relationship' 	=> $f_relationship,
					'telephone' 	=> $f_tel,
					'dob'			=> $this->bpas->fld($f_dob),
					'pob'			=> $f_pob,
					'address'		=> $f_address
				);
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateTcFamily($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("family_updated"));
            admin_redirect("schools/edit_teacher/".$family->teacher_id."/#family");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['row'] = $family;
			$this->data['relationships'] = $this->schools_model->getAllRelationShips();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_tc_family_info', $this->data);	
		}	
	}
	
	public function getTcFamilyInfo($teacher_id = false)
	{	
		$this->bpas->checkPermissions('teachers');
		if(!$teacher_id){
			$teacher_id = $this->input->get("teacher_id");
		}
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_family") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_tc_family/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_family') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_tc_family_info/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_family').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_teachers_families.id as id,
					concat(lastname,' ',firstname) as name,
					sh_teachers_families.occupation,
					sh_teachers_families.dob,
					sh_relationship_types.name as relationship,
					sh_teachers_families.telephone,
					sh_teachers_families.pob,
					sh_teachers_families.address")
            ->from("sh_teachers_families")
			->join("sh_relationship_types","sh_relationship_types.id=relationship","left")
			->where("sh_teachers_families.teacher_id",$teacher_id)
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function delete_tc_family($id = null)
    {		
		$this->bpas->checkPermissions('teachers-delete');
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteTcFamily($id)) {
				if ($this->input->is_ajax_request()) {
					$this->bpas->send_json(['error' => 0, 'msg' => lang('family_deleted')]);
				
				}
				$this->session->set_flashdata('message', lang('family_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	
	
	public function getTcDocuments($teacher_id = false)
	{
		$this->bpas->checkPermissions('teachers');
		if(!$teacher_id){
			$teacher_id = $this->input->get("teacher_id");
		}
		
		$this->load->library('datatables');
		
		$delete_link = "<a href='#' class='po' title='" . lang("delete_document") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_tc_document/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_document') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_tc_document/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_document').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
	
        $this->datatables
            ->select("
					sh_teacher_documents.id as id,
					sh_teacher_documents.name,
					description,
					users.first_name,
					created_date,
					attachment")
            ->from("sh_teacher_documents")
			->join("users","users.id=created_by","left")
			->where("teacher_id",$teacher_id)
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_tc_document($teacher_id = false)
	{
		$this->bpas->checkPermissions('teachers-add',true);
		$this->form_validation->set_rules('d_name', lang("name"), 'required');
		$this->form_validation->set_rules('d_description', lang("description"), 'required');
		
		if ($this->form_validation->run() == true) 
		{	
			$d_name			= $this->input->post('d_name');
			$d_description	= $this->input->post('d_description');
			
			$data = array(
					'name'			=> $d_name,
					'description'	=> $d_description,
					'created_by'	=> $this->session->userdata("user_id"),
					'created_date'	=> date("Y-m-d H:i"),
					'teacher_id'	=> $teacher_id,
				);
			
			if ($_FILES['d_document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('d_document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
			
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->addTcDocument($data)) {
			$this->session->set_flashdata('message', $this->lang->line("document_added"));
            admin_redirect("schools/edit_teacher/".$teacher_id."/#document");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['teacher_id'] = $teacher_id;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_tc_document', $this->data);	
		}	
	}
	
	public function delete_tc_document($id = null)
    {		
		$this->bpas->checkPermissions('teachers-delete');
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteTcDocument($id)) {
				if ($this->input->is_ajax_request()) {
					$this->bpas->send_json(['error' => 0, 'msg' => lang('document_deleted')]);
				
				}
				$this->session->set_flashdata('message', lang('document_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	public function edit_tc_document($id = false)
	{
		$this->bpas->checkPermissions('teachers-edit',true);
		$this->form_validation->set_rules('d_name', lang("name"), 'required');
		$this->form_validation->set_rules('d_description', lang("description"), 'required');
		$document = $this->schools_model->getTcDocumentByID($id);
		if ($this->form_validation->run() == true) 
		{	
			$d_name			= $this->input->post('d_name');
			$d_description	= $this->input->post('d_description');
			
			$data = array(
					'name'			=> $d_name,
					'description'	=> $d_description,
				);
			
			if ($_FILES['d_document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('d_document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
			
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateTcDocument($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("document_added"));
            admin_redirect("schools/edit_teacher/".$document->teacher_id."/#document");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['row'] = $document;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_tc_document', $this->data);	
		}	
	}
	
	public function getTeachInfo($teacher_id = false){
		$this->bpas->checkPermissions('teachers');
		if(!$teacher_id){
			$teacher_id = $this->input->get("teacher_id");
		}
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_teach_info") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_teach_info/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_teach_info') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_teach_info/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_teach_info').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_teach_infos.id as id,
					sh_teach_infos.subject,
					sh_teach_infos.grade,
					sh_teach_infos.description
					")
            ->from("sh_teach_infos")
			->where("sh_teach_infos.teacher_id",$teacher_id)
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_teach_info($teacher_id = false){
		$this->bpas->checkPermissions('teachers-add',true);
		$this->form_validation->set_rules('subject', lang("subject"), 'required');
		if ($this->form_validation->run() == true){	
			$description = $this->input->post('description');
			$subject_id = $this->input->post('subject');
			$grade_ids = $this->input->post('grade');
			$subject = $this->schools_model->getSubjectByID($subject_id);
			$grades = $this->schools_model->getGradeByIDs($grade_ids);
			$i = 0;
			$grade_name = '';
			if($grades){
				foreach($grades as $grade){
					if($i==0){
						$grade_name = $grade->name;
						$i = 1;
					}else{
						$grade_name .= ','.$grade->name;
					}
				}
			}
			$data = array(
					'teacher_id'  	=> $teacher_id,
					'subject_id' 	=> $subject_id,
					'subject' 		=> $subject->name,
					'grade_id'		=> json_encode($grade_ids),
					'grade'			=> $grade_name,
					'description' 	=> $this->bpas->clear_tags($this->input->post('description'))
				);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->addTeachInfo($data)) {
			$this->session->set_flashdata('message', $this->lang->line("teach_info_added"));
            admin_redirect("schools/edit_teacher/".$teacher_id."/#teach");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['teacher_id'] = $teacher_id;
			$this->data['subjects'] = $this->schools_model->getSubjects();
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_teach_info', $this->data);	
		}	
	}
	
	
	public function edit_teach_info($id = false)
	{
		$this->bpas->checkPermissions('teachers-edit',true);
		$this->form_validation->set_rules('subject', lang("subject"), 'required');
		$teach_info = $this->schools_model->getTeacherInfoByID($id);
		if ($this->form_validation->run() == true) {	
			$subject_id = $this->input->post('subject');
			$grade_ids = $this->input->post('grade');
			$subject = $this->schools_model->getSubjectByID($subject_id);
			$grades = $this->schools_model->getGradeByIDs($grade_ids);
			$i = 0;
			$grade_name = '';
			if($grades){
				foreach($grades as $grade){
					if($i==0){
						$grade_name = $grade->name;
						$i = 1;
					}else{
						$grade_name .= ','.$grade->name;
					}
				}
			}
			$data = array(
					'subject_id' 	=> $subject_id,
					'subject' 		=> $subject->name,
					'grade_id'		=> json_encode($grade_ids),
					'grade'			=> $grade_name,
					'description' 	=> $this->bpas->clear_tags($this->input->post('description'))
				);

		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateTeachInfo($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("teach_info_updated"));
            admin_redirect("schools/edit_teacher/".$teach_info->teacher_id."/#teach");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['teach_info'] = $teach_info;
			$this->data['subjects'] = $this->schools_model->getSubjects();
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_teach_info', $this->data);	
		}	
	}
	
	
	public function delete_teach_info($id = null)
    {		
		$this->bpas->checkPermissions('teachers-delete');
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteTeachInfo($id)) {
				if ($this->input->is_ajax_request()) {
					$this->bpas->send_json(['error' => 0, 'msg' => lang('teach_info_deleted')]);
				}
				$this->session->set_flashdata('message', lang('teach_info_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	
	public function get_teacher(){
		if($this->input->get("grade_id")){
			$grade_id = $this->input->get("grade_id");
		}else{
			$grade_id = false;
		}
		if($this->input->get("subject_id")){
			$subject_id = $this->input->get("subject_id");
		}else{
			$subject_id = false;
		}
		
		if($this->input->get("biller_id")){
			$biller_id = $this->input->get("biller_id");
		}else{
			$biller_id = false;
		}
		
		if($this->input->get("teacher_id")){
			$teacher_id = $this->input->get("teacher_id");
		}else{
			$teacher_id = '';
		}
		if($this->input->get("po_up")){
			$id_teacher = 'po_teacher';
		}else{
			$id_teacher = 'teacher';
		}
		$teachers = $this->schools_model->getTeacherBySubject($subject_id,$biller_id);
		$tech_opt = array();
		if($teachers){
			foreach($teachers as $teacher){
				$grades = json_decode($teacher->grade_id);
				if((in_array($grade_id, $grades)) || $grade_id == false){
					$tech_opt[$teacher->id] = $teacher->lastname.' '.$teacher->firstname;
				}
			}
		}
		$selteachers = form_dropdown('teacher', $tech_opt, $teacher_id, 'id="'.$id_teacher.'" class="form-control select"');
		
		echo json_encode(array("result" => $selteachers));
	}
	
	
	public function getQualification($teacher_id = false)
	{	
		$this->bpas->checkPermissions('teachers');
		if(!$teacher_id){
			$teacher_id = $this->input->get("teacher_id");
		}
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_qualification") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_qualification/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_qualification') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_qualification/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_qualification').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
	
        $this->datatables
            ->select("
					id,
					certificate,
					major,
					school,
					degree,
					start_date,
					end_date,
					language,
					description,
					attachment")
            ->from("sh_teacher_qualifications")
			->where("teacher_id",$teacher_id)
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_qualification($teacher_id = false)
	{
		$this->bpas->checkPermissions('teachers-add',true);
		$this->form_validation->set_rules('q_certificate', lang("certificate"), 'required');
		$this->form_validation->set_rules('q_major', lang("major"), 'required');
		$this->form_validation->set_rules('q_school', lang("school"), 'required');
		
		if ($this->form_validation->run() == true) 
		{	
			$q_certificate 	= $this->input->post('q_certificate');
			$q_major  		= $this->input->post('q_major');
			$q_school 		= $this->input->post('q_school');
			$q_degree 		= $this->input->post('q_grade');
			$q_start_date 	= $this->input->post('q_start_date');
			$q_end_date		= $this->input->post('q_end_date');
			$q_language		= $this->input->post('q_language');
			$q_description  = $this->input->post('q_description');
		
			$data = array(
				'certificate'  => $q_certificate,
				'major'        => $q_major,
				'school'       => $q_school,		
			    'degree'       => $q_degree,		
			    'start_date'   => $this->bpas->fld($q_start_date),
			    'end_date'     => $this->bpas->fld($q_end_date),
			    'language'     => $q_language,
			    'description'  => $q_description,
				'teacher_id'  => $teacher_id
			);
			
			if ($_FILES['q_document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('q_document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->addQualification($data)) {
			$this->session->set_flashdata('message', $this->lang->line("qualification_added"));
            admin_redirect("schools/edit_teacher/".$teacher_id."/#qualification");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['teacher_id'] = $teacher_id;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_qualification', $this->data);	
		}	
	}
	
	public function edit_qualification($id = false)
	{	
		$this->bpas->checkPermissions('teachers-edit',true);
		$this->form_validation->set_rules('q_certificate', lang("certificate"), 'required');
		$this->form_validation->set_rules('q_major', lang("major"), 'required');
		$this->form_validation->set_rules('q_school', lang("school"), 'required');
		
		$qualification= $this->schools_model->getQualificationByID($id);
		if ($this->form_validation->run() == true) 
		{	
			$q_certificate 	= $this->input->post('q_certificate');
			$q_major  		= $this->input->post('q_major');
			$q_school 		= $this->input->post('q_school');
			$q_degree 		= $this->input->post('q_grade');
			$q_start_date 	= $this->input->post('q_start_date');
			$q_end_date		= $this->input->post('q_end_date');
			$q_language		= $this->input->post('q_language');
			$q_description  = $this->input->post('q_description');
		
			$data = array(
				'certificate'  => $q_certificate,
				'major'        => $q_major,
				'school'       => $q_school,		
			    'degree'       => $q_degree,		
			    'start_date'   => $this->bpas->fld($q_start_date),
			    'end_date'     => $this->bpas->fld($q_end_date),
			    'language'     => $q_language,
			    'description'  => TRIM($q_description)
			);
			
			if ($_FILES['q_document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('q_document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateQualification($id, $data)) {
			$this->session->set_flashdata('message', $this->lang->line("qualification_updated"));
            admin_redirect("schools/edit_teacher/".$qualification->teacher_id."/#qualification");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['row'] = $qualification;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_qualification', $this->data);	
		}	
	}
	
	public function delete_qualification($id = null)
    {		
		$this->bpas->checkPermissions('teachers-delete');
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteQualification($id)) {
				if ($this->input->is_ajax_request()) {
					echo lang("qualification_deleted");
					die();
				}
				$this->session->set_flashdata('message', lang('qualification_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	
	
	public function getWorkingHistory($teacher_id = false)
	{	
		$this->bpas->checkPermissions('teachers');
		if(!$teacher_id){
			$teacher_id = $this->input->get("teacher_id");
		}
		$this->load->library('datatables');
		
		$delete_link = "<a href='#' class='po' title='" . lang("delete_working_history") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_working_history/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_working_history') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_working_history/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_working_history').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
	
        $this->datatables
            ->select("
					id,
					company,
					position,
					start_date,
					end_date,
					description,
					attachment")
            ->from("sh_teacher_working_histories")
			->where("teacher_id",$teacher_id)
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_working_history($teacher_id = false)
	{
		$this->bpas->checkPermissions('teachers-add',true);
		$this->form_validation->set_rules('w_company', lang("company"), 'required');
		$this->form_validation->set_rules('w_position', lang("position"), 'required');
		
		if ($this->form_validation->run() == true) 
		{	
			$w_company		= $this->input->post('w_company');
			$w_position  	= $this->input->post('w_position');
			$w_start_date 	= $this->input->post('w_start_date');
			$w_end_date 	= $this->input->post('w_end_date');
			$w_description	= $this->input->post('w_description');
		
			$data = array(
				'company'  	   => $w_company,
				'position'     => $w_position,
				'start_date'   => $this->bpas->fld($w_start_date),		
			    'end_date'     => $this->bpas->fld($w_end_date),		
			    'description'  => $w_description,
				'teacher_id'  => $teacher_id
			);
			
			if ($_FILES['w_document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('w_document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->addWorkingHistory($data)) {
			$this->session->set_flashdata('message', $this->lang->line("working_history_added"));
            admin_redirect("schools/edit_teacher/".$teacher_id."/#experience");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['teacher_id'] = $teacher_id;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_working_history', $this->data);	
		}	
	}
	
	public function edit_working_history($id = false)
	{
		$this->bpas->checkPermissions('teachers-edit',true);
		$this->form_validation->set_rules('w_company', lang("company"), 'required');
		$this->form_validation->set_rules('w_position', lang("position"), 'required');
		$work = $this->schools_model->getWorkingHistoryByID($id);
		if ($this->form_validation->run() == true) 
		{	
			$w_company		= $this->input->post('w_company');
			$w_position  	= $this->input->post('w_position');
			$w_start_date 	= $this->input->post('w_start_date');
			$w_end_date 	= $this->input->post('w_end_date');
			$w_description	= $this->input->post('w_description');
		
			$data = array(
				'company'  	   => $w_company,
				'position'     => $w_position,
				'start_date'   => $this->bpas->fld($w_start_date),		
			    'end_date'     => $this->bpas->fld($w_end_date),		
			    'description'  => $w_description
			);
			
			if ($_FILES['w_document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('w_document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
		}
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateWorkingHistory($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("working_history_updated"));
            admin_redirect("schools/edit_teacher/".$work->teacher_id."/#experience");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['row'] = $work;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_working_history', $this->data);	
		}	
	}
	
	public function delete_working_history($id = null)
    {		
		$this->bpas->checkPermissions('teachers-delete');
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteWorkingHistory($id)) {
				if ($this->input->is_ajax_request()) {
					echo lang("working_history_deleted");
					die();
				}
				$this->session->set_flashdata('message', lang('working_history_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	function examinations()
    {
        $this->bpas->checkPermissions('examinations');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('examinations')));
        $meta = array('page_title' => lang('examinations'), 'bc' => $bc);
        $this->page_construct('schools/examinations', $meta, $this->data);
    }

    function getExaminations()
    {
        $this->bpas->checkPermissions('examinations', TRUE);
        $detail_link = '<a href="'.admin_url("schools/view_examination/$1") . '" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa-file-text-o"></i>'.lang('view_examination').'</a>';
		$delete_link = "<a href='#' class='po' title='" . lang("delete_examination") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_examination/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_examination') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li>'.$detail_link.'</li>
								<li><a href="'.admin_url("schools/edit_examination/$1") . '" class="tip"><i class="fa fa-edit"></i>'.lang('edit_examination').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
		
		$this->load->library('datatables');
        $this->datatables
            ->select("sh_examinations.id as id, DATE_FORMAT(".$this->db->dbprefix('sh_examinations').".date, '%Y-%m-%d %T') as date, academic_year, year, month, class_name, section_name,IF(final = 1,'yes','no') as final,  status, initial_file, final_file")
            ->from('sh_examinations');

		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->join('sh_classes','sh_classes.id = sh_examinations.class_id','inner');
			$this->datatables->where('sh_classes.biller_id =', $this->session->userdata('biller_id'));
		}
        $this->datatables->add_column('Actions', $action_link, "id");
        echo $this->datatables->generate();
    }
	
	function examination_details()
    {
        $this->bpas->checkPermissions('examinations');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('examination_details')));
        $meta = array('page_title' => lang('examination_details'), 'bc' => $bc);
        $this->page_construct('schools/examination_details', $meta, $this->data);
    }
	
	function getExaminationDetails()
    {
        $this->bpas->checkPermissions('examinations', TRUE);
        $detail_link = '<a href="'.admin_url("schools/view_examination/$1") . '" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa-file-text-o"></i>'.lang('view_examination').'</a>';
		$delete_link = "<a href='#' class='po' title='" . lang("delete_examination") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_examination_detail/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_examination') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					            <li><a href="'.admin_url('schools/edit_examination_detail/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_examination').'</a></li>
								<li>'.$delete_link.'</li>
					        </ul>
					    </div>';
		
		$this->load->library('datatables');
        $this->datatables->select("
								sh_examination_items.id as id,
								concat(".$this->db->dbprefix("sh_students").".lastname,' ',".$this->db->dbprefix("sh_students").".firstname) as student,
								sh_examinations.academic_year,
								sh_examinations.year,
								sh_examinations.month,
								sh_examinations.class_name,
								sh_subjects.name as subject_name,
								sh_examination_items.score,
								IF(final = 1,'yes','no') as final
								")
							->join("sh_examinations","sh_examinations.id = sh_examination_items.examination_id","inner")
							->join("sh_students","sh_students.id = sh_examination_items.student_id","left")
							->join("sh_subjects","sh_subjects.id = sh_examination_items.subject_id","left")
							->where("sh_examination_items.score >",0)
							->from("sh_examination_items");

		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_students.biller_id =', $this->session->userdata('biller_id'));
		}
        $this->datatables->add_column('Actions', $action_link, "id");
        echo $this->datatables->generate();
    }
	
	public function delete_examination_detail($id = null)
    {	
		$this->bpas->checkPermissions('examinations-delete');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteExaminationDetail($id)){
        		$this->session->set_flashdata('message', lang("examanition_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }

	public function edit_examination_detail($id = null)
	{		
		$this->bpas->checkPermissions('examinations-edit',true);
		$post = $this->input->post();		
		$examanition = $this->schools_model->getExaminationDetail($id);	
		$this->form_validation->set_rules('score', lang("score"), 'required');
		if ($this->form_validation->run() == true) {						
			$data = array(
				'score'  => $post['score']
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateExaminationDetail($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("examanition_updated"));
            admin_redirect("schools/examination_details");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['examanition'] = $examanition;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_examination_detail', $this->data);
		}			
	}
	
	function examination_detail_actions()
	{
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
				if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('examinations-delete');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteExaminationDetail($id);
                    }
                    $this->session->set_flashdata('message', lang("examanition_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('examanition_detail');
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('student'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('year'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('month'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('class'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('subject'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('score'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('final'));
                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $examanition = $this->schools_model->getExaminationDetail($id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $examanition->student);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $examanition->academic_year);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $examanition->year);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $examanition->month);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $examanition->class_name);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $examanition->subject_name);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($examanition->score));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, lang($examanition->final));
						$row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);



                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'examanition_detail_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
    function view_examination($id)
    {
        $this->bpas->checkPermissions('examinations', TRUE);
        $examination = $this->schools_model->getExaminationByID($id);
        if ($examination->status=='pending') {
            $this->bpas->md('schools/finalize_examination/'.$id);
        }
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller_id = $this->session->userdata('biller_id');
		}else{
			$company = $this->site->getAllCompanies('biller');
			$biller_id = $company[0]->id;
		}
		$this->data['biller'] = $this->site->getCompanyByID($biller_id);
        $this->data['examination'] = $examination;
        $this->data['examination_items'] = $this->schools_model->getExaminationItems($id);
        $this->load->view($this->theme.'schools/view_examination', $this->data);
    }

	function add_examination()
    {
        $this->bpas->checkPermissions('examinations-add');
        $this->form_validation->set_rules('class', lang("class"), 'required');
		$this->form_validation->set_rules('section', lang("section"), 'required');
        if ($this->form_validation->run() == true) {
            $class = $this->schools_model->getClassByID($this->input->post('class'));
			$students = $this->schools_model->getStudentByClassID($class->id);

			$section = $this->schools_model->getSectionByID($this->input->post('section'));
			$subjects = $this->schools_model->getSubjectByIDs(json_decode($section->subject_id));

			$date = $this->bpas->fld($this->input->post('date'));
			$month = $this->input->post('month');
			$note = $this->bpas->clear_tags($this->input->post('note'));
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0;
			$students = isset($_POST['student_id']) ? $_POST['student_id'] : 0;
			$scores = false;
			$items = false;
			for ($r = 0; $r < $i; $r++) {
                $student_id = $_POST['student_id'][$r];
				$subjects = $_POST['subjects'][$r];

				$subjects = str_replace(['[', ']','"',' '], '', $subjects);

				
            }
			
			
            $data = array(
                'date' 			=> $date,
				'academic_year' => $this->input->post('academic_year'),
				'year' 			=> $this->input->post('year'),
                'month' 		=> $this->input->post('month'),
                'program_id' 	=> $this->input->post('program'),
                'skill_id' 		=> $this->input->post('skill'),
                'grade_id' 		=> $this->input->post('grade'),
                'timeshift_id' 	=> $this->input->post('timeshift'),

				'class_id' 		=> $class->id,
				'class_name' 	=> $class->name,
                'section_id' 	=> $section->id,
				'section_name' => $section->name,
				'note' 			=> $note,
				'status' 		=> 'completed',
				'final' 		=> $this->input->post('final'),
                'created_by' => $this->session->userdata('user_id')
            );

			$checkExam = $this->schools_model->getExamination($this->input->post('academic_year'), $this->input->post('year'), $this->input->post('month'), $class->id, $section->id, $this->input->post('final'));

			if($students && $subjects){
				foreach($students as $student){
					$items =[];
					$getsubjects = explode(',', $subjects);
					foreach($getsubjects as $subject){

						/*if($checkExam){

							$checkExaminationDetail = $this->schools_model->checkExaminationDetail($student->id, $subject->id, $this->input->post('academic_year'), $this->input->post('year'), $this->input->post('month'), $class->id, $section->id, $this->input->post('final'), $score);
							
							if($checkExaminationDetail){
								$old_score = $checkExaminationDetail->lastname.' '.$checkExaminationDetail->firstname.' '.lang('already_has_score_of').' '.$checkExaminationDetail->subject_name.' '.$checkExaminationDetail->score;
								$this->session->set_flashdata('error', $old_score);
								admin_redirect($_SERVER["HTTP_REFERER"]);
								exit;
							}
						}
						*/
						$score = $this->input->post('score_'.$student.$subject);
						$items[] = array(
								
									'subject_id' => $subject,
									'score' => $score,
								);
					}
					$scoreItem[] = array(
									'student_id' => $student,
									'score_by_subject' => json_encode($items)
								);
				}
			}
		

			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['final_file'] = $photo;
            }
			if (empty($students)) {
                $this->form_validation->set_rules('student', lang("student"), 'required');
			}

        }
        
        if ($this->form_validation->run() == true && $this->schools_model->addExamination($data, $scoreItem)) {
            $this->session->set_userdata('remove_exls', 1);
			$this->session->set_flashdata('message', lang("examination_added"));
			admin_redirect('schools/examinations');

        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['classes'] = $this->schools_model->getClasses();
			$this->data['programs']        = $this->schools_model->getPrograms();	
			$this->data['grades']          = $this->schools_model->getGrades();
			$this->data['skills']          = $this->schools_model->getSkills();
			$this->data['billers'] = $this->site->getBillers();
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('add_examination')));
            $meta = array('page_title' => lang('add_examination'), 'bc' => $bc);
            $this->page_construct('schools/add_examination', $meta, $this->data);
        }
    }

	/*
	function add_examination()
    {
        $this->bpas->checkPermissions('examinations-add');
        $this->form_validation->set_rules('class', lang("class"), 'required');
		$this->form_validation->set_rules('section', lang("section"), 'required');
        if ($this->form_validation->run() == true) {
            $class = $this->schools_model->getClassByID($this->input->post('class'));
			$students = $this->schools_model->getStudentByClassID($class->id);
			$section = $this->schools_model->getSectionByID($this->input->post('section'));
			$subjects = $this->schools_model->getSubjectByIDs(json_decode($section->subject_id));
			$date = $this->bpas->fld($this->input->post('date'));
			$month = $this->input->post('month');
			$note = $this->bpas->clear_tags($this->input->post('note'));
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0;
			$scores = false;
			$items = false;
			for ($r = 0; $r < $i; $r++) {
                $student_id = $_POST['student_id'][$r];
				$subject_id = $_POST['subject'][$r];
				$score = $_POST['score'][$r];
				$scores[$student_id][$subject_id] = $score;
            }
			
			
            $data = array(
                'date' => $date,
				'academic_year' => $this->input->post('academic_year'),
				'year' => $this->input->post('year'),
                'month' => $this->input->post('month'),
				'class_id' => $class->id,
				'class_name' => $class->name,
                'section_id' => $section->id,
				'section_name' => $section->name,
				'note' => $note,
				'status' => 'completed',
				'final' => $this->input->post('final'),
                'created_by' => $this->session->userdata('user_id')
            );
			$checkExam = $this->schools_model->getExamination($this->input->post('academic_year'), $this->input->post('year'), $this->input->post('month'), $class->id, $section->id, $this->input->post('final'));
			if($students && $subjects){
				foreach($students as $student){
					foreach($subjects as $subject){
						if($checkExam){
							$checkExaminationDetail = $this->schools_model->checkExaminationDetail($student->id, $subject->id, $this->input->post('academic_year'), $this->input->post('year'), $this->input->post('month'), $class->id, $section->id, $this->input->post('final'), $score);
							if($checkExaminationDetail){
								$old_score = $checkExaminationDetail->lastname.' '.$checkExaminationDetail->firstname.' '.lang('already_has_score_of').' '.$checkExaminationDetail->subject_name.' '.$checkExaminationDetail->score;
								$this->session->set_flashdata('error', $old_score);
								admin_redirect($_SERVER["HTTP_REFERER"]);
								exit;
							}
						}
						$score = (isset($scores[$student->id][$subject->id]) ? $scores[$student->id][$subject->id]: 0);
						$items[] = array(
									'student_id' => $student->id,
									'subject_id' => $subject->id,
									'score' => $score,
								);
					}
					
				}
			}

			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['final_file'] = $photo;
            }
			if (empty($scores)) {
                $this->form_validation->set_rules('student', lang("student"), 'required');
			}

        }
        
        if ($this->form_validation->run() == true && $this->schools_model->addExamination($data, $items)) {
            $this->session->set_userdata('remove_exls', 1);
			$this->session->set_flashdata('message', lang("examination_added"));
			admin_redirect('schools/examinations');

        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['classes'] = $this->schools_model->getClasses();
			$this->data['programs']        = $this->schools_model->getPrograms();	
			$this->data['grades']          = $this->schools_model->getGrades();
			$this->data['skills']          = $this->schools_model->getSkills();
			$this->data['billers'] = $this->site->getBillers();
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('add_examination')));
            $meta = array('page_title' => lang('add_examination'), 'bc' => $bc);
            $this->page_construct('schools/add_examination', $meta, $this->data);
        }
    }*/
	
	function edit_examination($id = false)
    {
        $this->bpas->checkPermissions('examinations-edit');
        $this->form_validation->set_rules('class', lang("class"), 'required');
		$this->form_validation->set_rules('section', lang("section"), 'required');
        if ($this->form_validation->run() == true) {
			$class = $this->schools_model->getClassByID($this->input->post('class'));
			$students = $this->schools_model->getStudentByClassID($class->id);
			$section = $this->schools_model->getSectionByID($this->input->post('section'));
			$subjects = $this->schools_model->getSubjectByIDs(json_decode($section->subject_id));
			$date = $this->bpas->fld($this->input->post('date'));
			$month = $this->input->post('month');
			$note = $this->bpas->clear_tags($this->input->post('note'));
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0;
			$scores = false;
			$items = false;
			for ($r = 0; $r < $i; $r++) {
                $student_id = $_POST['student_id'][$r];
				$subject_id = $_POST['subject'][$r];
				$score = $_POST['score'][$r];
				$scores[$student_id][$subject_id] = $score;
            }
			if($students && $subjects){
				foreach($students as $student){
					foreach($subjects as $subject){
						$score = (isset($scores[$student->id][$subject->id]) ? $scores[$student->id][$subject->id]: 0);
						$items[] = array(
									'examination_id' => $id,
									'student_id' => $student->id,
									'subject_id' => $subject->id,
									'score' => $score,
								);
					}
					
				}
			}
			
			$data = array(
                'date' => $date,
				'academic_year' => $this->input->post('academic_year'),
				'year' => $this->input->post('year'),
                'month' => $this->input->post('month'),
				'class_id' => $class->id,
				'class_name' => $class->name,
                'section_id' => $section->id,
				'section_name' => $section->name,
				'note' => $note,
				'final' => $this->input->post('final'),
				'status' => 'completed',
                'updated_by' => $this->session->userdata('user_id')
            );

			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['final_file'] = $photo;
            }
			if (empty($scores)) {
                $this->form_validation->set_rules('student', lang("student"), 'required');
			}
        }
        
        if ($this->form_validation->run() == true && $this->schools_model->updateExamination($id, $data, $items)) {
            $this->session->set_userdata('remove_exls', 1);
			$this->session->set_flashdata('message', lang("examination_updated"));
			admin_redirect('schools/examinations');

        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$examanition = $this->schools_model->getExaminationByID($id);
			$subjects = false;
			$section = $this->schools_model->getSectionByID($examanition->section_id);
			if($section){
				$subject_ids = json_decode($section->subject_id);
				$subjects = $this->schools_model->getSubjectByIDs($subject_ids);
			}
			
		
			$examanition_items = $this->schools_model->getExaminationItems($id);
			krsort($examanition_items);
            $c = rand(100000, 9999999);
            foreach ($examanition_items as $item) {
                $student = $this->schools_model->getStudentByID($item->student_id);
				$row = json_decode('{}');
                $row->id = $student->id;
                $row->code = $student->code;
                $row->lastname = $student->lastname;
				$row->firstname = $student->firstname;
				$row->subject = $item->subject_id;
				$row->score = $item->score;
				$row->score_by_subject = $item->score_by_subject;
				$row->subject_name = $this->schools_model->convertJsonScore($item->score_by_subject);
                $pr[$c] = array('id' => $c, 'item_id' => $row->id, 'label' => $row->lastname." ".$row->firstname. " (" . $row->code . ")", 'row' => $row, 'subjects' => $subjects);
                $c++;
            }
			$this->data['examanition'] = $examanition; 
			$this->data['examanition_items'] = json_encode($pr);
			$this->data['programs']        = $this->schools_model->getPrograms();	
			$this->data['grades']          = $this->schools_model->getGrades();
			$this->data['skills']          = $this->schools_model->getSkills();
			$this->data['classes'] = $this->schools_model->getClasses();
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('edit_examination')));
            $meta = array('page_title' => lang('edit_examination'), 'bc' => $bc);
            $this->page_construct('schools/edit_examination', $meta, $this->data);
        }
    }
	
	public function delete_examination($id = null)
    {	
		$this->bpas->checkPermissions('examinations-delete');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteExamination($id)){
        		$this->session->set_flashdata('message', lang("examanition_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }

    function add_examination_excel()
    {
        $this->bpas->checkPermissions('examinations-add');
        $this->form_validation->set_rules('class', lang("class"), 'required');
		$this->form_validation->set_rules('section', lang("section"), 'required');
        if ($this->form_validation->run() == true) {
			$class = $this->schools_model->getClassByID($this->input->post('class'));
			$section = $this->schools_model->getSectionByID($this->input->post('section'));
            $date = $this->bpas->fld($this->input->post('date'));
			$academic_year = $this->input->post('academic_year');
			$month = $this->input->post('month');
			$subject_ids = json_decode($section->subject_id);
			$subjects = $this->schools_model->getSubjectByIDs($subject_ids);
			$this->load->helper('string');
            $name = random_string('md5').'.xls';
            $students = $this->schools_model->getStudentByClassID($class->id, $academic_year);   
			$rw = 0;
            foreach ($students as $student) {
				$items[] = array(
					'code' => $student->code,
					'lastname' => $student->lastname,
					'firstname' => $student->firstname,
					);
				$rw++;
            }
			$alphas = range('A', 'Z');
			$a = 3;
            if (!empty($items)) {
				$this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
				
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('lastname'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('firstname'));
				if($subjects){
					foreach($subjects as $subject){
						$this->excel->getActiveSheet()->getColumnDimension($alphas[$a])->setWidth(30);
						$this->excel->getActiveSheet()->SetCellValue($alphas[$a].'1', $subject->name.'  ['.$subject->code.']');
						$a++;
					}
				}
				
				$row = 2;
				foreach ($items as $item) {
                    $this->excel->getActiveSheet()->setCellValueExplicit('A' . $row, $item['code'],PHPExcel_Cell_DataType::TYPE_STRING);
					$this->excel->getActiveSheet()->setCellValueExplicit('B' . $row, $item['lastname'],PHPExcel_Cell_DataType::TYPE_STRING);
					$this->excel->getActiveSheet()->setCellValueExplicit('C' . $row, $item['firstname'],PHPExcel_Cell_DataType::TYPE_STRING);
					$row++;
                }
				
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $name . '.xls"');
				header('Cache-Control: max-age=0');
				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				$objWriter->save('./files/'.$name, 'w');
				
            } else {
                $this->session->set_flashdata('error', lang('no_student_found'));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
			
			
            $data = array(
                'date' => $date,
				'academic_year' => $academic_year,
				'year' => $this->input->post('year'),
                'month' => $month,
				'class_id' => $class->id,
                'class_name' => $class->name,
                'section_id' => $section->id,
                'section_name' => $section->name,
				'initial_file' => $name,
				'final' => $this->input->post('final'),
                'created_by' => $this->session->userdata('user_id')
            );

        }
        
        if ($this->form_validation->run() == true && $this->schools_model->addExaminationExcel($data)) {
            $this->session->set_flashdata('message', lang("examination_added"));
            admin_redirect('schools/examinations');

        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['classes'] = $this->schools_model->getClasses();
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('add_examination_excel')));
            $meta = array('page_title' => lang('add_examination_excel'), 'bc' => $bc);
            $this->page_construct('schools/add_examination_excel', $meta, $this->data);
        }
    }

    function finalize_examination($id)
    {
        $this->bpas->checkPermissions('examinations-add');
        $examination = $this->schools_model->getExaminationByID($id);
        if (!$examination || $examination->final_file) {
            $this->session->set_flashdata('error', lang("examination_finalized"));
            admin_redirect('schools/examinations');
        }
        $this->form_validation->set_rules('examination_id', lang("examination"), 'required');
        if ($this->form_validation->run() == true) {
            if ($_FILES['userfile']['size'] > 0) {
				$class = $this->schools_model->getClassByID($examination->class_id);
				$section = $this->schools_model->getSectionByID($examination->section_id);
                $note = $this->bpas->clear_tags($this->input->post('note'));
                $data = array(
					'status' => 'completed',
                    'updated_by' => $this->session->userdata('user_id'),
                    'note' => $note
                );
				$this->load->library('excel');
				$path = $_FILES["userfile"]["tmp_name"];
				$object = PHPExcel_IOFactory::load($path);
				$subject_ids = json_decode($section->subject_id);
				
				$subjects = $this->schools_model->getSubjectByIDs($subject_ids);
				$students = $this->schools_model->getStudentByClassID($class->id);
				
				foreach($object->getWorksheetIterator() as $worksheet){
					foreach($subject_ids as $subject_id){
						$subject_info = $this->schools_model->getSubjectByID($subject_id);
						$index_e = 3;
						for($k = 0; $k < count($subject_ids); $k++){
							$e_header = $worksheet->getCellByColumnAndRow($index_e, 1)->getValue();
							if($e_header){
								$e_header = explode(' [',$e_header);
								$e_header = explode(']',$e_header[1]);
								$e_header = $e_header[0];
								if(trim($e_header) == trim($subject_info->code)){
									$highestRow = $worksheet->getHighestRow();
									for($row=2; $row<=$highestRow; $row++){
										$code = $worksheet->getCellByColumnAndRow(0, $row)->getValue();	
										$score = $worksheet->getCellByColumnAndRow($index_e, $row)->getValue();	
										$scores[$code][$subject_info->id] = array('subject_name'=>$subject_info->name,'score'=>$score);
									}
								}
							}
							$index_e++;

						}
					}
				}
				$student_scores = false;
				foreach($object->getWorksheetIterator() as $worksheet){
					$highestRow = $worksheet->getHighestRow();
					for($row=2; $row<=$highestRow; $row++){
						$code = trim($worksheet->getCellByColumnAndRow(0, $row)->getValue());	
						if($code != ''){
							$student = $this->schools_model->getStudentByCode($code);
							$student_class = $this->schools_model->getStudentClassByStudent($student->id,$examination->class_id,$examination->academic_year);
							if($student && $student_class){
								if(isset($scores[$code]) && $scores[$code]){
									foreach($scores[$code] as $subject => $score){
										$student_scores[$student->id][$subject] = ($score['score'] > 0 ? $score['score'] : 0);
									}
								}
							}else{
								$this->session->set_flashdata('error', lang('check_student_code') . ' (' . $code . ') '. lang('line_no') . ' ' . $row);
								admin_redirect('schools/finalize_examination/'.$id);
							}
						}
						
					}
				}
				
				$checkExam = $this->schools_model->getExamination($examination->academic_year, $examination->year, $examination->month, $examination->class_id, $examination->section_id, $examination->final);
				if($students && $subjects){
					foreach($students as $student){
						foreach($subjects as $subject){
							$score = (isset($student_scores[$student->id][$subject->id]) ? $student_scores[$student->id][$subject->id]: 0);
							if($checkExam){
								$checkExaminationDetail = $this->schools_model->checkExaminationDetail($student->id, $subject->id, $examination->academic_year, $examination->year, $examination->month, $examination->class_id, $examination->section_id, $examination->final , $score);
								if($checkExaminationDetail){
									$old_score = $checkExaminationDetail->lastname.' '.$checkExaminationDetail->firstname.' '.lang('already_has_score_of').' '.$checkExaminationDetail->subject_name.' '.$checkExaminationDetail->score;
									$this->session->set_flashdata('error', $old_score);
									admin_redirect($_SERVER["HTTP_REFERER"]);
									exit;
								}
							}
							$items[] = array(
										'examination_id' => $id,
										'student_id' => $student->id,
										'subject_id' => $subject->id,
										'score' => $score,
									);
						}
						
					}
				}

				$this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('userfile')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $file_name = $this->upload->file_name;
                $data['final_file'] = $file_name;
            }
        }
        
        if ($this->form_validation->run() == true && $this->schools_model->finalizeExamination($id, $data, $items)) {
            $this->session->set_flashdata('message', lang("examination_finalized"));
            admin_redirect('schools/examinations');
        } else {

            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['examination'] = $examination;
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => admin_url('schools/examinations'), 'page' => lang('examinations')), array('link' => '#', 'page' => lang('finalize_examination')));
            $meta = array('page_title' => lang('finalize_examination'), 'bc' => $bc);
            $this->page_construct('schools/finalize_examination', $meta, $this->data);

        }
    }
	
	function examination_actions()
	{
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
				if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('examinations-delete');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteExamination($id);
                    }
                    $this->session->set_flashdata('message', lang("examanition_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('examanition');
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('year'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('month'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('class'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('section'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('final'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('status'));
                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $examanition = $this->schools_model->getExaminationByID($id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrsd($examanition->date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $examanition->academic_year);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $examanition->year);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $examanition->month);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $examanition->class_name);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $examanition->section_name);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, ($examanition->final==1 ? lang('yes') : lang('no')));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, lang($examanition->status));
						$row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);



                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'examanition_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function suggestions()
    {
        $term = $this->input->get('term', true); 
        if (strlen($term) < 1 || !$term) {
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . admin_url('welcome') . "'; }, 10);</script>");
        }
        $analyzed = $this->bpas->analyze_term($term);
        $sr = $analyzed['term'];
		if($this->input->get('class_id')){
			$class_id = $this->input->get('class_id', true);
		}else{
			$class_id = false;
		}
		if($this->input->get('academic_year')){
			$academic_year = $this->input->get('academic_year', true);
		}else{
			$academic_year = false;
		}
		$subjects = false;
		if($this->input->get("section_id")){
			$section = $this->schools_model->getSectionByID($this->input->get("section_id"));
			if($section){
				$subject_ids = json_decode($section->subject_id);
				$subjects = $this->schools_model->getSubjectByIDs($subject_ids);
			}
		}
        $rows = $this->schools_model->getStudentNames($sr, $class_id, $academic_year);
        if ($rows) {
            foreach ($rows as $row) {		
               $pr[] = array('id' => str_replace(".", "", microtime(true)), 'item_id' => $row->id, 'label' => $row->lastname." ".$row->firstname. " (" . $row->code . ")", 'row' => $row, 'subjects' => $subjects);
			}
			$this->bpas->send_json($pr);
        } else {
            $this->bpas->send_json(array(array('id' => 0, 'label' => lang('no_match_found'), 'value' => $term)));
        }
    }
	
	public function credit_scores()
	{	
		$this->bpas->checkPermissions('credit_scores');	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('credit_scores')));
		$meta = array('page_title' => lang('credit_scores'), 'bc' => $bc);
		$this->page_construct('schools/credit_scores', $meta, $this->data);
	}

	public function getCreditScores()
	{	
		$this->bpas->checkPermissions('credit_scores');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_credit_score") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_credit_score/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_credit_score') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_credit_score/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_credit_score').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					{$this->db->dbprefix('sh_credit_scores')}.id as id, 
					{$this->db->dbprefix('sh_credit_scores')}.credit,
					{$this->db->dbprefix('sh_programs')}.name as program,
					{$this->db->dbprefix('sh_credit_scores')}.grade_name,
					{$this->db->dbprefix('sh_credit_scores')}.subject_name,
					{$this->db->dbprefix('sh_credit_scores')}.full_score,
					{$this->db->dbprefix('sh_credit_scores')}.max_score,
					{$this->db->dbprefix('sh_credit_scores')}.min_score,
					{$this->db->dbprefix('sh_credit_scores')}.description,
					{$this->db->dbprefix('sh_credit_scores')}.color
					")
            ->from("sh_credit_scores")
			->join("sh_programs","sh_programs.id = sh_credit_scores.program_id","left")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_credit_score()
	{
		$this->bpas->checkPermissions('credit_scores',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('credit', lang("credit"), 'required');
		$this->form_validation->set_rules('program', lang("program"), 'required');
		if ($this->form_validation->run() == true) {
			$grades = $this->schools_model->getGradeByIDs($post['grade']);
			$subjects = $this->schools_model->getSubjectByIDs($post['subject']);
			$l = 0;
			$grade_name = '';
			if($grades){
				foreach($grades as $grade){
					if($l==0){
						$grade_name = $grade->name;
						$l = 1;
					}else{
						$grade_name .= ','.$grade->name;
					}
				}
			}
			
			$s = 0;
			$subject_name = '';
			if($subjects){
				foreach($subjects as $subject){
					if($s==0){
						$subject_name = $subject->name;
						$s = 1;
					}else{
						$subject_name .= ','.$subject->name;
					}
				}
			}
			
			$data = array(
				'credit'  => $post['credit'],
				'program_id' => $post['program'],
				'grade_id' => json_encode($post['grade']),
				'grade_name' => $grade_name,
				'subject_id' => json_encode($post['subject']),
				'subject_name' => $subject_name,
				'full_score' => $post['full_score'],
				'cal_score' => $post['cal_score'],
				'min_score' => $post['min_score'],
				'max_score' => $post['max_score'],
				'color' => $post['color'],
				'description' => $this->bpas->clear_tags($post['description']),
			);

		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	
		
		if ($this->form_validation->run() == true && $id = $this->schools_model->addCreditScore($data)) {
            $this->session->set_flashdata('message', $this->lang->line("credit_score_added"));
            admin_redirect("schools/credit_scores");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['subjects'] = $this->schools_model->getSubjects();
			$this->load->view($this->theme . 'schools/add_credit_score', $this->data);	
		}	
	}
	
	public function edit_credit_score($id = null)
	{		
		$this->bpas->checkPermissions('credit_scores',true);
		$post = $this->input->post();		
		$this->form_validation->set_rules('credit', lang("credit"), 'required');
		$this->form_validation->set_rules('program', lang("program"), 'required');
		if ($this->form_validation->run() == true) {	
			$grades = $this->schools_model->getGradeByIDs($post['grade']);
			$subjects = $this->schools_model->getSubjectByIDs($post['subject']);
			$l = 0;
			$grade_name = '';
			if($grades){
				foreach($grades as $grade){
					if($l==0){
						$grade_name = $grade->name;
						$l = 1;
					}else{
						$grade_name .= ','.$grade->name;
					}
				}
			}
			
			$s = 0;
			$subject_name = '';
			if($subjects){
				foreach($subjects as $subject){
					if($s==0){
						$subject_name = $subject->name;
						$s = 1;
					}else{
						$subject_name .= ','.$subject->name;
					}
				}
			}
			$data = array(
				'credit'  => $post['credit'],
				'program_id' => $post['program'],
				'grade_id' => json_encode($post['grade']),
				'grade_name' => $grade_name,
				'subject_id' => json_encode($post['subject']),
				'subject_name' => $subject_name,
				'full_score' => $post['full_score'],
				'cal_score' => $post['cal_score'],
				'min_score' => $post['min_score'],
				'max_score' => $post['max_score'],
				'color' => $post['color'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateCreditScore($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("credit_score_updated"));
            admin_redirect("schools/credit_scores");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$credit_score = $this->schools_model->getCreditScoreByID($id);
			$this->data['credit_score'] = $credit_score;
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['subjects'] = $this->schools_model->getSubjects();
			$this->load->view($this->theme . 'schools/edit_credit_score', $this->data);
		}			
	}
	
	public function delete_credit_score($id = null)
    {	
		$this->bpas->checkPermissions('credit_scores');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteCreditScore($id)){
        		$this->session->set_flashdata('message', lang("credit_score_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function credit_score_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }

        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
				
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('credit_scores');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteCreditScore($id);
                    }
                    $this->session->set_flashdata('message', lang("credit_score_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {

                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('credit_score');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('credit'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('program'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('grade'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('subject'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('full_score'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('max_score'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('min_score'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('description'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $credit_score = $this->schools_model->getCreditScoreByID($id);
						$program = $this->schools_model->getProgramByID($credit_score->program_id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $credit_score->credit);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $program->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $credit_score->grade_name);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $credit_score->subject_name);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $credit_score->full_score);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $credit_score->max_score);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $credit_score->min_score);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->remove_tag($credit_score->description));
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(40);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(40);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);



                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'credit_scores_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	
	public function get_subject_by_program_grade(){
		$program_id = $this->input->get("program_id");
		$grade_id = $this->input->get("grade_id");
		if($this->input->get("subject_id")){
			$subject_id = $this->input->get("subject_id");
		}else{
			$subject_id = '';
		}
		$sections = $this->schools_model->getSectionByProgramGrade($program_id,$grade_id);
		$sub_opt = array();
		if($sections){
			$sub_array = array();
			foreach($sections as $section){
				$subject_ids = json_decode($section->subject_id);
				foreach($subject_ids as $subject){
					$sub_array[] = $subject;
				}
			}
			
			$rows = $this->schools_model->getSubjectByIDs($sub_array);
			foreach($rows as $row){
				$sub_opt[$row->id] = $row->code.' - '.$row->name;
			}
		}
		$subjects = form_dropdown('subject', $sub_opt, $subject_id , 'id="subject" class="form-control select" required');
		echo json_encode(array("result" => $subjects));
	}
	
	public function get_classes(){
		$biller_id = $this->input->get("biller_id") ? $this->input->get("biller_id") : false;
		$program_id = $this->input->get("program_id") ? $this->input->get("program_id") : false;
		$grade_id = $this->input->get("grade_id") ? $this->input->get("grade_id") : false;
		$classes = $this->schools_model->getClasses($biller_id,$program_id,$grade_id);
		echo json_encode($classes);
	}
	
	public function students_report()
	{
		$this->bpas->checkPermissions('student_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['students'] = $this->schools_model->getStudents();
		$bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('students_report')));
		$meta = array('page_title' => lang('students_report'), 'bc' => $bc);	
		$this->page_construct('schools/student_report', $meta, $this->data);
	}

	function getStudentReport($xls = NULL)
    {
        $this->bpas->checkPermissions('student_report', TRUE);
		$biller        = $this->input->get('biller') ? $this->input->get('biller') : NULL;		
		$program       = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade         = $this->input->get('grade') ? $this->input->get('grade') : NULL;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date("Y");
		$class         = $this->input->get('class') ? $this->input->get('class') : NULL;
		$student       = $this->input->get('student') ? $this->input->get('student') : NULL;
		$status        = $this->input->get('status') ? $this->input->get('status') : NULL;
		$timeshift     = $this->input->get('timeshift') ? $this->input->get('timeshift') : NULL;
        if ($xls) {
            $this->db->select("
            		CONCAT(".$this->db->dbprefix('sh_study_infos').".academic_year,' - ',".$this->db->dbprefix('sh_study_infos').".academic_year + 1) as academic_year,
            		companies.company,
					sh_students.code,
					CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as full_name,
					CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as full_name_kh,
					sh_students.gender,
					DATE_FORMAT(".$this->db->dbprefix('sh_students').".dob, '%Y-%m-%d %T') as dob,
					sh_study_infos.program,
                	CONCAT({$this->db->dbprefix('sh_skills')}.code, ' - ', {$this->db->dbprefix('sh_skills')}.name) as skill,
					sh_study_infos.grade,
					sh_study_infos.class,
					custom_field.name as timeshift,
					sh_study_infos.status
				")
			->from("sh_students")
			->join("sh_study_infos","sh_study_infos.student_id = sh_students.id","left")
			->join("sh_skills", "sh_skills.id=sh_study_infos.skill_id", "left")
			->join("companies","companies.id = sh_study_infos.biller_id","left")
			->join("custom_field", "custom_field.id=sh_study_infos.timeshift_id", "left")
			->group_by("sh_study_infos.id");
			if($class){
				$this->db->where('sh_study_infos.class_id', $class);
			}
			if($status){
				$this->db->where('sh_study_infos.status', $status);
			}
			if($student){
				$this->db->where('sh_study_infos.student_id', $student);
			}
			if($academic_year){
				$this->db->where('sh_study_infos.academic_year', $academic_year);
			}
			if ($biller) {
                $this->db->where('sh_students.biller_id', $biller);
            }
			if ($program) {
                $this->db->where('sh_study_infos.program_id', $program);
            }
			if ($grade) {
                $this->db->where('sh_study_infos.grade_id', $grade);
            }
            if ($timeshift) {
                $this->db->where('sh_study_infos.timeshift_id', $timeshift);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sh_students.biller_id =', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('student_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('academic_year'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('student_id'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('full_name'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('full_name_latin'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('dob'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('program'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('skill'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('class'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('timeshift'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('status'));
                $row = 2;
                foreach ($data as $data_row) {
                	$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->academic_year);
                	$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->number);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->full_name);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->full_name_kh);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, lang($data_row->gender));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->hrsd($data_row->dob));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->program);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->skill);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->grade);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->class);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->timeshift);
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, lang($data_row->status));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $filename = 'student_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
			$this->datatables->select("
					'' as row_num,
					CONCAT(".$this->db->dbprefix('sh_study_infos').".academic_year,' - ',".$this->db->dbprefix('sh_study_infos').".academic_year + 1) as academic_year,
					companies.company,
					sh_students.number,
					CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as full_name,
					CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as full_name_kh,
					sh_students.gender,
					DATE_FORMAT(".$this->db->dbprefix('sh_students').".dob, '%Y-%m-%d %T') as dob,
					sh_study_infos.program,
					CONCAT({$this->db->dbprefix('sh_skills')}.code, ' - ', {$this->db->dbprefix('sh_skills')}.name) as skill,
					sh_study_infos.grade,
					sh_study_infos.class,
					custom_field.name as timeshift,
					sh_study_infos.status,
					sh_study_infos.type,
					sh_students.id
				")
			->from("sh_students")
			->join("sh_study_infos","sh_study_infos.student_id = sh_students.id","left")
			->join("sh_skills", "sh_skills.id=sh_study_infos.skill_id", "left")
			->join("companies","companies.id = sh_study_infos.biller_id","left")
			->join("custom_field", "custom_field.id=sh_study_infos.timeshift_id", "left")
			->group_by("sh_study_infos.id");
			if($class){
				$this->datatables->where('sh_study_infos.class_id', $class);
			}
			if($status){
				$this->datatables->where('sh_study_infos.status', $status);
			}
			if($student){
				$this->datatables->where('sh_study_infos.student_id', $student);
			}
			if($academic_year){
				$this->datatables->where('sh_study_infos.academic_year', $academic_year);
			}
			if ($biller) {
                $this->datatables->where('sh_students.biller_id', $biller);
            }
			if ($program) {
                $this->datatables->where('sh_study_infos.program_id', $program);
            }
			if ($grade) {
                $this->datatables->where('sh_study_infos.grade_id', $grade);
            }
            if ($timeshift) {
                $this->datatables->where('sh_study_infos.timeshift_id', $timeshift);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sh_students.biller_id =', $this->session->userdata('biller_id'));
			}
            echo $this->datatables->generate();
        }
    }
	
	public function study_info_report()
	{
		$this->bpas->checkPermissions('study_info_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('study_info_report')));
		$meta = array('page_title' => lang('study_info_report'), 'bc' => $bc);	
		$this->page_construct('schools/study_info_report',$meta,$this->data);
	}

	function getStudyInfoReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('study_info_report', TRUE);
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;		
		$program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date("Y");
        if ($pdf || $xls) {
            $this->load->library('datatables');
			$this->db->select("sh_students.biller,
									CONCAT(".$this->db->dbprefix('sh_study_infos').".academic_year,' - ',(".$this->db->dbprefix('sh_study_infos').".academic_year + 1)) as academic_year, 
									sh_study_infos.program,
									sh_study_infos.grade,
									sh_study_infos.class,
									count(".$this->db->dbprefix('sh_study_infos').".id) as student")
							->group_by("sh_students.biller_id,sh_study_infos.academic_year,sh_study_infos.program,sh_study_infos.grade,class")
							->join("sh_students","sh_students.id = sh_study_infos.student_id","INNER")
							->from("sh_study_infos");
			if($academic_year){
				$this->db->where('sh_study_infos.academic_year', $academic_year);
			}
			if ($biller) {
                $this->db->where('sh_students.biller_id', $biller);
            }
			if ($program) {
                $this->db->where('sh_study_infos.program_id', $program);
            }
			if ($grade) {
                $this->db->where('sh_study_infos.grade_id', $grade);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sh_students.biller_id =', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('study_info_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('academic_year'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('program'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('class'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('student'));

                $row = 2;
                $total_student = 0;
                foreach ($data as $data_row) {
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->academic_year);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->program);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->grade);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->class);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->student);
                    $total_student += $data_row->student;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row . ":F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatMoney($total_student));
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);

                $filename = 'study_info_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            admin_redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');
			$this->datatables->select("sh_students.biller,
									CONCAT(".$this->db->dbprefix('sh_study_infos').".academic_year,' - ',(".$this->db->dbprefix('sh_study_infos').".academic_year + 1)) as academic_year,
									sh_study_infos.grade,
									sh_study_infos.class,
									count(".$this->db->dbprefix('sh_study_infos').".id) as student")
							->group_by("sh_students.biller_id,sh_study_infos.academic_year,sh_study_infos.program,sh_study_infos.grade,sh_study_infos.class")
							->join("sh_students","sh_students.id = sh_study_infos.student_id","INNER")
							->order_by("length(".$this->db->dbprefix('sh_study_infos').".grade),".$this->db->dbprefix('sh_study_infos').".grade")
							->from("sh_study_infos");
			
			if($academic_year){
				$this->datatables->where('sh_study_infos.academic_year', $academic_year);
			}
			if ($biller) {
                $this->datatables->where('sh_students.biller_id', $biller);
            }
			if ($program) {
                $this->datatables->where('sh_study_infos.program_id', $program);
            }
			if ($grade) {
                $this->datatables->where('sh_study_infos.grade_id', $grade);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sh_students.biller_id =', $this->session->userdata('biller_id'));
			}
            echo $this->datatables->generate();

        }

    }
	
	
	public function examanition_report()
	{
		$this->bpas->checkPermissions('examanition_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['subjects'] = $this->schools_model->getSubjects();
		$this->data['students'] = $this->schools_model->getStudents();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('examanition_report')));
		$meta = array('page_title' => lang('examanition_report'), 'bc' => $bc);	
		$this->page_construct('schools/examanition_report',$meta,$this->data);
	}
	
	
	function getExaminationReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('examanition_report', TRUE);
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;		
		$program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$year = $this->input->get('year') ? $this->input->get('year') : NULL;
		$month = $this->input->get('month') ? $this->input->get('month') : NULL;
		$subject = $this->input->get('subject') ? $this->input->get('subject') : NULL;
		$class = $this->input->get('class') ? $this->input->get('class') : NULL;
		$student = $this->input->get('student') ? $this->input->get('student') : NULL;
		
		if ($pdf || $xls) {
            $this->load->library('datatables');
			$this->db->select("sh_scores.biller_name,
								sh_scores.academic_year,
								sh_scores.year,
								sh_scores.month,
								sh_scores.program_name,
								sh_scores.grade_name,
								sh_scores.class_name,
								sh_scores.subject_name,
								concat(".$this->db->dbprefix("sh_students").".lastname,' ',".$this->db->dbprefix("sh_students").".firstname) as student,
								sh_scores.score,
								sh_scores.rank,
								sh_scores.credit")
							->join("sh_students","sh_students.id = sh_scores.student_id","left")
							->from("sh_scores");
			if($academic_year){
				$this->db->where("sh_scores.academic_year",$academic_year);
			}
			if($year){
				$this->db->where("sh_scores.year",$year);
			}
			if ($biller) {
				$this->db->where("sh_scores.biller_id",$biller);
			}
			if ($program) {
				$this->db->where("sh_scores.program_id",$program);
			}
			if ($class) {
				$this->db->where("sh_scores.class_id",$class);
			}
			if ($grade) {
				$this->db->where("sh_scores.grade_id",$grade);
			}
			if ($month) {
				$this->db->where("sh_scores.month",$month);
			}
			if ($subject) {
				$this->db->where("sh_scores.subject_id",$subject);
			}
			if ($student) {
				$this->db->where("sh_scores.student_id",$student);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sh_scores.biller_id =', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('study_info_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('academic_year'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('year'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('month'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('program'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('class'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('subject'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('student'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('score'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('rank'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('credit'));

                $row = 2;
                foreach ($data as $data_row) {
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->biller_name);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->academic_year);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->year);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->month);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->program_name);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grade_name);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->class_name);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->subject_name);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->student);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->score);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->rank);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->credit);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);

                $filename = 'examanition_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            admin_redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');
			$this->datatables->select("sh_scores.biller_name,
								sh_scores.academic_year,
								sh_scores.year,
								sh_scores.month,
								sh_scores.program_name,
								sh_scores.grade_name,
								sh_scores.class_name,
								sh_scores.subject_name,
								concat(".$this->db->dbprefix("sh_students").".lastname,' ',".$this->db->dbprefix("sh_students").".firstname) as student,
								sh_scores.score,
								sh_scores.rank,
								sh_scores.credit,
								CONCAT(".$this->db->dbprefix("sh_scores").".credit,'_',".$this->db->dbprefix("sh_scores").".color) as credit")
							->join("sh_students","sh_students.id = sh_scores.student_id","left")	
							->from("sh_scores");
			if($academic_year){
				$this->datatables->where("sh_scores.academic_year",$academic_year);
			}
			if($year){
				$this->datatables->where("sh_scores.year",$year);
			}
			if ($biller) {
				$this->datatables->where("sh_scores.biller_id",$biller);
			}
			if ($program) {
				$this->datatables->where("sh_scores.program_id",$program);
			}
			if ($class) {
				$this->datatables->where("sh_scores.class_id",$class);
			}
			if ($grade) {
				$this->datatables->where("sh_scores.grade_id",$grade);
			}
			if ($month) {
				$this->datatables->where("sh_scores.month",$month);
			}
			if ($subject) {
				$this->datatables->where("sh_scores.subject_id",$subject);
			}
			if ($student) {
				$this->datatables->where("sh_scores.student_id",$student);
			}	
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sh_scores.biller_id =', $this->session->userdata('biller_id'));
			}
							
            echo $this->datatables->generate();

        }

    }
	
	
	
	
	public function monthly_class_result_report()
	{
		$this->bpas->checkPermissions('monthly_class_result_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = $this->input->post('year') ? $this->input->post('year') : false;
		$month = $this->input->post('month') ? $this->input->post('month') : false;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['data'] = $this->schools_model->getMonthlyScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['student_scores'] = $this->schools_model->getMonthlyStudentScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('monthly_class_result_report')));
		$meta = array('page_title' => lang('monthly_class_result_report'), 'bc' => $bc);	
		$this->page_construct('schools/monthly_class_result_report',$meta,$this->data);
	}
	
	
	public function class_result_report()
	{
		$this->bpas->checkPermissions('class_result_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = $this->input->post('year') ? $this->input->post('year') : false;
		$month = $this->input->post('month') ? $this->input->post('month') : false;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$final = 3; 
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['data'] = $this->schools_model->getMonthlyScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student,$final);
		$this->data['student_scores'] = $this->schools_model->getMonthlyStudentScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student,$final);
		$this->data['sectionly_scores'] = $this->schools_model->getSectionlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('class_result_report')));
		$meta = array('page_title' => lang('class_result_report'), 'bc' => $bc);	
		$this->page_construct('schools/class_result_report',$meta,$this->data);
	}
	
	
	public function monthly_top_five_report()
	{
		$this->bpas->checkPermissions('monthly_top_five_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = $this->input->post('year') ? $this->input->post('year') : false;
		$month = $this->input->post('month') ? $this->input->post('month') : false;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['student_scores'] = $this->schools_model->getMonthlyStudentScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('monthly_top_five_report')));
		$meta = array('page_title' => lang('monthly_top_five_report'), 'bc' => $bc);	
		$this->page_construct('schools/monthly_top_five_report',$meta,$this->data);
	}
	
	public function section_by_month_report()
	{
		$this->bpas->checkPermissions('section_by_month_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = $this->input->post('year') ? $this->input->post('year') : false;
		$month = $this->input->post('month') ? $this->input->post('month') : false;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['data'] = $this->schools_model->getMonthlyStudentScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('section_by_month_report')));
		$meta = array('page_title' => lang('section_by_month_report'), 'bc' => $bc);	
		$this->page_construct('schools/section_by_month_report',$meta,$this->data);
	}
	
	
	public function sectionly_class_result_report()
	{
		$this->bpas->checkPermissions('sectionly_class_result_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$final = true;
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = $this->input->post('year') ? $this->input->post('year') : false;
		$month = $this->input->post('month') ? $this->input->post('month') : false;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['data'] = $this->schools_model->getMonthlyScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student,$final);
		$this->data['monthly_scores'] = $this->schools_model->getMonthlyStudentScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student,$final);
		$this->data['sectionly_scores'] = $this->schools_model->getSectionlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('sectionly_class_result_report')));
		$meta = array('page_title' => lang('sectionly_class_result_report'), 'bc' => $bc);	
		$this->page_construct('schools/sectionly_class_result_report',$meta,$this->data);
	}

	
	public function yearly_class_result_report()
	{
		$this->bpas->checkPermissions('yearly_class_result_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = false;
		$month = false;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['data'] = $this->schools_model->getSectionlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$this->data['yearly_scores'] = $this->schools_model->getYearlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('yearly_class_result_report')));
		$meta = array('page_title' => lang('yearly_class_result_report'), 'bc' => $bc);	
		$this->page_construct('schools/yearly_class_result_report',$meta,$this->data);
	}
	
	public function yearly_top_five_report()
	{
		$this->bpas->checkPermissions('yearly_top_five_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = false;
		$month = false;
		$final = true;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['data'] = $this->schools_model->getSectionlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$this->data['yearly_scores'] = $this->schools_model->getYearlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('yearly_top_five_report')));
		$meta = array('page_title' => lang('yearly_top_five_report'), 'bc' => $bc);	
		$this->page_construct('schools/yearly_top_five_report',$meta,$this->data);
	}
	
	public function yearly_subject_result_report()
	{
		$this->bpas->checkPermissions('yearly_subject_result_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = false;
		$month = false;
		$final = true;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['data'] = $this->schools_model->getYearlyScores($biller,$program,$grade,$academic_year,$class,$student);

		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('yearly_subject_result_report')));
		$meta = array('page_title' => lang('yearly_subject_result_report'), 'bc' => $bc);	
		$this->page_construct('schools/yearly_subject_result_report',$meta,$this->data);
	}
	
	
	public function sectionly_subject_result_report()
	{
		$this->bpas->checkPermissions('sectionly_subject_result_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = false;
		$month = false;
		$final = true;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['monthly_scores'] = $this->schools_model->getMonthlyScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student,$final);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('sectionly_subject_result_report')));
		$meta = array('page_title' => lang('sectionly_subject_result_report'), 'bc' => $bc);	
		$this->page_construct('schools/sectionly_subject_result_report',$meta,$this->data);
	}
	
	public function result_by_student_form()
	{
		$this->bpas->checkPermissions('result_by_student_form');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = false;
		$month = false;
		$final = true;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['attendances'] = $this->schools_model->getStudentAttendances($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['monthly_scores'] = $this->schools_model->getMonthlyScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['monthly_results'] = $this->schools_model->getMonthlyStudentScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['sectionly_scores'] = $this->schools_model->getMonthlyScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student, $final);
		$this->data['sectionly_results'] = $this->schools_model->getMonthlyStudentScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student,$final);
		$this->data['f_sectionly_results'] = $this->schools_model->getSectionlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$this->data['yearly_scores'] = $this->schools_model->getYearlyScores($biller,$program,$grade,$academic_year,$class,$student);
		$this->data['yearly_results'] = $this->schools_model->getYearlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('result_by_student_form')));
		$meta = array('page_title' => lang('result_by_student_form'), 'bc' => $bc);	
		$this->page_construct('schools/result_by_student_form',$meta,$this->data);
	}
	
	public function monthly_top_five_form()
	{
		$this->bpas->checkPermissions('monthly_top_five_form');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = $this->input->post('year') ? $this->input->post('year') : false;
		$month = $this->input->post('month') ? $this->input->post('month') : false;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['student_scores'] = $this->schools_model->getMonthlyStudentScores($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('monthly_top_five_form')));
		$meta = array('page_title' => lang('monthly_top_five_form'), 'bc' => $bc);	
		$this->page_construct('schools/monthly_top_five_form',$meta,$this->data);
	}
	
	public function yearly_top_five_form()
	{
		$this->bpas->checkPermissions('yearly_top_five_form');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = false;
		$month = false;
		$final = true;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getScoreClass($biller,$program,$grade,$academic_year,$year,$month,$class,$student);
		$this->data['data'] = $this->schools_model->getSectionlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$this->data['yearly_scores'] = $this->schools_model->getYearlyStudentScores($biller,$program,$grade,$academic_year,$class,$student);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('yearly_top_five_form')));
		$meta = array('page_title' => lang('yearly_top_five_form'), 'bc' => $bc);	
		$this->page_construct('schools/yearly_top_five_form',$meta,$this->data);
	}
	
	function attendances()
    {
        $this->bpas->checkPermissions('attendances');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year']  = ($this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller']  = null;
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['skills'] = $this->schools_model->getSkills();

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('attendances')));
        $meta = array('page_title' => lang('attendances'), 'bc' => $bc);
        $this->page_construct('schools/attendances', $meta, $this->data);
    }

    function getAttendances__()
    {
        $this->bpas->checkPermissions('attendances', TRUE);
		$detail_link = '<a href="'.admin_url("schools/view_attendance/$1") . '" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa-file-text-o"></i>'.lang('view_attendance').'</a>';
		$delete_link = "<a href='#' class='po' title='" . lang("delete_attendance") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_attendance/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_attendance') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
								<li>'.$detail_link.'</li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
		
		$this->load->library('datatables');
        $this->datatables
            ->select("sh_attendances.id as id, DATE_FORMAT(".$this->db->dbprefix('sh_attendances').".date, '%Y-%m-%d %T') as date, academic_year, year, month, class_name, section_name, status, initial_file, final_file")
            ->from('sh_attendances');

		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_attendances.biller_id =', $this->session->userdata('biller_id'));
		}
        $this->datatables->add_column('Actions', $action_link, "id");
        echo $this->datatables->generate();
    }

    function getAttendances()
    {
        $this->bpas->checkPermissions('attendances', TRUE);
        $biller          = $this->input->get('biller') ? $this->input->get('biller') : null;
		$academic_year   = $this->input->get('academic_year') ? $this->input->get('academic_year') : date('Y');
		$skill           = $this->input->get('skill') ? $this->input->get('skill') : null;
		$grade           = $this->input->get('grade') ? $this->input->get('grade') : null;
		$class           = $this->input->get('class') ? $this->input->get('class') : null;
		$timeshift       = $this->input->get('timeshift') ? $this->input->get('timeshift') : null;
		$attendance_date = $this->input->get('attendance_date') ? $this->input->get('attendance_date') : null;
		if ($attendance_date) {
	        $attendance_date = $this->bpas->fld($attendance_date);
	    }
		$detail_link = '<a href="'.admin_url("schools/view_attendance/$1") . '" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa-file-text-o"></i>'.lang('view_attendance').'</a>';
		$delete_link = "<a href='#' class='po' title='" . lang("delete_attendance") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_attendance/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_attendance') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
								<li>'.$detail_link.'</li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
		
		$this->load->library('datatables');
        $this->datatables
            ->select("
	            	sh_attendances.id as id, 
	            	CONCAT(".$this->db->dbprefix('sh_attendances').".academic_year,' - ',".$this->db->dbprefix('sh_attendances').".academic_year + 1) as academic_year,
	            	DATE_FORMAT(".$this->db->dbprefix('sh_attendances').".date, '%Y-%m-%d %T') as date, 
	            	DATE_FORMAT(".$this->db->dbprefix('sh_attendances').".day, '%Y-%m-%d') as attendance_date, 
	            	sh_skills.name as skill,
	            	sh_grades.name as grade,
	            	sh_attendances.section_name as semester,
	            	sh_attendances.class_name as class, 
	            	CONCAT(
	            		{$this->db->dbprefix('sh_subjects')}.name, ' ', 
	            		IF(
	            			{$this->db->dbprefix('sh_teachers')}.id IS NOT NULL, 
	            			CONCAT('(Teacher: ', {$this->db->dbprefix('sh_teachers')}.firstname, ' ', {$this->db->dbprefix('sh_teachers')}.lastname, ')'),
	            			''
	            		)
	            	) as sj_teacher
            	")
            ->from('sh_attendances')
            ->join('sh_table_times', 'sh_table_times.id=sh_attendances.table_time_id', 'left')
            ->join('sh_classes', 'sh_classes.id=sh_attendances.class_id', 'left')
            ->join('sh_skills', 'sh_skills.id=sh_classes.skill_id', 'left')
            ->join('sh_grades', 'sh_grades.id=sh_classes.grade_id', 'left')
            ->join('sh_subjects', 'sh_subjects.id=sh_table_times.subject_id', 'left')
            ->join('sh_teachers', 'sh_teachers.id=sh_table_times.teacher_id', 'left');

		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_attendances.biller_id =', $this->session->userdata('biller_id'));
		}
		if ($biller) {
			$this->datatables->where('sh_attendances.biller_id', $biller);
		}
		if ($academic_year) {
			$this->datatables->where('sh_attendances.academic_year', $academic_year);
		}
		if ($skill) {
			$this->datatables->where('sh_skills.id', $skill);
		}
		if ($grade) {
			$this->datatables->where('sh_attendances.grade_id', $grade);
		}
		if ($class) {
			$this->datatables->where('sh_attendances.class_name', $class);
		}
		if ($timeshift) {
			$this->datatables->where('sh_classes.timeshift_id', $timeshift);
		}
		if ($attendance_date) {
			$this->datatables->where('sh_attendances.day', $attendance_date);
		}
        $this->datatables->add_column('Actions', $action_link, "id");
        echo $this->datatables->generate();
    }
		
	function add_attendance_excel(){
        $this->bpas->checkPermissions('attendances-add');
        $this->form_validation->set_rules('class', lang("class"), 'required');
        if ($this->form_validation->run() == true) {
			$class = $this->schools_model->getClassByID($this->input->post('class'));
            $date = $this->bpas->fld($this->input->post('date'));
			$academic_year = $this->input->post('academic_year');
			$year = $this->input->post('year');
			$month = $this->input->post('month');
			$section = $this->schools_model->getSectionByID($this->input->post('section'));

			$this->load->helper('string');
            $name = random_string('md5').'.xls';
            $students = $this->schools_model->getStudentByClassID($class->id, $academic_year);   
			$rw = 0;
            foreach ($students as $student) {
				$items[] = array(
					'code' => $student->code,
					'lastname' => $student->lastname,
					'firstname' => $student->firstname,
					);
				$rw++;
            }
			$a = 3;
            if (!empty($items)) {
				$this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(12);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(12);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(12);
				
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('lastname'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('firstname'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('absent'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('permission'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('late'));
				$row = 2;
				foreach ($items as $item) {
                    $this->excel->getActiveSheet()->setCellValueExplicit('A' . $row, $item['code'],PHPExcel_Cell_DataType::TYPE_STRING);
					$this->excel->getActiveSheet()->setCellValueExplicit('B' . $row, $item['lastname'],PHPExcel_Cell_DataType::TYPE_STRING);
					$this->excel->getActiveSheet()->setCellValueExplicit('C' . $row, $item['firstname'],PHPExcel_Cell_DataType::TYPE_STRING);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, 0);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, 0);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, 0);
					$row++;
                }
				
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $name . '.xls"');
				header('Cache-Control: max-age=0');
				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				$objWriter->save('./files/'.$name, 'w');
				
            } else {
                $this->session->set_flashdata('error', lang('no_student_found'));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }

            $data = array(
                'date' => $date,
				'academic_year' => $academic_year,
				'biller_id' => $class->biller_id,
				'section_id' => $section->id,
				'program_id' => $class->program_id,
				'grade_id' => $class->grade_id,
				'section_name' => $section->name,
				'class_id' => $class->id,
                'class_name' => $class->name,
				'year' => $year,
				'month' => $month,
				'initial_file' => $name,
                'created_by' => $this->session->userdata('user_id')
            );

        }

        if ($this->form_validation->run() == true && $this->schools_model->addAttendanceExcel($data)) {
            $this->session->set_flashdata('message', lang("attendance_added"));
            admin_redirect('schools/attendances');

        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['classes'] = $this->schools_model->getClasses();
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('add_attendance_excel')));
            $meta = array('page_title' => lang('add_attendance_excel'), 'bc' => $bc);
            $this->page_construct('schools/add_attendance_excel', $meta, $this->data);
        }

    }
	
	
	function finalize_attendance($id)
    {
        $this->bpas->checkPermissions('attendances-add');
        $attendance = $this->schools_model->getAttendanceByID($id);
        if (!$attendance || $attendance->final_file) {
            $this->session->set_flashdata('error', lang("attendance_finalized"));
            admin_redirect('schools/attendances');
        }
        $this->form_validation->set_rules('attendance_id', lang("attendance"), 'required');
        if ($this->form_validation->run() == true) {
            if ($_FILES['userfile']['size'] > 0) {
				$class = $this->schools_model->getClassByID($attendance->class_id);
                $note = $this->bpas->clear_tags($this->input->post('note'));
                $data = array(
					'status' => 'completed',
                    'updated_by' => $this->session->userdata('user_id'),
                    'note' => $note
                );
				$final = false;
				$items = false;
				$this->load->library('excel');
				$path = $_FILES["userfile"]["tmp_name"];
				$object = PHPExcel_IOFactory::load($path);
				foreach($object->getWorksheetIterator() as $worksheet){
					$highestRow = $worksheet->getHighestRow();
					$highestColumn = $worksheet->getHighestColumn();
					for($row=2; $row<=$highestRow; $row++){
						$student_code = $worksheet->getCellByColumnAndRow(0, $row)->getFormattedValue();
						$absent = $worksheet->getCellByColumnAndRow(3, $row)->getFormattedValue();
						$permission = $worksheet->getCellByColumnAndRow(4, $row)->getFormattedValue();
						$late = $worksheet->getCellByColumnAndRow(5, $row)->getFormattedValue();
						$final[] = array(
							'student_code'  => $student_code,
							'absent'   => $absent,
							'permission'   => $permission,
							'late'   => $late
						);
					}
				}
				if($final){
					foreach($final as $row){
						if($row['student_code'] != ""){
							$student = $this->schools_model->getStudentByCode($row['student_code']);
							$student_class = $this->schools_model->getStudentClassByStudent($student->id,$attendance->class_id,$attendance->academic_year);
							if($student_class && $student){
								if($row['absent'] > 0 || $row['permission'] > 0 || $row['late'] > 0){
									$items[] = array(
												'attendance_id'=>$id,
												'student_id'=>$student->id,
												'absent'=>$row['absent'],
												'permission'=>$row['permission'],
												'late'=>$row['late']
											);
								}
							}else{
								$this->session->set_flashdata('error', lang('check_student_code') . ' (' . $student_code . ')');
								admin_redirect('schools/finalize_attendance/'.$id);
							}
						}
					}
				}
				

				$this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('userfile')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $file_name = $this->upload->file_name;
                $data['final_file'] = $file_name;
            }
        }
        
        if ($this->form_validation->run() == true && $this->schools_model->finalizeAttendance($id, $data, $items)) {
            $this->session->set_flashdata('message', lang("attendance_finalized"));
            admin_redirect('schools/attendances');
        } else {

            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['attendance'] = $attendance;
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => admin_url('schools/attendances'), 'page' => lang('attendances')), array('link' => '#', 'page' => lang('finalize_attendance')));
            $meta = array('page_title' => lang('finalize_attendance'), 'bc' => $bc);
            $this->page_construct('schools/finalize_attendance', $meta, $this->data);

        }
    }
	
	function view_attendance($id)
    {
        $this->bpas->checkPermissions('attendances', TRUE);
        $attendance = $this->schools_model->getAttendanceByID($id);
        if ($attendance->status=='pending') {
            $this->bpas->md('schools/finalize_attendance/'.$id);
        }
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller_id = $this->session->userdata('biller_id');
		} else {
			$company = $this->site->getAllCompanies('biller');
			$biller_id = $company[0]->id;
		}
		$this->data['biller']     = $this->site->getCompanyByID($biller_id);
        $this->data['attendance'] = $attendance;
        $this->data['attendance_items'] = $this->schools_model->getAttendanceItems($id);
		// var_dump($this->schools_model->getAttendanceItems($id));
		// exit(0);

		$this->data['tabletime']  = $this->schools_model->getTimeTableByID($attendance->table_time_id);
		$this->data['class']      = $this->schools_model->getClassByID($attendance->class_id);
		$this->data['skill']      = $this->schools_model->getSkillByID($this->data['class']->skill_id);
		$this->data['grade']      = $this->schools_model->getGradeByID($this->data['class']->grade_id);
		$this->data['subject']    = $this->schools_model->getSubjectByID($this->data['tabletime']->subject_id);
		$this->data['teacher']    = $this->schools_model->getTeacherByID($this->data['tabletime']->teacher_id);
		$this->data['timeshift']  = $this->schools_model->getTimeshiftByID($this->data['class']->timeshift_id);
        $this->load->view($this->theme.'schools/view_attendance', $this->data);
    }
	
	public function delete_attendance($id = null)
    {	
		$this->bpas->checkPermissions('attendances-delete');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteAttendance($id)){
        		$this->session->set_flashdata('message', lang("attendance_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }


	// public function delete_attendance($id = null)
    // {	
	// 	$this->bpas->checkPermissions('attendances-delete');
    //     if (isset($id) || $id != null){        	
		
    //     	if($this->schools_model->deleteAttendance($id)){
    //     		$this->session->set_flashdata('message', lang("attendance_deleted"));
    //         	admin_redirect($_SERVER['HTTP_REFERER']);
    //     	}
    //     }
    // }
	
	function attendance_actions()
	{
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
				if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('attendances-delete');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteAttendance($id);
                    }
                    $this->session->set_flashdata('message', lang("attendance_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                } else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('attendance');
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('attendance_date'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('skill'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('year'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('semester'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('class'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('subject'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('teacher'));
                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $attendance = $this->schools_model->getAttendanceByID($id);
						$tabletime  = $this->schools_model->getTimeTableByID($attendance->table_time_id);
						$class      = $this->schools_model->getClassByID($attendance->class_id);
						$skill      = $this->schools_model->getSkillByID($class->skill_id);
						$grade      = $this->schools_model->getGradeByID($class->grade_id);
						$subject    = $this->schools_model->getSubjectByID($tabletime->subject_id);
						$teacher    = $this->schools_model->getTeacherByID($tabletime->teacher_id);

						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrsd($attendance->date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, ($attendance->academic_year . ' - ' . ($attendance->academic_year +1)));
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->hrsd($attendance->day));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, (!empty($skill) ? $skill->name : ''));
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, (!empty($grade) ? $grade->name : ''));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, (!empty($attendance) ? $attendance->section_name : ''));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, (!empty($attendance) ? $attendance->class_name : ''));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, (!empty($subject) ? $subject->name : ''));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, (!empty($teacher) ? ($teacher->firstname . ' ' . $teacher->lastname) : ''));
						$row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(35);
                    $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'attendance_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function student_by_class_report()
	{
		$this->bpas->checkPermissions('study_info_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$biller = $this->input->post('biller') ? $this->input->post('biller') : false;		
		$program = $this->input->post('program') ? $this->input->post('program') : false;
		$grade = $this->input->post('grade') ? $this->input->post('grade') : false;
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$year = false;
		$month = false;
		$class = $this->input->post('class') ? $this->input->post('class') : false;
		$student = $this->input->post('student') ? $this->input->post('student') : false;
		$this->data['header_classes'] = $this->schools_model->getClassess($biller,$program,$grade,$academic_year,$class);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('student_by_class_report')));
		$meta = array('page_title' => lang('student_by_class_report'), 'bc' => $bc);	
		$this->page_construct('schools/student_by_class_report',$meta,$this->data);
	}
	

	
	
	public function teacher_report()
	{
		$this->bpas->checkPermissions('teacher_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['subjects'] = $this->schools_model->getSubjects();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['teachers'] = $this->schools_model->getTeachers();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('teacher_report')));
		$meta = array('page_title' => lang('teacher_report'), 'bc' => $bc);	
		$this->page_construct('schools/teacher_report',$meta,$this->data);
	}
	
	
	
	function getTeacherReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('teacher_report', TRUE);
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;		
		$subject = $this->input->get('subject') ? $this->input->get('subject') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;
		$teacher = $this->input->get('teacher') ? $this->input->get('teacher') : NULL;
        if ($pdf || $xls) {
            $this->db->select("
								CONCAT(".$this->db->dbprefix('sh_teachers').".lastname,' ',".$this->db->dbprefix('sh_teachers').".firstname) as teacher_name,
								CONCAT(".$this->db->dbprefix('sh_teachers').".lastname_other,' ',".$this->db->dbprefix('sh_teachers').".firstname_other) as teacher_other_name,
								sh_teachers.gender,
								sh_teachers.dob,
								sh_teachers.phone,
								sh_teachers.biller,
								(SELECT GROUP_CONCAT(company SEPARATOR '\n') FROM ".$this->db->dbprefix('sh_teacher_working_histories')." WHERE teacher_id = ".$this->db->dbprefix('sh_teachers').".id) as experience,
								GROUP_CONCAT(CONCAT(".$this->db->dbprefix('sh_teach_infos').".subject,' (',".$this->db->dbprefix('sh_teach_infos').".grade,')') SEPARATOR '\n') as subject
								")
						->group_by("sh_teachers.id")
						->join("sh_teach_infos","sh_teachers.id = sh_teach_infos.teacher_id","left")
						->from("sh_teachers");
			if($teacher){
				$this->db->where('sh_teach_infos.teacher_id', $teacher);
			}
			if ($biller) {
                $this->db->where('sh_teachers.biller_id', $biller);
            }
			if ($subject) {
                $this->db->where('sh_teach_infos.subject_id', $subject);
            }
			if ($grade) {
                $this->db->where('sh_teach_infos.grade_id', $grade);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sh_teachers.biller_id =', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('teacher_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('teacher_name'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('teacher_name_latin'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('dob'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('experience'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('subject'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->teacher_name);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->teacher_other_name);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, lang(($data_row->gender != '' ? $data_row->gender : 'female')));
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->hrsd($data_row->dob));
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, ($data_row->experience));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, ($data_row->subject));

                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(40);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(100);
		
                $filename = 'teacher_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
				create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            admin_redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');
			$this->datatables->select("
									CONCAT(".$this->db->dbprefix('sh_teachers').".lastname,' ',".$this->db->dbprefix('sh_teachers').".firstname) as teacher_name,
									CONCAT(".$this->db->dbprefix('sh_teachers').".lastname_other,' ',".$this->db->dbprefix('sh_teachers').".firstname_other) as teacher_other_name,
									sh_teachers.gender,
									DATE_FORMAT(".$this->db->dbprefix('sh_teachers').".dob, '%Y-%m-%d %T') as dob,
									sh_teachers.phone,
									sh_teachers.biller,
									(SELECT GROUP_CONCAT(company SEPARATOR '<br>') FROM ".$this->db->dbprefix('sh_teacher_working_histories')." WHERE teacher_id = ".$this->db->dbprefix('sh_teachers').".id) as experience,
									GROUP_CONCAT(CONCAT(".$this->db->dbprefix('sh_teach_infos').".subject,' (',".$this->db->dbprefix('sh_teach_infos').".grade,')') SEPARATOR '<br>') as subject
									")
							->group_by("sh_teachers.id")
							->join("sh_teach_infos","sh_teachers.id = sh_teach_infos.teacher_id","left")
							->from("sh_teachers");

			if($teacher){
				$this->datatables->where('sh_teach_infos.teacher_id', $teacher);
			}
			if ($biller) {
                $this->datatables->where('sh_teachers.biller_id', $biller);
            }
			if ($subject) {
                $this->datatables->where('sh_teach_infos.subject_id', $subject);
            }
			if ($grade) {
                $this->datatables->where('sh_teach_infos.grade_id', $grade);
            }
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sh_teachers.biller_id =', $this->session->userdata('biller_id'));
			}
            echo $this->datatables->generate();
        }
    }
	
	function teacher_attendances()
    {
        $this->bpas->checkPermissions('teacher_attendances');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('teacher_attendances')));
        $meta = array('page_title' => lang('teacher_attendances'), 'bc' => $bc);
        $this->page_construct('schools/teacher_attendances', $meta, $this->data);
    }

    function getTeacherAttendances()
    {
        $this->bpas->checkPermissions('teacher_attendances', TRUE);
		$detail_link = '<a href="'.admin_url("schools/view_teacher_attendance/$1") . '" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa-file-text-o"></i>'.lang('view_teacher_attendance').'</a>';
		$delete_link = "<a href='#' class='po' title='" . lang("delete_teacher_attendance") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_teacher_attendance/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_teacher_attendance') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
								<li>'.$detail_link.'</li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
		
		$this->load->library('datatables');
        $this->datatables
            ->select("
            	{$this->db->dbprefix('sh_teacher_attendances')}.id as id, 
            	CONCAT({$this->db->dbprefix('sh_teacher_attendances')}.academic_year, ' - ', ({$this->db->dbprefix('sh_teacher_attendances')}.academic_year +1)) as academic_year, 
            	DATE_FORMAT(".$this->db->dbprefix('sh_teacher_attendances').".date, '%Y-%m-%d %T') as date, 
            	{$this->db->dbprefix('sh_teacher_attendances')}.day as att_day, 
            	companies.name as biller
            ")
            ->join('companies','companies.id =sh_teacher_attendances.biller_id','LEFT')
            ->from('sh_teacher_attendances');
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_teacher_attendances.biller_id =', $this->session->userdata('biller_id'));
		}
        $this->datatables->add_column('Actions', $action_link, "id");
        echo $this->datatables->generate();
    }
	
	function add_teacher_attendance_excel(){
        $this->bpas->checkPermissions('teacher_attendances-add');
        $this->form_validation->set_rules('biller', lang("biller"), 'required');
        if ($this->form_validation->run() == true) {
			$biller = $this->input->post(biller);
            $date = $this->bpas->fld($this->input->post('date'));
			$year = $this->input->post('year');
			$month = $this->input->post('month');

			$this->load->helper('string');
            $name = random_string('md5').'.xls';
            $teachers = $this->schools_model->getTeachers($biller);   
			$rw = 0;
            foreach ($teachers as $teacher) {
				$items[] = array(
					'code' => $teacher->code,
					'lastname' => $teacher->lastname,
					'firstname' => $teacher->firstname,
					);
				$rw++;
            }
			$a = 3;
            if (!empty($items)) {
				$this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(12);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(12);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(12);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(12);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(12);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(12);
				
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('lastname'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('firstname'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('absent'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('permission_before'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('permission_after'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('not_scan'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('late'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('emergency'));
				$row = 2;
				foreach ($items as $item) {
                    $this->excel->getActiveSheet()->setCellValueExplicit('A' . $row, $item['code'],PHPExcel_Cell_DataType::TYPE_STRING);
					$this->excel->getActiveSheet()->setCellValueExplicit('B' . $row, $item['lastname'],PHPExcel_Cell_DataType::TYPE_STRING);
					$this->excel->getActiveSheet()->setCellValueExplicit('C' . $row, $item['firstname'],PHPExcel_Cell_DataType::TYPE_STRING);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, 0);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, 0);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, 0);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, 0);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, 0);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, 0);
					$row++;
                }
				
				header('Content-Type: application/vnd.ms-excel');
				header('Content-Disposition: attachment;filename="' . $name . '.xls"');
				header('Cache-Control: max-age=0');
				$objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
				$objWriter->save('./files/'.$name, 'w');
				
            } else {
                $this->session->set_flashdata('error', lang('no_student_found'));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
			$biller_info = $this->site->getCompanyByID($biller);
            $data = array(
                'date' => $date,
				'biller_id' => $biller,
				'biller_name' => $biller_info->name,
				'year' => $year,
				'month' => $month,
				'initial_file' => $name,
                'created_by' => $this->session->userdata('user_id')
            );

        }

        if ($this->form_validation->run() == true && $this->schools_model->addTeacherAttendanceExcel($data)) {
            $this->session->set_flashdata('message', lang("teacher_attendance_added"));
            admin_redirect('schools/teacher_attendances');

        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['billers'] = $this->site->getAllCompanies('biller');
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('add_teacher_attendance_excel')));
            $meta = array('page_title' => lang('add_teacher_attendance_excel'), 'bc' => $bc);
            $this->page_construct('schools/add_teacher_attendance_excel', $meta, $this->data);
        }

    }
	
	
	function finalize_teacher_attendance($id)
    {
        $this->bpas->checkPermissions('teacher_attendances-add');
        $teacher_attendance = $this->schools_model->getTeacherAttendanceByID($id);
        if (!$teacher_attendance || $teacher_attendance->final_file) {
            $this->session->set_flashdata('error', lang("teacher_attendance_finalized"));
            admin_redirect('schools/teacher_attendances');
        }
        $this->form_validation->set_rules('attendance_id', lang("teacher_attendance"), 'required');
        if ($this->form_validation->run() == true) {
            if ($_FILES['userfile']['size'] > 0) {
                $note = $this->bpas->clear_tags($this->input->post('note'));
                $data = array(
					'status' => 'completed',
                    'updated_by' => $this->session->userdata('user_id'),
                    'note' => $note
                );
				$final = false;
				$items = false;
				$this->load->library('excel');
				$path = $_FILES["userfile"]["tmp_name"];
				$object = PHPExcel_IOFactory::load($path);
				foreach($object->getWorksheetIterator() as $worksheet){
					$highestRow = $worksheet->getHighestRow();
					$highestColumn = $worksheet->getHighestColumn();
					for($row=2; $row<=$highestRow; $row++){
						$teacher_code = $worksheet->getCellByColumnAndRow(0, $row)->getFormattedValue();
						$absent = $worksheet->getCellByColumnAndRow(3, $row)->getFormattedValue();
						$permission_before = $worksheet->getCellByColumnAndRow(4, $row)->getFormattedValue();
						$permission_after = $worksheet->getCellByColumnAndRow(5, $row)->getFormattedValue();
						$not_scan = $worksheet->getCellByColumnAndRow(6, $row)->getFormattedValue();
						$late = $worksheet->getCellByColumnAndRow(7, $row)->getFormattedValue();
						$emergency = $worksheet->getCellByColumnAndRow(8, $row)->getFormattedValue();
						$final[] = array(
							'teacher_code'  => $teacher_code,
							'absent'   => $absent,
							'permission_before'   => $permission_before,
							'permission_after'   => $permission_after,
							'not_scan'   => $not_scan,
							'late'   => $late,
							'emergency'   => $emergency
						);
					}
				}
				if($final){
					foreach($final as $row){
						if($row['teacher_code'] != ""){
							$teacher = $this->schools_model->getTeacherByCode($row['teacher_code']);
							if($teacher){
								if($row['absent'] > 0 || $row['permission_before'] > 0 || $row['permission_after'] > 0 || $row['not_scan'] > 0 || $row['late'] > 0 || $row['emergency'] > 0){
									$items[] = array(
												'attendance_id'=>$id,
												'teacher_id'=>$teacher->id,
												'absent'=>$row['absent'],
												'permission_before'=>$row['permission_before'],
												'permission_after'=>$row['permission_after'],
												'not_scan'=>$row['not_scan'],
												'late'=>$row['late'],
												'emergency'=>$row['emergency']
											);
								}
							}else{
								$this->session->set_flashdata('error', lang('check_teacher_code') . ' (' . $teacher_code . ')');
								admin_redirect('schools/finalize_teacher_attendance/'.$id);
							}
						}
					}
				}

				$this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('userfile')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $file_name = $this->upload->file_name;
                $data['final_file'] = $file_name;
            }
        }
        
        if ($this->form_validation->run() == true && $this->schools_model->finalizeTeacherAttendance($id, $data, $items)) {
            $this->session->set_flashdata('message', lang("teacher_attendance_finalized"));
            admin_redirect('schools/teacher_attendances');
        } else {

            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['teacher_attendance'] = $teacher_attendance;
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => admin_url('schools/teacher_attendances'), 'page' => lang('teacher_attendances')), array('link' => '#', 'page' => lang('finalize_teacher_attendance')));
            $meta = array('page_title' => lang('finalize_teacher_attendance'), 'bc' => $bc);
            $this->page_construct('schools/finalize_teacher_attendance', $meta, $this->data);

        }
    }
	
	function view_teacher_attendance($id)
    {
        $this->bpas->checkPermissions('teacher_attendances', TRUE);
        $teacher_attendance = $this->schools_model->getTeacherAttendanceByID($id);
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$biller_id = $this->session->userdata('biller_id');
		} else {
			$company   = $this->site->getAllCompanies('biller');
			$biller_id = $company[0]->id;
		}
		$this->data['biller'] = $this->site->getCompanyByID($biller_id);
        $this->data['teacher_attendance'] = $teacher_attendance;
        $this->data['teacher_attendance_items'] = $this->schools_model->getTeacherAttendanceItems($id);
        $this->load->view($this->theme.'schools/view_teacher_attendance', $this->data);
    }
	
	public function delete_teacher_attendance($id = null)
    {	
		$this->bpas->checkPermissions('teacher_attendances-delete');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteTeacherAttendance($id)){
        		$this->session->set_flashdata('message', lang("teacher_attendance_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function teacher_attendance_actions()
	{
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
				if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('teacher_attendances-delete');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteTeacherAttendance($id);
                    }
                    $this->session->set_flashdata('message', lang("teacher_attendance_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                } else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('teacher_attendance');
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('attendance_date'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('note'));
                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $teacher_attendance = $this->schools_model->getTeacherAttendanceByID($id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, ($teacher_attendance->academic_year . ' - ' . ($teacher_attendance->academic_year +1)));
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($teacher_attendance->date));
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->hrsd($teacher_attendance->day));
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $teacher_attendance->biller_name);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, strip_tags($teacher_attendance->note));
						$row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);

                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'teacher_attendance_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function attendance_report()
	{
		$this->bpas->checkPermissions('attendance_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['classes'] = $this->schools_model->getClasses();
		$this->data['students'] = $this->schools_model->getStudents();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('attendance_report')));
		$meta = array('page_title' => lang('attendance_report'), 'bc' => $bc);	
		$this->page_construct('schools/attendance_report',$meta,$this->data);
	}
	
	
	function getAttendanceReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('attendance_report', TRUE);
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;		
		$program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$year = $this->input->get('year') ? $this->input->get('year') : NULL;
		$month = $this->input->get('month') ? $this->input->get('month') : NULL;
		$class = $this->input->get('class') ? $this->input->get('class') : NULL;
		$student = $this->input->get('student') ? $this->input->get('student') : NULL;
		
		if ($pdf || $xls) {
			$this->db->select("
								concat(".$this->db->dbprefix("sh_students").".lastname,' ',".$this->db->dbprefix("sh_students").".firstname) as student,
								sh_attendances.academic_year,
								sh_attendances.year,
								sh_attendances.month,
								sh_attendances.class_name,
								SUM(IFNULL(".$this->db->dbprefix("sh_attendance_items").".absent,0)) as absent,
								SUM(IFNULL(".$this->db->dbprefix("sh_attendance_items").".permission,0)) as permission,
								SUM(IFNULL(".$this->db->dbprefix("sh_attendance_items").".late,0)) as late
							")
						->join("sh_students","sh_students.id = sh_attendance_items.student_id","inner")	
						->join("sh_attendances","sh_attendances.id = sh_attendance_items.attendance_id","inner")
						->from("sh_attendance_items")
						->group_by("sh_students.id,sh_attendances.academic_year,sh_attendances.year,sh_attendances.month,sh_attendances.class_name");
			if($academic_year){
				$this->db->where("sh_attendances.academic_year",$academic_year);
			}
			if($year){
				$this->db->where("sh_attendances.year",$year);
			}
			if ($biller) {
				$this->db->where("sh_attendances.biller_id",$biller);
			}
			if ($program) {
				$this->db->where("sh_attendances.program_id",$program);
			}
			if ($class) {
				$this->db->where("sh_attendances.class_id",$class);
			}
			if ($grade) {
				$this->db->where("sh_attendances.grade_id",$grade);
			}
			if ($month) {
				$this->db->where("sh_attendances.month",$month);
			}
			if ($student) {
				$this->db->where("sh_attendance_items.student_id",$student);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sh_attendances.biller_id =', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('attendance_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('student'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('academic_year'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('year'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('month'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('class'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('absent'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('permission'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('late'));

                $row = 2;
                foreach ($data as $data_row) {
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->student);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->academic_year);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->year);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->month);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->class_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->absent);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->permission);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->late);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);

                $filename = 'attendance_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
				create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            admin_redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');
			$this->datatables->select("
										concat(".$this->db->dbprefix("sh_students").".lastname,' ',".$this->db->dbprefix("sh_students").".firstname) as student,
										sh_attendances.academic_year,
										sh_attendances.year,
										sh_attendances.month,
										sh_attendances.class_name,
										SUM(IFNULL(".$this->db->dbprefix("sh_attendance_items").".absent,0)) as absent,
										SUM(IFNULL(".$this->db->dbprefix("sh_attendance_items").".permission,0)) as permission,
										SUM(IFNULL(".$this->db->dbprefix("sh_attendance_items").".late,0)) as late
									")
							->join("sh_students","sh_students.id = sh_attendance_items.student_id","inner")	
							->join("sh_attendances","sh_attendances.id = sh_attendance_items.attendance_id","inner")
							->from("sh_attendance_items")
							->group_by("sh_students.id,sh_attendances.academic_year,sh_attendances.year,sh_attendances.month,sh_attendances.class_name");
			if($academic_year){
				$this->datatables->where("sh_attendances.academic_year",$academic_year);
			}
			if($year){
				$this->datatables->where("sh_attendances.year",$year);
			}
			if ($biller) {
				$this->datatables->where("sh_attendances.biller_id",$biller);
			}
			if ($program) {
				$this->datatables->where("sh_attendances.program_id",$program);
			}
			if ($class) {
				$this->datatables->where("sh_attendances.class_id",$class);
			}
			if ($grade) {
				$this->datatables->where("sh_attendances.grade_id",$grade);
			}
			if ($month) {
				$this->datatables->where("sh_attendances.month",$month);
			}
			if ($student) {
				$this->datatables->where("sh_attendance_items.student_id",$student);
			}	

			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sh_attendances.biller_id =', $this->session->userdata('biller_id'));
			}
							
            echo $this->datatables->generate();

        }

    }
	
	
	
	public function teacher_attendance_report()
	{
		$this->bpas->checkPermissions('teacher_attendance_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['teachers'] = $this->schools_model->getTeachers();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('teacher_attendance_report')));
		$meta = array('page_title' => lang('teacher_attendance_report'), 'bc' => $bc);	
		$this->page_construct('schools/teacher_attendance_report',$meta,$this->data);
	}
	
	
	function getTeacherAttendanceReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('teacher_attendance_report', TRUE);
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;		
		$year = $this->input->get('year') ? $this->input->get('year') : NULL;
		$month = $this->input->get('month') ? $this->input->get('month') : NULL;
		$teacher = $this->input->get('teacher') ? $this->input->get('teacher') : NULL;
		
		if ($pdf || $xls) {
			$this->db->select("
										concat(".$this->db->dbprefix("sh_teachers").".lastname,' ',".$this->db->dbprefix("sh_teachers").".firstname) as teacher,
										sh_teacher_attendances.year,
										sh_teacher_attendances.month,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".absent,0)) as absent,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".permission_before,0)) as permission_before,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".permission_after,0)) as permission_after,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".not_scan,0)) as not_scan,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".late,0)) as late,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".emergency,0)) as emergency
									")
							->join("sh_teachers","sh_teachers.id = sh_teacher_attendance_items.teacher_id","inner")	
							->join("sh_teacher_attendances","sh_teacher_attendances.id = sh_teacher_attendance_items.attendance_id","inner")
							->from("sh_teacher_attendance_items")
							->group_by("sh_teachers.id, sh_teacher_attendances.year, sh_teacher_attendances.month");

			if($year){
				$this->db->where("sh_teacher_attendances.year",$year);
			}
			if ($biller) {
				$this->db->where("sh_teacher_attendances.biller_id",$biller);
			}
			if ($month) {
				$this->db->where("sh_teacher_attendances.month",$month);
			}
			if ($teacher) {
				$this->db->where("sh_teacher_attendance_items.teacher_id",$teacher);
			}	

			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sh_teacher_attendances.biller_id =', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('teacher_attendance_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('teacher'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('year'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('month'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('absent'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('permission_before'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('permission_after'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('not_scan'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('late'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('emergency'));

                $row = 2;
                foreach ($data as $data_row) {
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->teacher);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->year);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->month);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->absent);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->permission_before);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->permission_after);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->not_scan);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->late);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->emergency);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

                $filename = 'teacher_attendance_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
				create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            admin_redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');
			$this->datatables->select("
										concat(".$this->db->dbprefix("sh_teachers").".lastname,' ',".$this->db->dbprefix("sh_teachers").".firstname) as teacher,
										sh_teacher_attendances.year,
										sh_teacher_attendances.month,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".absent,0)) as absent,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".permission_before,0)) as permission_before,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".permission_after,0)) as permission_after,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".not_scan,0)) as not_scan,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".late,0)) as late,
										SUM(IFNULL(".$this->db->dbprefix("sh_teacher_attendance_items").".emergency,0)) as emergency
									")
							->join("sh_teachers","sh_teachers.id = sh_teacher_attendance_items.teacher_id","inner")	
							->join("sh_teacher_attendances","sh_teacher_attendances.id = sh_teacher_attendance_items.attendance_id","inner")
							->from("sh_teacher_attendance_items")
							->group_by("sh_teachers.id, sh_teacher_attendances.year, sh_teacher_attendances.month");

			if($year){
				$this->datatables->where("sh_teacher_attendances.year",$year);
			}
			if ($biller) {
				$this->datatables->where("sh_teacher_attendances.biller_id",$biller);
			}
			if ($month) {
				$this->datatables->where("sh_teacher_attendances.month",$month);
			}
			if ($teacher) {
				$this->datatables->where("sh_teacher_attendance_items.teacher_id",$teacher);
			}	

			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sh_teacher_attendances.biller_id =', $this->session->userdata('biller_id'));
			}
							
            echo $this->datatables->generate();

        }

    }
	
	
	public function best_student_by_grade_report()
	{
		$this->bpas->checkPermissions('best_student_by_grade_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('best_student_by_grade_report')));
		$meta = array('page_title' => lang('best_student_by_grade_report'), 'bc' => $bc);	
		$this->page_construct('schools/best_student_by_grade_report',$meta,$this->data);
	}
	
	
	public function failure_student_by_year_report()
	{
		$this->bpas->checkPermissions('failure_student_by_year_report');
		$this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$academic_year = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$this->data['billers'] = $this->site->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('failure_student_by_year_report')));
		$meta = array('page_title' => lang('failure_student_by_year_report'), 'bc' => $bc);	
		$this->page_construct('schools/failure_student_by_year_report',$meta,$this->data);
	}
	
	
	public function overview_chart()
    {
		$this->load->admin_model('db_model');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['chatDatas'] = $this->schools_model->getChartData();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('overview_chart')));
		$meta = array('page_title' => lang('overview_chart'), 'bc' => $bc);	
        $this->page_construct('schools/overview_chart', $meta, $this->data);
    }

	function grade_fees($grade_id = NULL)
    {
		$this->bpas->checkPermissions("grades");
        if (!$grade_id) {
            $this->session->set_flashdata('error', lang('no_grade_selected'));
            admin_redirect('schools/grades');
        }
        $this->data['grade'] = $this->schools_model->getGradeByID($grade_id);
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => admin_url('schools/grades'), 'page' => lang('grades')),  array('link' => '#', 'page' => lang('grade_fees')));
        $meta = array('page_title' => lang('grade_fees'), 'bc' => $bc);
        $this->page_construct('schools/grade_fees', $meta, $this->data);
    }
	function getGradeFees($grade_id = NULL)
    {
        $this->load->library('datatables');
        $this->datatables
            ->select("sh_grade_fees.id as id, 
						sh_grade_fees.fee_type,
						sh_grade_fees.name, 
						sh_grade_fees.child_no,
						CONCAT(".$this->db->dbprefix('products').".code,' - ',".$this->db->dbprefix('products').".name) as product_name,
						products.price,
						sh_grade_fees.student_type", FALSE)
            ->from("sh_grade_fees")
			->join("products","products.id = sh_grade_fees.product_id","left")
			->where("sh_grade_fees.grade_id",$grade_id)
            ->add_column("Actions", "<div class=\"text-center\"><a href='" . admin_url('schools/edit_grade_fee/$1') . "' data-toggle='modal' data-backdrop='static' data-keyboard='false' data-target='#myModal' class='tip' title='" . lang("edit_grade_fee") . "'><i class=\"fa fa-edit\"></i></a> <a href='#' class='tip po' title='<b>" . lang("delete_grade_fee") . "</b>' data-content=\"<p>" . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete124' href='" . admin_url('schools/delete_grade_fee/$1') . "'>" . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i></a></div>", "id");
        echo $this->datatables->generate();
    }
	
	function add_grade_fee_old($grade_id = false)
    {
		$this->bpas->checkPermissions("grades-add", true);
        $this->form_validation->set_rules('name', lang("name"), 'trim|required');
		$this->form_validation->set_rules('product_id', lang("product"), 'required');
		$this->form_validation->set_rules('student_type', lang("student_type"), 'required');
        if ($this->form_validation->run() == true) {
            $data = array(
						'grade_id' => $grade_id,
						'fee_type' => $this->input->post('fee_type'),
						'name' => $this->input->post('name'),
						'child_no' => $this->input->post('child_no'),
						'product_id' => $this->input->post('product_id'),
						'student_type' => $this->input->post('student_type'),

						'academic_year' => $this->input->post('academic_year'),
						'program_id' => $this->input->post('program_id'),
						'skill_id' => $this->input->post('skill'),
						'section_id' => $this->input->post('semester'),
					);
        } elseif ($this->input->post('add_grade_fee')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect("schools/grade_fees/".$grade_id);
        }
        if ($this->form_validation->run() == true && $this->schools_model->addGradeFee($data)) {
            $this->session->set_flashdata('message', lang("grade_fee_added")." ".$data['name']);
			admin_redirect("schools/grade_fees/".$grade_id);
        } else {
            $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
            $this->data['modal_js'] = $this->site->modal_js();
			$this->data['grade_id'] = $grade_id;
			$this->data['programs'] = $this->schools_model->getPrograms();	
			$this->data['grades'] = $this->schools_model->getGrades();	
			$this->data['skills'] = $this->schools_model->getSkills();
			$this->data['products'] = $this->site->getProducts();
            $this->load->view($this->theme . 'schools/add_grade_fee', $this->data);
        }
    }
	
	function edit_grade_fee_old($id = NULL)
    {
		$this->bpas->checkPermissions("grades-edit", true);
        $this->form_validation->set_rules('name', lang("name"), 'trim|required');
		$this->form_validation->set_rules('product_id', lang("product"), 'required');
		$this->form_validation->set_rules('student_type', lang("student_type"), 'required');

		$grade_fee = $this->schools_model->getGradeFeeByID($id);		
        if ($this->form_validation->run() == true) {
			$data = array(
						'name' => $this->input->post('name'),
						'fee_type' => $this->input->post('fee_type'),
						'child_no' => $this->input->post('child_no'),
						'product_id' => $this->input->post('product_id'),
						'student_type' => $this->input->post('student_type'),

						'academic_year' => $this->input->post('academic_year'),
						'program_id' => $this->input->post('program_id'),
						'skill_id' => $this->input->post('skill'),
						'section_id' => $this->input->post('semester'),
					);	
        } elseif ($this->input->post('edit_grade_fee')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect("schools/grade_fees".$grade_fee->grade_id);
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateGradeFee($id, $data)) {
            $this->session->set_flashdata('message', lang("grade_fee_edited"));
            admin_redirect("schools/grade_fees/".$grade_fee->grade_id);
        } else {
            $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
            $this->data['modal_js'] = $this->site->modal_js();
            $this->data['grade_fee'] = $grade_fee;
			$this->data['products'] = $this->site->getProducts();
			$this->data['programs'] = $this->schools_model->getPrograms();	
			$this->data['grades'] = $this->schools_model->getGrades();	
			$this->data['skills'] = $this->schools_model->getSkills();
            $this->load->view($this->theme . 'schools/edit_grade_fee', $this->data);
        }
    }
	
	function delete_grade_fee_old($id = NULL)
    {
        $this->bpas->checkPermissions("grades-delete", true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		$grade_fee = $this->schools_model->getGradeFeeByID($id);	
        if ($this->schools_model->deleteGradeFee($id)) {
            if ($this->input->is_ajax_request()) {
                echo lang("grade_fee_deleted");die();
            }
            $this->session->set_flashdata('message', lang('grade_fee_deleted'));
            admin_redirect("schools/grade_fees/".$grade_fee->grade_id);
        }
    }
	
	function grade_fee_actions() {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
					$this->bpas->checkPermissions("grades-delete", true);
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteGradeFee($id);
                    }
                    $this->session->set_flashdata('message', lang("grade_fee_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('grade_fee'));
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('fee_type'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('child_no'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('product'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('price'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('student_type'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $grade_fee = $this->schools_model->getGradeFeeByID($id);
						$product = $this->site->getProductByID($grade_fee->product_id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, lang($grade_fee->fee_type));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $grade_fee->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $grade_fee->child_no);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $product->code.' - '.$product->name);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($product->price));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, lang($grade_fee->student_type));
                        $row++;
                    }
                    $filename = 'grade_fee_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	
	
	public function add_emergency($student_id = false)
	{
		$this->bpas->checkPermissions('add',true);	
		$this->form_validation->set_rules('e_full_name', lang("full_name"), 'required');
		$this->form_validation->set_rules('e_relationship', lang("relationship"), 'required');
		$this->form_validation->set_rules('e_phone', lang("phone"), 'required');
		if ($this->form_validation->run() == true) {	
			$student_info = $this->schools_model->getStudentByID($student_id);
			$data = array(
				'family_id'	=> $student_info->family_id,
				'relationship' => $this->input->post('e_relationship'),
				'full_name' => $this->input->post('e_full_name'),
				'phone' => $this->input->post('e_phone'),
				'facebook' => $this->input->post('e_facebook'),
				'type' => "emergency"
			);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->addEmergency($student_id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("emergency_added"));
            admin_redirect("schools/edit_student/".$student_id."/#emergency_info");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['student_id'] = $student_id;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_emergency', $this->data);	
		}	
	}
	
	public function edit_emergency($id = false)
	{
		$this->bpas->checkPermissions('edit',true);
		$this->form_validation->set_rules('e_full_name', lang("full_name"), 'required');
		$this->form_validation->set_rules('e_relationship', lang("relationship"), 'required');
		$this->form_validation->set_rules('e_phone', lang("phone"), 'required');
		if ($this->form_validation->run() == true) {	
			$data = array(
				'relationship' => $this->input->post('e_relationship'),
				'full_name' => $this->input->post('e_full_name'),
				'phone' => $this->input->post('e_phone'),
				'facebook' => $this->input->post('e_facebook'),
				'type' => "emergency"
			);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateEmergency($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("emergency_updated"));
			admin_redirect($_SERVER["HTTP_REFERER"]."#emergency_info");
        }else{
			$emergency = $this->schools_model->getEmergencyByID($id);
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['row'] = $emergency;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_emergency', $this->data);	
		}	
	}
	
	public function getEmergency($family_id = false)
	{	
		$this->bpas->checkPermissions('index');
		if(!$family_id){
			$family_id = $this->input->get("family_id");
		}
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_emergency") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_emergency/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_emergency') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_emergency/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_emergency').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
						sh_student_families.id as id,
						sh_student_families.relationship,
						sh_student_families.full_name,
						sh_student_families.phone,
						sh_student_families.facebook
					")
            ->from("sh_student_families")
			->where("sh_student_families.family_id",$family_id)
			->where("sh_student_families.type","emergency")
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}

	public function delete_emergency($id = null)
    {
		$this->bpas->checkPermissions('delete');	
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteEmergency($id)) {
				if ($this->input->is_ajax_request()) {
					echo lang("emergency_deleted");
					die();
				}
				$this->session->set_flashdata('message', lang('emergency_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	public function getBanks($family_id = false)
	{	
		$this->bpas->checkPermissions('index');
		if(!$family_id){
			$family_id = $this->input->get("family_id");
		}
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_bank") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_bank/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_bank') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_bank/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_bank').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_student_banks.id as id,
					sh_student_banks.belong_to,
					sh_student_banks.bank_name,
					sh_student_banks.account_name,
					sh_student_banks.account_number")
            ->from("sh_student_banks")
			->where("sh_student_banks.family_id",$family_id)
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_bank($student_id = false)
	{
		$this->bpas->checkPermissions('add',true);	
		$this->form_validation->set_rules('b_bank_name', lang("bank_name"), 'required');
		$this->form_validation->set_rules('b_account_name', lang("account_name"), 'required');
		$this->form_validation->set_rules('b_account_number', lang("account_number"), 'required');
		if ($this->form_validation->run() == true) {	
			$student_info = $this->schools_model->getStudentByID($student_id);
			$data = array(
				'family_id'	=> $student_info->family_id,
				'belong_to' => $this->input->post('b_belong_to'),
				'bank_name' => $this->input->post('b_bank_name'),
				'account_name' => $this->input->post('b_account_name'),
				'account_number' => $this->input->post('b_account_number')
			);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->addBank($student_id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("bank_added"));
            admin_redirect("schools/edit_student/".$student_id."/#bank_info");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['student_id'] = $student_id;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_bank', $this->data);	
		}	
	}
	
	public function edit_bank($id = false)
	{
		$this->bpas->checkPermissions('edit',true);
		$this->form_validation->set_rules('b_bank_name', lang("bank_name"), 'required');
		$this->form_validation->set_rules('b_account_name', lang("account_name"), 'required');
		$this->form_validation->set_rules('b_account_number', lang("account_number"), 'required');
		if ($this->form_validation->run() == true) {	
			$data = array(
				'belong_to' => $this->input->post('b_belong_to'),
				'bank_name' => $this->input->post('b_bank_name'),
				'account_name' => $this->input->post('b_account_name'),
				'account_number' => $this->input->post('b_account_number')
			);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateBank($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("bank_updated"));
			admin_redirect($_SERVER["HTTP_REFERER"]."#bank_info");
        }else{
			$bank = $this->schools_model->getbankByID($id);
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id'] = $id;
			$this->data['row'] = $bank;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_bank', $this->data);	
		}	
	}

	public function delete_bank($id = null)
    {
		$this->bpas->checkPermissions('delete');	
        if (isset($id) || $id != null){
        	 if ($this->schools_model->deleteBank($id)) {
				if ($this->input->is_ajax_request()) {
					echo lang("bank_deleted");
					die();
				}
				$this->session->set_flashdata('message', lang('bank_deleted'));
				admin_redirect('welcome');
			}
        }
    }

	public function sales($biller_id = null, $academic_year = null)
    {
        $this->bpas->checkPermissions();
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year'] = $academic_year;
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;	
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('sales')));
		$meta = array('page_title' => lang('sales'), 'bc' => $bc);
		$this->page_construct('schools/sales', $meta, $this->data);
    }

	public function getSales($biller_id = null,$academic_year = null)
    {
        $this->bpas->checkPermissions('sales');
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
		$installment_link = '';
		if($this->Settings->module_installment && (isset($this->GP['installments-add']) || ($this->Owner || $this->Admin))){
			$installment_link = anchor('installments/add/$1', '<i class="fa fa-plus-circle"></i> ' . lang('add_installment'),'class="add_installment"');
		}
		$return_link = '';
		if ((isset($this->GP['sales-return_sales']) && $this->GP['sales-return_sales']) || $this->Owner || $this->Admin) {
			$return_link = anchor('admin/sales/add_sale_return/$1', '<i class="fa fa-angle-double-left"></i> ' . lang('add_sale_return'), 'class="add_return"');
		}
        $discount_link = anchor('admin/schools/add_sale_discount/$1', '<i class="fa fa-money"></i> ' . lang('add_discount'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="add_discount" data-target="#myModal"');
		$print_a4 = anchor('admin/schools/modal_view_sale_a4/$1', '<i class="fa fa-money"></i> ' . lang('print_a4'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false"  data-target="#myModal"');
		$payments_link = anchor('admin/schools/payments/$1', '<i class="fa fa-money"></i> ' . lang('view_payments'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="view_payment" data-target="#myModal"');
        $add_payment_link = anchor('admin/sales/add_payment/$1', '<i class="fa fa-money"></i> ' . lang('add_payment'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="add_payment" data-target="#myModal"');
        $edit_link = anchor('admin/schools/edit_sale/$1', '<i class="fa fa-edit"></i> ' . lang('edit_sale'), 'class="sledit"');
        $delete_link = "<a href='#' class='po' title='<b>" . lang("delete_sale") . "</b>' data-content=\"<p>"
        . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_sale/$1') . "'>"
        . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
        . lang('delete_sale') . "</a>";
	
        $action = '<div class="text-center"><div class="btn-group text-left">'
        . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
        . lang('actions') . ' <span class="caret"></span></button>
			<ul class="dropdown-menu pull-right" role="menu">
				<li>' . $installment_link . '</li>
				<li>' . $print_a4 . '</li>
				<li>' . $discount_link . '</li>
				<li>' . $payments_link . '</li>
				<li>' . $add_payment_link . '</li>
				<li class="hide">' . $return_link . '</li>
				<li>' . $edit_link . '</li>
				<li>' . $delete_link . '</li>
			</ul>
		</div></div>';
		
        $this->load->library('datatables');
		$this->datatables
			->select("sales.id as id,
						sales.biller,
						DATE_FORMAT(".$this->db->dbprefix('sales').".date, '%Y-%m-%d %T') as date,
						sales.reference_no,
						CONCAT(".$this->db->dbprefix('sales').".academic_year,' - ',(".$this->db->dbprefix('sales').".academic_year + 1)) as academic_year,
						sh_students.code,
						IF(".$this->db->dbprefix("sh_students").".id > 0, 
							CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname, ' - ', ".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) ,
							IF(".$this->db->dbprefix("sh_testings").".id > 0, CONCAT(".$this->db->dbprefix('sh_testings').".stname,' - ',".$this->db->dbprefix('sh_testings').".stname_latin),
							".$this->db->dbprefix("sales").".customer)
						) as customer,
						sales.number_customer,
						sh_study_infos.class,
						sales.fee_type,
						IFNULL(".$this->db->dbprefix('sales').".order_discount_id,0) as order_discount_id,
						sales.grand_total,
						IFNULL(total_return,0) as total_return,
						(IFNULL(bpas_payments.paid + IFNULL(total_return_paid,0),0) + IFNULL(bpas_payments.discount,0)) as paid,
						ROUND((".$this->db->dbprefix('sales').".grand_total-(IFNULL(bpas_payments.paid,0))-(IFNULL(bpas_payments.discount,0))-(IFNULL(bpas_return.total_return + total_return_paid,0))),".$this->Settings->decimals.") as balance,
						sales.payment_status,
						sales.attachment,
						installments.id as installment,
						sales.status,
						sh_study_infos.type
					")
			->from('sales')
			->join('companies','companies.id = sales.customer_id','left')
			->join('installments','sales.id = installments.sale_id AND installments.status = "active"','left')
			->join('sh_testings','sh_testings.sale_id = sales.id','left')
			// ->join('sh_study_infos','sh_study_infos.student_id = companies.student_id 
			// 						AND sh_study_infos.academic_year = sales.academic_year 
			// 						AND sh_study_infos.biller_id = sales.biller_id 
			// 						AND sh_study_infos.program_id = sales.program_id 
			// 						AND sh_study_infos.grade_id = sales.grade_id','left')
			->join('sh_study_infos','sh_study_infos.id = sales.study_info_id','left')
			->join('sh_students','sh_students.id = companies.student_id','left')
			->join('(SELECT
						sale_id,
						SUM(ABS(grand_total)) AS total_return,
						SUM(paid) AS total_return_paid
					FROM
						'.$this->db->dbprefix('sales').' WHERE sale_status = "returned"
					GROUP BY
						sale_id) as bpas_return', 'bpas_return.sale_id=sales.id', 'left')
			->join('(SELECT
						sale_id,
						IFNULL(SUM(amount),0) AS paid,
						IFNULL(SUM(discount),0) AS discount
					FROM
						'.$this->db->dbprefix('payments').'
						
					GROUP BY
						sale_id) as bpas_payments', 'bpas_payments.sale_id=sales.id', 'left');
						
		$this->datatables->group_by("sales.id");			
		$this->datatables->where('IFNULL('.$this->db->dbprefix("sales").'.module_type,"")', "school");
		if ($biller_id) {
			$this->datatables->where('sales.biller_id', $biller_id);
        }	
		if ($academic_year) {
			$this->datatables->where('sales.academic_year', $academic_year);
        }
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
		}
		$this->datatables->where('sale_status !=', 'returned');
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $this->datatables->where('sales.created_by', $this->session->userdata('user_id'));
        }
        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }
    public function other_income($biller_id = null, $academic_year = null)
    {
        $this->bpas->checkPermissions();
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year'] = $academic_year;
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;	
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('other_income')));
		$meta = array('page_title' => lang('other_income'), 'bc' => $bc);
		$this->page_construct('schools/other_income', $meta, $this->data);
    }
    public function getOtherIncome($biller_id = null,$academic_year = null)
    {
        $this->bpas->checkPermissions('sales');
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
		$installment_link = '';
		if($this->Settings->module_installment && (isset($this->GP['installments-add']) || ($this->Owner || $this->Admin))){
			$installment_link = anchor('installments/add/$1', '<i class="fa fa-plus-circle"></i> ' . lang('add_installment'),'class="add_installment"');
		}
		$return_link = '';
		if ((isset($this->GP['sales-return_sales']) && $this->GP['sales-return_sales']) || $this->Owner || $this->Admin) {
			$return_link = anchor('admin/sales/add_sale_return/$1', '<i class="fa fa-angle-double-left"></i> ' . lang('add_sale_return'), 'class="add_return"');
		}
        $discount_link = anchor('admin/schools/add_sale_discount/$1', '<i class="fa fa-money"></i> ' . lang('add_discount'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="add_discount" data-target="#myModal"');
		$print_a4 = anchor('admin/schools/modal_view_sale_a4/$1', '<i class="fa fa-money"></i> ' . lang('print_a4'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false"  data-target="#myModal"');
		$payments_link = anchor('admin/schools/payments/$1', '<i class="fa fa-money"></i> ' . lang('view_payments'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="view_payment" data-target="#myModal"');
        $add_payment_link = anchor('admin/sales/add_payment/$1', '<i class="fa fa-money"></i> ' . lang('add_payment'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="add_payment" data-target="#myModal"');
        $edit_link = anchor('admin/schools/edit_sale/$1/other_income', '<i class="fa fa-edit"></i> ' . lang('edit_sale'), 'class="sledit"');
        $delete_link = "<a href='#' class='po' title='<b>" . lang("delete_sale") . "</b>' data-content=\"<p>"
        . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_sale/$1') . "'>"
        . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
        . lang('delete_sale') . "</a>";
	
        $action = '<div class="text-center"><div class="btn-group text-left">'
        . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
        . lang('actions') . ' <span class="caret"></span></button>
			<ul class="dropdown-menu pull-right" role="menu">
				<li>' . $installment_link . '</li>
				<li>' . $print_a4 . '</li>
				<li>' . $discount_link . '</li>
				<li>' . $payments_link . '</li>
				<li>' . $add_payment_link . '</li>
				<li class="hide">' . $return_link . '</li>
				<li>' . $edit_link . '</li>
				<li>' . $delete_link . '</li>
			</ul>
		</div></div>';
		
        $this->load->library('datatables');
		$this->datatables
			->select("sales.id as id,
						sales.biller,
						DATE_FORMAT(".$this->db->dbprefix('sales').".date, '%Y-%m-%d %T') as date,
						sales.reference_no,
				
						IF(".$this->db->dbprefix("sh_students").".id > 0, 
							CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname, ' - ', ".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) ,
							IF(".$this->db->dbprefix("sh_testings").".id > 0, CONCAT(".$this->db->dbprefix('sh_testings').".stname,' - ',".$this->db->dbprefix('sh_testings').".stname_latin),
							".$this->db->dbprefix("sales").".customer)
						) as customer,
			
						sales.fee_type,
						IFNULL(".$this->db->dbprefix('sales').".order_discount_id,0) as order_discount_id,
						sales.grand_total,
						IFNULL(total_return,0) as total_return,
						(IFNULL(bpas_payments.paid + IFNULL(total_return_paid,0),0) + IFNULL(bpas_payments.discount,0)) as paid,
						ROUND((".$this->db->dbprefix('sales').".grand_total-(IFNULL(bpas_payments.paid,0))-(IFNULL(bpas_payments.discount,0))-(IFNULL(bpas_return.total_return + total_return_paid,0))),".$this->Settings->decimals.") as balance,
						sales.payment_status,
						sales.attachment,
						installments.id as installment,
						sales.status,
						sh_study_infos.type
					")
			->from('sales')
			->join('companies','companies.id = sales.customer_id','left')
			->join('installments','sales.id = installments.sale_id AND installments.status = "active"','left')
			->join('sh_testings','sh_testings.sale_id = sales.id','left')
			// ->join('sh_study_infos','sh_study_infos.student_id = companies.student_id 
			// 						AND sh_study_infos.academic_year = sales.academic_year 
			// 						AND sh_study_infos.biller_id = sales.biller_id 
			// 						AND sh_study_infos.program_id = sales.program_id 
			// 						AND sh_study_infos.grade_id = sales.grade_id','left')
			->join('sh_study_infos','sh_study_infos.id = sales.study_info_id','left')
			->join('sh_students','sh_students.id = companies.student_id','left')
			->join('(SELECT
						sale_id,
						SUM(ABS(grand_total)) AS total_return,
						SUM(paid) AS total_return_paid
					FROM
						'.$this->db->dbprefix('sales').' WHERE sale_status = "returned"
					GROUP BY
						sale_id) as bpas_return', 'bpas_return.sale_id=sales.id', 'left')
			->join('(SELECT
						sale_id,
						IFNULL(SUM(amount),0) AS paid,
						IFNULL(SUM(discount),0) AS discount
					FROM
						'.$this->db->dbprefix('payments').'
						
					GROUP BY
						sale_id) as bpas_payments', 'bpas_payments.sale_id=sales.id', 'left');
						
		$this->datatables->group_by("sales.id");			
		$this->datatables->where('IFNULL('.$this->db->dbprefix("sales").'.module_type,"")', "school");
		if ($biller_id) {
			$this->datatables->where('sales.biller_id', $biller_id);
        }	
		if ($academic_year) {
			$this->datatables->where('sales.academic_year', $academic_year);
        }
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
		}
		$this->datatables->where('sale_status !=', 'returned');
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $this->datatables->where('sales.created_by', $this->session->userdata('user_id'));
        }
        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }
	public function payments($id = null)
    {
        $this->bpas->checkPermissions(false, true);
        $this->data['payments'] = $this->sales_model->getInvoicePayments($id);
        $this->data['inv']      = $this->sales_model->getInvoiceByID($id);
        $this->load->view($this->theme . 'schools/payments', $this->data);
    }
    /*
    public function view_school_payment($id = null){
        $this->bpas->checkPermissions('payments', true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
        
        $payment                  = $this->sales_model->getPaymentByID($id);
        $inv                      = $this->sales_model->getInvoiceByID($payment->sale_id);
        $this->data['biller']     = $this->site->getCompanyByID($inv->biller_id);
        $this->data['customer']   = $this->site->getCompanyByID($inv->customer_id);
        $this->data['warehouse']  = $this->site->getWarehouseByID($inv->warehouse_id);
        $this->data['created_by']  = $this->site->getUser($payment->created_by);
        $this->data['inv']        = $inv;
        $this->data['payment']    =  $this->sales_model->getPaymentByID($id);
        $this->data['page_title'] = lang('view_dental_payment');

        $this->load->view($this->theme . 'sales/view_dental_payment', $this->data);
    }*/

	public function add_sale($other_income=null)
	{
		$this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
        $this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('customer', $this->lang->line("customer"), 'required');
        if ($this->form_validation->run() == true) {
			if ($this->Owner || $this->Admin  || $this->bpas->GP['change_date']) {
                $date = $this->bpas->fld(trim($this->input->post('date')));
            } else {
                $date = ($this->Settings->date_with_time == 0 ? date('Y-m-d') : date('Y-m-d H:i:s'));
            }
			$biller_id         = $this->input->post('biller');
			$customer_id       = $this->input->post('customer');
			$note              = $this->input->post('note');
			$staff_note        = $this->input->post('staff_note');
            $payment_term      = $this->input->post('payment_term');
            $payment_status    = $this->input->post('payment_status');
			$payment_term_info = $this->site->getPaymentTermsByID($payment_term);
            if($payment_term_info){
				if($payment_term_info->term_type=='end_month'){
					$due_date = date("Y-m-t", strtotime($date));
				} else {
					$due_date =  date('Y-m-d', strtotime('+' . $payment_term_info->due_day . ' days', strtotime($date)));
				}
			} else {
				$due_date = null;
			}
			$biller_details = $this->site->getCompanyByID($biller_id);
            $biller = $biller_details->company != '-' ? $biller_details->company : $biller_details->name;
			$customer_details = $this->site->getCompanyByID($customer_id);
			$customer = $customer_details->company != '-' ? $customer_details->company : $customer_details->name;
			$tax_detail = $this->site->getTaxRateByID($this->input->post('order_tax'));
			if($tax_detail && $tax_detail->rate > 0){
				$reference = $this->input->post('reference_no') ? $this->input->post('reference_no') : $this->site->getReference('tax_so', $biller_id);
			} else {
				$reference = $this->input->post('reference_no') ? $this->input->post('reference_no') : $this->site->getReference('so', $biller_id);
			}
			$academic_year = $this->input->post('academic_year');
			$program = $this->input->post('program');
			$grade = $this->input->post('grade');
			$child_no = $this->input->post('child_no');
			$fee_type = $this->input->post('fee_type');
			
			$total = 0;
			$order_tax = 0;
			$order_discount = 0;
			$total_items = 0;
			$product_discount = 0;
			$percentage = '%';
			$products = false;
			$i = isset($_POST['product_id']) ? sizeof($_POST['product_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
				$item_id = $_POST['product_id'][$r];
				$item_type = $_POST['product_type'][$r];
                $item_code = $_POST['product_code'][$r];
                $item_name = $_POST['product_name'][$r];
				$item_unit = $_POST['product_unit'][$r];
				$item_unit_quantity = $_POST['quantity'][$r];
                $item_quantity = $_POST['product_base_quantity'][$r];
				$real_unit_price = $this->bpas->formatDecimalRaw($_POST['real_unit_price'][$r]);
                $unit_price = $this->bpas->formatDecimalRaw($_POST['unit_price'][$r]);
				$cost = $_POST['cost'][$r];
				$item_comment = isset($_POST['product_comment'][$r]) ? $_POST['product_comment'][$r] : null;
				$item_discount = isset($_POST['product_discount'][$r]) ? $_POST['product_discount'][$r] : null;
				$unit = $this->site->getProductUnit($item_id,$item_unit);
				$product = $this->site->getProductByID($item_id);
				if (isset($item_discount)) {
                    $discount = $item_discount;
					$dpos = strpos($discount, $percentage);
					if ($dpos !== false) {
						$pds = explode("%", $discount);
						$pr_discount = $this->bpas->formatDecimalRaw(((($this->bpas->formatDecimalRaw($unit_price)) * (Float) ($pds[0])) / 100), 4);
					} else {
						$pr_discount = $this->bpas->formatDecimalRaw($discount);
					}
				}
				$unit_price = $this->bpas->formatDecimalRaw($unit_price - $pr_discount);
				$item_net_price = $unit_price;
				$pr_item_discount = $this->bpas->formatDecimalRaw($pr_discount * $item_unit_quantity);
				$product_discount += $pr_item_discount;
				$subtotal = $item_net_price * $item_unit_quantity;
				$products[] = array(
					'product_id' => $item_id,
					'product_code' => $item_code,
					'product_name' => $item_name,
					'product_type' => $item_type,
					'net_unit_price' => $item_net_price,
					'unit_price' => $item_net_price,
					'cost' => $cost,
					'quantity' => $item_quantity,
					'product_unit_id' => $item_unit,
					'product_unit_code' => $unit ? $unit->code : NULL,
					'unit_quantity' => $item_unit_quantity,
					'warehouse_id' => $this->Settings->default_warehouse,
					'discount' => $item_discount,
					'comment' => $item_comment,
					'item_discount' => $pr_item_discount,
					'subtotal' => $subtotal,
					'real_unit_price' => $real_unit_price
				);
				$total_items++;
				$total += $subtotal;
			}
			if (!$products) {
				$this->form_validation->set_rules('product', lang("order_items"), 'required');
			} else {
				krsort($products);
			}
			if ($this->input->post('order_discount')) {
                $order_discount_id = $this->input->post('order_discount');
                $opos = strpos($order_discount_id, $percentage);
                if ($opos !== false) {
                    $ods = explode("%", $order_discount_id);
                    $order_discount = (($total) * (Float) ($ods[0])) / 100;
                } else {
                    $order_discount = $order_discount_id;
                }
            } else {
                $order_discount_id = null;
            }
			if ($this->Settings->tax2) {
                $order_tax_id = $this->input->post('order_tax');
                if ($order_tax_details = $this->site->getTaxRateByID($order_tax_id)) {
                    if ($order_tax_details->type == 2) {
                        $order_tax = $order_tax_details->rate;
                    }
                    if ($order_tax_details->type == 1) {
                        $order_tax = ((($total) - $order_discount) * $order_tax_details->rate) / 100;
                    }
                }
            } else {
                $order_tax_id = null;
            }
			$total_discount = $order_discount + $product_discount;
			$grand_total = $total + $order_tax - $total_discount;
			$data = array(
				'date' 			=> $date,
                'reference_no' => $reference,
                'customer_id' 	=> $customer_id,
                'customer' 		=> $customer,
                'biller_id' 	=> $biller_id,
                'biller' 		=> $biller,
                'warehouse_id' => $this->Settings->default_warehouse,
                'note' => $note,
				'staff_note' => $staff_note,
                'total' => $total,
				'order_tax_id' => $order_tax_id,
				'order_tax' => $order_tax,
				'product_discount' => $product_discount,
				'order_discount_id' => $order_discount_id,
                'order_discount' => $order_discount,
                'total_discount' => $total_discount,
                'grand_total' => $grand_total,
                'sale_status' => "completed",
				'total_items' => $total_items,
				'module_type' => 'school',
				'payment_status' => $payment_status,
				'delivery_status' => 'completed',
                'payment_term' 	=> $payment_term,
                'due_date' 		=> $due_date,
				'paid' 			=> 0,
				'academic_year' => $academic_year,
				'program_id' 	=> $program,
				'grade_id' 		=> $grade,
				'fee_type' 		=> $fee_type,
				'created_by' 	=> $this->session->userdata('user_id'),
            );
            if ($payment_status == 'partial' || $payment_status == 'paid') {
                if ($this->input->post('paid_by') == 'deposit') {
                    if (!$this->site->check_customer_deposit($customer_id, $this->input->post('amount-paid'))) {
                        $this->session->set_flashdata('error', lang('amount_greater_than_deposit'));
                        redirect($_SERVER['HTTP_REFERER']);
                    }
                }
                $currencies = array();
	            $camounts   = $this->input->post("c_amount");
	            if(!empty($camounts)){
	                foreach($camounts as $key => $camount){
	                    $currency = $this->input->post("currency");
	                    $rate = $this->input->post("rate");
	                    $currencies[] = array(
	                        "amount"   => $camounts[$key],
	                        "currency" => $currency[$key],
	                        "rate"     => $rate[$key],
	                    );
	                }
	            }
                if ($this->input->post('paid_by') == 'gift_card') {
                    $gc            = $this->site->getGiftCardByNO($this->input->post('gift_card_no'));
                    $amount_paying = $grand_total >= $gc->balance ? $gc->balance : $grand_total;
                    $gc_balance    = $gc->balance - $amount_paying;
                    $payment       = [
                        'date'         => $date,
                        'reference_no' => $this->input->post('payment_reference_no'),
                        'amount'       => $this->bpas->formatDecimal($amount_paying),
                        'paid_by'      => $this->input->post('paid_by'),
                        'cheque_no'    => $this->input->post('cheque_no'),
                        'cc_no'        => $this->input->post('gift_card_no'),
                        'cc_holder'    => $this->input->post('pcc_holder'),
                        'cc_month'     => $this->input->post('pcc_month'),
                        'cc_year'      => $this->input->post('pcc_year'),
                        'cc_type'      => $this->input->post('pcc_type'),
                        'created_by'   => $this->session->userdata('user_id'),
                        'note'         => $this->input->post('payment_note'),
                        'type'         => 'received',
                        'gc_balance'   => $gc_balance,
                        'currencies'   => json_encode($currencies),
                    ];
                } else {
                    $payment = [
                        'date'         => $date,
                        'reference_no' => $this->input->post('payment_reference_no'),
                        'amount'       => $this->bpas->formatDecimal($this->input->post('amount-paid')),
                        'paid_by'      => $this->input->post('paid_by'),
                        'cheque_no'    => $this->input->post('cheque_no'),
                        'cc_no'        => $this->input->post('pcc_no'),
                        'cc_holder'    => $this->input->post('pcc_holder'),
                        'cc_month'     => $this->input->post('pcc_month'),
                        'cc_year'      => $this->input->post('pcc_year'),
                        'cc_type'      => $this->input->post('pcc_type'),
                        'created_by'   => $this->session->userdata('user_id'),
                        'note'         => $this->input->post('payment_note'),
                        'type'         => 'received',
                        'currencies'   => json_encode($currencies),
                    ];
                }
                $amount_paying = $this->bpas->formatDecimal($this->input->post('amount-paid'));
                //=====add accountig=====//
                if($this->Settings->module_account == 1){
                    if($this->input->post('paid_by') == 'deposit'){
                        $payment['bank_account'] = $this->accounting_setting->default_sale_deposit;
                        $paying_to = $this->accounting_setting->default_sale_deposit;
                    }else{
                        $payment['bank_account'] = $this->input->post('bank_account');
                        $paying_to = $this->input->post('bank_account');
                    }
                    if($amount_paying < $grand_total){
                        $accTranPayments[] = array(
                            'tran_type' => 'Payment',
                            'tran_date' => $date,
                            'reference_no' => $this->input->post('payment_reference_no'),
                            'account_code' => $this->accounting_setting->default_receivable,
                            'amount' => ($grand_total - $amount_paying),
                            'narrative' => $this->site->getAccountName($this->accounting_setting->default_receivable),
                            'description' => $this->input->post('payment_note'),
                            'biller_id' => $biller_id,
                            'customer_id' => $customer_id,
                            'created_by'  => $this->session->userdata('user_id'),
                            'activity_type' => $this->site->get_activity($this->accounting_setting->default_receivable)
                        );
                    }
                    $accTranPayments[] = array(
                        'tran_type' => 'Payment',
                        'tran_date' => $date,
                        'reference_no' => $this->input->post('payment_reference_no'),
                        'account_code' => $paying_to,
                        'amount' => $amount_paying,
                        'narrative' => $this->site->getAccountName($paying_to),
                        'description' => $this->input->post('payment_note'),
                        'biller_id' => $biller_id,
                        'customer_id' => $customer_id,
                        'created_by'  => $this->session->userdata('user_id'),
                    );
                }
                //=====end accountig=====//
            } else {
                $accTranPayments= [];
                $payment = [];
                $accTrans[] = array(
                    'tran_type' => 'Sale',
                    'tran_date' => $date,
                    'reference_no' => $reference,
                    'account_code' => $this->accounting_setting->default_receivable,
                    'amount' => $grand_total,
                    'narrative' => $this->site->getAccountName($this->accounting_setting->default_receivable),
                    'biller_id' => $biller_id,
                    'customer_id' => $customer_id,
                    'created_by'  => $this->session->userdata('user_id'),
                    'activity_type' => $this->site->get_activity($this->accounting_setting->default_receivable)
                );
            }
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $attachment = $this->upload->file_name;
                $data['attachment'] = $attachment;
            }
            $customer_info = $this->site->getCompanyByID($customer);
			$student       = $this->schools_model->getStudentByID($customer_details->student_id);
			$student_id    = (isset($customer_details->student_id) ? $customer_details->student_id : null);
            $study_info    = array(
            	'biller_id'     => $this->input->post('biller'),
            	'student_id'    => $student_id,
            	'academic_year' => $this->input->post('academic_year'),
            	'program_id'    => $this->input->post('program'),
            	'skill_id'      => $this->input->post('skill'),
            	'grade_id'      => $this->input->post('grade'),
            	'section_id'    => $this->input->post('section'),
            	'class_id'      => $this->input->post('class_id')
            );
        }
		if ($this->form_validation->run() == true && $this->schools_model->addSale($data, $products, $study_info, $payment)) {	
			$this->session->set_userdata('remove_shlls', 1);
            $this->session->set_flashdata('message', $this->lang->line("sale_added"));          
			if($other_income){
				admin_redirect('schools/other_income');
			}else{
				admin_redirect('schools/sales');
			}
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $user = $this->site->getUser($this->session->userdata('user_id'));
            $this->data['currencies'] = $this->site->getAllCurrencies();
			$this->data['billers']    = $this->site->getBillers();
			$this->data['warehouses'] = $this->site->getAllWarehouses();
			$this->data['count']      = explode(',', $this->session->userdata('warehouse_id'));
            $this->data['user_warehouses'] = $user->warehouse_id ? explode(',', $user->warehouse_id) : null;
			$this->data['paymentterms']    = $this->site->getAllPaymentTerms();
			$this->data['tax_rates']       = $this->site->getAllTaxRates();
			$this->data['customers']       = $this->site->getCustomers();
			$this->data['programs']        = $this->schools_model->getPrograms();	
			$this->data['grades']          = $this->schools_model->getGrades();
			$this->data['skills']          = $this->schools_model->getSkills();
			$this->data['other_income']    = $other_income;
            $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/sales'), 'page' => lang('sales')), array('link' => '#', 'page' => lang('add_sale')));
			$meta = array('page_title' => lang('add_sale'), 'bc' => $bc);
            $this->page_construct('schools/add_sale', $meta, $this->data);
        }
	}
	
	public function sale_by_excel()
	{
		$this->bpas->checkPermissions();
		$this->load->library('excel');
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
        $this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('customer', $this->lang->line("customer"), 'required');
        if ($this->form_validation->run() == true) {
			if ($this->Owner || $this->Admin  || $this->bpas->GP['change_date']) {
                $date = $this->bpas->fld(trim($this->input->post('date')));
            } else {
                $date = ($this->Settings->date_with_time == 0 ? date('Y-m-d') : date('Y-m-d H:i:s'));
            }
			$biller_id    = $this->input->post('biller');
			$customer_id  = $this->input->post('customer');
			$note         = $this->input->post('note');
			$staff_note   = $this->input->post('staff_note');
            $payment_term = $this->input->post('payment_term');
			$payment_term_info = $this->site->getPaymentTermsByID($payment_term);
            if($payment_term_info){
				if($payment_term_info->term_type=='end_month'){
					$due_date = date("Y-m-t", strtotime($date));
				} else {
					$due_date =  date('Y-m-d', strtotime('+' . $payment_term_info->due_day . ' days', strtotime($date)));
				}
			} else {
				$due_date = null;
			}
			$biller_details = $this->site->getCompanyByID($biller_id);
            $biller = $biller_details->company != '-' ? $biller_details->company : $biller_details->name;
			$customer_details = $this->site->getCompanyByID($customer_id);
			$customer = $customer_details->company != '-' ? $customer_details->company : $customer_details->name;
			$tax_detail = $this->site->getTaxRateByID($this->input->post('order_tax'));
			if($tax_detail && $tax_detail->rate > 0){
				$reference = $this->input->post('reference_no') ? $this->input->post('reference_no') : $this->site->getReference('tax_so', $biller_id);
			} else {
				$reference = $this->input->post('reference_no') ? $this->input->post('reference_no') : $this->site->getReference('so', $biller_id);
			}
			$academic_year = $this->input->post('academic_year');
			$program = $this->input->post('program');
			$grade = $this->input->post('grade');
			$child_no = $this->input->post('child_no');
			$fee_type = $this->input->post('fee_type');
			
			$total = 0;
			$order_tax = 0;
			$order_discount = 0;
			$total_items = 0;
			$product_discount = 0;
			$percentage = '%';

			if (isset($_FILES["userfile"]["name"])) {
				$this->load->library('upload');
                $config['upload_path']   = $this->digital_upload_path;
                $config['allowed_types'] = ['csv','xls' , 'xlsx'];
                $config['max_size']      = $this->allowed_file_size;
                $config['overwrite']     = true;
                $config['encrypt_name']  = true;
                $config['max_filename']  = 25;
                $this->upload->initialize($config);

                if (!$this->upload->do_upload()) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect('schools/sale_by_excel');
                }
                $path=$_FILES["userfile"]["tmp_name"];
                $object=PHPExcel_IOFactory::load($path);
                if(!$object){
                    $error=$this->excel->display_errors();
                    $this->session->set_flashdata('error',$error);
                    admin_redirect("schools/sale_by_excel");
                }
                foreach($object->getWorksheetIterator() as $worksheet){
                    $HighestRow=$worksheet->getHighestRow();
                    $HighestColumn=$worksheet->getHighestColumn();
                    $rw=2;
                    $total = 0;
                    $product_tax = 0;
                    $item_tax=0;
                    $product_discount = 0;
					$order_tax = 0;
					$order_discount = 0;
					$total_items = 0;
					$percentage = '%';

                    for($row=2;$row <= $HighestRow;$row++){
                        $code = $worksheet->getCellByColumnAndRow(0, $row)->getValue();
                        $net_unit_price = $worksheet->getCellByColumnAndRow(1, $row)->getValue();
                        $quantity = $worksheet->getCellByColumnAndRow(2, $row)->getValue();
                        $product_unit = $worksheet->getCellByColumnAndRow(3, $row)->getValue();
                        $comment = $worksheet->getCellByColumnAndRow(4, $row)->getValue();
                        $discount = $worksheet->getCellByColumnAndRow(5, $row)->getValue();
                    
                        if (isset($code) && isset($net_unit_price) && isset($quantity)) {
                        	if ($product_details = $this->sales_model->getProductByCode($code)) {
                        		$item_id        = $product_details->id;
                                $item_type      = $product_details->type;
                                $item_code      = $product_details->code;
                                $item_name      = $product_details->name;
                                
                                $item_unit = $product_unit;
                                $item_unit_quantity = $quantity;
				                $item_quantity = $quantity;
				                $item_net_price = $this->bpas->formatDecimal($net_unit_price);
								$real_unit_price = $this->bpas->formatDecimalRaw($net_unit_price);
				                $unit_price = $this->bpas->formatDecimalRaw($net_unit_price);
								$cost = 0;
								$item_comment = isset($comment) ? $comment : null;
								$item_discount = isset($discount) ? $discount : null;
                                $unit         = $this->site->getUnitByCode($item_unit);
								$product = $this->site->getProductByID($item_id);
								if (isset($item_discount)) {
				                    $discount = $item_discount;
									$dpos = strpos($discount, $percentage);
									if ($dpos !== false) {
										$pds = explode("%", $discount);
										$pr_discount = $this->bpas->formatDecimalRaw(((($this->bpas->formatDecimalRaw($unit_price)) * (Float) ($pds[0])) / 100), 4);
									} else {
										$pr_discount = $this->bpas->formatDecimalRaw($discount);
									}
								}
								$unit_price = $this->bpas->formatDecimalRaw($unit_price - $pr_discount);
								$item_net_price = $unit_price;
								$pr_item_discount = $this->bpas->formatDecimalRaw($pr_discount * $item_unit_quantity);
								$product_discount += $pr_item_discount;
								$subtotal = $item_net_price * $item_unit_quantity;
								$products[] = array(
									'product_id' => $item_id,
									'product_code' => $item_code,
									'product_name' => $item_name,
									'product_type' => $item_type,
									'net_unit_price' => $item_net_price,
									'unit_price' => $item_net_price,
									'cost' => $cost,
									'quantity' => $item_quantity,
									'product_unit_id'   => $unit ? $unit->id : null,
                        			'product_unit_code' => $unit ? $unit->code : null,
									'unit_quantity' => $item_unit_quantity,
									'warehouse_id' => $this->Settings->default_warehouse,
									'discount' => $item_discount,
									'comment' => $item_comment,
									'item_discount' => $pr_item_discount,
									'subtotal' => $subtotal,
									'real_unit_price' => $real_unit_price
								);
								$total_items++;
								$total += $subtotal;
                        	}else{
                        		$this->session->set_flashdata('error', lang('pr_not_found') . ' ( ' . $code . ' ). ' . lang('line_no') . ' ' . $rw);
                                redirect($_SERVER['HTTP_REFERER']);
                        	}

                        $rw++;
                        }
                    }
                }
			}

			if ($this->input->post('order_discount')) {
                $order_discount_id = $this->input->post('order_discount');
                $opos = strpos($order_discount_id, $percentage);
                if ($opos !== false) {
                    $ods = explode("%", $order_discount_id);
                    $order_discount = (($total) * (Float) ($ods[0])) / 100;
                } else {
                    $order_discount = $order_discount_id;
                }
            } else {
                $order_discount_id = null;
            }
			if ($this->Settings->tax2) {
                $order_tax_id = $this->input->post('order_tax');
                if ($order_tax_details = $this->site->getTaxRateByID($order_tax_id)) {
                    if ($order_tax_details->type == 2) {
                        $order_tax = $order_tax_details->rate;
                    }
                    if ($order_tax_details->type == 1) {
                        $order_tax = ((($total) - $order_discount) * $order_tax_details->rate) / 100;
                    }
                }
            } else {
                $order_tax_id = null;
            }
			$total_discount = $order_discount + $product_discount;
			$grand_total = $total + $order_tax - $total_discount;
			$data = array(
				'date' => $date,
                'reference_no' => $reference,
                'customer_id' => $customer_id,
                'customer' => $customer,
                'biller_id' => $biller_id,
                'biller' => $biller,
                'warehouse_id' => $this->Settings->default_warehouse,
                'note' => $note,
				'staff_note' => $staff_note,
                'total' => $total,
				'order_tax_id' => $order_tax_id,
				'order_tax' => $order_tax,
				'product_discount' => $product_discount,
				'order_discount_id' => $order_discount_id,
                'order_discount' => $order_discount,
                'total_discount' => $total_discount,
                'grand_total' => $grand_total,
                'sale_status' => "completed",
				'total_items' => $total_items,
				'module_type' => 'school',
				'payment_status' => 'pending',
				'delivery_status' => 'completed',
                'payment_term' => $payment_term,
                'due_date' => $due_date,
				'paid' => 0,
				'academic_year' => $academic_year,
				'program_id' => $program,
				'grade_id' => $grade,
				'fee_type' => $fee_type,
				'created_by' => $this->session->userdata('user_id'),
            );
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $attachment = $this->upload->file_name;
                $data['attachment'] = $attachment;
            }
            $customer_info = $this->site->getCompanyByID($customer);
			$student       = $this->schools_model->getStudentByID($customer_details->student_id);
			$student_id    = (isset($customer_details->student_id) ? $customer_details->student_id : null);
            $study_info    = array(
            	'biller_id'     => $this->input->post('biller'),
            	'student_id'    => $student_id,
            	'academic_year' => $this->input->post('academic_year'),
            	'program_id'    => $this->input->post('program'),
            	'skill_id'      => $this->input->post('skill'),
            	'grade_id'      => $this->input->post('grade'),
            	'section_id'    => $this->input->post('section'),
            	'class_id'      => $this->input->post('class_id')
            );
        }
		if ($this->form_validation->run() == true && $this->schools_model->addSale($data, $products, $study_info)) {	
			$this->session->set_userdata('remove_shlls', 1);
            $this->session->set_flashdata('message', $this->lang->line("sale_added"));          
			admin_redirect('schools/sales');
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $user = $this->site->getUser($this->session->userdata('user_id'));
			$this->data['billers']    = $this->site->getBillers();
			$this->data['warehouses'] = $this->site->getAllWarehouses();
			$this->data['count']      = explode(',', $this->session->userdata('warehouse_id'));
            $this->data['user_warehouses'] = $user->warehouse_id ? explode(',', $user->warehouse_id) : null;
			$this->data['paymentterms']    = $this->site->getAllPaymentTerms();
			$this->data['tax_rates']       = $this->site->getAllTaxRates();
			$this->data['customers']       = $this->site->getCustomers();
			$this->data['programs']        = $this->schools_model->getPrograms();	
			$this->data['grades']          = $this->schools_model->getGrades();
			$this->data['skills']          = $this->schools_model->getSkills();
            $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/sales'), 'page' => lang('sales')), array('link' => '#', 'page' => lang('add_sale_by_excel')));
			$meta = array('page_title' => lang('add_sale_by_excel'), 'bc' => $bc);
            $this->page_construct('schools/add_sale_by_excel', $meta, $this->data);
        }
	}

	public function edit_sale($id = false,$other_income=null)
	{
		$this->bpas->checkPermissions();
		$sale = $this->schools_model->getSaleByID($id);
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
        $this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('customer', $this->lang->line("customer"), 'required');
        if ($this->form_validation->run() == true) {
			if ($this->Owner || $this->Admin  || $this->bpas->GP['change_date']) {
                $date = $this->bpas->fld(trim($this->input->post('date')));
            } else {
                $date = ($this->Settings->date_with_time==0 ? date('Y-m-d') : date('Y-m-d H:i:s'));
            }
			$biller_id = $this->input->post('biller');
			$customer_id = $this->input->post('customer');
			$note = $this->input->post('note');
			$staff_note = $this->input->post('staff_note');
            $payment_term = $this->input->post('payment_term');
			$payment_term_info = $this->site->getPaymentTermsByID($payment_term);
            if($payment_term_info){
				if($payment_term_info->term_type=='end_month'){
					$due_date = date("Y-m-t", strtotime($date));
				}else{
					$due_date =  date('Y-m-d', strtotime('+' . $payment_term_info->due_day . ' days', strtotime($date)));
				}
			}else{
				$due_date = null;
			}
			$biller_details = $this->site->getCompanyByID($biller_id);
            $biller = $biller_details->company != '-' ? $biller_details->company : $biller_details->name;
			$customer_details = $this->site->getCompanyByID($customer_id);
			$customer = $customer_details->company != '-' ? $customer_details->company : $customer_details->name;
			$tax_detail = $this->site->getTaxRateByID($this->input->post('order_tax'));
			if($tax_detail && $tax_detail->rate > 0){
				$reference = $this->input->post('reference_no') ? $this->input->post('reference_no') : $this->site->getReference('tax_so',$biller_id);
			} else {
				$reference = $this->input->post('reference_no') ? $this->input->post('reference_no') : $this->site->getReference('so',$biller_id);
			}
			$academic_year = $this->input->post('academic_year');
			$program  = $this->input->post('program');
			$grade    = $this->input->post('grade');
			$child_no = $this->input->post('child_no');
			$fee_type = $this->input->post('fee_type');
			
			$total     = 0;
			$order_tax = 0;
			$order_discount = 0;
			$total_items = 0;
			$product_discount = 0;
			$percentage = '%';
			$products = false;
			$i = isset($_POST['product_id']) ? sizeof($_POST['product_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
				$item_id = $_POST['product_id'][$r];
				$item_type = $_POST['product_type'][$r];
                $item_code = $_POST['product_code'][$r];
                $item_name = $_POST['product_name'][$r];
				$item_unit = $_POST['product_unit'][$r];
				$item_unit_quantity = $_POST['quantity'][$r];
                $item_quantity = $_POST['product_base_quantity'][$r];
				$real_unit_price = $this->bpas->formatDecimalRaw($_POST['real_unit_price'][$r]);
                $unit_price = $this->bpas->formatDecimalRaw($_POST['unit_price'][$r]);
				$cost = $_POST['cost'][$r];
				$item_comment = isset($_POST['product_comment'][$r]) ? $_POST['product_comment'][$r] : null;
				$item_discount = isset($_POST['product_discount'][$r]) ? $_POST['product_discount'][$r] : null;
				$unit = $this->site->getProductUnit($item_id,$item_unit);
				$product = $this->site->getProductByID($item_id);
				if (isset($item_discount)) {
                    $discount = $item_discount;
					$dpos = strpos($discount, $percentage);
					if ($dpos !== false) {
						$pds = explode("%", $discount);
						$pr_discount = $this->bpas->formatDecimalRaw(((($this->bpas->formatDecimalRaw($unit_price)) * (Float) ($pds[0])) / 100), 4);
					} else {
						$pr_discount = $this->bpas->formatDecimalRaw($discount);
					}
				}
				$unit_price = $this->bpas->formatDecimalRaw($unit_price - $pr_discount);
				$item_net_price = $unit_price;
				$pr_item_discount = $this->bpas->formatDecimalRaw($pr_discount * $item_unit_quantity);
				$product_discount += $pr_item_discount;
				$subtotal = $item_net_price * $item_unit_quantity;
				$products[] = array(
					'sale_id' => $id,
					'product_id' => $item_id,
					'product_code' => $item_code,
					'product_name' => $item_name,
					'product_type' => $item_type,
					'net_unit_price' => $item_net_price,
					'unit_price' => $item_net_price,
					'cost' => $cost,
					'quantity' => $item_quantity,
					'product_unit_id' => $item_unit,
					'product_unit_code' => $unit ? $unit->code : NULL,
					'unit_quantity' => $item_unit_quantity,
					'warehouse_id' => $this->Settings->default_warehouse,
					'discount' => $item_discount,
					'comment' => $item_comment,
					'item_discount' => $pr_item_discount,
					'subtotal' => $subtotal,
					'real_unit_price' => $real_unit_price
				);
				$total_items++;
				$total += $subtotal;
			}
			if (!$products) {
				$this->form_validation->set_rules('product', lang("order_items"), 'required');
			} else {
				krsort($products);
			}
			if ($this->input->post('order_discount')) {
                $order_discount_id = $this->input->post('order_discount');
                $opos = strpos($order_discount_id, $percentage);
                if ($opos !== false) {
                    $ods = explode("%", $order_discount_id);
                    $order_discount = (($total) * (Float) ($ods[0])) / 100;
                } else {
                    $order_discount = $order_discount_id;
                }
            } else {
                $order_discount_id = null;
            }
			
			if ($this->Settings->tax2) {
                $order_tax_id = $this->input->post('order_tax');
                if ($order_tax_details = $this->site->getTaxRateByID($order_tax_id)) {
                    if ($order_tax_details->type == 2) {
                        $order_tax = $order_tax_details->rate;
                    }
                    if ($order_tax_details->type == 1) {
                        $order_tax = ((($total) - $order_discount) * $order_tax_details->rate) / 100;
                    }
                }
            } else {
                $order_tax_id = null;
            }
			$total_discount = $order_discount + $product_discount;
			$grand_total = $total + $order_tax - $total_discount;
			$data = array(
				'date' => $date,
                'reference_no' => $reference,
                'customer_id' => $customer_id,
                'customer' => $customer,
                'biller_id' => $biller_id,
                'biller' => $biller,
                'warehouse_id' => $this->Settings->default_warehouse,
                'note' => $note,
				'staff_note' => $staff_note,
                'total' => $total,
				'order_tax_id' => $order_tax_id,
				'order_tax' => $order_tax,
				'product_discount' => $product_discount,
				'order_discount_id' => $order_discount_id,
                'order_discount' => $order_discount,
                'total_discount' => $total_discount,
                'grand_total' => $grand_total,
				'total_items' => $total_items,
                'payment_term' => $payment_term,
                'due_date' => $due_date,
				'academic_year' => $academic_year,
				'program_id' => $program,
				'grade_id' => $grade,
				'child_no' => $child_no,
				'fee_type' => $fee_type,
				'updated_at' => date('Y-m-d H:i'),
				'updated_by' => $this->session->userdata('user_id'),
            );
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $attachment = $this->upload->file_name;
                $data['attachment'] = $attachment;
            }

            $student_id = (isset($customer_details->student_id) ? $customer_details->student_id : null);
            $study_info = array(
            	'biller_id'     => $this->input->post('biller'),
            	'student_id'    => $student_id,
            	'academic_year' => $this->input->post('academic_year'),
            	'program_id'    => $this->input->post('program'),
            	'skill_id'      => $this->input->post('skill'),
            	'grade_id'      => $this->input->post('grade'),
            	'section_id'    => $this->input->post('section'),
            	'class_id'      => $this->input->post('class_id')
            );
        }
		if ($this->form_validation->run() == true && $this->schools_model->updateSale($id, $data, $products, $study_info)) {	
			$this->session->set_userdata('remove_shlls', 1);
            $this->session->set_flashdata('message', $this->lang->line("sale_edited"));          
			if($other_income){
				admin_redirect('schools/other_income');
			}else{
				admin_redirect('schools/sales');
			}
        } else {
			$warehouse_id  = $sale->warehouse_id;
			$customer_id   = $sale->customer_id;
			$academic_year = $sale->academic_year;
			$sale_items = $this->schools_model->getSaleItemsByID($id);
			$customer = $this->site->getCompanyByID($customer_id);
        	$customer_group = $this->site->getCustomerGroupByID($customer->customer_group_id);
			if (!empty($sale->study_info_id)) {
				($study_info = $this->schools_model->getStudyInfoByID($sale->study_info_id));
				if (!empty($study_info->scholarship_id) && $study_info->scholarship_id != '') {
					$scholarship = $this->schools_model->getScholarshipByID($study_info->scholarship_id);
				}
			}
            krsort($sale_items);
            $c = rand(100000, 9999999);
            foreach ($sale_items as $item) {
                $row = $this->site->getProductByID($item->product_id);
                if (!$row) {
                    $row = json_decode('{}');
                    $row->tax_method = 0;
                } else {
                    unset($row->cost, $row->details, $row->product_details, $row->image, $row->barcode_symbology, $row->cf1, $row->cf2, $row->cf3, $row->cf4, $row->cf5, $row->cf6, $row->supplier1price, $row->supplier2price, $row->cfsupplier3price, $row->supplier4price, $row->supplier5price, $row->supplier1, $row->supplier2, $row->supplier3, $row->supplier4, $row->supplier5, $row->supplier1_part_no, $row->supplier2_part_no, $row->supplier3_part_no, $row->supplier4_part_no, $row->supplier5_part_no);
                }
				$row->quantity = 0;
                $pis = $this->site->getPurchasedItemstoSales($item->product_id, $item->warehouse_id, $item->option_id);
                if ($pis) {
                    foreach ($pis as $pi) {
                        $row->quantity += $pi->quantity_balance;
                    }
                }
				$options       = $this->schools_model->getProductOptions($row->id, $warehouse_id);
                $product_options = $this->site->getAllProductOption($row->id);
                if ($options) {
                    $opt = $option_id && $r == 0 ? $this->schools_model->getProductOptionByID($option_id) : $options[0];
                    if (!$option_id || $r > 0) {
                        $option_id = $opt->id;
                    }
                } else {
                    $opt        = json_decode('{}');
                    $opt->price = 0;
                    $option_id  = false;
                }
                $row->option = $option_id;
                $pis         = $this->site->getPurchasedItemstoSales($row->id, $warehouse_id, $row->option);
                if ($pis) {
                    $row->quantity = 0;
                    foreach ($pis as $pi) {
                        $row->quantity += $pi->quantity_balance;
                    }
                }
				$row->fup = 1;
                $row->id = $item->product_id;
                $row->code = $item->product_code;
                $row->name = $item->product_name;
                $row->type = $item->product_type;
                $row->base_quantity = $item->quantity;
                $row->base_unit = $row->unit ? $row->unit : $item->product_unit_id;
				$row->base_unit_price = $row->price ? $row->price : $item->real_unit_price;
                $row->unit = $item->product_unit_id;
                $row->qty  = $item->unit_quantity;
                $row->discount = $item->discount ? $item->discount : '0';
                $row->price = $this->bpas->formatDecimalRaw($item->net_unit_price + $this->bpas->formatDecimalRaw($item->item_discount / $item->quantity));
				$row->cost = $item->cost;
				$row->unit_price = $row->tax_method ? $item->unit_price + $this->bpas->formatDecimalRaw($item->item_discount / $item->quantity) + $this->bpas->formatDecimalRaw($item->item_tax / $item->quantity) : $item->unit_price + ($item->item_discount / $item->quantity);
                $row->real_unit_price = $item->real_unit_price;
                $row->tax_rate   = $item->tax_rate_id;
				$row->comment    = isset($item->comment) ? $item->comment : '';
				$price_group_id  = ($customer->price_group_id ? $customer->price_group_id : ((isset($scholarship) && $scholarship->price_group_id) ? $scholarship->price_group_id : null));
                $units     = $this->site->getUnitsByBUID($row->base_unit);
				$tax_rate  = $this->site->getTaxRateByID($row->tax_rate);
				$set_price = $this->site->getProductPriceMultiUnits($row->id, $price_group_id, $academic_year);
                $ri = $this->Settings->item_addition ? $row->id : $c;
                $pr[$ri] = array(
						'id'  => $c, 'item_id' => $row->id, 'label' => $row->name . " (" . $row->code . ")",
						'row' => $row,'tax_rate' => $tax_rate, 'units' => $units, 'set_price' => $set_price, 'options' => $options, 'aaa' => $scholarship,
						'study_info' => (isset($study_info) ? $study_info : null) 
					);
				$c++;
            }
			$this->data['sale_items']   = json_encode($pr);
            $this->data['error']        = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$user = $this->site->getUser($this->session->userdata('user_id'));
			$this->data['billers']      = $this->site->getBillers();
			$this->data['warehouses']   = $this->site->getAllWarehouses();
			$this->data['count']        = explode(',', $this->session->userdata('warehouse_id'));
            $this->data['user_warehouses'] = $user->warehouse_id ? explode(',', $user->warehouse_id) : null;
			$this->data['paymentterms'] = $this->site->getAllPaymentTerms();
			$this->data['tax_rates']    = $this->site->getAllTaxRates();
			$this->data['customers']    = $this->site->getCustomers();
			$this->data['programs']     = $this->schools_model->getPrograms();	
			$this->data['grades']       = $this->schools_model->getGrades();
			$this->data['skills']       = $this->schools_model->getSkills();
			$this->data['sale']         = $sale;
			$this->data['study_info']   = ($sale->study_info_id ? $this->schools_model->getStudyInfoByID($sale->study_info_id) : null);
			$this->data['other_income'] = $other_income;
			$this->session->set_userdata('remove_shlls', 1);
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/sales'), 'page' => lang('sales')), array('link' => '#', 'page' => lang('edit_sale')));
			$meta = array('page_title' => lang('edit_sale'), 'bc' => $bc);
            $this->page_construct('schools/edit_sale', $meta, $this->data);
        }
	}
	
	public function delete_sale($id = null)
    {
        $this->bpas->checkPermissions(null, true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		$sale = $this->schools_model->getSaleByID($id);
		if ($this->Settings->module_installment==1 && $sale->installment > 0) {
            $this->session->set_flashdata('error', lang('sale_xinstallment_action')." ".$sale->reference_no);
            $this->bpas->md();
        }
        if ($this->schools_model->deleteSale($id)) {
            $this->session->set_flashdata('message', lang('sale_deleted')." ".$sale->reference_no);
            admin_redirect('schools/sales');
        }
    }

	public function get_student_info()
	{
		$customer      = $this->input->get('customer');
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : false;
		$customer_info = $this->site->getCompanyByID($customer);
		$student    = $this->schools_model->getStudentByID($customer_info->student_id);
		$study_info = $this->schools_model->getLastStudyInfo($customer_info->student_id, $academic_year);
		echo json_encode(array("student" => $student, "study_info" => $study_info));
	}
	
	public function modal_view_sale($id = null,$payment_id =false)
    {
        $this->bpas->checkPermissions('sales', true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $inv = $this->schools_model->getSaleByID($id);
        if (!$this->session->userdata('view_right')) {
            $this->bpas->view_rights($inv->created_by, true);
        }
		$customer = $this->site->getCompanyByID($inv->customer_id);
        $this->data['rows'] = $this->schools_model->getSaleItemsByID($id);
		$this->data['customer'] = $customer;
        $this->data['biller'] = $this->site->getCompanyByID($inv->biller_id);
        $this->data['inv'] = $inv;
		if($this->Owner || $this->Admin || $this->bpas->GP['unlimited-print']){
			$this->data['print'] = 0;
		}else{
			if($this->Settings->limit_print=='1' && $this->site->checkPrint('Sale',$inv->id)){
				$this->data['print'] = 1;
			}else if($this->Settings->limit_print=='2' && $this->site->checkPrint('Sale',$inv->id)){
				$this->data['print'] = 2;
			}else{
				$this->data['print'] = 0;
			}
		}
		$student = $customer ? $this->schools_model->getStudentByID($customer->student_id) : false;
		$this->data['siblings'] = $student ? $this->schools_model->getSiblings($student->family_id) : false;
		$this->data['student'] = $student;
		$this->data['biller']      = $this->site->getCompanyByID($inv->biller_id);
		$this->data['sold_by']  = $this->site->getsaleman($inv->saleman_by);
        $this->data['created_by']  = $this->site->getUser($inv->created_by);
		$this->data['grade'] = $this->schools_model->getGradeByID($inv->grade_id);
		if($payment_id){
			$this->data['payment']    =  $this->sales_model->getPaymentByID($payment_id);
		}
		$this->load->view($this->theme . 'schools/modal_view_sale', $this->data);
    }

    public function modal_view_sale_a4($id = null, $payment_id =false)
    {
        $this->bpas->checkPermissions('sales', true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $inv = $this->schools_model->getSaleByID($id);
        if (!$this->session->userdata('view_right')) {
            $this->bpas->view_rights($inv->created_by, true);
        }
		$customer = $this->site->getCompanyByID($inv->customer_id);
        $this->data['rows'] = $this->schools_model->getSaleItemsByID($id);
		$this->data['customer'] = $customer;
        $this->data['biller'] = $this->site->getCompanyByID($inv->biller_id);
        $this->data['inv'] = $inv;
		if($this->Owner || $this->Admin || $this->bpas->GP['unlimited-print']){
			$this->data['print'] = 0;
		} else {
			if ($this->Settings->limit_print=='1' && $this->site->checkPrint('Sale',$inv->id)){
				$this->data['print'] = 1;
			} elseif ($this->Settings->limit_print=='2' && $this->site->checkPrint('Sale',$inv->id)){
				$this->data['print'] = 2;
			} else {
				$this->data['print'] = 0;
			}
		}
		$student = $customer ? $this->schools_model->getStudentByID($customer->student_id) : false;
		$this->data['siblings'] = $student ? $this->schools_model->getSiblings($student->family_id) : false;
		$this->data['student'] = $student;
		$this->data['biller']      = $this->site->getCompanyByID($inv->biller_id);
		$this->data['sold_by']  = $this->site->getsaleman($inv->saleman_by);
        $this->data['created_by']  = $this->site->getUser($inv->created_by);
		$this->data['grade'] = $this->schools_model->getGradeByID($inv->grade_id);
		if($payment_id){
			$this->data['payment']    =  $this->sales_model->getPaymentByID($payment_id);
		}
		$this->load->view($this->theme . 'schools/modal_view_sale_a4', $this->data);
    }

	public function add_sale_discount($id = false) 
	{
		$this->bpas->checkPermissions("add_sale",true);
		$sale = $this->schools_model->getSaleByID($id);
        $this->form_validation->set_rules('order_discount', lang("order_discount"), 'required');
        if ($this->form_validation->run() == true) {
			$order_tax = 0;
			$order_discount = 0;
			$total = $sale->total;
			$order_tax_id = $sale->order_tax_id;
			if ($this->input->post('order_discount')) {
                $order_discount_id = $this->input->post('order_discount');
                $opos = strpos($order_discount_id, "%");
                if ($opos !== false) {
                    $ods = explode("%", $order_discount_id);
                    $order_discount = (($total) * (Float) ($ods[0])) / 100;
                } else {
                    $order_discount = $order_discount_id;
                }
            } else {
                $order_discount_id = null;
            }
			if ($order_tax_id) {
                if ($order_tax_details = $this->site->getTaxRateByID($order_tax_id)) {
                    if ($order_tax_details->type == 2) {
                        $order_tax = $order_tax_details->rate;
                    }
                    if ($order_tax_details->type == 1) {
                        $order_tax = (($total - $order_discount) * $order_tax_details->rate) / 100;
                    }
                }
            }
			$grand_total = $total + $order_tax - $order_discount;
			$data["order_discount_id"] = $order_discount_id;
			$data["order_discount"] = $order_discount;
			$data["total_discount"] = $order_discount + $sale->product_discount;
			$data["order_tax"]      = $order_tax;
			$data["grand_total"]    = $grand_total;
        } elseif ($this->input->post('update')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect(isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : 'schools');
        }
        if ($this->form_validation->run() == true && $this->schools_model->addSaleDiscount($id, $data)) {
            $this->session->set_flashdata('message', lang('discount_added'));
            admin_redirect(isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : 'schools');
        } else {
            $this->data['sale'] = $sale;
			$this->data['tax_rates'] = $this->site->getAllTaxRates();
            $this->data['modal_js'] = $this->site->modal_js();
            $this->load->view($this->theme.'schools/add_sale_discount', $this->data);
        }
    }
	
	function product_suggestions() 
	{
        $term           = $this->input->get('term', true);
        $warehouse_id   = $this->input->get('warehouse_id', true);
		$customer_id    = $this->input->get('customer_id', true);
		$academic_year  = $this->input->get('acacademic_year', true);
		$data           = $this->input->get('data');
        if (strlen($term) < 1 || !$term) {
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . admin_url('welcome') . "'; }, 10);</script>");
        }
        $analyzed = $this->bpas->analyze_term($term);
        $sr       = $analyzed['term'];
        $customer = $this->site->getCompanyByID($customer_id);
        $customer_group = $this->site->getCustomerGroupByID($customer->customer_group_id);
		if (!empty($data)) {			
			if ($study_info = $this->getStudyInfoByCustomer($data)) {
				if (!empty($study_info->scholarship_id) && $study_info->scholarship_id != '') {
					$scholarship = $this->schools_model->getScholarshipByID($study_info->scholarship_id);
				}
			}
		}
        $rows = $this->schools_model->getProductNames($sr, 20);
        if ($rows) {
            $c = str_replace(".", "", microtime(true));
            $r = 0;
            foreach ($rows as $row) {
                unset($row->details, $row->product_details, $row->barcode_symbology, $row->cf1, $row->cf2, $row->cf3, $row->cf4, $row->cf5, $row->cf6, $row->supplier1price, $row->supplier2price, $row->cfsupplier3price, $row->supplier4price, $row->supplier5price, $row->supplier1, $row->supplier2, $row->supplier3, $row->supplier4, $row->supplier5, $row->supplier1_part_no, $row->supplier2_part_no, $row->supplier3_part_no, $row->supplier4_part_no, $row->supplier5_part_no);
                $row->quantity = 0;
                $row->item_tax_method = $row->tax_method;
                $row->qty      = 1;
                $row->discount = '0';
                $options       = $this->schools_model->getProductOptions($row->id, $warehouse_id);
                $product_options = $this->site->getAllProductOption($row->id);
                if ($options) {
                    $opt = $option_id && $r == 0 ? $this->schools_model->getProductOptionByID($option_id) : $options[0];
                    if (!$option_id || $r > 0) {
                        $option_id = $opt->id;
                    }
                } else {
                    $opt        = json_decode('{}');
                    $opt->price = 0;
                    $option_id  = false;
                }
                $row->option = $option_id;
                $pis         = $this->site->getPurchasedItemstoSales($row->id, $warehouse_id, $row->option);
                if ($pis) {
                    $row->quantity = 0;
                    foreach ($pis as $pi) {
                        $row->quantity += $pi->quantity_balance;
                    }
                }
                $row->cost = $row->cost;
                $row->base_quantity = 1;
                $row->base_unit = $row->unit;
                $row->base_unit_price = $row->price;
                $row->unit      = $row->sale_unit ? $row->sale_unit : $row->unit;
				$row->comment   = '';

				$price_group_id = null;
				if ($row->promotion && date('Y-m-d') >= $row->start_date && date('Y-m-d') <= $row->end_date) {
					$row->discount = (100-(($row->promo_price / $row->price) * 100)).'%';
                } else if ($customer->price_group_id) {
                    if ($pr_group_price = $this->site->getProductGroupPrice_New($row->id, $customer->price_group_id, $row->unit, $academic_year)) {
                        $row->price     = $pr_group_price->price;
						$price_group_id = $customer->price_group_id;
                    }
                } elseif (isset($scholarship) && $scholarship->price_group_id) {
					if ($pr_group_price = $this->site->getProductGroupPrice_New($row->id, $scholarship->price_group_id, $row->unit, $academic_year)) {
                        $row->price     = $pr_group_price->price;
						$price_group_id = $scholarship->price_group_id;
                    }
				}
				if($customer_group){
					$row->price = $row->price + (($row->price * $customer_group->percent) / 100);
				}
                $units                = $this->site->getUnitsByBUID($row->base_unit);
				$row->real_unit_price = $row->price;
				$row->unit_price      = $row->price;
				$tax_rate             = $this->site->getTaxRateByID($row->tax_rate);
				$set_price   		  = $this->site->getProductPriceMultiUnits($row->id, $price_group_id, $academic_year);
                $pr[] = array(
                	'id'   => ($c + $r), 'item_id' => $row->id, 'label' => $row->name . " (" . $row->code . ")", 
                	'row'  => $row, 'tax_rate' => $tax_rate, 'units' => $units, 'set_price' => $set_price, 'options' => $options, 
					'data' => $data, 'study_info' => (isset($study_info) ? $study_info : null),
				);
                $r++;
            }
			$this->bpas->send_json($pr);
        } else {
            $this->bpas->send_json(array(array('id' => 0, 'label' => lang('no_match_found'), 'value' => $term)));
        }
    }	

	public function number_of_student_report()
	{
		$this->bpas->checkPermissions();
        $this->data['billers'] = $this->schools_model->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('number_of_student_report')));
        $meta = array('page_title' => lang('number_of_student_report'), 'bc' => $bc);
        $this->page_construct('schools/number_of_student_report', $meta, $this->data);
	}

	public function enrollment_by_grade_report()
	{
		$this->bpas->checkPermissions();
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('enrollment_by_grade_report')));
        $meta = array('page_title' => lang('enrollment_by_grade_report'), 'bc' => $bc);
        $this->page_construct('schools/enrollment_by_grade_report', $meta, $this->data);
	}
	
	public function enrollment_grade_by_academic(){
		$this->bpas->checkPermissions();
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('enrollment_grade_by_academic')));
        $meta = array('page_title' => lang('enrollment_grade_by_academic'), 'bc' => $bc);
        $this->page_construct('schools/enrollment_grade_by_academic', $meta, $this->data);
	}
	
	public function monthly_enrollment_report(){
		$this->bpas->checkPermissions();
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('monthly_enrollment_report')));
        $meta = array('page_title' => lang('monthly_enrollment_report'), 'bc' => $bc);
        $this->page_construct('schools/monthly_enrollment_report', $meta, $this->data);
	}
	
	public function yearly_enrollment_report(){
		$this->bpas->checkPermissions();
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['academic_years'] = $this->schools_model->getAcademicYears();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('yearly_enrollment_report')));
        $meta = array('page_title' => lang('yearly_enrollment_report'), 'bc' => $bc);
        $this->page_construct('schools/yearly_enrollment_report', $meta, $this->data);
	}
	
	public function monthly_tuition_fee_report(){
		$this->bpas->checkPermissions();
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('monthly_tuition_fee_report')));
        $meta = array('page_title' => lang('monthly_tuition_fee_report'), 'bc' => $bc);
        $this->page_construct('schools/monthly_tuition_fee_report', $meta, $this->data);
	}
	
	
	public function monthly_payment_report(){
		$this->bpas->checkPermissions();
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('monthly_payment_report')));
        $meta = array('page_title' => lang('monthly_payment_report'), 'bc' => $bc);
        $this->page_construct('schools/monthly_payment_report', $meta, $this->data);
	}
	
	public function payment_report(){
		$this->bpas->checkPermissions("monthly_payment_report");
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['students'] = $this->schools_model->getStudents();
		$this->data['users'] = $this->site->getStaff();
		$this->data['cash_accounts'] = $this->site->getCashAccounts();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('payment_report')));
        $meta = array('page_title' => lang('payment_report'), 'bc' => $bc);
        $this->page_construct('schools/payment_report', $meta, $this->data);
	}
	
	public function cash_account_payment_report(){
		$this->bpas->checkPermissions("monthly_payment_report");
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['cash_accounts'] = $this->site->getCashAccounts();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('cash_account_payment_report')));
        $meta = array('page_title' => lang('cash_account_payment_report'), 'bc' => $bc);
        $this->page_construct('schools/cash_account_payment_report', $meta, $this->data);
	}
	
	public function daily_payment_report(){
		$this->bpas->checkPermissions("monthly_payment_report");
		$this->data['billers'] = $this->schools_model->getBillers();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('daily_payment_report')));
        $meta = array('page_title' => lang('daily_payment_report'), 'bc' => $bc);
        $this->page_construct('schools/daily_payment_report', $meta, $this->data);
	}
	
	public function daily_payment_by_cash_account_report(){
		$this->bpas->checkPermissions("monthly_payment_report");
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['cash_accounts'] = $this->site->getCashAccounts();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('daily_payment_by_cash_account_report')));
        $meta = array('page_title' => lang('daily_payment_by_cash_account_report'), 'bc' => $bc);
        $this->page_construct('schools/daily_payment_by_cash_account_report', $meta, $this->data);
	}
	
	public function annual_payment_report(){
		$this->bpas->checkPermissions("monthly_payment_report");
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['cash_accounts'] = $this->site->getCashAccounts();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('annual_payment_report')));
        $meta = array('page_title' => lang('annual_payment_report'), 'bc' => $bc);
        $this->page_construct('schools/annual_payment_report', $meta, $this->data);
	}
	
	public function student_fee_report(){
		$this->bpas->checkPermissions();
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['students'] = $this->schools_model->getStudents();
		$this->data['categories'] = $this->site->getAllCategories();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('student_fee_report')));
        $meta = array('page_title' => lang('student_fee_report'), 'bc' => $bc);
        $this->page_construct('schools/student_fee_report', $meta, $this->data);
	}
	
	
	public function student_summary_report(){
		$this->bpas->checkPermissions("study_info_report");
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['students'] = $this->schools_model->getStudents();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('student_summary_report')));
        $meta = array('page_title' => lang('student_summary_report'), 'bc' => $bc);
        $this->page_construct('schools/student_summary_report', $meta, $this->data);
	}
	
	public function student_detail_report(){
		$this->bpas->checkPermissions("study_info_report");
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['students'] = $this->schools_model->getStudents();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('student_detail_report')));
        $meta = array('page_title' => lang('student_detail_report'), 'bc' => $bc);
        $this->page_construct('schools/student_detail_report', $meta, $this->data);
	}

	
	public function compulsory_fee_report(){
		$this->bpas->checkPermissions("student_fee_report");
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['students'] = $this->schools_model->getStudents();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('compulsory_fee_report')));
        $meta = array('page_title' => lang('compulsory_fee_report'), 'bc' => $bc);
        $this->page_construct('schools/compulsory_fee_report', $meta, $this->data);
	}
	
	public function fee_report(){
		$this->bpas->checkPermissions("student_fee_report");
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['students'] = $this->schools_model->getStudents();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('fee_report')));
        $meta = array('page_title' => lang('fee_report'), 'bc' => $bc);
        $this->page_construct('schools/fee_report', $meta, $this->data);
	}
	
	public function fee_by_grade_report(){
		$this->bpas->checkPermissions("student_fee_report");
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('fee_by_grade_report')));
        $meta = array('page_title' => lang('fee_by_grade_report'), 'bc' => $bc);
        $this->page_construct('schools/fee_by_grade_report', $meta, $this->data);
	}
	
	public function fee_by_branch_report(){
		$this->bpas->checkPermissions("student_fee_report");
		$this->data['billers'] = $this->schools_model->getBillers();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('fee_by_branch_report')));
        $meta = array('page_title' => lang('fee_by_branch_report'), 'bc' => $bc);
        $this->page_construct('schools/fee_by_branch_report', $meta, $this->data);
	}
	
	public function branchly_fee_by_grade_report(){
		$this->bpas->checkPermissions("student_fee_report");
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('branchly_fee_by_grade_report')));
        $meta = array('page_title' => lang('branchly_fee_by_grade_report'), 'bc' => $bc);
        $this->page_construct('schools/branchly_fee_by_grade_report', $meta, $this->data);
	}
	
	
	public function fee_by_item_report(){
		$this->bpas->checkPermissions("student_fee_report");
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['products'] = $this->site->getProducts();
		$this->data['categories'] = $this->schools_model->getMainCategories();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('fee_by_item_report')));
        $meta = array('page_title' => lang('fee_by_item_report'), 'bc' => $bc);
        $this->page_construct('schools/fee_by_item_report', $meta, $this->data);
	}
	
	public function fee_by_category_report(){
		$this->bpas->checkPermissions("student_fee_report");
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['categories'] = $this->schools_model->getMainCategories();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('fee_by_category_report')));
        $meta = array('page_title' => lang('fee_by_category_report'), 'bc' => $bc);
        $this->page_construct('schools/fee_by_category_report', $meta, $this->data);
	}
	public function fee_by_sub_category_report(){
		$this->bpas->checkPermissions("student_fee_report");
		$category_id =  $this->input->post("category") ? $this->input->post("category") : false;
        $this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['categories'] = $this->schools_model->getMainCategories();
		$this->data['sub_categories'] = $this->schools_model->getSubCategories($category_id);
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('fee_by_sub_category_report')));
        $meta = array('page_title' => lang('fee_by_sub_category_report'), 'bc' => $bc);
        $this->page_construct('schools/fee_by_sub_category_report', $meta, $this->data);
	}
	
	
	public function feedback_questions()
	{	
		$this->bpas->checkPermissions();	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')),array('link' => 'schools', 'page' => lang('schools')), array('link' => '#', 'page' => lang('feedback_questions')));
		$meta = array('page_title' => lang('feedback_questions'), 'bc' => $bc);
		$this->page_construct('schools/feedback_questions', $meta, $this->data);
	}

	public function getFeedbackQuestions()
	{	
		$this->bpas->checkPermissions('feedback_questions');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_feedback_question") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_feedback_question/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_feedback_question') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_feedback_question/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_feedback_question').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_feedback_questions.id as id, 
					sh_feedback_question_groups.name as group,
					sh_feedback_questions.name,
					sh_feedback_questions.description")
            ->from("sh_feedback_questions")
			->join("sh_feedback_question_groups","sh_feedback_question_groups.id = sh_feedback_questions.group_id","inner")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_feedback_question()
	{
		$this->bpas->checkPermissions('feedback_questions',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('group', lang("group"), 'required');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true){
			$data = array(
				'group_id'  => $post['group'],
				'name'  => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	
		if ($this->form_validation->run() == true && $id = $this->schools_model->addFeedbackQuestion($data)) {
            $this->session->set_flashdata('message', $this->lang->line("feedback_question_added"));
            admin_redirect("schools/feedback_questions");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['groups'] = $this->schools_model->getFeedbackGroupQuestions();
			$this->load->view($this->theme . 'schools/add_feedback_question', $this->data);	
		}	
	}
	
	public function edit_feedback_question($id = null)
	{		
		$this->bpas->checkPermissions('feedback_questions',true);
		$post = $this->input->post();		
		$this->form_validation->set_rules('group', lang("group"), 'required');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if($this->form_validation->run() == true){						
			$data = array(
				'group_id'  => $post['group'],
				'name'  => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		}elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
		if($this->form_validation->run() == true && $id = $this->schools_model->updateFeedbackQuestion($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("feedback_question_updated"));
            admin_redirect("schools/feedback_questions");
        }else{
			$feedback_question_info = $this->schools_model->getFeedBackQuestionByID($id);	
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['groups'] = $this->schools_model->getFeedbackGroupQuestions();
			$this->data['row'] = $feedback_question_info;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_feedback_question', $this->data);
		}			
	}
	
	public function delete_feedback_question($id = null)
    {	
		$this->bpas->checkPermissions('feedback_questions');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteFeedbackQuestion($id)){
        		$this->session->set_flashdata('message', lang("feedback_question_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function feedback_question_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('feedback_questions');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteFeedbackQuestion($id);
                    }
                    $this->session->set_flashdata('message', lang("feedback_question_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('feedback_question');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('group'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));
                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $feedback_question = $this->schools_model->getFeedBackQuestionByID($id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $feedback_question->group_name);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $feedback_question->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->remove_tag($feedback_question->description));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);

                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'feedback_question_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function tickets($biller_id = NULL, $status = false, $academic_year = false)
    {
        $this->bpas->checkPermissions();
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($status=="null"){
			$status = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year'] = $academic_year;
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
		$this->data['status'] = $status;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('tickets')));
		$meta = array('page_title' => lang('tickets'), 'bc' => $bc);
        $this->page_construct('schools/tickets', $meta, $this->data);
    }
	
	public function getTickets($biller_id = NULL, $status = false, $academic_year = false)
    {
        $this->bpas->checkPermissions('tickets');
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($status=="null"){
			$status = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
		if(isset($this->GP['schools-assign_ticket']) || ($this->Owner || $this->Admin)){
			$assign_ticket = anchor('admin/schools/assign_ticket/$1', '<i class="fa fa-edit"></i> ' . lang('assign_ticket'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="assign_ticket" data-target="#myModal"');
		}else{
			$assign_ticket = '';
		}
		if(isset($this->GP['schools-response_ticket']) || ($this->Owner || $this->Admin)){
			$response_ticket = anchor('admin/schools/response_ticket/$1', '<i class="fa fa-edit"></i> ' . lang('response_ticket'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="response_ticket" data-target="#myModal"');
		}else{
			$response_ticket = '';
		}
		$detail_link = anchor('admin/schools/view_ticket/$1', '<i class="fa fa-file-text-o"></i> ' . lang('ticket_details'));
		$edit_link = anchor('admin/schools/edit_ticket/$1', '<i class="fa fa-edit"></i> ' . lang('edit_ticket'), ' class="edit_ticket" ');
		$delete_link = "<a href='#' class='po delete_ticket' title='<b>" . $this->lang->line("delete_ticket") . "</b>' data-content=\"<p>"
        . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_ticket/$1') . "'>"
        . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
        . lang('delete_ticket') . "</a>";
        $action = '<div class="text-center"><div class="btn-group text-left">'
        . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
        . lang('actions') . ' <span class="caret"></span></button>
                    <ul class="dropdown-menu pull-right" role="menu">
						<li>' . $detail_link . '</li>
						<li>' . $assign_ticket . '</li>
						<li>' . $response_ticket . '</li>
						<li>' . $edit_link . '</li>
                        <li>' . $delete_link . '</li>
                    </ul>
                </div></div>';
        $this->load->library('datatables');
		$this->datatables->select("
						sh_tickets.id as id, 
						DATE_FORMAT(".$this->db->dbprefix('sh_tickets').".date, '%Y-%m-%d %T') as date,
						companies.company as biller,
						sh_tickets.reference_no,
						CONCAT(".$this->db->dbprefix('sh_students').".lastname,'  ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
						sh_tickets.family_name,
						sh_tickets.phone,
						CONCAT(".$this->db->dbprefix('sh_tickets').".academic_year,' - ',".$this->db->dbprefix('sh_tickets').".academic_year + 1) as academic_year,
						sh_grades.name as grade,
						sh_classes.name as class,
						sh_solutions.solutions,
						sh_tickets.status,
						sh_tickets.attachment
					")
			->join("sh_students","sh_students.id = sh_tickets.student_id","left")
			->join("companies","companies.id = sh_tickets.biller_id","left")
			->join('sh_grades','sh_grades.id = sh_tickets.grade_id','left')
			->join('sh_classes','sh_classes.id = sh_tickets.class_id','left')
			->join("(SELECT ticket_id,count(ticket_id) as solutions FROM ".$this->db->dbprefix('sh_solutions')." WHERE status='send' GROUP BY ticket_id) as sh_solutions","sh_solutions.ticket_id = sh_tickets.id","left")
			->from("sh_tickets");
		
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
			$this->datatables->where('sh_tickets.biller_id', $this->session->userdata('biller_id'));
		}
		if ($biller_id) {
			$this->datatables->where('sh_tickets.biller_id', $biller_id);
		}
		if ($academic_year) {
			$this->datatables->where('sh_tickets.academic_year', $academic_year);
		}
		if($status && $status=="solved"){
			$this->datatables->where("sh_tickets.status","solved");
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where('sh_tickets.created_by', $this->session->userdata('user_id'));
			}
		}else if($status && $status=="pending"){
			$this->datatables->where("sh_tickets.status","pending");
		}else if($status){
			$this->datatables->where_in("sh_tickets.status",array("assigned","continue"));
			if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
				$this->datatables->where('sh_tickets.solver', $this->session->userdata('user_id'));
			}
		}
        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }
	
	
	public function add_ticket($id = false){
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('student', $this->lang->line("student"), 'required');
		$this->form_validation->set_rules('family', $this->lang->line("family"), 'required');
		$this->form_validation->set_rules('response_date', $this->lang->line("response_date"), 'required');
        if ($this->form_validation->run() == true) {
			$biller_id = $this->input->post('biller');
			$student_id = $this->input->post('student');
			$family_id = $this->input->post('family');
			$academic_year = $this->input->post('academic_year');
			$response_date = $this->bpas->fsd($this->input->post('response_date'));
			$study_info = $this->schools_model->getLastStudyInfo($student_id,$academic_year);
			if(!$study_info){
				$this->session->set_flashdata('error', lang('student_is_not_yet_enrolled'));
				$this->bpas->md();
			}
			$type = $this->input->post('type');
			$phone = $this->input->post('phone');
			$old_ticket = $this->input->post('old_ticket');
			$reference_no = $this->input->post('reference_no') ? $this->input->post('reference_no') : $this->site->getReference('sticket',$biller_id);
			$date = $this->bpas->fld(trim($this->input->post('date')));
            $note = $this->bpas->clear_tags($this->input->post('note'));
			$behavior = $this->bpas->clear_tags($this->input->post('behavior'));
            $i = isset($_POST['group_id']) ? sizeof($_POST['group_id']) : 0;
			$items = false;
            for ($r = 0; $r < $i; $r++) {
				$group_id = $_POST['group_id'][$r];
				$feed_back = isset($_POST['feedback'][$group_id]) ? $_POST['feedback'][$group_id] : false;
				if($feed_back){
					$items[] = array(
						'group_id' =>  $group_id,
						'feedback' =>  json_encode($feed_back),
						'comment' =>  $_POST['comment'][$r]
					);
				}
            }
            if (!$items) {
                $this->form_validation->set_rules('feedback', lang("order_items"), 'required');
            } else {
                krsort($items);
            }
			
			if($family_id=="0"){
				$family_name = $this->input->post("family_name");
				$relationship = $this->input->post("relationship");
			}else{
				$family_info = $this->schools_model->getFamilyByID($family_id);
				$family_name = $family_info->full_name;
				$relationship = $family_info->relationship;
			}
			
            $data = array(
						'date' => $date,
						'biller_id' => $biller_id,
						'reference_no' => $reference_no,
						'academic_year' => $academic_year,
						'student_id' => $student_id,
						'family_id' => $family_id,
						'family_name' => $family_name,
						'relationship' => $relationship,
						'grade_id' => $study_info->grade_id,
						'class_id' => $study_info->class_id,
						'note' => $note,
						'behavior' => $behavior,
						'type' => $type,
						'phone' => $phone,
						'old_ticket' => $old_ticket,
						'response_date' => $response_date,
						'created_by' => $this->session->userdata('user_id'),
						'created_at' => date('Y-m-d H:i:s'),
					);
            if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
        }
        if ($this->form_validation->run() == true && $this->schools_model->addTicket($data, $items)) {
            $this->session->set_userdata('remove_tkls', 1);
            $this->session->set_flashdata('message', $this->lang->line("ticket_added"));
			admin_redirect('schools/tickets');
        } else {
			$feedback_groups = $this->schools_model->getFeedbackGroupQuestions("desc");
			foreach($feedback_groups as $feedback_group){
				$feedbacks = $this->schools_model->getFeedBackByGroup($feedback_group->id);
				$ticket_items = $id ? $this->schools_model->getTicketItemByGroup($id,$feedback_group->id) : false;
				$feedback_group->feedbacks = $feedbacks;
				$feedback_group->comment = $ticket_items ? $ticket_items->comment : '';
				$feedback_group->feedback = $ticket_items ? json_decode($ticket_items->feedback) : '';
				$pr[$feedback_group->id] = array('id' => $feedback_group->id, 'item_id' => $feedback_group->id, 'row' => $feedback_group);
			}
			$this->data['feedback_groups'] = json_encode($pr);
			$this->data['ticket'] = $id ? $this->schools_model->getTicketByID($id) : false;
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['students'] = $this->schools_model->getStudents();	
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/tickets'), 'page' => lang('tickets')), array('link' => '#', 'page' => lang('add_ticket')));
			$meta = array('page_title' => lang('add_ticket'), 'bc' => $bc);
            $this->page_construct('schools/add_ticket', $meta, $this->data);
        }
    }
	
	public function edit_ticket($id = false){
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('student', $this->lang->line("student"), 'required');
		$this->form_validation->set_rules('family', $this->lang->line("family"), 'required');
        if ($this->form_validation->run() == true) {
			$biller_id = $this->input->post('biller');
			$student_id = $this->input->post('student');
			$family_id = $this->input->post('family');
			$academic_year = $this->input->post('academic_year');
			$response_date = $this->bpas->fsd($this->input->post('response_date'));
			$study_info = $this->schools_model->getLastStudyInfo($student_id,$academic_year);
			if(!$study_info){
				$this->session->set_flashdata('error', lang('student_is_not_yet_enrolled'));
				$this->bpas->md();
			}
			$type = $this->input->post('type');
			$phone = $this->input->post('phone');
			$old_ticket = $this->input->post('old_ticket');
			$reference_no = $this->input->post('reference_no') ? $this->input->post('reference_no') : $this->site->getReference('sticket',$biller_id);
			$date = $this->bpas->fld(trim($this->input->post('date')));
            $note = $this->bpas->clear_tags($this->input->post('note'));
			$behavior = $this->bpas->clear_tags($this->input->post('behavior'));
            $i = isset($_POST['group_id']) ? sizeof($_POST['group_id']) : 0;
			$items = false;
            for ($r = 0; $r < $i; $r++) {
				$group_id = $_POST['group_id'][$r];
				$feed_back = isset($_POST['feedback'][$group_id]) ? $_POST['feedback'][$group_id] : false;
				if($feed_back){
					$items[] = array(
						'ticket_id' =>  $id,	
						'group_id' =>  $group_id,
						'feedback' =>  json_encode($feed_back),
						'comment' =>  $_POST['comment'][$r]
					);
				}
            }
            if (!$items) {
                $this->form_validation->set_rules('feedback', lang("order_items"), 'required');
            } else {
                krsort($items);
            }
			
			if($family_id=="0"){
				$family_name = $this->input->post("family_name");
				$relationship = $this->input->post("relationship");
			}else{
				$family_info = $this->schools_model->getFamilyByID($family_id);
				$family_name = $family_info->full_name;
				$relationship = $family_info->relationship;
			}
			
            $data = array(
						'date' => $date,
						'biller_id' => $biller_id,
						'reference_no' => $reference_no,
						'academic_year' => $academic_year,
						'student_id' => $student_id,
						'family_id' => $family_id,
						'family_name' => $family_name,
						'relationship' => $relationship,
						'grade_id' => $study_info->grade_id,
						'class_id' => $study_info->class_id,
						'note' => $note,
						'behavior' => $behavior,
						'type' => $type,
						'phone' => $phone,
						'old_ticket' => $old_ticket,
						'response_date' => $response_date,
						'updated_by' => $this->session->userdata('user_id'),
						'updated_at' => date('Y-m-d H:i:s'),
					);
            if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateTicket($id, $data, $items)) {
            $this->session->set_userdata('remove_tkls', 1);
            $this->session->set_flashdata('message', $this->lang->line("ticket_updated"));
			admin_redirect('schools/tickets');
        } else {
			$feedback_groups = $this->schools_model->getFeedbackGroupQuestions("desc");
			foreach($feedback_groups as $feedback_group){
				$feedbacks = $this->schools_model->getFeedBackByGroup($feedback_group->id);
				$ticket_items = $this->schools_model->getTicketItemByGroup($id,$feedback_group->id);
				$feedback_group->feedbacks = $feedbacks;
				$feedback_group->comment = $ticket_items ? $ticket_items->comment : '';
				$feedback_group->feedback = $ticket_items ? json_decode($ticket_items->feedback) : '';
                $pr[$feedback_group->id] = array('id' => $feedback_group->id, 'item_id' => $feedback_group->id, 'row' => $feedback_group);
			}
			$this->data['feedback_groups'] = json_encode($pr);
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['students'] = $this->schools_model->getStudents();	
			$this->data['ticket'] = $this->schools_model->getTicketByID($id);
			$this->session->set_userdata('remove_tkls', 1);
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/tickets'), 'page' => lang('tickets')), array('link' => '#', 'page' => lang('edit_ticket')));
			$meta = array('page_title' => lang('edit_ticket'), 'bc' => $bc);
            $this->page_construct('schools/edit_ticket', $meta, $this->data);
        }
    }
	
	public function delete_ticket($id = null){
        $this->bpas->checkPermissions(NULL, true);
		if ($this->input->get('id')) {
			$id = $this->input->get('id');
		}
		if ($this->schools_model->deleteTicket($id)) {
			if ($this->input->is_ajax_request()) {
				echo lang("ticket_deleted");
				die();
			}
			$this->session->set_flashdata('message', lang('ticket_deleted'));
			admin_redirect('schools/tickets');
		}
    }
	
	public function ticket_actions(){
        if (!$this->Owner && !$this->Admin && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('delete_ticket', true);
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteTicket($id);
                    }
                    $this->session->set_flashdata('message', $this->lang->line("ticket_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);

                } elseif ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('ticket'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('student'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('family'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('grade'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('class'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));
					
					$this->db->select("
								sh_tickets.id as id, 
								sh_tickets.date,
								companies.company as biller,
								sh_tickets.reference_no,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname,'  ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
								sh_tickets.family_name, 
								sh_tickets.phone,
								CONCAT(".$this->db->dbprefix('sh_tickets').".academic_year,' - ',".$this->db->dbprefix('sh_tickets').".academic_year + 1) as academic_year,
								sh_grades.name as grade,
								sh_classes.name as class,
								sh_tickets.status
							")
					->join("sh_students","sh_students.id = sh_tickets.student_id","left")
					->join("companies","companies.id = sh_tickets.biller_id","left")
					->join('sh_grades','sh_grades.id = sh_tickets.grade_id','left')
					->join('sh_classes','sh_classes.id = sh_tickets.class_id','left')
					->from("sh_tickets");
					$this->db->where_in("sh_tickets.id",$_POST['val']);
					$q = $this->db->get();
					$row = 2;
					if ($q->num_rows() > 0) {
						foreach (($q->result()) as $ticket) {
							$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($ticket->date));
							$this->excel->getActiveSheet()->SetCellValue('B' . $row, $ticket->biller);
							$this->excel->getActiveSheet()->SetCellValue('C' . $row, $ticket->reference_no);
							$this->excel->getActiveSheet()->SetCellValue('D' . $row, $ticket->student_name);
							$this->excel->getActiveSheet()->SetCellValue('E' . $row, $ticket->family_name);
							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $ticket->phone);
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $ticket->academic_year);
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $ticket->grade);
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, $ticket->class);
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, lang($ticket->status));
							$row++;
						}
					}
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'tickets_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_quote_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	
	public function modal_view_ticket($id = false){
		$this->bpas->checkPermissions('tickets', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $ticket = $this->schools_model->getTicketByID($id);
		$ticket_items = $this->schools_model->getTicketByItems($id,"desc");
        $this->data['biller'] = $this->site->getCompanyByID($ticket->biller_id);
        $this->data['ticket'] = $ticket;
		$this->data['ticket_items'] = $ticket_items;
		$this->data['student'] = $this->schools_model->getStudentByID($ticket->student_id);
		$this->data['family'] = $this->schools_model->getFamilyByID($ticket->family_id);
		$this->data['grade'] = $this->schools_model->getGradeByID($ticket->grade_id);
		$this->data['created_by'] = $this->site->getUserByID($ticket->created_by);
		$this->data['old_ticket'] = $ticket->old_ticket > 0 ? $this->schools_model->getTicketByID($ticket->old_ticket) : 0;
        $this->load->view($this->theme . 'schools/modal_view_ticket', $this->data);
	}
	
	public function get_ticket_info(){
		$student_id = $this->input->get("student_id");
		$ticket_id = $this->input->get("ticket_id") ? $this->input->get("ticket_id") : false;
		$tickets = $this->schools_model->getTicketByStudent($student_id,$ticket_id);
		$families = $this->schools_model->getFamilyByStudent($student_id,false);
		echo json_encode(array("families"=>$families,"tickets"=>$tickets));
	}
	public function get_family_info(){
		$family_id = $this->input->get("family_id");
		$family = $this->schools_model->getFamilyByID($family_id);
		echo json_encode($family);
	}

	public function assign_ticket($id = false){
		$this->bpas->checkPermissions('assign_ticket', true);
        $this->form_validation->set_rules('solver', lang("solver"), 'required');
        if ($this->form_validation->run() == true) {
			$data = array(
							"status" => "assigned",
							"solver" => $this->input->post('solver'),
							"assign_by" => $this->session->userdata('user_id'),
							"assign_at" => date('Y-m-d H:i:s')
						);
        } elseif ($this->input->post('assign_ticket')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect(isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : 'schools');
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateTicketStatus($id, $data)) {
            $this->session->set_flashdata('message', lang('ticket_assigned'));
            redirect(isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : 'schools');
        } else {
			$ticket = $this->schools_model->getTicketByID($id);
            $ticket_items = $this->schools_model->getTicketByItems($id,"desc");
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['biller'] = $this->site->getCompanyByID($ticket->biller_id);
			$this->data['ticket'] = $ticket;
			$this->data['ticket_items'] = $ticket_items;
			$this->data['student'] = $this->schools_model->getStudentByID($ticket->student_id);
			$this->data['family'] = $this->schools_model->getFamilyByID($ticket->family_id);
			$this->data['grade'] = $this->schools_model->getGradeByID($ticket->grade_id);
			$this->data['solvers'] = $this->site->getAllUsers();
			$this->data['old_ticket'] = $ticket->old_ticket > 0 ? $this->schools_model->getTicketByID($ticket->old_ticket) : 0;
            $this->load->view($this->theme.'schools/assign_ticket', $this->data);
        }
    }
	
	function view_ticket($id = NULL){
        $this->bpas->checkPermissions('tickets');
        $ticket = $this->schools_model->getTicketByID($id);
		$ticket_items = $this->schools_model->getTicketByItems($id,"desc");
		$student = $this->schools_model->getStudentByID($ticket->student_id);
		$this->data['modal_js'] = $this->site->modal_js();
		$this->data['biller'] = $this->site->getCompanyByID($ticket->biller_id);
		$this->data['ticket'] = $ticket;
		$this->data['ticket_items'] = $ticket_items;
		$this->data['student'] = $student; 
		$this->data['family'] = $this->schools_model->getFamilyByID($ticket->family_id);
		$this->data['grade'] = $this->schools_model->getGradeByID($ticket->grade_id);
		$this->data['solvers'] = $this->site->getAllUsers();
		$this->data['old_ticket'] = $ticket->old_ticket > 0 ? $this->schools_model->getTicketByID($ticket->old_ticket) : 0;        
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => admin_url('schools/tickets'), 'page' => lang('tickets')), array('link' => '#', 'page' => $student->lastname.' '.$student->firstname));
        $meta = array('page_title' => $student->lastname.' '.$student->firstname, 'bc' => $bc);
        $this->page_construct('schools/view_ticket', $meta, $this->data);
    }
	
	public function getSolutions($ticket_id = false){	
		$this->bpas->checkPermissions('ticket-solution');
		if(!$ticket_id){
			$ticket_id = $this->input->get("ticket_id");
		}
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_solution") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_solution/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_solution') . "</a>";
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
								<li><a href="'.admin_url('schools/edit_solution/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_solution').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables->select("
						sh_solutions.id as id,
						sh_solutions.date,
						sh_solutions.solution,
						CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
						sh_solutions.created_at,
						sh_solutions.status,
						sh_solutions.attachment
					")
            ->from("sh_solutions")
			->join("users","users.id = sh_solutions.created_by","left")
			->where("sh_solutions.ticket_id",$ticket_id)
			->where("(".$this->db->dbprefix("sh_solutions").".status = 'send' OR ".$this->db->dbprefix("sh_solutions").".created_by = ".$this->session->userdata('user_id').")")
			->unset_column("id")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_solution($ticket_id = false){
		$this->bpas->checkPermissions('ticket-solution',true);
		$this->form_validation->set_rules('date', lang("date"), 'required');
		$this->form_validation->set_rules('solution', lang("solution"), 'required');
		if ($this->form_validation->run() == true){	
			$data = array(
					'ticket_id'  	=> $ticket_id,
					'date' 			=> $this->bpas->fld(trim($this->input->post('date')),true),
					'solution' 	=> $this->bpas->clear_tags($this->input->post('solution')),
					'status' 	=> $this->input->post('status'),
					'created_by' => $this->session->userdata('user_id'),
					'created_at' => date('Y-m-d H:i:s'),
				);
			if ($_FILES['document']['size'] > 0) {
				$this->load->library('upload');
				$config['upload_path'] = $this->digital_upload_path;
				$config['allowed_types'] = $this->digital_file_types;
				$config['max_size'] = $this->allowed_file_size;
				$config['overwrite'] = FALSE;
				$config['encrypt_name'] = TRUE;
				$this->upload->initialize($config);
				if (!$this->upload->do_upload('document')) {
					$error = $this->upload->display_errors();
					$this->session->set_flashdata('error', $error);
					admin_redirect($_SERVER["HTTP_REFERER"]);
				}
				$photo = $this->upload->file_name;
				$data['attachment'] = $photo;
			}
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->addSolution($data)) {
			$this->session->set_flashdata('message', $this->lang->line("solution_added"));
            admin_redirect("schools/view_ticket/".$ticket_id."/#solution_info");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['ticket_id'] = $ticket_id;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_solution', $this->data);	
		}	
	}
	
	public function edit_solution($id = false){
		$this->bpas->checkPermissions('ticket-solution',true);
		$solution = $this->schools_model->getSolutionByID($id);
		$ticket = $this->schools_model->getTicketByID($solution->ticket_id);
		if($ticket->status == "completed" || $ticket->status == "new_ticket"){
			$this->session->set_flashdata('error', lang("solution_cannot_edit"));
            $this->bpas->md();
		}
		$this->form_validation->set_rules('date', lang("date"), 'required');
		$this->form_validation->set_rules('solution', lang("solution"), 'required');
		if ($this->form_validation->run() == true){	
			$data = array(
					'date' => $this->bpas->fld(trim($this->input->post('date')),true),
					'solution' 	=> $this->bpas->clear_tags($this->input->post('solution')),
					'ticket_id' => $solution->ticket_id,
					'status' 	=> $this->input->post('status'),
					'updated_by' => $this->session->userdata('user_id'),
					'updated_at' => date('Y-m-d H:i:s'),
				);
			if ($_FILES['document']['size'] > 0) {
				$this->load->library('upload');
				$config['upload_path'] = $this->digital_upload_path;
				$config['allowed_types'] = $this->digital_file_types;
				$config['max_size'] = $this->allowed_file_size;
				$config['overwrite'] = FALSE;
				$config['encrypt_name'] = TRUE;
				$this->upload->initialize($config);
				if (!$this->upload->do_upload('document')) {
					$error = $this->upload->display_errors();
					$this->session->set_flashdata('error', $error);
					admin_redirect($_SERVER["HTTP_REFERER"]);
				}
				$photo = $this->upload->file_name;
				$data['attachment'] = $photo;
			}
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateSolution($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("solution_edited"));
            admin_redirect("schools/view_ticket/".$solution->ticket_id."/#solution_info");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['solution'] = $solution;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_solution', $this->data);	
		}	
	}
	
	public function delete_solution($id = false) {
		$this->bpas->checkPermissions('ticket-solution');	
        if (isset($id) || $id != false){
			$solution = $this->schools_model->getSolutionByID($id);
			$ticket = $this->schools_model->getTicketByID($solution->ticket_id);
			if($ticket->status == "completed" || $ticket->status == "new_ticket"){
				$this->session->set_flashdata('error', lang("solution_cannot_delete"));
				$this->bpas->md();
			}else if ($this->schools_model->deleteSolution($id)) {
				if ($this->input->is_ajax_request()) {
					echo lang("solution_deleted");
					die();
				}
				$this->session->set_flashdata('message', lang('solution_deleted'));
				admin_redirect('welcome');
			}
        }
    }
	
	public function get_subject_category(){
		$category_id = $this->input->get("category_id");
		$sub_categories = $this->schools_model->getSubCategories($category_id);
		echo json_encode($sub_categories);
	}
	
	public function getResponse($ticket_id = false){	
		$this->bpas->checkPermissions('response_ticket');
		if(!$ticket_id){
			$ticket_id = $this->input->get("ticket_id");
		}
        $this->load->library('datatables');
        $this->datatables->select("
						sh_ticket_responses.date,
						sh_ticket_responses.comment,
						CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
						sh_ticket_responses.status
					")
            ->from("sh_ticket_responses")
			->join("users","users.id = sh_ticket_responses.created_by","left")
			->where("sh_ticket_responses.ticket_id",$ticket_id);
        echo $this->datatables->generate();
	}
	
	public function response_ticket($id = false){
		$this->bpas->checkPermissions('response_ticket', true);
		$this->form_validation->set_rules('status', lang("status"), 'required');
        $this->form_validation->set_rules('comment', lang("comment"), 'required');
        if ($this->form_validation->run() == true) {
			$data = array(
							"ticket_id" => $id,
							"date" => date('Y-m-d H:i:s'),
							"comment" => $this->input->post('comment'),
							"status" => $this->input->post('status'),
							"created_by" => $this->session->userdata('user_id'),
						);
        } elseif ($this->input->post('response_ticket')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect(isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : 'schools');
        }
        if ($this->form_validation->run() == true && $this->schools_model->addTicketResponse($data)) {
            $this->session->set_flashdata('message', lang('ticket_responsed'));
			if($data['status'] == "new_ticket"){
				admin_redirect('schools/add_ticket/'.$id);
			}else{
				admin_redirect(isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : 'schools');
			}
            
        } else {
			$ticket = $this->schools_model->getTicketByID($id);
            $ticket_items = $this->schools_model->getTicketByItems($id,"desc");
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['biller'] = $this->site->getCompanyByID($ticket->biller_id);
			$this->data['ticket'] = $ticket;
			$this->data['ticket_items'] = $ticket_items;
			$this->data['student'] = $this->schools_model->getStudentByID($ticket->student_id);
			$this->data['family'] = $this->schools_model->getFamilyByID($ticket->family_id);
			$this->data['grade'] = $this->schools_model->getGradeByID($ticket->grade_id);
			$this->data['old_ticket'] = $ticket->old_ticket > 0 ? $this->schools_model->getTicketByID($ticket->old_ticket) : 0;
			$this->data['solutions'] = $this->schools_model->getSolutionByTicketID($id);
            $this->load->view($this->theme.'schools/response_ticket', $this->data);
        }
    }
	
	public function ticket_report()
	{
		$this->bpas->checkPermissions('ticket_report', TRUE);
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['students'] = $this->schools_model->getStudents();
		$this->data['families'] = $this->schools_model->getTicketFamaily();
		$this->data['teachers'] = $this->schools_model->getTeachers();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('ticket_report')));
        $meta = array('page_title' => lang('ticket_report'), 'bc' => $bc);
        $this->page_construct('schools/ticket_report', $meta, $this->data);
	}
	
	
	public function waitings($biller_id = NULL)
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('waitings')));
		$meta = array('page_title' => lang('waitings'), 'bc' => $bc);
        $this->page_construct('schools/waitings', $meta, $this->data);
    }
	
	public function getWaiting($biller_id = NULL)
    {
        $this->bpas->checkPermissions('waitings');
		if(isset($this->GP['schools-add_waiting']) || ($this->Owner || $this->Admin)){
			$add_follow_up = anchor('admin/schools/add_follow_up/$1', '<i class="fa fa-plus"></i> ' . lang('add_follow_up'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="add_follow_up" data-target="#myModal"');
		}else{
			$add_follow_up = '';
		}
		$follow_up_link = anchor('admin/schools/follow_ups/$1', '<i class="fa fa-file-text-o"></i> ' . lang('view_follow_ups'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="follow_ups" data-target="#myModal"');
		$edit_link = anchor('admin/schools/edit_waiting/$1', '<i class="fa fa-edit"></i> ' . lang('edit_waiting'), ' class="edit_waiting" ');
		$delete_link = "<a href='#' class='po delete_waiting' title='<b>" . $this->lang->line("delete_waiting") . "</b>' data-content=\"<p>"
        . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_waiting/$1') . "'>"
        . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
        . lang('delete_waiting') . "</a>";
        $action = '<div class="text-center"><div class="btn-group text-left">'
        . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
        . lang('actions') . ' <span class="caret"></span></button>
                    <ul class="dropdown-menu pull-right" role="menu">
						<li>' . $follow_up_link . '</li>	
						<li>' . $add_follow_up . '</li>
						<li>' . $edit_link . '</li>
                        <li>' . $delete_link . '</li>
                    </ul>
                </div></div>';
        $this->load->library('datatables');
		$this->datatables
			->select("
						sh_waitings.id as id, 
						DATE_FORMAT(".$this->db->dbprefix('sh_waitings').".date, '%Y-%m-%d %T') as date,
						companies.company as biller,
						sh_waitings.name,
						sh_waitings.gender,
						sh_waitings.ethnicity,
						sh_waitings.nationality,
						sh_waitings.phone,
						sh_waitings.relationship,
						sh_follow_ups.follow_up,
						sh_waitings.status,
						sh_waitings.attachment
					")
			->join("companies","companies.id = sh_waitings.biller_id","left")
			->join('(select count(id) as follow_up, waiting_id from '.$this->db->dbprefix("sh_follow_ups").' GROUP BY waiting_id) as sh_follow_ups','sh_follow_ups.waiting_id = sh_waitings.id','left')
			->from("sh_waitings");
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $this->datatables->where('sh_waitings.created_by', $this->session->userdata('user_id'));
        }
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
			$this->datatables->where('sh_waitings.biller_id', $this->session->userdata('biller_id'));
		}
		if ($biller_id) {
			$this->datatables->where('sh_waitings.biller_id', $biller_id);
		}
        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }
	
	
	public function add_waiting()
    {
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('name', $this->lang->line("name"), 'required');
		$this->form_validation->set_rules('phone', $this->lang->line("phone"), 'required');
        $this->form_validation->set_rules('relationship', $this->lang->line("relationship"), 'required');
		if ($this->form_validation->run() == true) {
			$date = $this->bpas->fld(trim($this->input->post('date')));
			$biller_id = $this->input->post('biller');
			$name = $this->input->post('name');
			$gender = $this->input->post('gender');
			$ethnicity = $this->input->post('ethnicity');
			$nationality = $this->input->post('nationality');
			$phone = $this->input->post('phone');
			$relationship = $this->input->post('relationship');
            $note = $this->bpas->clear_tags($this->input->post('note'));
            $i = isset($_POST['s_student']) ? sizeof($_POST['s_student']) : 0;
            for ($r = 0; $r < $i; $r++) {
				$items[] = array(
					'student' =>  $_POST['s_student'][$r],
					'student_latin' =>  $_POST['s_student_latin'][$r],
					'gender' =>  $_POST['s_gender'][$r],
					'old_grade_id' =>  $_POST['s_o_grade'][$r],
					'old_academic_year' =>  $_POST['s_o_acedemic_year'][$r],
					'old_school' =>  $_POST['s_old_school'][$r],
					'grade_id' =>  $_POST['s_grade'][$r],
					'acedemic_year' =>  $_POST['s_acedemic_year'][$r],
				);
            }
            if (empty($items)) {
                $this->form_validation->set_rules('student', lang("order_items"), 'required');
            } else {
                krsort($items);
            }
            $data = array(
						'date' => $date,
						'biller_id' => $biller_id,
						'name' => $name,
						'gender' => $gender,
						'ethnicity' => $ethnicity,
						'nationality' => $nationality,
						'phone' => $phone,
						'relationship' => $relationship,
						'note' => $note,
						'created_by' => $this->session->userdata('user_id'),
						'created_at' => date('Y-m-d H:i:s'),
						'status' => 'pending',
					);

            if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
        }
        if ($this->form_validation->run() == true && $this->schools_model->addWaiting($data, $items)) {
            $this->session->set_userdata('remove_wtls', 1);
            $this->session->set_flashdata('message', $this->lang->line("waiting_added"));
			admin_redirect('schools/waitings');
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['grades'] = $this->schools_model->getGrades();	
			$this->data['other_schools'] = $this->schools_model->getOtherSchools();
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/waitings'), 'page' => lang('waitings')), array('link' => '#', 'page' => lang('add_waiting')));
			$meta = array('page_title' => lang('add_waiting'), 'bc' => $bc);
            $this->page_construct('schools/add_waiting', $meta, $this->data);
        }
    }
	
	public function edit_waiting($id = false)
    {
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('name', $this->lang->line("name"), 'required');
		$this->form_validation->set_rules('phone', $this->lang->line("phone"), 'required');
        $this->form_validation->set_rules('relationship', $this->lang->line("relationship"), 'required');
		if ($this->form_validation->run() == true) {
			$date = $this->bpas->fld(trim($this->input->post('date')));
			$biller_id = $this->input->post('biller');
			$name = $this->input->post('name');
			$gender = $this->input->post('gender');
			$ethnicity = $this->input->post('ethnicity');
			$nationality = $this->input->post('nationality');
			$phone = $this->input->post('phone');
			$relationship = $this->input->post('relationship');
            $note = $this->bpas->clear_tags($this->input->post('note'));
            $i = isset($_POST['s_student']) ? sizeof($_POST['s_student']) : 0;
            for ($r = 0; $r < $i; $r++) {
				$items[] = array(
					'waiting_id' => $id,
					'student' =>  $_POST['s_student'][$r],
					'student_latin' =>  $_POST['s_student_latin'][$r],
					'gender' =>  $_POST['s_gender'][$r],
					'old_grade_id' =>  $_POST['s_o_grade'][$r],
					'old_academic_year' =>  $_POST['s_o_acedemic_year'][$r],
					'old_school' =>  $_POST['s_old_school'][$r],
					'grade_id' =>  $_POST['s_grade'][$r],
					'acedemic_year' =>  $_POST['s_acedemic_year'][$r],
				);
            }
            if (empty($items)) {
                $this->form_validation->set_rules('student', lang("order_items"), 'required');
            } else {
                krsort($items);
            }
            $data = array(
						'date' => $date,
						'biller_id' => $biller_id,
						'name' => $name,
						'gender' => $gender,
						'ethnicity' => $ethnicity,
						'nationality' => $nationality,
						'phone' => $phone,
						'relationship' => $relationship,
						'note' => $note,
						'updated_by' => $this->session->userdata('user_id'),
						'updated_at' => date('Y-m-d H:i:s'),
					);

            if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateWaiting($id, $data, $items)) {
            $this->session->set_userdata('remove_wtls', 1);
            $this->session->set_flashdata('message', $this->lang->line("waiting_updated"));
			admin_redirect('schools/waitings');
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$waiting_items = $this->schools_model->getWaitingItem($id);
			krsort($waiting_items);
			foreach($waiting_items as $row){
                $pr[$row->id] = array('id' => $row->id, 'item_id' => $row->id, 's_student' => $row->student, 's_gender' => $row->gender, 's_acedemic_year' => $row->acedemic_year, 's_old_school' => $row->old_school, 's_grade' => $row->grade_id, 's_student_latin' => $row->student_latin, 's_o_grade' => $row->old_grade_id, 's_o_acedemic_year' => $row->old_academic_year);
			}
			$this->data['waiting_items'] = json_encode($pr);
			$this->data['waiting'] = $this->schools_model->getWaitingByID($id);
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['other_schools'] = $this->schools_model->getOtherSchools();
			$this->session->set_userdata('remove_wtls', 1);
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/waitings'), 'page' => lang('waitings')), array('link' => '#', 'page' => lang('edit_waiting')));
			$meta = array('page_title' => lang('edit_waiting'), 'bc' => $bc);
            $this->page_construct('schools/edit_waiting', $meta, $this->data);
        }
    }
	
	public function delete_waiting($id = null)
    {
        $this->bpas->checkPermissions(NULL, true);
		if ($this->input->get('id')) {
			$id = $this->input->get('id');
		}
		if ($this->schools_model->deleteWaiting($id)) {
			if ($this->input->is_ajax_request()) {
				echo lang("waiting_deleted");
				die();
			}
			$this->session->set_flashdata('message', lang('waiting_deleted'));
			admin_redirect('schools/waitings');
		}
    }
	
	public function waiting_actions()
    {
        if (!$this->Owner && !$this->Admin && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('delete_waiting', true);
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteWaiting($id);
                    }
                    $this->session->set_flashdata('message', $this->lang->line("waiting_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);

                } elseif ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('waiting'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('name'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('gender'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('ethnicity'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('nationality'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('relationship'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('follow_up'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $waiting = $this->schools_model->getWaitingByID($id);
						$biller = $this->site->getCompanyByID($waiting->biller_id);
						$follows = $this->schools_model->getFollowUpByWaiting($id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($waiting->date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $biller->company);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $waiting->name);
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, lang($waiting->gender));
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $waiting->ethnicity);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $waiting->nationality);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $waiting->phone);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $waiting->relationship);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, count($follows));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, lang($waiting->status));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'waitings_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_quote_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function modal_view_waiting($id = false){
		$this->bpas->checkPermissions('waitings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $waiting = $this->schools_model->getWaitingByID($id);
        $this->data['biller'] = $this->site->getCompanyByID($waiting->biller_id);
		$this->data['follow_ups'] = $this->schools_model->getFollowUpByWaiting($id);
        $this->data['waiting'] = $waiting;
		$this->data['waiting_items'] = $this->schools_model->getWaitingItem($id);
        $this->load->view($this->theme . 'schools/modal_view_waiting', $this->data);
	}
	
	public function add_follow_up($waiting_id = false){
		$this->bpas->checkPermissions('add_waiting',true);
		$this->form_validation->set_rules('date', lang("date"), 'required');
		$this->form_validation->set_rules('phone', lang("phone"), 'required');
		if ($this->form_validation->run() == true){	
			$data = array(
					'waiting_id' => $waiting_id,
					'date' => $this->bpas->fld(trim($this->input->post('date')),true),
					'phone' => $this->input->post('phone'),
					'customer_comment' 	=> $this->bpas->clear_tags($this->input->post('customer_comment')),
					'note' 	=> $this->bpas->clear_tags($this->input->post('note')),
					'created_by' => $this->session->userdata('user_id'),
					'created_at' => date('Y-m-d H:i:s'),
				);
			if ($_FILES['document']['size'] > 0) {
				$this->load->library('upload');
				$config['upload_path'] = $this->digital_upload_path;
				$config['allowed_types'] = $this->digital_file_types;
				$config['max_size'] = $this->allowed_file_size;
				$config['overwrite'] = FALSE;
				$config['encrypt_name'] = TRUE;
				$this->upload->initialize($config);
				if (!$this->upload->do_upload('document')) {
					$error = $this->upload->display_errors();
					$this->session->set_flashdata('error', $error);
					admin_redirect($_SERVER["HTTP_REFERER"]);
				}
				$photo = $this->upload->file_name;
				$data['attachment'] = $photo;
			}
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->addFollowUp($data)) {
			$this->session->set_flashdata('message', $this->lang->line("follow_up_added"));
            admin_redirect("schools/waitings");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['waiting'] = $this->schools_model->getWaitingByID($waiting_id);
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_follow_up', $this->data);	
		}	
	}
	
	public function edit_follow_up($id = false){
		$this->bpas->checkPermissions('edit_waiting',true);
		$this->form_validation->set_rules('date', lang("date"), 'required');
		$this->form_validation->set_rules('phone', lang("phone"), 'required');
		$follow_up = $this->schools_model->getFollowUpByID($id);
		if ($this->form_validation->run() == true){	
			$data = array(
					'waiting_id' => $follow_up->waiting_id,
					'date' => $this->bpas->fld(trim($this->input->post('date')),true),
					'phone' => $this->input->post('phone'),
					'customer_comment' 	=> $this->bpas->clear_tags($this->input->post('customer_comment')),
					'note' 	=> $this->bpas->clear_tags($this->input->post('note')),
					'updated_by' => $this->session->userdata('user_id'),
					'updated_at' => date('Y-m-d H:i:s'),
				);
			if ($_FILES['document']['size'] > 0) {
				$this->load->library('upload');
				$config['upload_path'] = $this->digital_upload_path;
				$config['allowed_types'] = $this->digital_file_types;
				$config['max_size'] = $this->allowed_file_size;
				$config['overwrite'] = FALSE;
				$config['encrypt_name'] = TRUE;
				$this->upload->initialize($config);
				if (!$this->upload->do_upload('document')) {
					$error = $this->upload->display_errors();
					$this->session->set_flashdata('error', $error);
					admin_redirect($_SERVER["HTTP_REFERER"]);
				}
				$photo = $this->upload->file_name;
				$data['attachment'] = $photo;
			}
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateFollowUp($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("follow_up_edited"));
            admin_redirect("schools/waitings");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['follow_up'] = $follow_up;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_follow_up', $this->data);	
		}	
	}
	
	public function delete_follow_up($id = null){
		$this->bpas->checkPermissions('delete_waiting');
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
        if ($this->schools_model->deleteFollowUp($id)) {
            $this->session->set_flashdata('message', lang("follow_up_deleted"));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
	}
	
	public function follow_ups($waiting_id = null)
    {
        $this->bpas->checkPermissions('waitings',true);
        $this->data['follow_ups'] = $this->schools_model->getFollowUpByWaiting($waiting_id);
        $this->load->view($this->theme . 'schools/follow_ups', $this->data);
    }
	
	public function waiting_report()
	{
		$this->bpas->checkPermissions('waiting_report', TRUE);
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('waiting_report')));
        $meta = array('page_title' => lang('waiting_report'), 'bc' => $bc);
        $this->page_construct('schools/waiting_report', $meta, $this->data);
	}
	
	public function getWaitingReport($xls = null)
	{
		$this->bpas->checkPermissions('waiting_report', TRUE);
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;	
		$start_date = $this->input->get('start_date') ? $this->bpas->fld($this->input->get('start_date')) : NULL;
		$end_date = $this->input->get('end_date') ? $this->bpas->fld($this->input->get('end_date')) : NULL;
		if ($xls) {
			$this->db->select("
								DATE_FORMAT(".$this->db->dbprefix('sh_waitings').".date, '%Y-%m-%d %T') as date,
								companies.company,
								sh_waitings.name as customer,
								sh_waitings.phone,
								sh_waitings.relationship,
								sh_waiting_items.student,
								sh_waiting_items.gender,
								sh_waiting_items.acedemic_year,
								CONCAT(".$this->db->dbprefix('sh_waiting_items').".acedemic_year,' - ',(".$this->db->dbprefix('sh_waiting_items').".acedemic_year + 1)) as academic_year,
								sh_waiting_items.old_school,
								sh_grades.name as grade_name,
								sh_follow_ups.follow_up,
								sh_waitings.status,
								sh_waitings.id as id
							", FALSE)
					->from('sh_waiting_items')
					->join('sh_waitings', 'sh_waitings.id=sh_waiting_items.waiting_id', 'inner')
					->join('companies','companies.id = sh_waitings.biller_id','left')
					->join('sh_grades','sh_grades.id = sh_waiting_items.grade_id','left')
					->join('(select count(id) as follow_up, waiting_id from '.$this->db->dbprefix("sh_follow_ups").' GROUP BY waiting_id) as sh_follow_ups','sh_follow_ups.waiting_id = sh_waitings.id','left')
					->group_by('sh_waiting_items.id');

			if ($academic_year) {
				$this->db->where('sh_waiting_items.acedemic_year', $academic_year);
			}
			if ($biller) {
				$this->db->where('sh_waitings.biller_id', $biller);
			}
			if ($grade) {
				$this->db->where('sh_waiting_items.grade_id', $grade);
			}
			if ($start_date) {
				$this->db->where('sh_waitings.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('sh_waitings.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where('sh_waitings.biller_id', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('waiting_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('relationship'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('student'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('old_school'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('follow_up'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('status'));
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->company);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->relationship);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->student);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang($data_row->gender));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->academic_year);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->old_school);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->grade_name);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->follow_up);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, lang($data_row->status));
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
				$filename = 'waiting_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			admin_redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables->select("
										DATE_FORMAT(".$this->db->dbprefix('sh_waitings').".date, '%Y-%m-%d %T') as date,
										companies.company,
										sh_waitings.name as customer,
										sh_waitings.phone,
										sh_waitings.relationship,
										sh_waiting_items.student,
										sh_waiting_items.gender,
										CONCAT(".$this->db->dbprefix('sh_waiting_items').".acedemic_year,' - ',(".$this->db->dbprefix('sh_waiting_items').".acedemic_year + 1)) as academic_year,
										sh_waiting_items.old_school,
										sh_grades.name as grade_name,
										sh_follow_ups.follow_up,
										sh_waitings.attachment,
										sh_waitings.status,
										sh_waitings.id as id
									", FALSE)
							->from('sh_waiting_items')
							->join('sh_waitings', 'sh_waitings.id=sh_waiting_items.waiting_id', 'inner')
							->join('companies','companies.id = sh_waitings.biller_id','left')
							->join('sh_grades','sh_grades.id = sh_waiting_items.grade_id','left')
							->join('(select count(id) as follow_up, waiting_id from '.$this->db->dbprefix("sh_follow_ups").' GROUP BY waiting_id) as sh_follow_ups','sh_follow_ups.waiting_id = sh_waitings.id','left')
							->group_by('sh_waiting_items.id');

			if ($academic_year) {
				$this->datatables->where('sh_waiting_items.acedemic_year', $academic_year);
			}
			if ($biller) {
				$this->datatables->where('sh_waitings.biller_id', $biller);
			}
			if ($grade) {
				$this->datatables->where('sh_waiting_items.grade_id', $grade);
			}
			if ($start_date) {
				$this->datatables->where('sh_waitings.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('sh_waitings.date <=', $end_date);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where('sh_waitings.biller_id', $this->session->userdata('biller_id'));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function testings($biller_id = NULL, $academic_year = null, $group_id = null)
    {
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
		if($group_id=="null"){
			$group_id = null;
		}
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year'] = $academic_year;
		$this->data['group_id'] = $group_id;
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
		$this->data['groups'] = $this->schools_model->getTestingGroups($academic_year);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('testings')));
		$meta = array('page_title' => lang('testings'), 'bc' => $bc);
        $this->page_construct('schools/testings', $meta, $this->data);
    }
	
	public function getTesting($biller_id = NULL, $academic_year = null, $group_id = null)
    {
        $this->bpas->checkPermissions('testings');
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
		if($group_id=="null"){
			$group_id = null;
		}
		$update_result = '';
		$assign_grade = '';
		$reassign_group = '';
		if(isset($this->GP['schools-update_result']) || ($this->Owner || $this->Admin)){
			$update_result = anchor('admin/schools/update_result/$1', '<i class="fa fa-edit"></i> ' . lang('update_result'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="update_result" data-target="#myModal"');
			$assign_grade = anchor('admin/schools/assign_grade/$1', '<i class="fa fa-edit"></i> ' . lang('assign_grade'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="assign_grade" data-target="#myModal"');
		}
		if(isset($this->GP['schools-add_testing']) || ($this->Owner || $this->Admin)){
			$reassign_group = anchor('admin/schools/reassign_group/$1', '<i class="fa fa-edit"></i> ' . lang('reassign_group'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="reassign_group" data-target="#myModal"');
		}
		$result_link = anchor('admin/schools/modal_view_testing_result/$1', '<i class="fa fa-eye"></i> ' . lang('view_result'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="view_result" data-target="#myModal"');
		$send_link = "<a href='#' class='po send_testing' title='" . $this->lang->line("send_testing") . "' data-content=\"<p>"
        . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/send_testing/$1') . "'>"
        . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-send\"></i> "
        . lang('send_testing') . "</a>";
		$edit_link = anchor('admin/schools/edit_testing/$1', '<i class="fa fa-edit"></i> ' . lang('edit_testing'), ' class="edit_testing" ');
		$delete_link = "<a href='#' class='po delete_testing' title='" . $this->lang->line("delete_testing") . "' data-content=\"<p>"
        . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_testing/$1') . "'>"
        . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
        . lang('delete_testing') . "</a>";
        $action = '<div class="text-center"><div class="btn-group text-left">'
        . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
        . lang('actions') . ' <span class="caret"></span></button>
                    <ul class="dropdown-menu pull-right" role="menu">
						<li>' . $send_link . '</li>
						<li>' . $result_link . '</li>
						<li>' . $update_result . '</li>
						<li>' . $reassign_group . '</li>
						<li>' . $assign_grade . '</li>
						<li>' . $edit_link . '</li>
                        <li>' . $delete_link . '</li>
                    </ul>
                </div></div>';
        $this->load->library('datatables');
		$this->datatables
			->select("
						sh_testings.id as id, 
						DATE_FORMAT(".$this->db->dbprefix('sh_testings').".date, '%Y-%m-%d %T') as date,
						companies.company as biller,
						CONCAT(".$this->db->dbprefix('sh_testings').".academic_year,' - ',".$this->db->dbprefix('sh_testings').".academic_year + 1) as academic_year,
						sh_testings.customer,
						sh_testings.phone,
						sh_testings.relationship,
						sh_testings.stname,
						sh_testings.stname_latin,
						sh_testings.stgender,
						DATE_FORMAT(".$this->db->dbprefix('sh_testings').".stdob, '%Y-%m-%d') as stdob,
						sh_testing_groups.name as group_name,
						DATE_FORMAT(".$this->db->dbprefix('sh_testing_groups').".testing_date, '%Y-%m-%d') as testing_date,
						sh_grades.name as grade_name,
						sh_testing_results.name as result,
						IF(".$this->db->dbprefix("sh_grades").".id > 0, 'assigned', IF(".$this->db->dbprefix("sales").".payment_status = 'paid', 'paid',".$this->db->dbprefix("sh_testings").".status)) as status,
						IFNULL(".$this->db->dbprefix("sh_testings").".result_status,'pending') as result_status,
						sh_testings.attachment,
						sh_testings.result_attachment,
						sh_testings.group_id,
						sh_testings.regroup_id
					")
			->join("companies","companies.id = sh_testings.biller_id","left")
			->join("sh_testing_results","sh_testing_results.id = sh_testings.result_id","left")
			->join("sh_testing_groups","sh_testing_groups.id = IF(".$this->db->dbprefix('sh_testings').".regroup_id > 0, ".$this->db->dbprefix('sh_testings').".regroup_id, ".$this->db->dbprefix('sh_testings').".group_id)","left")
			->join("sh_grades","sh_grades.id = sh_testings.testing_grade_id","left")
			->join("sales","sales.id = sh_testings.sale_id","left")
			->group_by("sh_testings.id")
			->from("sh_testings");
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $this->datatables->where('sh_testings.created_by', $this->session->userdata('user_id'));
        }
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
			$this->datatables->where('sh_testings.biller_id', $this->session->userdata('biller_id'));
		}
		if ($biller_id) {
			$this->datatables->where('sh_testings.biller_id', $biller_id);
		}
		
		
        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }
    public function document_lists($biller_id = NULL)
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('document_lists')));
		$meta = array('page_title' => lang('document_lists'), 'bc' => $bc);
        $this->page_construct('schools/document_lists', $meta, $this->data);
    }
	public function document_forms($biller_id = NULL)
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('document_forms')));
		$meta = array('page_title' => lang('document_forms'), 'bc' => $bc);
        $this->page_construct('schools/document_forms', $meta, $this->data);
    }
    public function getDocument_forms($biller_id = NULL, $academic_year = null, $group_id = null)
    {
        $this->bpas->checkPermissions('docment_form');
		$detail_link = anchor('admin/schools/view_document_detail/$1', '<i class="fa fa-eye"></i> ' . lang('view_detail'), '');
		
		$edit_link = anchor('admin/schools/edit_document_form/$1', '<i class="fa fa-edit"></i> ' . lang('edit_document_form'), ' class="edit_testing" ');
		$delete_link = "<a href='#' class='po delete_testing' title='" . $this->lang->line("delete_document_form") . "' data-content=\"<p>"
        . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_document_form/$1') . "'>"
        . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
        . lang('delete_document_form') . "</a>";
        $action = '<div class="text-center"><div class="btn-group text-left">'
        . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
        . lang('actions') . ' <span class="caret"></span></button>
                    <ul class="dropdown-menu pull-right" role="menu">
						<li>' . $detail_link . '</li>
						<li>' . $edit_link . '</li>
                        <li>' . $delete_link . '</li>
                    </ul>
                </div></div>';
        $this->load->library('datatables');
		$this->datatables
			->select("".$this->db->dbprefix('sh_document_forms').".id as id,".$this->db->dbprefix('sh_document_forms').".form_type, cf.description as cf_description, CONCAT(firstname, ' ', lastname) as name, CONCAT(firstname_other, ' ', lastname_other) as name_other, phone, gender, dob")
			->join("sh_students","sh_students.id = sh_document_forms.student_id","left")
			->join("custom_field cf","cf.name = sh_document_forms.form_type","left")
			->from("sh_document_forms");
        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }
    public function add_document_forms(){
		$this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required")); 
		$this->form_validation->set_rules('form_type', $this->lang->line("form_type"), 'required');
        if ($this->form_validation->run() == true) {
			$date          		= $this->bpas->fld(trim($this->input->post('date')));
			$biller_id     		= $this->input->post('biller');
			$room_id     		= $this->input->post('room');
			$room 				= $this->schools_model->getRoomByID($room_id);
			$program     		= $this->input->post('program');
			$specialty     		= $this->input->post('specialty');
			$start_time_teach   = $this->input->post('cf_start_time');
			$end_time_teach     = $this->input->post('cf_end_time');
			$grade_teach 		= $this->input->post('grade');
			$stop_day 			= $this->input->post('cf_stop_date');
			$timeshift_old 		= $this->input->post('timeshift_old');
			$timeshift_new 		= $this->input->post('timeshift_new');
			$start_date    		= $this->bpas->fld(trim($this->input->post('cf_start_date')));
			$stop_date     		= $this->bpas->fld(trim($this->input->post('cf_stop_date')));
			$form_type     		= $this->input->post('form_type');
			$description   		= $this->input->post('description') ? $this->bpas->clear_tags($this->input->post('description')) : null;
            $note          		= $this->input->post('note') ? $this->bpas->clear_tags($this->input->post('note')) : null;
			$attachment    		= null;
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $attachment = $photo;
            } 
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0; 
			for ($r = 0; $r < $i; $r++) {
            	$student_id = $_POST['student_id'][$r];
				$data[] = array(
					'form_type'  	=> $form_type,
					'date'       	=> $date,
					'day'        	=> $stop_day,
					'id_room'    	=> $room_id,
					'student_id' 	=> $student_id,
					'biller_id'  	=> $biller_id,
					'skill'      	=> $specialty,
					'program'    	=> $program,
					'description'   => $description,
					'cf_start_date' => $start_date,
					'cf_end_date'   => $stop_date,
					'old_time'     	=> $timeshift_old,
					'new_time'     	=> $timeshift_new,
					'cf_start_time' => $start_time_teach,
					'cf_end_time'   => $end_time_teach,
					'grade'			=> $grade_teach,
					'attachment'    => $attachment,
					'created_by'    => $this->session->userdata('user_id'),
					'created_at'    => date('Y-m-d H:i:s'),
				);
			} 
			$sub_data = array();
			if($form_type == "student_ask_do_sarana"){
				for ($ri = 0; $ri < $i; $ri++) {
	            	$std_id = $_POST['student_id'][$ri];
					$sub_data[] = array(
						'student_id' 	=> $std_id,
						'description'   => $description,
						'created_by'    => $this->session->userdata('user_id'),
						'created_at'    => date('Y-m-d H:i:s'),
					);
				} 
			}
        }
        if ($this->form_validation->run() == true && $this->schools_model->addDocumentforms($data, $sub_data)) {
            $this->session->set_userdata('remove_stls', 1);
            $this->session->set_flashdata('message', $this->lang->line("document_forms_added"));
			admin_redirect('schools/document_forms');
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['programs'] = $this->schools_model->getPrograms();	
			$this->data['grades'] = $this->schools_model->getGrades();	
			$this->data['skills'] = $this->schools_model->getSkills();
			$this->data['rooms'] = $this->schools_model->getRooms();
			$this->data['semesters'] = $this->schools_model->getSemesters();
			$this->data['colleges'] = $this->schools_model->getColleges();
			$this->data['subjects'] = $this->schools_model->getSubjects();
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('schools'), 'page' => lang('school')), array('link' => site_url('schools/add_document_forms'), 'page' => lang('add_document_forms')), array('link' => '#', 'page' => lang('add_document_forms')));
			$meta = array('page_title' => lang('add_document_forms'), 'bc' => $bc);
            $this->page_construct('schools/add_document_forms', $meta, $this->data);
        }
	}
    public function add_document_forms_($waiting_id = false)
    {
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		// $this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		// $this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		// $this->form_validation->set_rules('customer', $this->lang->line("customer"), 'required');
		// $this->form_validation->set_rules('phone', $this->lang->line("phone"), 'required');
  		// $this->form_validation->set_rules('relationship', $this->lang->line("relationship"), 'required');
		// $this->form_validation->set_rules('stname', $this->lang->line("name"), 'required');
		// $this->form_validation->set_rules('group', $this->lang->line("group"), 'required');
		$this->form_validation->set_rules('group', $this->lang->line("group"), 'required');

		if ($this->form_validation->run() == true) {
			$date = $this->bpas->fld(trim($this->input->post('date')));
			$biller_id = $this->input->post('biller');
			$academic_year = $this->input->post('academic_year');
			$customer = $this->input->post('customer');
			$gender = $this->input->post('gender');
			$ethnicity = $this->input->post('ethnicity');
			$nationality = $this->input->post('nationality');
			$phone = $this->input->post('phone');
			$relationship = $this->input->post('relationship');
			
			$stname = $this->input->post('stname');
			$stname_latin = $this->input->post('stname_latin');
			$stdob = $this->bpas->fsd($this->input->post('stdob'));
			$stgender = $this->input->post('stgender');
			$stethnicity = $this->input->post('stethnicity');
			$group_id = $this->input->post('group');
			
            $note = $this->bpas->clear_tags($this->input->post('note'));
            $i = isset($_POST['program_id']) ? sizeof($_POST['program_id']) : 0;
            for ($r = 0; $r < $i; $r++) {
				$items[] = array(
					'program_id' =>  $_POST['program_id'][$r],
					'o_grade' =>  $_POST['o_grade'][$r],
					'o_academic_year' =>  $_POST['o_academic_year'][$r],
					'o_school' =>  $_POST['o_school'][$r],
					'n_grade' =>  $_POST['n_grade'][$r]
				);
            }
            if (empty($items)) {
                $this->form_validation->set_rules('student', lang("order_items"), 'required');
            } else {
                krsort($items);
            }
            $data = array(
						'date' => $date,
						'biller_id' => $biller_id,
						'academic_year' => $academic_year,
						'customer' => $customer,
						'gender' => $gender,
						'ethnicity' => $ethnicity,
						'nationality' => $nationality,
						'phone' => $phone,
						'relationship' => $relationship,
						'stname' => $stname,
						'stname_latin' => $stname_latin,
						'stdob' => $stdob,
						'stgender' => $stgender,
						'stethnicity' => $stethnicity,
						'group_id' => $group_id,
						'note' => $note,
						'created_by' => $this->session->userdata('user_id'),
						'created_at' => date('Y-m-d H:i:s'),
						'status' => 'pending',
					);

            if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
			
			if ($_FILES['photo']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->upload_path;
                $config['allowed_types'] = $this->image_types;
                $config['max_size'] = $this->allowed_file_size;
				$config['max_width'] = $this->Settings->iwidth;
                $config['max_height'] = $this->Settings->iheight;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('photo')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['photo'] = $photo;
				
				$this->load->library('image_lib');
                $config['image_library'] = 'gd2';
                $config['source_image'] = $this->upload_path . $photo;
                $config['new_image'] = $this->thumbs_path . $photo;
                $config['maintain_ratio'] = TRUE;
                $config['width'] = $this->Settings->twidth;
                $config['height'] = $this->Settings->theight;
                $this->image_lib->clear();
                $this->image_lib->initialize($config);
				if (!$this->image_lib->resize()) {
                    echo $this->image_lib->display_errors();
                }
            }
			
        }
        if ($this->form_validation->run() == true && $this->schools_model->addTesting($data, $items)) {
            $this->session->set_userdata('remove_tsls', 1);
            $this->session->set_flashdata('message', $this->lang->line("testing_added"));
			admin_redirect('schools/testings');
        } else {
			$waiting = $waiting_id ? $this->schools_model->getStudentWaitingID($waiting_id) : false;
			$programs = $this->schools_model->getPrograms();
			$pr = false;
			if($programs){
				foreach($programs as $program){
					$program->o_academic_year = $waiting ? $waiting->old_academic_year : "";
					$program->o_grade = $waiting ? $waiting->old_grade_id : "";
					$program->o_school = $waiting ? $waiting->old_school : "";
					$program->n_grade = $waiting ? $waiting->grade_id : "";
					$pr[$program->id] = array('id' => $program->id, 'item_id' => $program->id, 'row' => $program);
				}
			}
			$this->data['waiting'] = $waiting;
			$this->data['testing_items'] = json_encode($pr);
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['grades'] = $this->schools_model->getGrades();	
			$this->data['waitings'] = $this->schools_model->getWatingStudents();
			$this->data['other_schools'] = $this->schools_model->getOtherSchools();
			$this->data['groups'] = $this->schools_model->getTestingGroups(date("Y"));
			$this->data['colleges'] = $this->schools_model->getcolleges();
			$this->data['skills'] = $this->schools_model->getSkills();
			$this->data['years'] = $this->schools_model->getYears();
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/testings'), 'page' => lang('testings')), array('link' => '#', 'page' => lang('add_testing')));
			$meta = array('page_title' => lang('add_testing'), 'bc' => $bc);
            $this->page_construct('schools/add_document_forms', $meta, $this->data);
        }
    }
    public function delete_document_form($id = null)
    {
        $this->bpas->checkPermissions(NULL, true);
		if ($this->input->get('id')) {
			$id = $this->input->get('id');
		}
		if ($this->schools_model->deleteDocumentForm($id)) {
			if ($this->input->is_ajax_request()) {
				echo lang("document_forms_deleted");
				die();
			}
			$this->session->set_flashdata('message', lang('document_forms_deleted'));
			admin_redirect('schools/document_forms');
		}
    }
	public function add_testing($waiting_id = false)
    {
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('customer', $this->lang->line("customer"), 'required');
		$this->form_validation->set_rules('phone', $this->lang->line("phone"), 'required');
        $this->form_validation->set_rules('relationship', $this->lang->line("relationship"), 'required');
		$this->form_validation->set_rules('stname', $this->lang->line("name"), 'required');
		$this->form_validation->set_rules('group', $this->lang->line("group"), 'required');

		if ($this->form_validation->run() == true) {
			$date = $this->bpas->fld(trim($this->input->post('date')));
			$biller_id = $this->input->post('biller');
			$academic_year = $this->input->post('academic_year');
			$customer = $this->input->post('customer');
			$gender = $this->input->post('gender');
			$ethnicity = $this->input->post('ethnicity');
			$nationality = $this->input->post('nationality');
			$phone = $this->input->post('phone');
			$relationship = $this->input->post('relationship');
			
			$stname = $this->input->post('stname');
			$stname_latin = $this->input->post('stname_latin');
			$stdob = $this->bpas->fsd($this->input->post('stdob'));
			$stgender = $this->input->post('stgender');
			$stethnicity = $this->input->post('stethnicity');
			$group_id = $this->input->post('group');
			
            $note = $this->bpas->clear_tags($this->input->post('note'));
            $i = isset($_POST['program_id']) ? sizeof($_POST['program_id']) : 0;
            for ($r = 0; $r < $i; $r++) {
				$items[] = array(
					'program_id' =>  $_POST['program_id'][$r],
					'o_grade' =>  $_POST['o_grade'][$r],
					'o_academic_year' =>  $_POST['o_academic_year'][$r],
					'o_school' =>  $_POST['o_school'][$r],
					'n_grade' =>  $_POST['n_grade'][$r]
				);
            }
            if (empty($items)) {
                $this->form_validation->set_rules('student', lang("order_items"), 'required');
            } else {
                krsort($items);
            }
            $data = array(
						'date' => $date,
						'biller_id' => $biller_id,
						'academic_year' => $academic_year,
						'customer' => $customer,
						'gender' => $gender,
						'ethnicity' => $ethnicity,
						'nationality' => $nationality,
						'phone' => $phone,
						'relationship' => $relationship,
						'stname' => $stname,
						'stname_latin' => $stname_latin,
						'stdob' => $stdob,
						'stgender' => $stgender,
						'stethnicity' => $stethnicity,
						'group_id' => $group_id,
						'note' => $note,
						'created_by' => $this->session->userdata('user_id'),
						'created_at' => date('Y-m-d H:i:s'),
						'status' => 'pending',
					);

            if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
			
			if ($_FILES['photo']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->upload_path;
                $config['allowed_types'] = $this->image_types;
                $config['max_size'] = $this->allowed_file_size;
				$config['max_width'] = $this->Settings->iwidth;
                $config['max_height'] = $this->Settings->iheight;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('photo')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['photo'] = $photo;
				
				$this->load->library('image_lib');
                $config['image_library'] = 'gd2';
                $config['source_image'] = $this->upload_path . $photo;
                $config['new_image'] = $this->thumbs_path . $photo;
                $config['maintain_ratio'] = TRUE;
                $config['width'] = $this->Settings->twidth;
                $config['height'] = $this->Settings->theight;
                $this->image_lib->clear();
                $this->image_lib->initialize($config);
				if (!$this->image_lib->resize()) {
                    echo $this->image_lib->display_errors();
                }
            }
			
        }
        if ($this->form_validation->run() == true && $this->schools_model->addTesting($data, $items)) {
            $this->session->set_userdata('remove_tsls', 1);
            $this->session->set_flashdata('message', $this->lang->line("testing_added"));
			admin_redirect('schools/testings');
        } else {
			$waiting = $waiting_id ? $this->schools_model->getStudentWaitingID($waiting_id) : false;
			$programs = $this->schools_model->getPrograms();
			$pr = false;
			if($programs){
				foreach($programs as $program){
					$program->o_academic_year = $waiting ? $waiting->old_academic_year : "";
					$program->o_grade = $waiting ? $waiting->old_grade_id : "";
					$program->o_school = $waiting ? $waiting->old_school : "";
					$program->n_grade = $waiting ? $waiting->grade_id : "";
					$pr[$program->id] = array('id' => $program->id, 'item_id' => $program->id, 'row' => $program);
				}
			}
			$this->data['waiting'] = $waiting;
			$this->data['testing_items'] = json_encode($pr);
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['grades'] = $this->schools_model->getGrades();	
			$this->data['waitings'] = $this->schools_model->getWatingStudents();
			$this->data['other_schools'] = $this->schools_model->getOtherSchools();
			$this->data['groups'] = $this->schools_model->getTestingGroups(date("Y"));
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/testings'), 'page' => lang('testings')), array('link' => '#', 'page' => lang('add_testing')));
			$meta = array('page_title' => lang('add_testing'), 'bc' => $bc);
            $this->page_construct('schools/add_testing', $meta, $this->data);
        }
    }
	
	public function edit_testing($id = false)
    {
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('customer', $this->lang->line("customer"), 'required');
		$this->form_validation->set_rules('phone', $this->lang->line("phone"), 'required');
        $this->form_validation->set_rules('relationship', $this->lang->line("relationship"), 'required');
		$this->form_validation->set_rules('stname', $this->lang->line("name"), 'required');
		$this->form_validation->set_rules('group', $this->lang->line("group"), 'required');

		if ($this->form_validation->run() == true) {
			$date = $this->bpas->fld(trim($this->input->post('date')));
			$biller_id = $this->input->post('biller');
			$academic_year = $this->input->post('academic_year');
			$customer = $this->input->post('customer');
			$gender = $this->input->post('gender');
			$ethnicity = $this->input->post('ethnicity');
			$nationality = $this->input->post('nationality');
			$phone = $this->input->post('phone');
			$relationship = $this->input->post('relationship');
			
			$stname = $this->input->post('stname');
			$stname_latin = $this->input->post('stname_latin');
			$stdob = $this->bpas->fsd($this->input->post('stdob'));
			$stgender = $this->input->post('stgender');
			$stethnicity = $this->input->post('stethnicity');
			$group_id = $this->input->post('group');
			
            $note = $this->bpas->clear_tags($this->input->post('note'));
            $i = isset($_POST['program_id']) ? sizeof($_POST['program_id']) : 0;
            for ($r = 0; $r < $i; $r++) {
				$items[] = array(
					'testing_id' =>  $id,
					'program_id' =>  $_POST['program_id'][$r],
					'o_grade' =>  $_POST['o_grade'][$r],
					'o_academic_year' =>  $_POST['o_academic_year'][$r],
					'o_school' =>  $_POST['o_school'][$r],
					'n_grade' =>  $_POST['n_grade'][$r]
				);
            }
            if (empty($items)) {
                $this->form_validation->set_rules('student', lang("order_items"), 'required');
            } else {
                krsort($items);
            }
            $data = array(
						'date' => $date,
						'biller_id' => $biller_id,
						'academic_year' => $academic_year,
						'customer' => $customer,
						'gender' => $gender,
						'ethnicity' => $ethnicity,
						'nationality' => $nationality,
						'phone' => $phone,
						'relationship' => $relationship,
						'stname' => $stname,
						'stname_latin' => $stname_latin,
						'stdob' => $stdob,
						'stgender' => $stgender,
						'stethnicity' => $stethnicity,
						'group_id' => $group_id,
						'note' => $note,
						'updated_by' => $this->session->userdata('user_id'),
						'updated_at' => date('Y-m-d H:i:s')
					);

            if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['attachment'] = $photo;
            }
			
			if ($_FILES['photo']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->upload_path;
                $config['allowed_types'] = $this->image_types;
                $config['max_size'] = $this->allowed_file_size;
				$config['max_width'] = $this->Settings->iwidth;
                $config['max_height'] = $this->Settings->iheight;
                $config['overwrite'] = FALSE;
                $config['encrypt_name'] = TRUE;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('photo')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['photo'] = $photo;
				
				$this->load->library('image_lib');
                $config['image_library'] = 'gd2';
                $config['source_image'] = $this->upload_path . $photo;
                $config['new_image'] = $this->thumbs_path . $photo;
                $config['maintain_ratio'] = TRUE;
                $config['width'] = $this->Settings->twidth;
                $config['height'] = $this->Settings->theight;
                $this->image_lib->clear();
                $this->image_lib->initialize($config);
				if (!$this->image_lib->resize()) {
                    echo $this->image_lib->display_errors();
                }
            }
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateTesting($id, $data, $items)) {
            $this->session->set_userdata('remove_tsls', 1);
            $this->session->set_flashdata('message', $this->lang->line("testing_edited"));
			admin_redirect('schools/testings');
        } else {
			$testing_items = $this->schools_model->getTestingItems($id);
			$pr = false;
			if($testing_items){
				foreach($testing_items as $testing_item){
					$testing_item->id = $testing_item->program_id;
					$testing_item->name = $testing_item->program_name;
					$pr[$testing_item->id] = array('id' => $testing_item->id, 'item_id' => $testing_item->id, 'row' => $testing_item);
				}
			}
			$testing = $this->schools_model->getTestingByID($id);
			$this->data['testing'] = $testing;
			$this->data['testing_items'] = json_encode($pr);
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['grades'] = $this->schools_model->getGrades();	
			$this->data['other_schools'] = $this->schools_model->getOtherSchools();
			$this->data['groups'] = $this->schools_model->getTestingGroups($testing->academic_year);
			$this->session->set_userdata('remove_tsls', 1);
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/testings'), 'page' => lang('testings')), array('link' => '#', 'page' => lang('edit_testing')));
			$meta = array('page_title' => lang('edit_testing'), 'bc' => $bc);
            $this->page_construct('schools/edit_testing', $meta, $this->data);
        }
    }
	
	public function delete_testing($id = null)
    {
        $this->bpas->checkPermissions(NULL, true);
		if ($this->input->get('id')) {
			$id = $this->input->get('id');
		}
		if ($this->schools_model->deleteTesting($id)) {
			if ($this->input->is_ajax_request()) {
				echo lang("testing_deleted");
				die();
			}
			$this->session->set_flashdata('message', lang('testing_deleted'));
			admin_redirect('schools/testings');
		}
    }
	
	public function send_testing($id = null){
		$this->bpas->checkPermissions("add_testing");
		if ($this->input->get('id')) {
			$id = $this->input->get('id');
		}
		if ($this->schools_model->sendTesting($id)) {
			if ($this->input->is_ajax_request()) {
				echo lang("testing_sent");
				die();
			}
			$this->session->set_flashdata('message', lang('testing_sent'));
			admin_redirect('schools/testings');
		}
	}

	
	public function testing_actions()
    {
        if (!$this->Owner && !$this->Admin && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('delete_testing', true);
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteTesting($id);
                    }
                    $this->session->set_flashdata('message', $this->lang->line("testing_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);

                } elseif ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('testing'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('relationship'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('student_name'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('student_name_latin'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('gender'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('dob'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('group'));
					$this->excel->getActiveSheet()->SetCellValue('L1', lang('testing_date'));
					$this->excel->getActiveSheet()->SetCellValue('M1', lang('result'));
					$this->excel->getActiveSheet()->SetCellValue('N1', lang('status'));
					$this->excel->getActiveSheet()->SetCellValue('O1', lang('result_status'));
					
					$this->db->select("
								sh_testings.id as id, 
								DATE_FORMAT(".$this->db->dbprefix('sh_testings').".date, '%Y-%m-%d %T') as date,
								companies.company as biller,
								CONCAT(".$this->db->dbprefix('sh_testings').".academic_year,' - ',".$this->db->dbprefix('sh_testings').".academic_year + 1) as academic_year,
								sh_testings.customer,
								sh_testings.phone,
								sh_testings.relationship,
								sh_testings.stname,
								sh_testings.stname_latin,
								sh_testings.stgender,
								DATE_FORMAT(".$this->db->dbprefix('sh_testings').".stdob, '%Y-%m-%d') as stdob,
								sh_testing_groups.name as group_name,
								DATE_FORMAT(".$this->db->dbprefix('sh_testing_groups').".testing_date, '%Y-%m-%d') as testing_date,
								sh_testing_results.name as result,
								IF(".$this->db->dbprefix("sales").".payment_status = 'paid', 'paid',".$this->db->dbprefix("sh_testings").".status) as status,
								IFNULL(".$this->db->dbprefix("sh_testings").".result_status,'pending') as result_status,
								sh_testings.attachment,
								sh_testings.result_attachment
							")
					->join("companies","companies.id = sh_testings.biller_id","left")
					->join("sh_testing_results","sh_testing_results.id = sh_testings.result_id","left")
					->join("sh_testing_groups","sh_testing_groups.id = IF(".$this->db->dbprefix('sh_testings').".regroup_id > 0, ".$this->db->dbprefix('sh_testings').".regroup_id, ".$this->db->dbprefix('sh_testings').".group_id)","left")
					->join("sales","sales.id = sh_testings.sale_id","left")
					->group_by("sh_testings.id")
					->where_in("sh_testings.id",$_POST['val'])
					->from("sh_testings");
					$q = $this->db->get();
					$row = 2;
					if($q->num_rows() > 0){
						foreach ($q->result() as $testing) {
							$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($testing->date));
							$this->excel->getActiveSheet()->SetCellValue('B' . $row, $testing->biller);
							$this->excel->getActiveSheet()->SetCellValue('C' . $row, $testing->academic_year);
							$this->excel->getActiveSheet()->SetCellValue('D' . $row, $testing->customer);
							$this->excel->getActiveSheet()->SetCellValue('E' . $row, $testing->phone);
							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $testing->relationship);
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $testing->stname);
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $testing->stname_latin);
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($testing->stgender));
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->hrsd($testing->stdob));
							$this->excel->getActiveSheet()->SetCellValue('K' . $row, $testing->group_name);
							$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->hrsd($testing->testing_date));
							$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->remove_tag($testing->result));
							$this->excel->getActiveSheet()->SetCellValue('N' . $row, lang($testing->status));
							$this->excel->getActiveSheet()->SetCellValue('O' . $row, lang($testing->result_status));
							$row++;
						}
					}

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'testings_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_quote_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	public function student_ask_do_sarana($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['data'] = $this->schools_model->getDocumentformByID($id);
        $this->data['student'] = $this->schools_model->getStudentByID($this->data['data']->student_id);
        $this->data['teams'] = $this->schools_model->getDocumentStudentByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id); 
        $this->load->view($this->theme . 'schools/student_ask_do_sarana', $this->data);
	}
	public function student_recomendation($id = false){
    	$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
      	$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_recomendation', $this->data);
  	}
	public function student_ask_permission($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
		$this->data['doc_info'] = $this->schools_model->getDoc_Ask_Permission($id);
		$this->data['timeshift'] = $this->site->getcustomfieldById($this->data['doc_info']->timeshift_id);
		$this->load->view($this->theme . 'schools/student_ask_permission', $this->data);
	}
	public function student_ask_time($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_ask_time', $this->data);
	}
	public function student_bangkanday_examination($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_bangkanday_examination', $this->data);
	}
	public function student_lect_ask_permission($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_lect_ask_permission', $this->data);
	}
	public function student_ask_sarana_out($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_ask_sarana_out', $this->data);
	}
	public function student_change_major($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_change_major', $this->data);
	}
	public function student_delay_study($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
		$this->data['delaystudy'] = $this->schools_model->getdelaystudyItems($id);
        $this->load->view($this->theme . 'schools/student_delay_study', $this->data);
	}
	public function student_request_cetificate($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
		$this->data['student_request_cetificate'] = $this->schools_model->getRequestcetificateItems($id);
        $this->load->view($this->theme . 'schools/student_request_cetificate', $this->data);
	}
	public function student_request_cetificate_fy($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
		$this->data['student_request_cetificate_fy'] = $this->schools_model->getrequestcetificatefyItems($id);
        $this->load->view($this->theme . 'schools/student_request_cetificate_fy', $this->data);
	}
	public function student_repuest_for_cetificate($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
		$this->data['st_for_cetificate'] = $this->schools_model->getForcetificateItems($id);
        $this->load->view($this->theme . 'schools/student_repuest_for_cetificate', $this->data);
	}
	public function student_request_transcript($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
		$this->data['student_request_transcript'] = $this->schools_model->getTranscriptItems($id);
        $this->load->view($this->theme . 'schools/student_request_transcript', $this->data);
	}
	public function student_change_time($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
		$this->data['change_time'] = $this->schools_model->getChangetimeItems($id);
        $this->load->view($this->theme . 'schools/student_change_time', $this->data);
	}
	public function student_contract_student($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_contract_student', $this->data);
	}
	public function student_ask_exam($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_ask_exam', $this->data);
	}
	public function student_ask_in_class($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_ask_in_class', $this->data);
	}
	public function student_mistake($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_mistake', $this->data);
	}
	public function student_request_ask_stay_at_pcu($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_request_ask_stay_at_pcu', $this->data);
	}
	public function student_ask_re_exam($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_ask_re_exam', $this->data);
	}
	public function student_ask_stop($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
		$this->data['stop'] = $this->schools_model->getStopItems($id);
        $this->load->view($this->theme . 'schools/student_ask_stop', $this->data);
	}
	public function student_ask_stop_study($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
		 $this->data['stopstudy'] = $this->schools_model->getStopstudyItems($id);
        $this->load->view($this->theme . 'schools/student_ask_stop_study', $this->data);
	}
	public function student_request($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_request', $this->data);
	}
	public function student_invite($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_invite', $this->data);
	}
	public function student_ask_add_time($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
 	 	$this->data['addtime'] = $this->schools_model->getaddtimeItems($id);
        $this->load->view($this->theme . 'schools/student_ask_add_time', $this->data);
	}
	public function student_ask_scholarship($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
  		$this->data['data'] = $this->schools_model->getDocumentformByID($id);
  		$this->data['biller'] = $this->site->getCompanyByID($this->data['data']->biller_id);
        $this->load->view($this->theme . 'schools/student_ask_scholarship', $this->data);
	}
	public function modal_view_testing($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $testing = $this->schools_model->getTestingByID($id);
        $this->data['biller'] = $this->site->getCompanyByID($testing->biller_id);
        $this->data['testing'] = $testing;
		$this->data['testing_items'] = $this->schools_model->getTestingItems($id);
        $this->load->view($this->theme . 'schools/modal_view_testing', $this->data);
	}
	
	public function modal_view_testing_result($id = false){
		$this->bpas->checkPermissions('testings', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $testing = $this->schools_model->getTestingByID($id);
        $this->data['biller'] = $this->site->getCompanyByID($testing->biller_id);
        $this->data['testing'] = $testing;
        $this->load->view($this->theme . 'schools/modal_view_testing_result', $this->data);
	}
	
	
	public function update_result($testing_id = false){
		$this->bpas->checkPermissions('update_result',true);
		$this->form_validation->set_rules('result', lang("result"), 'required');
		$this->form_validation->set_rules('status', lang("status"), 'required');
		$this->form_validation->set_rules('date', lang("date"), 'required');
		if ($this->form_validation->run() == true){	
			$testing_result = $this->schools_model->getTestingResultByID($this->input->post("status"));
			$data = array(
					'result_id' => $testing_result->id,
					'result_status' => $testing_result->type,
					'result' => $this->bpas->clear_tags($this->input->post('result')),
					'result_by' => $this->session->userdata('user_id'),
					'result_at' => $this->bpas->fld($this->input->post("date")),
				);
			if ($_FILES['document']['size'] > 0) {
				$this->load->library('upload');
				$config['upload_path'] = $this->digital_upload_path;
				$config['allowed_types'] = $this->digital_file_types;
				$config['max_size'] = $this->allowed_file_size;
				$config['overwrite'] = FALSE;
				$config['encrypt_name'] = TRUE;
				$this->upload->initialize($config);
				if (!$this->upload->do_upload('document')) {
					$error = $this->upload->display_errors();
					$this->session->set_flashdata('error', $error);
					admin_redirect($_SERVER["HTTP_REFERER"]);
				}
				$photo = $this->upload->file_name;
				$data['result_attachment'] = $photo;
			}
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->setTesting($testing_id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("testing_result_updated"));
            admin_redirect("schools/testings");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$testing = $this->schools_model->getTestingByID($testing_id);
			$this->data['testing'] = $testing;
			$this->data['results'] = $this->schools_model->getTestingResults();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/update_result', $this->data);	
		}	
	}
	
	public function assign_grade($testing_id = false){
		$this->bpas->checkPermissions('update_result',true);
		$this->form_validation->set_rules('grade', lang("grade"), 'required');
		if ($this->form_validation->run() == true){	
			$data = array(
					'testing_grade_id' => $this->input->post('grade'),
					'result_at' => date('Y-m-d H:i:s'),
				);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->setTesting($testing_id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("testing_assigned_grade"));
            admin_redirect("schools/testings");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$testing = $this->schools_model->getTestingByID($testing_id);
			$this->data['testing'] = $testing;
			$this->data['biller'] = $this->site->getCompanyByID($testing->biller_id);
			$this->data['testing_items'] = $this->schools_model->getTestingItems($testing_id);
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/assign_grade', $this->data);	
		}	
	}
	
	public function reassign_group($testing_id = false){
		$this->bpas->checkPermissions('add_testing',true);
		$this->form_validation->set_rules('regroup_id', lang("group"), 'required');
		if ($this->form_validation->run() == true){	
			$data = array(
					'regroup_id' => $this->input->post('regroup_id'),
					'result_at' => date('Y-m-d H:i:s'),
				);
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->setTesting($testing_id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("testing_reassign_group"));
            admin_redirect("schools/testings");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$testing = $this->schools_model->getTestingByID($testing_id);
			$this->data['testing'] = $testing;
			$this->data['biller'] = $this->site->getCompanyByID($testing->biller_id);
			$this->data['testing_items'] = $this->schools_model->getTestingItems($testing_id);
			$this->data['groups'] = $this->schools_model->getTestingGroups($testing->academic_year);
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/reassign_group', $this->data);	
		}	
	}
	
	
	public function testing_report()
	{
		$this->bpas->checkPermissions();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['groups'] = $this->schools_model->getTestingGroups($this->input->post("academic_year") ? $this->input->post("academic_year") : false);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('testing_report')));
        $meta = array('page_title' => lang('testing_report'), 'bc' => $bc);
        $this->page_construct('schools/testing_report', $meta, $this->data);
	}
	
	public function getTestingReport($xls = null)
	{
		$this->bpas->checkPermissions('testing_report', TRUE);
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
		$start_date = $this->input->get('start_date') ? $this->bpas->fld($this->input->get('start_date')) : NULL;
		$end_date = $this->input->get('end_date') ? $this->bpas->fld($this->input->get('end_date')) : NULL;
		$testing_date = $this->input->get('testing_date') ? $this->bpas->fsd($this->input->get('testing_date')) : NULL;
		$group_id = $this->input->get('group') ? $this->bpas->fsd($this->input->get('group')) : NULL;
		$status = $this->input->get('status') ? $this->input->get('status') : NULL;
		$result_status = $this->input->get('result_status') ? $this->input->get('result_status') : NULL;
		if ($xls) {
			$this->db->select("
								DATE_FORMAT(".$this->db->dbprefix('sh_testings').".date, '%Y-%m-%d %T') as date,
								companies.company,
								CONCAT(".$this->db->dbprefix('sh_testings').".academic_year,' - ',(".$this->db->dbprefix('sh_testings').".academic_year + 1)) as academic_year,
								sh_testings.customer,
								sh_testings.phone,
								sh_testings.relationship,
								sh_testings.stname,
								sh_testings.stname_latin,
								sh_testings.stgender,
								DATE_FORMAT(".$this->db->dbprefix('sh_testings').".stdob, '%Y-%m-%d') as stdob,
								sh_testing_groups.name as group_name,
								DATE_FORMAT(".$this->db->dbprefix('sh_testing_groups').".testing_date, '%Y-%m-%d') as testing_date,
								sh_testing_results.name as result,
								sh_testings.attachment,
								sh_testings.result_attachment,
								IF(".$this->db->dbprefix("sales").".payment_status = 'paid', 'paid',".$this->db->dbprefix("sh_testings").".status) as status,
								IFNULL(".$this->db->dbprefix("sh_testings").".result_status,'pending') as result_status,
								sh_testings.id as id
							", FALSE)
					->from('sh_testings')
					->join("sh_testing_groups","sh_testing_groups.id = IF(".$this->db->dbprefix('sh_testings').".regroup_id > 0, ".$this->db->dbprefix('sh_testings').".regroup_id, ".$this->db->dbprefix('sh_testings').".group_id)","left")
					->join('sh_testing_results','sh_testing_results.id = sh_testings.result_id','left')
					->join('companies','companies.id = sh_testings.biller_id','left')
					->join("sales","sales.id = sh_testings.sale_id","left")
					->group_by("sh_testings.id");

			if ($academic_year) {
				$this->db->where('sh_testings.academic_year', $academic_year);
			}
			if ($biller) {
				$this->db->where('sh_testings.biller_id', $biller);
			}
			if ($start_date) {
				$this->db->where('sh_testings.date >=', $start_date);
			}
			if ($end_date) {
				$this->db->where('sh_testings.date <=', $end_date);
			}
			if ($testing_date) {
				$this->db->where('sh_testing_groups.testing_date', $testing_date);
			}
			if ($group_id) {
				$this->db->where('sh_testings.group_id', $group_id);
			}
			if ($status) {
				$this->db->where("(IF(".$this->db->dbprefix("sales").".payment_status = 'paid', 'paid',".$this->db->dbprefix("sh_testings").".status)) = ", $status);
			}
			if ($result_status) {
				$this->db->where("IFNULL(".$this->db->dbprefix("sh_testings").".result_status,'pending')", $result_status);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where('sh_testings.biller_id', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('testing_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('relationship'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('student_name'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('student_name_latin'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('dob'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('group'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('testing_date'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('result'));
				$this->excel->getActiveSheet()->SetCellValue('N1', lang('status'));
				$this->excel->getActiveSheet()->SetCellValue('O1', lang('result_status'));
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->company);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->academic_year);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->relationship);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->stname);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->stname_latin);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->stgender));
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->hrsd($data_row->stdob));
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->group_name);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->hrsd($data_row->testing_date));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->remove_tag($data_row->result));
					$this->excel->getActiveSheet()->SetCellValue('N' . $row, lang($data_row->status));
					$this->excel->getActiveSheet()->SetCellValue('O' . $row, lang($data_row->result_status));
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
				$filename = 'testing_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			admin_redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables->select("
										DATE_FORMAT(".$this->db->dbprefix('sh_testings').".date, '%Y-%m-%d %T') as date,
										companies.company,
										CONCAT(".$this->db->dbprefix('sh_testings').".academic_year,' - ',(".$this->db->dbprefix('sh_testings').".academic_year + 1)) as academic_year,
										sh_testings.customer,
										sh_testings.phone,
										sh_testings.relationship,
										sh_testings.stname,
										sh_testings.stname_latin,
										sh_testings.stgender,
										DATE_FORMAT(".$this->db->dbprefix('sh_testings').".stdob, '%Y-%m-%d') as stdob,
										sh_testing_groups.name as group_name,
										DATE_FORMAT(".$this->db->dbprefix('sh_testing_groups').".testing_date, '%Y-%m-%d') as testing_date,
										sh_testing_results.name as result,
										sh_testings.attachment,
										sh_testings.result_attachment,
										sh_testings.status,
										IF(".$this->db->dbprefix("sales").".payment_status = 'paid', 'paid',".$this->db->dbprefix("sh_testings").".status) as status,
										IFNULL(".$this->db->dbprefix("sh_testings").".result_status,'pending') as result_status,
										sh_testings.group_id,
										sh_testings.regroup_id,
										sh_testings.id as id
									", FALSE)
							->from('sh_testings')
							->join("sh_testing_groups","sh_testing_groups.id = IF(".$this->db->dbprefix('sh_testings').".regroup_id > 0, ".$this->db->dbprefix('sh_testings').".regroup_id, ".$this->db->dbprefix('sh_testings').".group_id)","left")
							->join('companies','companies.id = sh_testings.biller_id','left')
							->join('sh_testing_results','sh_testing_results.id = sh_testings.result_id','left')
							->join("sales","sales.id = sh_testings.sale_id","left")
							->group_by("sh_testings.id");

			if ($academic_year) {
				$this->datatables->where('sh_testings.academic_year', $academic_year);
			}
			if ($biller) {
				$this->datatables->where('sh_testings.biller_id', $biller);
			}
			if ($start_date) {
				$this->datatables->where('sh_testings.date >=', $start_date);
			}
			if ($end_date) {
				$this->datatables->where('sh_testings.date <=', $end_date);
			}
			if ($testing_date) {
				$this->datatables->where('sh_testing_groups.testing_date', $testing_date);
			}
			if ($group_id) {
				$this->datatables->where('sh_testings.group_id', $group_id);
			}
			if ($status) {
				$this->datatables->where("(IF(".$this->db->dbprefix("sales").".payment_status = 'paid', 'paid',".$this->db->dbprefix("sh_testings").".status)) = ", $status);
			}
			if ($result_status) {
				$this->datatables->where("IFNULL(".$this->db->dbprefix("sh_testings").".result_status,'pending')", $result_status);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where('sh_testings.biller_id', $this->session->userdata('biller_id'));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function testing_detail_report()
	{
		$this->bpas->checkPermissions("testing_report");
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['groups'] = $this->schools_model->getTestingGroups($this->input->post("academic_year") ? $this->input->post("academic_year") : false);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('testing_detail_report')));
        $meta = array('page_title' => lang('testing_detail_report'), 'bc' => $bc);
        $this->page_construct('schools/testing_detail_report', $meta, $this->data);
	}
	
	public function sale_report()
	{
		$this->bpas->checkPermissions('student_fee_report');
		$this->data['error']     = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['billers']   = $this->site->getBillers();
		$this->data['programs']  = $this->schools_model->getPrograms();
		$this->data['grades']    = $this->schools_model->getGrades();
		$this->data['students']  = $this->schools_model->getStudents();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('sale_report')));
		$meta = array('page_title' => lang('sale_report'), 'bc' => $bc);	
		$this->page_construct('schools/sale_report',$meta,$this->data);
	}

	function getSaleReport($xls = NULL)
    {
        $this->bpas->checkPermissions('student_fee_report', TRUE);
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;		
		$program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date("Y");
		$class = $this->input->get('class') ? $this->input->get('class') : NULL;
		$student = $this->input->get('student') ? $this->input->get('student') : NULL;
		$fee_type = $this->input->get('fee_type') ? $this->input->get('fee_type') : NULL;
		$payment_status = $this->input->get('payment_status') ? $this->input->get('payment_status') : NULL;
        if ($xls) {
            $this->db->select("
						sales.biller,
						DATE_FORMAT(".$this->db->dbprefix('sales').".date, '%Y-%m-%d %T') as date,
						sales.reference_no,
						CONCAT(".$this->db->dbprefix('sales').".academic_year,' - ',(".$this->db->dbprefix('sales').".academic_year + 1)) as academic_year,
						sh_students.number,
						IF(".$this->db->dbprefix("sh_students").".id > 0, CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname, ' - ', ".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) ,".$this->db->dbprefix("sales").".customer) as customer,
						sales.child_no,
						sh_study_infos.class,
						sales.fee_type,
						IFNULL(".$this->db->dbprefix('sales').".order_discount_id,0) as order_discount_id,
						sales.grand_total,
						IFNULL(total_return,0) as total_return,
						(IFNULL(bpas_payments.paid + IFNULL(total_return_paid,0),0) + IFNULL(bpas_payments.discount,0)) as paid,
						ROUND((".$this->db->dbprefix('sales').".grand_total-(IFNULL(bpas_payments.paid,0))-(IFNULL(bpas_payments.discount,0))-(IFNULL(bpas_return.total_return + total_return_paid,0))),".$this->Settings->decimals.") as balance,
						sales.payment_status
					")
			->from('sales')
			->join('companies','companies.id = sales.customer_id','left')
			->join('installments','sales.id = installments.sale_id AND installments.status = "active"','left')
			// ->join('sh_study_infos','sh_study_infos.student_id = companies.student_id 
			// 						AND sh_study_infos.academic_year = sales.academic_year 
			// 						AND sh_study_infos.biller_id = sales.biller_id 
			// 						AND sh_study_infos.program_id = sales.program_id 
			// 						AND sh_study_infos.grade_id = sales.grade_id','left')
			->join('sh_study_infos','sh_study_infos.id = sales.study_info_id','left')
			->join('sh_students','sh_students.id = companies.student_id','left')
			->join('(SELECT
						sale_id,
						SUM(ABS(grand_total)) AS total_return,
						SUM(paid) AS total_return_paid
					FROM
						'.$this->db->dbprefix('sales').' WHERE sale_status = "returned"
					GROUP BY
						sale_id) as bpas_return', 'bpas_return.sale_id=sales.id', 'left')
			->join('(SELECT
						sale_id,
						IFNULL(SUM(amount),0) AS paid,
						IFNULL(SUM(discount),0) AS discount
					FROM
						'.$this->db->dbprefix('payments').'
					GROUP BY
						sale_id) as bpas_payments', 'bpas_payments.sale_id=sales.id', 'left');
						
			$this->db->group_by("sales.id");			
			$this->db->where('IFNULL('.$this->db->dbprefix("sales").'.module_type,"")', "school");
			
			if($class){
				$this->db->where('sh_study_infos.class_id', $class);
			}
			if($student){
				$this->db->where('sh_study_infos.student_id', $student);
			}
			if($academic_year){
				$this->db->where('sales.academic_year', $academic_year);
			}
			if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
			if ($program) {
                $this->db->where('sales.program_id', $program);
            }
			if ($grade) {
                $this->db->where('sales.grade_id', $grade);
            }
			if ($fee_type) {
                $this->db->where('sales.fee_type', $fee_type);
            }
			if($payment_status){
				if($payment_status=="paid"){
					$this->db->where('sales.payment_status', $payment_status);
				}else{
					$this->db->where('sales.payment_status !=', "paid");
				}
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sales.biller_id =', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sale_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('student_id'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('child_no'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('class'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('fee_type'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('discount'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('grand_total'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('returned'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('paid'));
				$this->excel->getActiveSheet()->SetCellValue('N1', lang('balance'));
				$this->excel->getActiveSheet()->SetCellValue('O1', lang('status'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrsd($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->academic_year);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->number);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->child_no);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->class);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->fee_type);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->order_discount_id);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->grand_total));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->formatDecimal($data_row->total_return));
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($data_row->paid));
					$this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->formatDecimal($data_row->balance));
					$this->excel->getActiveSheet()->SetCellValue('O' . $row, lang($data_row->payment_status));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $filename = 'sale_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
			$this->datatables->select("
						'' as num_rows,
						sales.biller,
						DATE_FORMAT(".$this->db->dbprefix('sales').".date, '%Y-%m-%d %T') as date,
						sales.reference_no,
						CONCAT(".$this->db->dbprefix('sales').".academic_year,' - ',(".$this->db->dbprefix('sales').".academic_year + 1)) as academic_year,
						sh_students.number,
						IF(".$this->db->dbprefix("sh_students").".id > 0, CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname, ' - ', ".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) ,".$this->db->dbprefix("sales").".customer) as customer,
						sales.child_no,
						sh_study_infos.class,
						sales.fee_type,
						IFNULL(".$this->db->dbprefix('sales').".order_discount_id,0) as order_discount_id,
						sales.grand_total,
						IFNULL(total_return,0) as total_return,
						(IFNULL(bpas_payments.paid + IFNULL(total_return_paid,0),0) + IFNULL(bpas_payments.discount,0)) as paid,
						ROUND((".$this->db->dbprefix('sales').".grand_total-(IFNULL(bpas_payments.paid,0))-(IFNULL(bpas_payments.discount,0))-(IFNULL(bpas_return.total_return + total_return_paid,0))),".$this->Settings->decimals.") as balance,
						sales.payment_status,
						installments.id as installment,
						sales.updated_by,
						sh_study_infos.type,
						sales.id as id
					")
			->from('sales')
			->join('companies','companies.id = sales.customer_id','left')
			->join('installments','sales.id = installments.sale_id AND installments.status = "active"','left')
			// ->join('sh_study_infos','sh_study_infos.student_id = companies.student_id 
			// 						AND sh_study_infos.academic_year = sales.academic_year 
			// 						AND sh_study_infos.biller_id = sales.biller_id 
			// 						AND sh_study_infos.program_id = sales.program_id 
			// 						AND sh_study_infos.grade_id = sales.grade_id','left')
			->join('sh_study_infos','sh_study_infos.id = sales.study_info_id','left')
			->join('sh_students','sh_students.id = companies.student_id','left')
			->join('(SELECT
						sale_id,
						SUM(ABS(grand_total)) AS total_return,
						SUM(paid) AS total_return_paid
					FROM
						'.$this->db->dbprefix('sales').' WHERE sale_status = "returned"
					GROUP BY
						sale_id) as bpas_return', 'bpas_return.sale_id=sales.id', 'left')
			->join('(SELECT
						sale_id,
						IFNULL(SUM(amount),0) AS paid,
						IFNULL(SUM(discount),0) AS discount
					FROM
						'.$this->db->dbprefix('payments').'
						
					GROUP BY
						sale_id) as bpas_payments', 'bpas_payments.sale_id=sales.id', 'left');
						
			$this->datatables->group_by("sales.id");			
			$this->datatables->where('IFNULL('.$this->db->dbprefix("sales").'.module_type,"")', "school");
			
			if($class){
				$this->datatables->where('sh_study_infos.class_id', $class);
			}
			if($student){
				$this->datatables->where('sh_study_infos.student_id', $student);
			}
			if($academic_year){
				$this->datatables->where('sales.academic_year', $academic_year);
			}
			if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
			if ($program) {
                $this->datatables->where('sales.program_id', $program);
            }
			if ($grade) {
                $this->datatables->where('sales.grade_id', $grade);
            }
			if ($fee_type) {
                $this->datatables->where('sales.fee_type', $fee_type);
            }
			if($payment_status){
				if($payment_status=="paid"){
					$this->datatables->where('sales.payment_status', $payment_status);
				}else{
					$this->datatables->where('sales.payment_status !=', "paid");
				}
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sales.biller_id =', $this->session->userdata('biller_id'));
			}
            echo $this->datatables->generate();
        }
    }
	
	public function testing_groups()
	{	
		$this->bpas->checkPermissions();	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')),array('link' => 'schools', 'page' => lang('schools')), array('link' => '#', 'page' => lang('testing_groups')));
		$meta = array('page_title' => lang('testing_groups'), 'bc' => $bc);
		$this->page_construct('schools/testing_groups', $meta, $this->data);
	}

	public function getTestingGroups()
	{	
		$this->bpas->checkPermissions('testing_groups');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_testing_group") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_testing_group/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_testing_group') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_testing_group/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_testing_group').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_testing_groups.id as id, 
					sh_testing_groups.name,
					CONCAT(".$this->db->dbprefix('sh_testing_groups').".academic_year,' - ',".$this->db->dbprefix('sh_testing_groups').".academic_year + 1) as academic_year,
					DATE_FORMAT(".$this->db->dbprefix('sh_testing_groups').".testing_date, '%Y-%m-%d') as testing_date,
					DATE_FORMAT(".$this->db->dbprefix('sh_testing_groups').".close_enrollment_date, '%Y-%m-%d') as close_enrollment_date,
					sh_testing_groups.description")
            ->from("sh_testing_groups")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_testing_group()
	{
		$this->bpas->checkPermissions('testing_groups',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('name', lang("name"), 'required');
		$this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		$this->form_validation->set_rules('testing_date', lang("testing_date"), 'required');
		if ($this->form_validation->run() == true){
			$data = array(
				'name'  => $post['name'],
				'academic_year'  => $post['academic_year'],
				'testing_date'  => $this->bpas->fsd($post['testing_date']),
				'close_enrollment_date'  => $this->bpas->fsd($post['close_enrollment_date']),
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	
		if ($this->form_validation->run() == true && $id = $this->schools_model->addTestingGroup($data)) {
            $this->session->set_flashdata('message', $this->lang->line("testing_group_added"));
            admin_redirect("schools/testing_groups");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_testing_group', $this->data);	
		}	
	}
	
	public function edit_testing_group($id = null)
	{		
		$this->bpas->checkPermissions('testing_groups',true);
		$post = $this->input->post();		
		$this->form_validation->set_rules('name', lang("name"), 'required');
		$this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		$this->form_validation->set_rules('testing_date', lang("testing_date"), 'required');
		if($this->form_validation->run() == true){						
			$data = array(
				'name'  => $post['name'],
				'academic_year'  => $post['academic_year'],
				'testing_date'  => $this->bpas->fsd($post['testing_date']),
				'close_enrollment_date'  => $this->bpas->fsd($post['close_enrollment_date']),
				'description' => $this->bpas->clear_tags($post['description']),
			);
		}elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
		if($this->form_validation->run() == true && $id = $this->schools_model->updateTestingGroup($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("testing_group_updated"));
            admin_redirect("schools/testing_groups");
        }else{
			$testing_group_info = $this->schools_model->getTestingGroupByID($id);	
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $testing_group_info;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_testing_group', $this->data);
		}			
	}
	
	public function delete_testing_group($id = null)
    {	
		$this->bpas->checkPermissions('testing_groups');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteTestingGroup($id)){
        		$this->session->set_flashdata('message', lang("testing_group_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function testing_group_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('testing_groups');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteTestingGroup($id);
                    }
                    $this->session->set_flashdata('message', lang("testing_group_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('testing_group');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('name'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('testing_date'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('close_enrollment_date'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('description'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $testing_group = $this->schools_model->getTestingGroupByID($id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $testing_group->name);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $testing_group->academic_year." - ".($testing_group->academic_year + 1));
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->hrsd($testing_group->testing_date));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->hrsd($testing_group->close_enrollment_date));
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->remove_tag($testing_group->description));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'testing_group_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	public function getcf_description(){
		$name = $this->input->get("name");
		$cf = $this->site->getcustomfieldByName($name); 
		$this->bpas->send_json($cf->description); 
	}
	public function get_testing_group(){
		$academic_year = $this->input->get("academic_year");
		$groups = $this->schools_model->getTestingGroups($academic_year);
		echo json_encode($groups);
	}
	public function student_suggestions()
    {
		$term = $this->input->get('term', true);
		$biller_id = $this->input->get('biller_id', true);
		$academic_year = $this->input->get('academic_year', true);
		$program_id = $this->input->get('program_id', true);
		$grade_id = $this->input->get('grade_id', true);
		$status = $this->input->get('status', true);
        if (strlen($term) < 1) {
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . admin_url('welcome') . "'; }, 10);</script>");
        }
        $analyzed = $this->bpas->analyze_term($term);
        $sr = $analyzed['term'];
        $rows = $this->schools_model->getStudentNames($sr, $biller_id, $academic_year, $program_id, $grade_id, $status);
        if ($rows) {
            foreach ($rows as $row) {
				$row->gender = lang($row->gender);
                $pr[] = array('id' => $row->id, 'item_id' => $row->id, 'label' => $row->number." - ".$row->lastname.' '.$row->firstname,'row' => $row);
            }
			$this->bpas->send_json($pr);
        } else {
            $this->bpas->send_json(array(array('id' => 0, 'label' => lang('no_match_found'), 'value' => $term)));
        }
    }
	
	public function student_status_suggestions()
    {
		$term 		   = $this->input->get('term', true);
		$biller_id     = $this->input->get('biller_id') ? $this->input->get('biller_id') : null;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : null;
		$program_id    = $this->input->get('program_id') ? $this->input->get('program_id') : null;
		$skill_id      = $this->input->get('skill_id') ? $this->input->get('skill_id') : null;
		$grade_id      = $this->input->get('grade_id') ? $this->input->get('grade_id') : null;
		$semester_id   = $this->input->get('semester') ? $this->input->get('semester') : null;
		$class_id      = $this->input->get('class_id') ? $this->input->get('class_id') : null;
		$timeshift     = $this->input->get('timeshift') ? $this->input->get('timeshift') : null;
		$status        = $this->input->get('status', true);
        if (strlen($term) < 1) {
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . admin_url('welcome') . "'; }, 10);</script>");
        }
        $analyzed = $this->bpas->analyze_term($term);
        $sr = $analyzed['term'];
        $rows = $this->schools_model->getStudentStatusName($sr, $biller_id, $academic_year, $program_id, $skill_id, $grade_id, $semester_id, $class_id, $timeshift, $status);
        if ($rows) {
            foreach ($rows as $row) {
				$row->gender = lang($row->gender);
                $pr[] = array('id' => $row->id, 'item_id' => $row->id, 'label' => $row->number." - ".$row->lastname.' '.$row->firstname,'row' => $row);
            }
			$this->bpas->send_json($pr);
        } else {
            $this->bpas->send_json(array(array('id' => 0, 'label' => lang('no_match_found'), 'value' => $term)));
        }
    }

    public function student_doc_suggestions()
    {
		$term 		   = $this->input->get('term', true);
		$biller_id     = $this->input->get('biller_id') ? $this->input->get('biller_id') : null;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : null;
		$program_id    = $this->input->get('program_id') ? $this->input->get('program_id') : null;
		$skill_id      = $this->input->get('skill_id') ? $this->input->get('skill_id') : null;
		$grade_id      = $this->input->get('grade_id') ? $this->input->get('grade_id') : null;
		$semester_id   = $this->input->get('semester') ? $this->input->get('semester') : null;
		$timeshift     = $this->input->get('timeshift') ? $this->input->get('timeshift') : null;
		$form_type     = $this->input->get('form_type') ? $this->input->get('form_type') : null;
        if (strlen($term) < 1) {
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . admin_url('welcome') . "'; }, 10);</script>");
        }
        $analyzed = $this->bpas->analyze_term($term);
        $sr       = $analyzed['term'];
        if($form_type == 'student_ask_add_time'){
			$rows     = $this->schools_model->getTeacherNames($sr,$biller_id,$academic_year,$program_id,$grade_id);
        }else{
			$rows     = $this->schools_model->getStudentNames($sr,$biller_id,$academic_year,$program_id,$grade_id);
        }
        
			// $this->bpas->send_json($rows);

        if ($rows) {
            foreach ($rows as $row) {
				$row->gender = lang($row->gender);
                $pr[] = array('id' => $row->id, 'item_id' => $row->id, 'label' =>  $row->lastname . ' ' . $row->firstname, 'row' => $row);
            }
			$this->bpas->send_json($pr);
        } else {
            $this->bpas->send_json(array(array('id' => 0, 'label' => lang('no_match_found'), 'value' => $term)));
        }
    }
     public function teacher_doc_suggestions()
    {
		$term 		   = $this->input->get('term', true);
		$biller_id     = $this->input->get('biller_id') ? $this->input->get('biller_id') : null;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : null;
		$program_id    = $this->input->get('program_id') ? $this->input->get('program_id') : null;
		$skill_id      = $this->input->get('skill_id') ? $this->input->get('skill_id') : null;
		$grade_id      = $this->input->get('grade_id') ? $this->input->get('grade_id') : null;
		$semester_id   = $this->input->get('semester') ? $this->input->get('semester') : null;
		$timeshift     = $this->input->get('timeshift') ? $this->input->get('timeshift') : null;
        if (strlen($term) < 1) {
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . admin_url('welcome') . "'; }, 10);</script>");
        }
        $analyzed = $this->bpas->analyze_term($term);
        $sr       = $analyzed['term'];
        $rows     = $this->schools_model->getTeacherNames($sr,$biller_id,$academic_year,$program_id,$grade_id);
        if ($rows) {
            foreach ($rows as $row) {
				$row->gender = lang($row->gender);
                $pr[] = array('id' => $row->id, 'item_id' => $row->id, 'label' => $row->number . " - " . $row->lastname . ' ' . $row->firstname, 'row' => $row);
            }
			$this->bpas->send_json($pr);
        } else {
            $this->bpas->send_json(array(array('id' => 0, 'label' => lang('no_match_found'), 'value' => $term)));
        }
    }

	public function student_assgin_suggestions()
    {
		$term 		   = $this->input->get('term', true);
		$biller_id     = $this->input->get('biller_id') ? $this->input->get('biller_id') : null;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : null;
		$program_id    = $this->input->get('program_id') ? $this->input->get('program_id') : null;
		$skill_id      = $this->input->get('skill_id') ? $this->input->get('skill_id') : null;
		$grade_id      = $this->input->get('grade_id') ? $this->input->get('grade_id') : null;
		$semester_id   = $this->input->get('semester') ? $this->input->get('semester') : null;
		$timeshift     = $this->input->get('timeshift') ? $this->input->get('timeshift') : null;

        if (strlen($term) < 1) {
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . admin_url('welcome') . "'; }, 10);</script>");
        }
        $analyzed = $this->bpas->analyze_term($term);
        $sr       = $analyzed['term'];
        $rows     = $this->schools_model->getStudentAdmisssionName($sr, $biller_id, $academic_year, $program_id, $skill_id, $grade_id, $semester_id, $timeshift);
        if ($rows) {
            foreach ($rows as $row) {
				$row->gender = lang($row->gender);
                $pr[] = array('id' => $row->id, 'item_id' => $row->id, 'label' => $row->number . " - " . $row->lastname . ' ' . $row->firstname, 'row' => $row);
            }
			$this->bpas->send_json($pr);
        } else {
            $this->bpas->send_json(array(array('id' => 0, 'label' => lang('no_match_found'), 'value' => $term)));
        }
    }
	
	public function set_student_status_review($id = false)
	{
		$this->bpas->checkPermissions('set_student_status_review',true);
		$this->form_validation->set_rules('review_status', lang("review_status"), 'required');
		if ($this->form_validation->run() == true){	
			$data = array(
					'student_id' => $this->input->post('student_id'),	
					'review_status' => $this->input->post('review_status'),
					'review_note' => $this->bpas->clear_tags($this->input->post('review_note')),
					'review_by' => $this->session->userdata('user_id'),
					'review_date' => date('Y-m-d H:i:s'),
				);
			if ($_FILES['document']['size'] > 0) {
				$this->load->library('upload');
				$config['upload_path'] = $this->digital_upload_path;
				$config['allowed_types'] = $this->digital_file_types;
				$config['max_size'] = $this->allowed_file_size;
				$config['overwrite'] = FALSE;
				$config['encrypt_name'] = TRUE;
				$this->upload->initialize($config);
				if (!$this->upload->do_upload('document')) {
					$error = $this->upload->display_errors();
					$this->session->set_flashdata('error', $error);
					admin_redirect($_SERVER["HTTP_REFERER"]);
				}
				$photo = $this->upload->file_name;
				$data['review_attachment'] = $photo;
			}
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->reviewStudentStatus($id,$data)) {
			$this->session->set_flashdata('message', $this->lang->line("student_status_reviewed"));
            admin_redirect("schools/student_statuses");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['student_status'] = $this->schools_model->getStudentStatusByID($id);
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/set_student_status_review', $this->data);	
		}	
	}
	
	public function add_reenrollment($status_id = false){
		$this->bpas->checkPermissions('add_reenrollment',true);
		$this->form_validation->set_rules('s_program', lang("program"), 'required');
		$this->form_validation->set_rules('s_grade', lang("grade"), 'required');
		$student_status = $this->schools_model->getStudentStatusByID($status_id);
		$student_id = $student_status->student_id;
		if ($this->form_validation->run() == true){	
			$program = $this->schools_model->getProgramByID($this->input->post('s_program'));
			$grade = $this->schools_model->getGradeByID($this->input->post('s_grade'));
			$class = $this->schools_model->getClassByID($this->input->post('s_class'));
			
			$review = array(
					'id' => $status_id,
					'student_id' => $student_id,	
					'program_id' => $student_status->program_id,	
					'review_status' => "reenrolled",
					'review_by' => $this->session->userdata('user_id'),
					'review_date' => date('Y-m-d H:i:s'),
				);
			
			
			$data = array(
					'student_id'  	=> $student_id,
					'biller_id' 	=> $this->input->post('s_biller'),
					'date' 			=> $this->bpas->fsd(trim($this->input->post('s_date'))),
					'academic_year' => $this->input->post('s_academic_year'),
					'class_id' 		=> $class->id,
					'class'			=> $class->name,
					'program_id' 	=> $program->id,
					'program' 		=> $program->name,
					'grade_id' 		=> $grade->id,
					'grade'			=> $grade->name,
					'issue_invoice' => ($this->Settings->auto_invoice ? "yes" : "no"),
					'description' 	=> $this->bpas->clear_tags($this->input->post('s_description'))
				);
				
			if ($_FILES['s_document']['size'] > 0) {
				$this->load->library('upload');
				$config['upload_path'] = $this->digital_upload_path;
				$config['allowed_types'] = $this->digital_file_types;
				$config['max_size'] = $this->allowed_file_size;
				$config['overwrite'] = FALSE;
				$config['encrypt_name'] = TRUE;
				$this->upload->initialize($config);
				if (!$this->upload->do_upload('s_document')) {
					$error = $this->upload->display_errors();
					$this->session->set_flashdata('error', $error);
					admin_redirect($_SERVER["HTTP_REFERER"]);
				}
				$photo = $this->upload->file_name;
				$data['attachment'] = $photo;
			}
				
		}
		if ($this->form_validation->run() == true && $id = $this->schools_model->addReenrollment($review, $data)) {
			$this->session->set_flashdata('message', $this->lang->line("reenrollment_added"));
            admin_redirect("schools/student_statuses");
			
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$student = $this->schools_model->getStudentByID($student_id);
			$this->data['last_study'] = $this->schools_model->getLastStudyInfo($student_id);
			$this->data['status_id'] = $status_id;
			$this->data['student'] = $student;
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_reenrollment', $this->data);	
		}	
	}
	
	public function student_status_reviews($id = null)
    {
        $this->bpas->checkPermissions('student_statuses', true);
        $this->data['student_status'] = $this->schools_model->getStudentStatusByID($id);
        $this->data['page_title'] = lang("student_status_reviews");
		$this->load->view($this->theme . 'schools/student_status_reviews', $this->data);
    }

    public function student_statuses($biller_id = NULL, $academic_year = null)
    {
        $this->bpas->checkPermissions();
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
		$this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year']  = ($academic_year ? $academic_year : ($this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y')));
		$this->data['billers']        = $this->site->getBillers();
		$this->data['biller']         = ($biller_id ? $this->site->getCompanyByID($biller_id) : ($this->input->post('biller') ? $this->site->getCompanyByID($this->input->post('biller')) : null));
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades']   = $this->schools_model->getGrades();
		$this->data['skills']   = $this->schools_model->getSkills();
		$this->data['sections'] = $this->schools_model->getSection();
		$this->data['rooms'] = $this->schools_model->getRooms();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('student_statuses')));
		$meta = array('page_title' => lang('student_statuses'), 'bc' => $bc);
        $this->page_construct('schools/student_statuses', $meta, $this->data);
    }
	
	public function getStudentStatuses($biller_id = null, $academic_year = null)
    {
        $this->bpas->checkPermissions('student_statuses');
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
		$biller        = $this->input->get('biller') ? $this->input->get('biller') : null;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date('Y');
		$student_id    = $this->input->get('student_id') ? $this->input->get('student_id') : null;
		$student_name  = $this->input->get('student_name') ? $this->input->get('student_name') : null;
		$gender        = $this->input->get('gender') ? $this->input->get('gender') : null;
		$program       = $this->input->get('program') ? $this->input->get('program') : null;
		$skill         = $this->input->get('skill') ? $this->input->get('skill') : null;
		$grade         = $this->input->get('grade') ? $this->input->get('grade') : null;
		$class         = $this->input->get('class') ? $this->input->get('class') : null;
		$timeshift     = $this->input->get('timeshift') ? $this->input->get('timeshift') : null;
		$batch         = $this->input->get('batch') ? $this->input->get('batch') : null;
		$generation    = $this->input->get('generation') ? $this->input->get('generation') : null;
		$scholarship   = $this->input->get('scholarship') ? $this->input->get('scholarship') : null;
		$room          = $this->input->get('room') ? $this->input->get('room') : null;
		$section       = $this->input->get('section') ? $this->input->get('section') : null;
		$start_date    = $this->input->get('start_date') ? $this->input->get('start_date') : null;
		$end_date      = $this->input->get('end_date') ? $this->input->get('end_date') : null;

		if ($this->Owner || $this->Admin || $this->GP['schools-add_reenrollment']) {
			$add_reenrollment_link = anchor('admin/schools/add_reenrollment/$1', '<i class="fa fa-plus"></i> ' . lang('add_reenrollment'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="add_reenrollment" data-target="#myModal"');
		}else{
			$add_reenrollment_link = "";
		}
		if ($this->Owner || $this->Admin || $this->GP['schools-set_student_status_review']) {
			$set_review_link = anchor('admin/schools/set_student_status_review/$1', '<i class="fa fa-check"></i> ' . lang('set_review'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="set_review" data-target="#myModal"');
		}else{
			$set_review_link = "";
		}
		$view_review_link = anchor('admin/schools/student_status_reviews/$1', '<i class="fa fa-eye"></i> ' . lang('view_review'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" class="view_review" data-target="#myModal"');
		$edit_link = anchor('admin/schools/edit_student_status/$1', '<i class="fa fa-edit"></i> ' . lang('edit_student_status'), ' class="edit_student_status" ');
		$delete_link = "<a href='#' class='po delete_student_status' title='<b>" . $this->lang->line("delete_student_status") . "</b>' data-content=\"<p>"
        . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_student_status/$1') . "'>"
        . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
        . lang('delete_student_status') . "</a>";
        $action = '<div class="text-center"><div class="btn-group text-left">'
        . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
        . lang('actions') . ' <span class="caret"></span></button>
                    <ul class="dropdown-menu pull-right" role="menu">
						<li>' . $add_reenrollment_link . '</li>
						<li>' . $view_review_link . '</li>
						<li>' . $set_review_link . '</li>
						<li>' . $edit_link . '</li>
                        <li>' . $delete_link . '</li>
                    </ul>
                </div></div>';

        // IF(" . $this->db->dbprefix('sh_student_statuses') . ".status = 'reconfirm' OR " . $this->db->dbprefix('sh_student_statuses').".status = 'suspend', " . $this->db->dbprefix('sh_student_statuses') . ".review_status, 'completed') as review_status,
        $this->load->library('datatables');
		$this->datatables->select("
					sh_student_statuses.id as id, 
					DATE_FORMAT(" . $this->db->dbprefix('sh_student_statuses') . ".date, '%Y-%m-%d %T') as date,
					companies.company as biller,
					CONCAT(" . $this->db->dbprefix('sh_student_statuses') . ".academic_year,' - '," . $this->db->dbprefix('sh_student_statuses') . ".academic_year + 1) as academic_year,
					sh_students.code as student_id,
					CONCAT(" . $this->db->dbprefix('sh_students') . ".lastname,' '," . $this->db->dbprefix('sh_students') . ".firstname) as student_name,
					CONCAT(" . $this->db->dbprefix('sh_students') . ".lastname_other,' '," . $this->db->dbprefix('sh_students') . ".firstname_other) as student_name_latin,
					sh_students.gender,
					{$this->db->dbprefix('sh_programs')}.name as program,
					{$this->db->dbprefix('sh_skills')}.name as skill,
					{$this->db->dbprefix('custom_field')}.name as timeshift,
					{$this->db->dbprefix('sh_grades')}.name as grade,
					{$this->db->dbprefix('sh_sections')}.name as semester,
					{$this->db->dbprefix('sh_rooms')}.name as room,
					{$this->db->dbprefix('sh_scholarships')}.name as scholarship,
					sh_student_statuses.status,
					sh_student_statuses.review_status,
					sh_student_statuses.attachment
				")
			->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
			->join("sh_study_infos","sh_study_infos.id = sh_student_statuses.study_info_id","left")
			->join("sh_programs","sh_programs.id = sh_study_infos.program_id","left")
			->join("sh_skills","sh_skills.id = sh_study_infos.skill_id","left")
			->join("sh_grades","sh_grades.id = sh_study_infos.grade_id","left")
			->join("sh_sections","sh_sections.id = sh_study_infos.section_id","left")
			->join("sh_rooms","sh_rooms.id = sh_study_infos.room_id","left")
			->join("sh_scholarships","sh_scholarships.id = sh_study_infos.scholarship_id","left")
			->join("custom_field","custom_field.id = sh_study_infos.timeshift_id","left")
			->join("companies","companies.id = sh_student_statuses.biller_id","left")
			->group_by("sh_student_statuses.id")
			->from("sh_student_statuses");
		if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $this->datatables->where('sh_student_statuses.created_by', $this->session->userdata('user_id'));
        }
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
			$this->datatables->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
		}

		if ($academic_year) {
			$this->datatables->where('sh_student_statuses.academic_year', $academic_year);
        }
		if ($biller_id) {
			$this->datatables->where('sh_student_statuses.biller_id', $biller_id);
        } 
		if ($biller) {
			$this->datatables->where('sh_student_statuses.biller_id', $biller);
		}
		if ($student_id) {
			$this->datatables->where('sh_students.code', $student_id);
		}
		if ($student_name) {
			$this->db->like("{$this->db->dbprefix('sh_students')}.firstname", $student_name, 'both');
			$this->db->or_like("{$this->db->dbprefix('sh_students')}.lastname", $student_name, 'both');
			$this->db->or_like("CONCAT({$this->db->dbprefix('sh_students')}.firstname, ' ', {$this->db->dbprefix('sh_students')}.lastname)", $student_name, 'both');

			$this->db->or_like("{$this->db->dbprefix('sh_students')}.firstname_other", $student_name, 'both');
			$this->db->or_like("{$this->db->dbprefix('sh_students')}.lastname_other", $student_name, 'both');
			$this->db->or_like("CONCAT({$this->db->dbprefix('sh_students')}.firstname_other, ' ', {$this->db->dbprefix('sh_students')}.lastname_other)", $student_name, 'both');
		}
		if ($gender) {
			$this->datatables->where('sh_students.gender', $gender);
		}
		if ($program) {
			$this->datatables->where('sh_study_infos.program_id', $program);
		}
		if ($skill) {
			$this->datatables->where('sh_study_infos.skill_id', $skill);
		}
		if ($grade) {
			$this->datatables->where('sh_study_infos.grade_id', $grade);
		}
		if ($class) {
			$this->datatables->where('sh_study_infos.class', $class);
		}
		if ($timeshift) {
			$this->datatables->where('sh_study_infos.timeshift_id', $timeshift);
		}
		if ($batch) {
			$this->datatables->where('sh_study_infos.batch', $batch);
		}
		if ($generation) {
			$this->datatables->where('sh_study_infos.generation', $generation);
		}
		if ($scholarship) {
			$this->datatables->where('sh_study_infos.scholarship_id', $scholarship);
		}
		if ($room) {
			$this->datatables->where('sh_study_infos.room_id', $room);
		}
		if ($section) {
			$this->datatables->where('sh_study_infos.section_id', $section);
		}
		if ($start_date) {
			$this->datatables->where($this->db->dbprefix('sh_student_statuses') . '.created_at BETWEEN "' . $start_date . '" and "' . $end_date . '"');
		}
        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }
	         
	public function add_student_status()
    {
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('status', $this->lang->line("status"), 'required');
        if ($this->form_validation->run() == true) {
			$biller_id = $this->input->post('biller');
			$academic_year = $this->input->post('academic_year');
			$program_id    = $this->input->post('program');
			$grade_id      = $this->input->post('grade');
			$status        = $this->input->post('status');
			$date          = $this->bpas->fld(trim($this->input->post('date')));
            $note          = $this->bpas->clear_tags($this->input->post('note'));
			$status_date   = $status != "suspend" ? $this->bpas->fsd(trim($this->input->post('status_date'))) : null;
			$from_date     = $status == "suspend" ? $this->bpas->fld(trim($this->input->post('from_date'))) : null;
			$to_date       = $status == "suspend" ? $this->bpas->fld(trim($this->input->post('to_date'))) : null;
			$attachment    = null;
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $attachment = $photo;
            }
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
            	$student_id      = $_POST['student_id'][$r];
				$s_academic_year = $_POST['s_academic_year'][$r];
				$study_info_id   = $_POST['study_info_id'][$r];
				$data[] = array(
					'date'            => $date,
					'biller_id'       => $biller_id,
					'student_id'      => $student_id,
					'study_info_id'   => $study_info_id,
					'academic_year'   => $academic_year,
					's_academic_year' => $s_academic_year,
					'status_date'     => $status_date,
					'from_date'       => $from_date,
					'to_date'         => $to_date,
					'attachment'      => $attachment,
					'note'            => $note,
					'status'          => $status,
					'created_by'      => $this->session->userdata('user_id'),
					'created_at'      => date('Y-m-d H:i:s'),
				);
			}
        }
        if ($this->form_validation->run() == true && $this->schools_model->addStudentStatus($data)) {
            $this->session->set_userdata('remove_stls', 1);
            $this->session->set_flashdata('message', $this->lang->line("student_status_added"));
			admin_redirect('schools/student_statuses');
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers']  =  $this->site->getBillers();
			$this->data['programs'] = $this->schools_model->getPrograms();	
			$this->data['grades']   = $this->schools_model->getGrades();	
			$this->data['skills']   = $this->schools_model->getSkills();	
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/student_statuses'), 'page' => lang('student_statuses')), array('link' => '#', 'page' => lang('add_student_status')));
			$meta = array('page_title' => lang('add_student_status'), 'bc' => $bc);
            $this->page_construct('schools/add_student_status', $meta, $this->data);
        }
    }

	public function import_student_status()
    {
        $this->bpas->checkPermissions();
        $this->load->helper('security');
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
        $this->form_validation->set_rules('userfile', lang("upload_file"), 'xss_clean');
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
        if ($this->form_validation->run() == true) {
			$biller_id = $this->input->post('biller');
			$date      = $this->bpas->fld(trim($this->input->post('date')));
			$note      = $this->bpas->clear_tags($this->input->post('note'));
			if(isset($_FILES["userfile"]["name"])) {
				$this->load->library('upload');
                $config['upload_path']   = $this->digital_upload_path;
                $config['allowed_types'] = ['csv','xls' , 'xlsx'];
                $config['max_size']      = $this->allowed_file_size;
                $config['overwrite']     = true;
                $config['encrypt_name']  = true;
                $config['max_filename']  = 25;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('userfile')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect('schools/import_student_status');
                }
                $path   = $_FILES["userfile"]["tmp_name"];
                $object = PHPExcel_IOFactory::load($path);
                if(!$object){
                    $error = $this->excel->display_errors();
                    $this->session->set_flashdata('error',$error);
                    admin_redirect("schools/import_student_status");
                }
                foreach($object->getWorksheetIterator() as $worksheet) {
                    $HighestRow    = $worksheet->getHighestRow();
                    $HighestColumn = $worksheet->getHighestColumn();
                    $rw = 2;
                    for($row = 2; $row <= $HighestRow; $row++){
                    	$academic_year = trim($worksheet->getCellByColumnAndRow(0, $row)->getValue());
                        $student_code  = trim($worksheet->getCellByColumnAndRow(1, $row)->getValue());
                        $program       = trim($worksheet->getCellByColumnAndRow(2, $row)->getValue());
                        $skill         = trim($worksheet->getCellByColumnAndRow(3, $row)->getValue());
                        $grade         = trim($worksheet->getCellByColumnAndRow(4, $row)->getValue());
                        $semester      = trim($worksheet->getCellByColumnAndRow(5, $row)->getValue());
                        $class         = trim($worksheet->getCellByColumnAndRow(6, $row)->getValue());
                        $status        = str_replace(' ', '_', strtolower(trim($worksheet->getCellByColumnAndRow(7, $row)->getValue())));
                        $status_date   = $worksheet->getCellByColumnAndRow(8, $row)->getValue();
                        $from_date     = $worksheet->getCellByColumnAndRow(9, $row)->getValue();
                        $to_date       = $worksheet->getCellByColumnAndRow(10, $row)->getValue();
                        $review_status = str_replace(' ', '_', strtolower(trim($worksheet->getCellByColumnAndRow(11, $row)->getValue())));
                        if ($academic_year != null && $academic_year != '' && filter_var($academic_year, FILTER_VALIDATE_INT) !== false) {
                        	if ($student_code != null && $student_code != '') {
	                        	if ($student_details = $this->schools_model->getStudentByCode($student_code)) {
	                            	if ($program_details = $this->schools_model->getProgramByCode($program)) {
	                            		if ($skill_details = $this->schools_model->getskillByCode($skill)) {
	                            			if ($grade_details = $this->schools_model->getGradeByCode($grade)) {
	                            				if ($section_details = $this->schools_model->getSectionByCode($semester)) {
	                            					if ($class_details = $this->schools_model->getClassByCode($class)) {
		                            					if ($status != '' && $status != null && ($status == 'assign' || $status == 'suspend' || $status == 'drop_out' || $status == 'reconfirm' || $status == 'black_list' || $status == 'graduate')) {
		                            						if ($review_status != '' && $review_status != null && ($review_status == 'pending' || $review_status == 'black_list' || $review_status == 'accepted')) {
		                            							$arr = [
			                            							'academic_year' => $academic_year,
			                            							'biller_id'     => $biller_id,
			                            							'student_id'    => $student_details->id,
			                            							'program_id'    => $program_details->id,
			                            							'skill_id'      => $skill_details->id,
			                            							'grade_id'      => $grade_details->id,
			                            							'section_id'    => $section_details->id,
			                            							'class_id'      => $class_details->id,
			                            						]; 
			                            						if ($status == 'suspend') {
			                            							if (($from_date != '' && $from_date != null) && ($from_date != '' && $from_date != null)) {
			                            								if ($study_info = $this->schools_model->getStudyInfoByArray($arr)) {
			                            									if ($study_info->status == 'active' || $study_info->status == 'assign') {
			                            										$student_status = array(
																					'date' 			  => $date,
																					'biller_id' 	  => $biller_id,
																					'student_id'      => $student_details->id,
																					'study_info_id'   => $study_info->id,
																					'academic_year'   => $academic_year,
																					's_academic_year' => $academic_year,
																					'status_date' 	  => null,
																					'from_date' 	  => $this->bpas->fsd($from_date),
																					'to_date' 		  => $this->bpas->fsd($to_date),
																					'status' 		  => $status,
																					'review_status'   => $review_status,
																					'note' 			  => $note,
																					'created_by' 	  => $this->session->userdata('user_id'),
																					'created_at' 	  => date('Y-m-d H:i:s'),
																				);
																				if ($review_status == 'black_list' || $review_status == 'accepted') {
																					$student_status['review_date'] = $date;
																					$student_status['review_by']   = $this->session->userdata('user_id');
																				}
			                            									} else {
			                            										$this->session->set_flashdata('error', lang('This student ID: ') . $student_code . ' is exist. ' . lang('line_no') . ' ' . $rw);
				                                								redirect($_SERVER['HTTP_REFERER']);	
			                            									}
			                            								} else {
			                            									$this->session->set_flashdata('error', lang('Student study info is not found!') . ' ( ' . $student_code . ' ). ' . lang('line_no') . ' ' . $rw);
				                                							redirect($_SERVER['HTTP_REFERER']);	
			                            								}
			                            							} else {
																		$this->session->set_flashdata('error', lang('From date or To date is invalid!') . ' ( ' . $from_date . '-' . $to_date . ' ). ' . lang('line_no') . ' ' . $rw);
				                                						redirect($_SERVER['HTTP_REFERER']);
			                            							}
			                            						} else {
			                            							if ($status_date != '' && $status_date != null) {
			                            								if ($study_info = $this->schools_model->getStudyInfoByArray($arr)) {
			                            									if ($study_info->status == 'active' || $study_info->status == 'assign') {
																				$student_status = array(
																					'date' 			  => $date,
																					'biller_id' 	  => $biller_id,
																					'student_id'      => $student_details->id,
																					'study_info_id'   => $study_info->id,
																					'academic_year'   => $academic_year,
																					's_academic_year' => $academic_year,
																					'status_date' 	  => $this->bpas->fsd($status_date),
																					'from_date' 	  => null,
																					'to_date' 		  => null,
																					'status' 		  => $status,
																					'review_status'   => $review_status,
																					'note' 			  => $note,
																					'created_by' 	  => $this->session->userdata('user_id'),
																					'created_at' 	  => date('Y-m-d H:i:s'),
																				);
																				if ($review_status == 'black_list' || $review_status == 'accepted') {
																					$student_status['review_date'] = $date;
																					$student_status['review_by']   = $this->session->userdata('user_id');
																				}
			                            									} else {
			                            										$this->session->set_flashdata('error', lang('This student ID: ') . $student_code . ' is exist. ' . lang('line_no') . ' ' . $rw);
				                                								redirect($_SERVER['HTTP_REFERER']);	
			                            									}
			                            								} else {
			                            									$this->session->set_flashdata('error', lang('Student study info is not found!') . ' ( ' . $student_code . ' ). ' . lang('line_no') . ' ' . $rw);
				                                							redirect($_SERVER['HTTP_REFERER']);		
			                            								}
			                            							} else {
																		$this->session->set_flashdata('error', lang('Status date is invalid!') . ' ( ' . $status_date . ' ). ' . lang('line_no') . ' ' . $rw);
				                                						redirect($_SERVER['HTTP_REFERER']);
			                            							}
			                            						}
		                            						} else {
			                            						$this->session->set_flashdata('error', lang('Review status is invalid!') . ' ( ' . $review_status . ' ). ' . lang('line_no') . ' ' . $rw);
				                                				redirect($_SERVER['HTTP_REFERER']);
			                            					}
		                            					} else {
		                            						$this->session->set_flashdata('error', lang('Status is invalid!') . ' ( ' . $status . ' ). ' . lang('line_no') . ' ' . $rw);
			                                				redirect($_SERVER['HTTP_REFERER']);
		                            					}
		                            				} else {
														$this->session->set_flashdata('error', lang('Class_not_found') . ' ( ' . $class . ' ). ' . lang('line_no') . ' ' . $rw);
			                                			redirect($_SERVER['HTTP_REFERER']);
		                            				}
	                            				} else {
													$this->session->set_flashdata('error', lang('Semester_not_found') . ' ( ' . $semester . ' ). ' . lang('line_no') . ' ' . $rw);
		                                			redirect($_SERVER['HTTP_REFERER']);
	                            				}
		                            		} else {
												$this->session->set_flashdata('error', lang('Year_not_found') . ' ( ' . $grade . ' ). ' . lang('line_no') . ' ' . $rw);
		                                		redirect($_SERVER['HTTP_REFERER']);
		                            		}
	                            		} else {
											$this->session->set_flashdata('error', lang('Skill_not_found') . ' ( ' . $skill . ' ). ' . lang('line_no') . ' ' . $rw);
	                                		redirect($_SERVER['HTTP_REFERER']);
	                            		}	
	                            	} else {
										$this->session->set_flashdata('error', lang('Program_not_found') . ' ( ' . $program . ' ). ' . lang('line_no') . ' ' . $rw);
	                                	redirect($_SERVER['HTTP_REFERER']);
	                            	}
	                        	} else {
	                        		$this->session->set_flashdata('error', lang('student_not_found') . ' ( ' . $student_code . ' ). ' . lang('line_no') . ' ' . $rw);
	                                redirect($_SERVER['HTTP_REFERER']);
	                        	}
		                    } else {
		                    	$this->session->set_flashdata('error', 'Student ID is invalid! ' . lang('line_no') . ' ' . $rw);
	                        	redirect($_SERVER['HTTP_REFERER']);	
		                    }
                        } else {
							$this->session->set_flashdata('error', 'Academic year is invalid! ' . lang('line_no') . ' ' . $rw);
	                        redirect($_SERVER['HTTP_REFERER']);
                        }
                        $data[] = $student_status;
                        $rw++;
	                }
		        }
		    }
		    if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $attachment = $this->upload->file_name;
                $data['attachment'] = $attachment;
            }

            // $this->bpas->print_arrays($data);
        }
        if ($this->form_validation->run() == true && $this->schools_model->addStudentStatus($data)) {
            $this->session->set_userdata('remove_stls', 1);
            $this->session->set_flashdata('message', $this->lang->line("student_status_imported"));
			admin_redirect('schools/student_statuses');
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['programs'] = $this->schools_model->getPrograms();	
			$this->data['grades'] = $this->schools_model->getGrades();	
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/student_statuses'), 'page' => lang('student_statuses')), array('link' => '#', 'page' => lang('import_student_status')));
			$meta = array('page_title' => lang('import_student_status'), 'bc' => $bc);
            $this->page_construct('schools/import_student_status', $meta, $this->data);
        }
    }

	public function edit_student_status($id = false)
    {
        $this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('status', $this->lang->line("status"), 'required');
        if ($this->form_validation->run() == true) {
			$biller_id = $this->input->post('biller');
			$academic_year = $this->input->post('academic_year');
			$status = $this->input->post('status');
			$date = $this->bpas->fld(trim($this->input->post('date')));
            $note = $this->bpas->clear_tags($this->input->post('note'));
			$status_date = $status != "suspend" ? $this->bpas->fsd(trim($this->input->post('status_date'))) : null;
			$from_date = $status == "suspend" ? $this->bpas->fld(trim($this->input->post('from_date'))) : null;
			$to_date = $status == "suspend" ? $this->bpas->fld(trim($this->input->post('to_date'))) : null;
			$attachment = null;
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $attachment = $photo;
            }
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
            	$student_id      = $_POST['student_id'][$r];
				$s_academic_year = $_POST['s_academic_year'][$r];
				$study_info_id   = $_POST['study_info_id'][$r];
				$data[] = array(
					'date'            => $date,
					'biller_id'       => $biller_id,
					'academic_year'   => $academic_year,
					's_academic_year' => $s_academic_year,
					'student_id'      => $student_id,
					'study_info_id'   => $study_info_id,
					'status'          => $status,
					'note'            => $note,
					'status_date'     => $status_date,
					'from_date'       => $from_date,
					'to_date'         => $to_date,
					'attachment'      => $attachment,
					'updated_by'      => $this->session->userdata('user_id'),
					'updated_at'      => date('Y-m-d H:i:s'),
				);
			}
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateStudentStatus($id, $data)) {
            $this->session->set_userdata('remove_stls', 1);
            $this->session->set_flashdata('message', $this->lang->line("student_status_updated"));
			admin_redirect('schools/student_statuses');
        } else {
			$student_status = $this->schools_model->getStudentStatusByID($id);
			if($student_status->review_status != "pending"){
				$this->session->set_flashdata('error', lang('student_status_cannot_edit'));
				admin_redirect(isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : 'welcome');
			}
            $pr[$student_status->student_id] = array('id' => $student_status->student_id, 'item_id' => $student_status->student_id, 'label' => $student_status->number." - ".$student_status->lastname.' '.$student_status->firstname,'row' => $student_status);
			$this->data['student_status_items'] = json_encode($pr);
			$this->data['student_status'] = $student_status;
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['billers'] =  $this->site->getBillers();
			$this->data['programs'] = $this->schools_model->getPrograms();	
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['skills'] = $this->schools_model->getSkills();
            $this->session->set_userdata('remove_stls', 1);
			$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => admin_url('schools/student_statuses'), 'page' => lang('student_statuses')), array('link' => '#', 'page' => lang('edit_student_status')));
			$meta = array('page_title' => lang('edit_student_status'), 'bc' => $bc);
            $this->page_construct('schools/edit_student_status', $meta, $this->data);
        }
    }
	
	public function delete_student_status($id = null)
    {
        $this->bpas->checkPermissions(NULL, true);
		if ($this->input->get('id')) {
			$id = $this->input->get('id');
		}
		$student_status = $this->schools_model->getStudentStatusByID($id);
		if($student_status->review_status != "pending"){
			$this->session->set_flashdata('error', lang('student_status_cannot_delete'));
			admin_redirect(isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : 'welcome');
		}
		if ($this->schools_model->deleteStudentStatus($id)) {
			if ($this->input->is_ajax_request()) {
				echo lang("student_status_deleted");
				die();
			}
			$this->session->set_flashdata('message', lang('student_status_deleted'));
			admin_redirect('schools/student_statuses');
		}
    }
	
	public function modal_view_student_status($id = false)
	{
		$this->bpas->checkPermissions('student_statuses', true);
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $student_status = $this->schools_model->getStudentStatusByID($id);
        $this->data['biller'] = $this->site->getCompanyByID($student_status->biller_id);
        $this->data['student_status'] = $student_status;
		$this->data['program'] = $this->schools_model->getProgramByID($student_status->program_id);
		$this->data['grade'] = $this->schools_model->getGradeByID($student_status->grade_id);
		if($student_status->created_by){
			$this->data['created_by'] = $this->site->getUserByID($student_status->created_by);
		}else{
			$this->data['created_by'] = $this->site->getUserByID($student_status->updated_by);
		}
		
        $this->load->view($this->theme . 'schools/modal_view_student_status', $this->data);
	}
	
	public function student_status_actions()
    {
        if (!$this->Owner && !$this->Admin && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('delete_student_status', true);
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteStudentStatus($id);
                    }
                    $this->session->set_flashdata('message', $this->lang->line("student_status_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);

                } elseif ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('student_status'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('student_id'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('student_name'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('student_name_latin'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('program'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('grade'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('note'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('review_status'));
					
					$this->db->select("
									sh_student_statuses.id as id, 
									sh_student_statuses.date,
									companies.company as biller,
									sh_students.number as student_id,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
									CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
									sh_programs.name as program,
									sh_grades.name as grade, 
									sh_student_statuses.note,
									sh_student_statuses.status,
									IF(".$this->db->dbprefix('sh_student_statuses').".status = 'reconfirm' OR ".$this->db->dbprefix('sh_student_statuses').".status = 'suspend',".$this->db->dbprefix('sh_student_statuses').".review_status, 'completed') as review_status,
									sh_student_statuses.attachment
								")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
					$this->db->where_in("sh_student_statuses.id",$_POST['val']);
					$q = $this->db->get();
                    $row = 2;
					if ($q->num_rows() > 0) {
						foreach (($q->result()) as $student_status) {
							$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($student_status->date));
							$this->excel->getActiveSheet()->SetCellValue('B' . $row, $student_status->biller);
							$this->excel->getActiveSheet()->SetCellValue('C' . $row, $student_status->student_id);
							$this->excel->getActiveSheet()->SetCellValue('D' . $row, $student_status->student_name);
							$this->excel->getActiveSheet()->SetCellValue('E' . $row, $student_status->student_name_latin);
							$this->excel->getActiveSheet()->SetCellValue('F' . $row, $student_status->academic_year);
							$this->excel->getActiveSheet()->SetCellValue('G' . $row, $student_status->program);
							$this->excel->getActiveSheet()->SetCellValue('H' . $row, $student_status->grade);
							$this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->remove_tag($student_status->note));
							$this->excel->getActiveSheet()->SetCellValue('J' . $row, lang($student_status->status));
							$this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($student_status->review_status));
							$row++;
						}
					}
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);

                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'student_statuses_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_quote_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function student_status_report()
	{
		$this->bpas->checkPermissions();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('student_status_report')));
        $meta = array('page_title' => lang('student_status_report'), 'bc' => $bc);
        $this->page_construct('schools/student_status_report', $meta, $this->data);
	}
	
	public function getStudentStatusReport($xls = null)
	{
		$this->bpas->checkPermissions('student_status_report', TRUE);
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;	
		$status = $this->input->get('status') ? $this->input->get('status') : NULL;	
		if ($xls) {
			// IF(".$this->db->dbprefix('sh_student_statuses').".status = 'reconfirm' OR ".$this->db->dbprefix('sh_student_statuses').".status = 'suspend',".$this->db->dbprefix('sh_student_statuses').".review_status, 'completed') as review_status,
			$this->db->select("
							DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
							companies.company as biller,
							sh_students.code as student_id,
							CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
							CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
							CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
							sh_students.gender,
							sh_programs.name as program,
							sh_grades.name as grade, 
							sh_classes.name as class_name,
							sh_student_statuses.status,
							sh_student_statuses.review_status,
							sh_student_statuses.id as id
						")
				->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
				->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
				->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
				->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
				->join("companies","companies.id = sh_student_statuses.biller_id","left")
				->group_by("sh_student_statuses.id")
				->from("sh_student_statuses");

			if ($academic_year) {
				$this->db->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->db->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->db->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->db->where('sh_student_statuses.grade_id', $grade);
			}
			if ($status) {
				$this->db->where('sh_student_statuses.status', $status);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('student_status_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('student_id'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('student_name'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('student_name_latin'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('program'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('class'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('status'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('review_status'));
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->student_id);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->student_name);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->student_name_latin);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, lang($data_row->gender));
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->academic_year);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->program);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->grade);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->class_name);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->status));
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, lang($data_row->review_status));
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
				
				$filename = 'student_status_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			admin_redirect($_SERVER["HTTP_REFERER"]);
		} else {  
			// IF(".$this->db->dbprefix('sh_student_statuses').".status = 'reconfirm' OR ".$this->db->dbprefix('sh_student_statuses').".status = 'suspend',".$this->db->dbprefix('sh_student_statuses').".review_status, 'completed') as review_status,
			$this->load->library('datatables');
			$this->datatables->select("
									
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
									companies.company as biller,
									sh_students.number as student_id,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
									sh_students.gender,
									CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
									sh_programs.name as program,
									sh_grades.name as grade, 
									sh_classes.name as class_name,
									sh_student_statuses.note,
									sh_student_statuses.status,
									sh_student_statuses.review_status,
									sh_student_statuses.id as id
								")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");

			if ($academic_year) {
				$this->datatables->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->datatables->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->datatables->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->datatables->where('sh_student_statuses.grade_id', $grade);
			}
			if ($status) {
				$this->datatables->where('sh_student_statuses.status', $status);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
			echo $this->datatables->generate();
		}
	}
	
	public function suspension_report()
	{
		$this->bpas->checkPermissions();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('suspension_report')));
        $meta = array('page_title' => lang('suspension_report'), 'bc' => $bc);
        $this->page_construct('schools/suspension_report', $meta, $this->data);
	}
	
	public function getSuspenstionReport($xls = null)
	{
		$this->bpas->checkPermissions('suspension_report', TRUE);
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;	
		if ($xls) {
			$this->db->select("
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".from_date, '%Y-%m-%d') as from_date,
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".to_date, '%Y-%m-%d') as to_date,
								companies.company as biller,
								sh_students.number as student_id,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
								sh_students.gender,
								CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
								sh_programs.name as program,
								sh_grades.name as grade, 
								sh_classes.name as class_name,
								sh_student_statuses.note,
								IF(".$this->db->dbprefix('sh_student_statuses').".status = 'reconfirm' OR ".$this->db->dbprefix('sh_student_statuses').".status = 'suspend',".$this->db->dbprefix('sh_student_statuses').".review_status, 'completed') as review_status,
								sh_student_statuses.id as id
							")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->db->where("sh_student_statuses.status","suspend");
		
			if ($academic_year) {
				$this->db->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->db->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->db->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->db->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('suspension_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('from_date'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('to_date'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('student_id'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('student_name'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('student_name_latin'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('program'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('class'));
				$this->excel->getActiveSheet()->SetCellValue('M1', lang('status'));
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrsd($data_row->from_date));
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->hrsd($data_row->to_date));
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->student_id);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->student_name);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->student_name_latin);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, lang($data_row->gender));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->academic_year);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->program);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->grade);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->class_name);
					$this->excel->getActiveSheet()->SetCellValue('M' . $row, lang($data_row->review_status));
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);

				
				$filename = 'suspension_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			admin_redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables->select("
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".from_date, '%Y-%m-%d') as from_date,
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".to_date, '%Y-%m-%d') as to_date,
									companies.company as biller,
									sh_students.number as student_id,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
									sh_students.gender,
									CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
									sh_programs.name as program,
									sh_grades.name as grade, 
									sh_classes.name as class_name,
									sh_student_statuses.note,
									IF(".$this->db->dbprefix('sh_student_statuses').".status = 'reconfirm' OR ".$this->db->dbprefix('sh_student_statuses').".status = 'suspend',".$this->db->dbprefix('sh_student_statuses').".review_status, 'completed') as review_status,
									sh_student_statuses.id as id
								")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->datatables->where("sh_student_statuses.status","suspend");
			if ($academic_year) {
				$this->datatables->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->datatables->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->datatables->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->datatables->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	
	public function dropping_out_report()
	{
		$this->bpas->checkPermissions();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('dropping_out_report')));
        $meta = array('page_title' => lang('dropping_out_report'), 'bc' => $bc);
        $this->page_construct('schools/dropping_out_report', $meta, $this->data);
	}
	
	public function getDroppingOutReport($xls = null)
	{
		$this->bpas->checkPermissions('dropping_out_report', TRUE);
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;	
		if ($xls) {
			$this->db->select("
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".status_date, '%Y-%m-%d') as status_date,
								companies.company as biller,
								sh_students.number as student_id,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
								sh_students.gender,
								CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
								sh_programs.name as program,
								sh_grades.name as grade, 
								sh_classes.name as class_name,
								sh_student_statuses.note,
								sh_student_statuses.id as id
							")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->db->where("sh_student_statuses.status","drop_out");
		
			if ($academic_year) {
				$this->db->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->db->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->db->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->db->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('dropping_out_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('dropping_date'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('student_id'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('student_name'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('student_name_latin'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('program'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('class'));
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrsd($data_row->status_date));
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->student_id);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->student_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->student_name_latin);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang($data_row->gender));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->academic_year);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->program);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->grade);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->class_name);
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);

				
				$filename = 'dropping_out_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			admin_redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables->select("
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".status_date, '%Y-%m-%d') as status_date,
									companies.company as biller,
									sh_students.number as student_id,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
									sh_students.gender,
									CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
									sh_programs.name as program,
									sh_grades.name as grade, 
									sh_classes.name as class_name,
									sh_student_statuses.note,
									sh_student_statuses.id as id
								")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->datatables->where("sh_student_statuses.status","drop_out");
			if ($academic_year) {
				$this->datatables->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->datatables->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->datatables->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->datatables->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	

	public function reconfirmation_report()
	{
		$this->bpas->checkPermissions();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('reconfirmation_report')));
        $meta = array('page_title' => lang('reconfirmation_report'), 'bc' => $bc);
        $this->page_construct('schools/reconfirmation_report', $meta, $this->data);
	}
	
	public function getReconfirmationReport($xls = null)
	{
		$this->bpas->checkPermissions('reconfirmation_report', TRUE);
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;	
		if ($xls) {
			$this->db->select("
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".status_date, '%Y-%m-%d') as status_date,
								companies.company as biller,
								sh_students.number as student_id,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
								sh_students.gender,
								CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
								sh_programs.name as program,
								sh_grades.name as grade, 
								sh_classes.name as class_name,
								sh_student_statuses.note,
								IF(".$this->db->dbprefix('sh_student_statuses').".status = 'reconfirm' OR ".$this->db->dbprefix('sh_student_statuses').".status = 'suspend',".$this->db->dbprefix('sh_student_statuses').".review_status, 'completed') as review_status,
								sh_student_statuses.id as id
							")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->db->where("sh_student_statuses.status","reconfirm");
			$this->db->where("sh_student_statuses.review_status !=","black_list");

			if ($academic_year) {
				$this->db->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->db->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->db->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->db->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('reconfirmation_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('reconfirm_date'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('student_id'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('student_name'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('student_name_latin'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('program'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('class'));
				$this->excel->getActiveSheet()->SetCellValue('L1', lang('status'));
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrsd($data_row->status_date));
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->student_id);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->student_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->student_name_latin);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang($data_row->gender));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->academic_year);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->program);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->grade);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->class_name);
					$this->excel->getActiveSheet()->SetCellValue('L' . $row, lang($data_row->review_status));
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
				
				$filename = 'reconfirmation_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			admin_redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables->select("
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".status_date, '%Y-%m-%d') as status_date,
									companies.company as biller,
									sh_students.number as student_id,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
									sh_students.gender,
									CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
									sh_programs.name as program,
									sh_grades.name as grade, 
									sh_classes.name as class_name,
									sh_student_statuses.note,
									IF(".$this->db->dbprefix('sh_student_statuses').".status = 'reconfirm' OR ".$this->db->dbprefix('sh_student_statuses').".status = 'suspend',".$this->db->dbprefix('sh_student_statuses').".review_status, 'completed') as review_status,
									sh_student_statuses.id as id
								")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->datatables->where("sh_student_statuses.status","reconfirm");
			$this->datatables->where("sh_student_statuses.review_status !=","black_list");
			if ($academic_year) {
				$this->datatables->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->datatables->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->datatables->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->datatables->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function black_list_report()
	{
		$this->bpas->checkPermissions();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('black_list_report')));
        $meta = array('page_title' => lang('black_list_report'), 'bc' => $bc);
        $this->page_construct('schools/black_list_report', $meta, $this->data);
	}
	
	public function getBlackListReport($xls = null)
	{
		$this->bpas->checkPermissions('black_list_report', TRUE);
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;	
		if ($xls) {
			$this->db->select("
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".status_date, '%Y-%m-%d') as status_date,
								companies.company as biller,
								sh_students.number as student_id,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
								sh_students.gender,
								CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
								sh_programs.name as program,
								sh_grades.name as grade, 
								sh_classes.name as class_name,
								sh_student_statuses.note,
								sh_student_statuses.id as id
							")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->db->where("(".$this->db->dbprefix('sh_student_statuses').". status = 'black_list' OR ".$this->db->dbprefix('sh_student_statuses').". review_status = 'black_list')");
		
			if ($academic_year) {
				$this->db->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->db->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->db->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->db->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('black_list_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('black_list_date'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('student_id'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('student_name'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('student_name_latin'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('program'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('class'));
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrsd($data_row->status_date));
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->student_id);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->student_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->student_name_latin);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang($data_row->gender));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->academic_year);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->program);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->grade);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->class_name);
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);

				
				$filename = 'black_list_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			admin_redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables->select("
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".status_date, '%Y-%m-%d') as status_date,
									companies.company as biller,
									sh_students.number as student_id,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
									sh_students.gender,
									CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
									sh_programs.name as program,
									sh_grades.name as grade, 
									sh_classes.name as class_name,
									sh_student_statuses.note,
									sh_student_statuses.id as id
								")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->datatables->where("(".$this->db->dbprefix('sh_student_statuses').". status = 'black_list' OR ".$this->db->dbprefix('sh_student_statuses').". review_status = 'black_list')");
			if ($academic_year) {
				$this->datatables->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->datatables->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->datatables->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->datatables->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	public function graduation_report()
	{
		$this->bpas->checkPermissions();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['grades'] = $this->schools_model->getGrades();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('graduation_report')));
        $meta = array('page_title' => lang('graduation_report'), 'bc' => $bc);
        $this->page_construct('schools/graduation_report', $meta, $this->data);
	}
	
	public function getGraduationReport($xls = null)
	{
		$this->bpas->checkPermissions('graduation_report', TRUE);
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : NULL;
		$biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $program = $this->input->get('program') ? $this->input->get('program') : NULL;
		$grade = $this->input->get('grade') ? $this->input->get('grade') : NULL;	
		if ($xls) {
			$this->db->select("
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
								DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".status_date, '%Y-%m-%d') as status_date,
								companies.company as biller,
								sh_students.number as student_id,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
								CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
								sh_students.gender,
								CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
								sh_programs.name as program,
								sh_grades.name as grade, 
								sh_classes.name as class_name,
								sh_student_statuses.note,
								sh_student_statuses.id as id
							")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->db->where("sh_student_statuses.status","graduate");
		
			if ($academic_year) {
				$this->db->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->db->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->db->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->db->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->db->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
			
			if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('graduation_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('graduation_date'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('student_id'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('student_name'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('student_name_latin'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('gender'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('program'));
				$this->excel->getActiveSheet()->SetCellValue('J1', lang('grade'));
				$this->excel->getActiveSheet()->SetCellValue('K1', lang('class'));
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrsd($data_row->status_date));
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->student_id);
					$this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->student_name);
					$this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->student_name_latin);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, lang($data_row->gender));
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->academic_year);
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->program);
					$this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->grade);
					$this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->class_name);
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);

				
				$filename = 'graduation_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			admin_redirect($_SERVER["HTTP_REFERER"]);
			
		} else{  
			$this->load->library('datatables');
			$this->datatables->select("
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".date, '%Y-%m-%d %T') as date,
									DATE_FORMAT(".$this->db->dbprefix('sh_student_statuses').".status_date, '%Y-%m-%d') as status_date,
									companies.company as biller,
									sh_students.number as student_id,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as student_name,
									CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as student_name_latin,
									sh_students.gender,
									CONCAT(".$this->db->dbprefix('sh_student_statuses').".academic_year,' - ',".$this->db->dbprefix('sh_student_statuses').".academic_year + 1) as academic_year,
									sh_programs.name as program,
									sh_grades.name as grade, 
									sh_classes.name as class_name,
									sh_student_statuses.note,
									sh_student_statuses.id as id
								")
						->join("sh_students","sh_students.id = sh_student_statuses.student_id","left")
						->join("sh_programs","sh_programs.id = sh_student_statuses.program_id","left")
						->join("sh_classes","sh_classes.id = sh_student_statuses.class_id","left")
						->join("sh_grades","sh_grades.id = sh_student_statuses.grade_id","left")
						->join("companies","companies.id = sh_student_statuses.biller_id","left")
						->group_by("sh_student_statuses.id")
						->from("sh_student_statuses");
			$this->datatables->where("sh_student_statuses.status","graduate");
			if ($academic_year) {
				$this->datatables->where('sh_student_statuses.academic_year', $academic_year);
			}
			if ($biller) {
				$this->datatables->where('sh_student_statuses.biller_id', $biller);
			}
			if ($program) {
				$this->datatables->where('sh_student_statuses.program_id', $program);
			}
			if ($grade) {
				$this->datatables->where('sh_student_statuses.grade_id', $grade);
			}
			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
				$this->datatables->where('sh_student_statuses.biller_id', $this->session->userdata('biller_id'));
			}
			echo $this->datatables->generate();
			
		}
	}
	
	
	public function get_grade_graduate(){
		$status = $this->input->get("status") ? $this->input->get("status") : false;
		$grades = $this->schools_model->getGraduateGrades($status);
		echo json_encode($grades);
	}
	
	public function get_student_status_graduate(){
		$biller = $this->input->get("biller") ? $this->input->get("biller") : false;
		$program = $this->input->get("program") ? $this->input->get("program") : false;
		$academic_year = $this->input->get("academic_year") ? $this->input->get("academic_year") : false;
		$status = $this->input->get("status") ? $this->input->get("status") : false;
		$grade = $this->input->get("grade") ? $this->input->get("grade") : false;
		$rows = $this->schools_model->getStudentStatusGraduate($biller,$academic_year,$program,$grade,$status);
        $pr = false;
		if ($rows) {
            foreach ($rows as $row) {
				$row->gender = lang($row->gender);
                $pr[$row->id] = array('id' => $row->id, 'item_id' => $row->id, 'label' => $row->number." - ".$row->lastname.' '.$row->firstname,'row' => $row);
            }
        }
		echo json_encode($pr);
	}
	
	
	
	public function black_lists()
	{	
		$this->bpas->checkPermissions();	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')),array('link' => 'schools', 'page' => lang('schools')), array('link' => '#', 'page' => lang('black_lists')));
		$meta = array('page_title' => lang('black_lists'), 'bc' => $bc);
		$this->page_construct('schools/black_lists', $meta, $this->data);
	}

	public function getBlackLists()
	{	
		$this->bpas->checkPermissions('black_lists');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_black_list") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_black_list/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_black_list') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_black_list/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_black_list').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_black_lists.id as id, 
					IF(".$this->db->dbprefix("sh_students").".id > 0, CONCAT(".$this->db->dbprefix("sh_students").".lastname,' ',".$this->db->dbprefix("sh_students").".firstname), ".$this->db->dbprefix("sh_black_lists").".student_name) as student_name,
					IF(".$this->db->dbprefix("sh_students").".id > 0, CONCAT(".$this->db->dbprefix("sh_students").".lastname_other,' ',".$this->db->dbprefix("sh_students").".firstname_other), ".$this->db->dbprefix("sh_black_lists").".student_name_latin) as student_name_latin,
					sh_black_lists.father,
					sh_black_lists.mother,
					sh_black_lists.guardian,
					sh_black_lists.description,
					sh_black_lists.status
					")
            ->from("sh_black_lists")
			->join("sh_students","sh_students.id = sh_black_lists.student_id","left")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_black_list()
	{
		$this->bpas->checkPermissions('black_lists',true);	
		$this->form_validation->set_rules('student_name', lang("student_name"), 'required');
		if ($this->form_validation->run() == true){
			$data = array(
				'student_name'  => $this->input->post("student_name"),
				'student_name_latin'  => $this->input->post("student_name_latin"),
				'father'  => $this->input->post("father"),
				'mother'  => $this->input->post("mother"),
				'guardian'  => $this->input->post("guardian"),
				'status'  => $this->input->post("status"),
				'description' => $this->bpas->clear_tags($this->input->post("description")),
			);
		} elseif ($this->input->post('add_black_list')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        } 	
		if ($this->form_validation->run() == true && $id = $this->schools_model->addBlackList($data)) {
            $this->session->set_flashdata('message', $this->lang->line("black_list_added"));
            admin_redirect("schools/black_lists");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_black_list', $this->data);	
		}	
	}
	
	public function edit_black_list($id = null)
	{		
		$this->bpas->checkPermissions('black_lists',true);
		$this->form_validation->set_rules('student_name', lang("student_name"), 'required');
		if ($this->form_validation->run() == true){
			$data = array(
				'student_name'  => $this->input->post("student_name"),
				'student_name_latin'  => $this->input->post("student_name_latin"),
				'father'  => $this->input->post("father"),
				'mother'  => $this->input->post("mother"),
				'guardian'  => $this->input->post("guardian"),
				'status'  => $this->input->post("status"),
				'description' => $this->bpas->clear_tags($this->input->post("description")),
			);
		} elseif ($this->input->post('edit_black_list')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
		if($this->form_validation->run() == true && $id = $this->schools_model->updateBlackList($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("black_list_updated"));
            admin_redirect("schools/black_lists");
        }else{
			$black_list_info = $this->schools_model->getBlackListByID($id);	
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $black_list_info;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_black_list', $this->data);
		}			
	}
	
	public function delete_black_list($id = null)
    {	
		$this->bpas->checkPermissions('black_lists');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteBlackList($id)){
        		$this->session->set_flashdata('message', lang("black_list_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function black_list_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('black_lists');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteBlackList($id);
                    }
                    $this->session->set_flashdata('message', lang("black_list_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('black_list');
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('student_name'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('student_name_latin'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('father'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('mother'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('guardian'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('description'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $black_list = $this->schools_model->getBlackListByID($id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $black_list->student_name);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $black_list->student_name_latin);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $black_list->father);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $black_list->mother);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $black_list->guardian);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->remove_tag($black_list->description));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'black_list_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	
	function grade_students($grade_id = NULL)
    {
		$this->bpas->checkPermissions("grades");
        if (!$grade_id) {
            $this->session->set_flashdata('error', lang('no_grade_selected'));
            admin_redirect('schools/grades');
        }
        $this->data['grade'] = $this->schools_model->getGradeByID($grade_id);
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => admin_url('schools/grades'), 'page' => lang('grades')),  array('link' => '#', 'page' => lang('grade_students')));
        $meta = array('page_title' => lang('grade_students'), 'bc' => $bc);
        $this->page_construct('schools/grade_students', $meta, $this->data);
    }
	function getGradeStudents($grade_id = NULL)
    {
        $this->load->library('datatables');
        $this->datatables
            ->select("sh_grade_students.id as id, 
						CONCAT(".$this->db->dbprefix('sh_grade_students').".academic_year,' - ',".$this->db->dbprefix('sh_grade_students').".academic_year + 1) as academic_year,
						sh_programs.name as programs,
						sh_grade_students.number_student", FALSE)
            ->from("sh_grade_students")
			->join("sh_programs","sh_programs.id = sh_grade_students.program_id","left")
			->where("sh_grade_students.grade_id",$grade_id)
            ->add_column("Actions", "<div class=\"text-center\"><a href='" . admin_url('schools/edit_grade_student/$1') . "' data-toggle='modal' data-backdrop='static' data-keyboard='false' data-target='#myModal' class='tip' title='" . lang("edit_grade_student") . "'><i class=\"fa fa-edit\"></i></a> <a href='#' class='tip po' title='<b>" . lang("delete_grade_student") . "</b>' data-content=\"<p>" . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete124' href='" . admin_url('schools/delete_grade_student/$1') . "'>" . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i></a></div>", "id");
        echo $this->datatables->generate();
    }
	
	function add_grade_student($grade_id = false)
    {
		$this->bpas->checkPermissions("grades-add", true);
		$this->form_validation->set_rules('program', lang("program"), 'required');
		$this->form_validation->set_rules('number_student', lang("number_student"), 'required');

        if ($this->form_validation->run() == true) {
            $data = array(
						'grade_id' => $grade_id,
						'program_id' => $this->input->post('program'),
						'academic_year' => $this->input->post('academic_year'),
						'number_student' => $this->input->post('number_student')
					);
        } elseif ($this->input->post('add_grade_student')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect("schools/grade_students/".$grade_id);
        }
        if ($this->form_validation->run() == true && $this->schools_model->addGradeStudent($data)) {
            $this->session->set_flashdata('message', lang("grade_student_added")." ".$data['name']);
			admin_redirect("schools/grade_students/".$grade_id);
        } else {
            $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
            $this->data['modal_js'] = $this->site->modal_js();
			$this->data['grade_id'] = $grade_id;
			$this->data['programs'] = $this->schools_model->getPrograms();
            $this->load->view($this->theme . 'schools/add_grade_student', $this->data);
        }
    }
	
	function edit_grade_student($id = NULL)
    {
		$this->bpas->checkPermissions("grades-edit", true);
		$this->form_validation->set_rules('program', lang("program"), 'required');
		$this->form_validation->set_rules('number_student', lang("number_student"), 'required');
		$grade_student = $this->schools_model->getGradeStudentByID($id);		
        if ($this->form_validation->run() == true) {
			$data = array(
						'program_id' => $this->input->post('program'),
						'academic_year' => $this->input->post('academic_year'),
						'number_student' => $this->input->post('number_student')
					);
        } elseif ($this->input->post('edit_grade_student')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect("schools/grade_students/".$grade_student->grade_id);
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateGradeStudent($id, $data)) {
            $this->session->set_flashdata('message', lang("grade_student_edited"));
            admin_redirect("schools/grade_students/".$grade_student->grade_id);
        } else {
            $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
            $this->data['modal_js'] = $this->site->modal_js();
            $this->data['grade_student'] = $grade_student;
			$this->data['programs'] = $this->schools_model->getPrograms();
            $this->load->view($this->theme . 'schools/edit_grade_student', $this->data);
        }
    }
	
	function delete_grade_student($id = NULL)
    {
        $this->bpas->checkPermissions("grades-delete", true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		$grade_student = $this->schools_model->getGradeStudentByID($id);	
        if ($this->schools_model->deleteGradeStudent($id)) {
            if ($this->input->is_ajax_request()) {
                echo lang("grade_student_deleted");die();
            }
            $this->session->set_flashdata('message', lang('grade_student_deleted'));
            admin_redirect("schools/grade_students/".$grade_student->grade_id);
        }
    }
	
	function grade_student_actions() {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
					$this->bpas->checkPermissions("grades-delete", true);
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteGradeStudent($id);
                    }
                    $this->session->set_flashdata('message', lang("grade_student_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('grade_student'));
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('program'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('number_student'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $grade_student = $this->schools_model->getGradeStudentByID($id);
						$program = $this->schools_model->getProgramByID($grade_student->program_id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $grade_student->academic_year." ".($grade_student->academic_year + 1));
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $program->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $grade_student->number_student);
                        $row++;
                    }
                    $filename = 'grade_student_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	function grade_testings($grade_id = NULL)
    {
		$this->bpas->checkPermissions("grades");
        if (!$grade_id) {
            $this->session->set_flashdata('error', lang('no_grade_selected'));
            admin_redirect('schools/grades');
        }
        $this->data['grade'] = $this->schools_model->getGradeByID($grade_id);
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => admin_url('schools/grades'), 'page' => lang('grades')),  array('link' => '#', 'page' => lang('grade_testings')));
        $meta = array('page_title' => lang('grade_testings'), 'bc' => $bc);
        $this->page_construct('schools/grade_testings', $meta, $this->data);
    }
	function getGradeTestings($grade_id = NULL)
    {
        $this->load->library('datatables');
        $this->datatables
            ->select("sh_grade_testings.id as id, 
						sh_skills.name as skill,
						sh_grade_testings.name", FALSE)
            ->from("sh_grade_testings")
			->join("sh_skills","sh_skills.id = sh_grade_testings.skill_id","left")
			->where("sh_grade_testings.grade_id",$grade_id)
            ->add_column("Actions", "<div class=\"text-center\"><a href='" . admin_url('schools/edit_grade_testing/$1') . "' data-toggle='modal' data-backdrop='static' data-keyboard='false' data-target='#myModal' class='tip' title='" . lang("edit_grade_testing") . "'><i class=\"fa fa-edit\"></i></a> <a href='#' class='tip po' title='<b>" . lang("delete_grade_testing") . "</b>' data-content=\"<p>" . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete124' href='" . admin_url('schools/delete_grade_testing/$1') . "'>" . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i></a></div>", "id");
        echo $this->datatables->generate();
    }
	
	function add_grade_testing($grade_id = false)
    {
		$this->bpas->checkPermissions("grades-add", true);
		$this->form_validation->set_rules('skill', lang("skill"), 'required');
		$this->form_validation->set_rules('name', lang("name"), 'required');

        if ($this->form_validation->run() == true) {
            $data = array(
						'grade_id' => $grade_id,
						'skill_id' => $this->input->post('skill'),
						'name' => $this->input->post('name')
					);
        } elseif ($this->input->post('add_grade_testing')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect("schools/grade_testings/".$grade_id);
        }
        if ($this->form_validation->run() == true && $this->schools_model->addGradeTesting($data)) {
            $this->session->set_flashdata('message', lang("grade_testing_added")." ".$data['name']);
			admin_redirect("schools/grade_testings/".$grade_id);
        } else {
            $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
            $this->data['modal_js'] = $this->site->modal_js();
			$this->data['grade_id'] = $grade_id;
			$this->data['skills'] = $this->schools_model->getSkills();
            $this->load->view($this->theme . 'schools/add_grade_testing', $this->data);
        }
    }
	
	function edit_grade_testing($id = NULL)
    {
		$this->bpas->checkPermissions("grades-edit", true);
		$this->form_validation->set_rules('skill', lang("skill"), 'required');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		$grade_testing = $this->schools_model->getGradeTestingByID($id);		
        if ($this->form_validation->run() == true) {
			$data = array(
						'skill_id' => $this->input->post('skill'),
						'name' => $this->input->post('name')
					);
        } elseif ($this->input->post('edit_grade_testing')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect("schools/grade_testings/".$grade_testing->grade_id);
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateGradeTesting($id, $data)) {
            $this->session->set_flashdata('message', lang("grade_testing_edited"));
            admin_redirect("schools/grade_testings/".$grade_testing->grade_id);
        } else {
            $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
            $this->data['modal_js'] = $this->site->modal_js();
            $this->data['grade_testing'] = $grade_testing;
			$this->data['skills'] = $this->schools_model->getSkills();
            $this->load->view($this->theme . 'schools/edit_grade_testing', $this->data);
        }
    }
	
	function delete_grade_testing($id = NULL)
    {
        $this->bpas->checkPermissions("grades-delete", true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		$grade_testing = $this->schools_model->getGradeTestingByID($id);	
        if ($this->schools_model->deleteGradeTesting($id)) {
            if ($this->input->is_ajax_request()) {
                echo lang("grade_testing_deleted");die();
            }
            $this->session->set_flashdata('message', lang('grade_testing_deleted'));
            admin_redirect("schools/grade_testings/".$grade_testing->grade_id);
        }
    }
	
	function grade_testing_actions() {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
					$this->bpas->checkPermissions("grades-delete", true);
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteGradeTesting($id);
                    }
                    $this->session->set_flashdata('message', lang("grade_testing_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('grade_testing'));
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('skill'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $grade_testing = $this->schools_model->getGradeTestingByID($id);
						$skill = $this->schools_model->getSkillByID($grade_testing->skill_id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $skill->name);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $grade_testing->name);
                        $row++;
                    }
                    $filename = 'grade_testing_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	
	public function testing_by_grade_report()
	{
		$this->bpas->checkPermissions('testing_report');
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['groups'] = $this->schools_model->getTestingGroups($this->input->post("academic_year") ? $this->input->post("academic_year") : false);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('testing_by_grade_report')));
        $meta = array('page_title' => lang('testing_by_grade_report'), 'bc' => $bc);
        $this->page_construct('schools/testing_by_grade_report', $meta, $this->data);
	}
	
	public function testing_by_student_report()
	{
		$this->bpas->checkPermissions('testing_report');
		$this->data['billers'] = $this->schools_model->getBillers();
		$this->data['groups'] = $this->schools_model->getTestingGroups($this->input->post("academic_year") ? $this->input->post("academic_year") : false);
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('testing_by_student_report')));
        $meta = array('page_title' => lang('testing_by_student_report'), 'bc' => $bc);
        $this->page_construct('schools/testing_by_student_report', $meta, $this->data);
	}
	
	public function testing_results()
	{	
		$this->bpas->checkPermissions();	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')),array('link' => 'schools', 'page' => lang('schools')), array('link' => '#', 'page' => lang('testing_results')));
		$meta = array('page_title' => lang('testing_results'), 'bc' => $bc);
		$this->page_construct('schools/testing_results', $meta, $this->data);
	}

	public function getTestingResults()
	{	
		$this->bpas->checkPermissions('testing_results');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_testing_result") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_testing_result/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_testing_result') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_testing_result/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_testing_result').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					sh_testing_results.id as id, 
					sh_testing_results.code,
					sh_testing_results.name,
					sh_testing_results.description,
					sh_testing_results.type")
            ->from("sh_testing_results")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_testing_result()
	{
		$this->bpas->checkPermissions('testing_results',true);	
		$this->form_validation->set_rules('type', lang("type"), 'required');
		$this->form_validation->set_rules('code', lang("code"), 'required');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true){
			$data = array(
				'type'  => $this->input->post("type"),
				'code'  => $this->input->post("code"),
				'name'  => $this->input->post("name"),
				'description' => $this->bpas->clear_tags($this->input->post("description")),
			);
		} elseif ($this->input->post("add_testing_result")) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	
		if ($this->form_validation->run() == true && $id = $this->schools_model->addTestingResult($data)) {
            $this->session->set_flashdata('message', $this->lang->line("testing_result_added"));
            admin_redirect("schools/testing_results");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_testing_result', $this->data);	
		}	
	}
	
	public function edit_testing_result($id = null)
	{		
		$this->bpas->checkPermissions('testing_results',true);
		$data = $this->schools_model->getTestingResultByID($id);
		if(isset($post['code']) && $post['code'] != $data->code){
			$this->form_validation->set_rules('code', lang("code"), 'required|is_unique[sh_testing_results.code]');
		}
		$this->form_validation->set_rules('type', lang("type"), 'required');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		
		if($this->form_validation->run() == true){						
			$data = array(
				'type'  => $this->input->post("type"),
				'code'  => $this->input->post("code"),
				'name'  => $this->input->post("name"),
				'description' => $this->bpas->clear_tags($this->input->post("description")),
			);
		} elseif ($this->input->post("edit_testing_result")) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
		if($this->form_validation->run() == true && $id = $this->schools_model->updateTestingResult($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("testing_result_updated"));
            admin_redirect("schools/testing_results");
        }else{
			$testing_result_info = $this->schools_model->getTestingResultByID($id);	
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $testing_result_info;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_testing_result', $this->data);
		}			
	}
	
	public function delete_testing_result($id = null)
    {	
		$this->bpas->checkPermissions('testing_results');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteTestingResult($id)){
        		$this->session->set_flashdata('message', lang("testing_result_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function testing_result_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('testing_results');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteTestingResult($id);
                    }
                    $this->session->set_flashdata('message', lang("testing_result_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('testing_result');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('type'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('type'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $testing_result = $this->schools_model->getTestingResultByID($id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $testing_result->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $testing_result->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->remove_tag($testing_result->description));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, lang($testing_result->type));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'testing_result_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function testing_student_summary_report(){
		$this->bpas->checkPermissions();
        $this->data['billers'] = $this->schools_model->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('testing_student_summary_report')));
        $meta = array('page_title' => lang('testing_student_summary_report'), 'bc' => $bc);
        $this->page_construct('schools/testing_student_summary_report', $meta, $this->data);
	}
	
	public function accepted_student_by_grade_report(){
		$this->bpas->checkPermissions();
        $this->data['billers'] = $this->schools_model->getBillers();
		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
 		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('accepted_student_by_grade_report')));
        $meta = array('page_title' => lang('accepted_student_by_grade_report'), 'bc' => $bc);
        $this->page_construct('schools/accepted_student_by_grade_report', $meta, $this->data);
	}
	public function colleges()
	{	
		$this->bpas->checkPermissions();	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')),array('link' => 'schools', 'page' => lang('schools')), array('link' => '#', 'page' => lang('colleges')));
		$meta = array('page_title' => lang('colleges'), 'bc' => $bc);
		$this->page_construct('schools/colleges', $meta, $this->data);
	}
	public function getColleges()
	{	
		$this->bpas->checkPermissions('skills');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_college") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_college/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_college') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_college/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_college').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
						sh_colleges.id as id, 
						sh_colleges.name,
						sh_colleges.description
					")
            ->from("sh_colleges")
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	public function add_college()
	{
		$this->bpas->checkPermissions('skills',true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if ($this->form_validation->run() == true){
			$data = array(
				'name'  => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	
		if ($this->form_validation->run() == true && $id = $this->schools_model->addCollege($data)) {
            $this->session->set_flashdata('message', $this->lang->line("college_added"));
            admin_redirect("schools/colleges");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/add_college', $this->data);	
		}	
	}
	public function edit_college($id = null)
	{		
		$this->bpas->checkPermissions('skills',true);
		$post = $this->input->post();		
		$this->form_validation->set_rules('name', lang("name"), 'required');
		if($this->form_validation->run() == true){						
			$data = array(
				'name'  => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		}elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
		if($this->form_validation->run() == true && $id = $this->schools_model->updateCollege($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("college_updated"));
            admin_redirect("schools/colleges");
        }else{
			$skill_info = $this->schools_model->getCollegeByID($id);	
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $skill_info;
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_college', $this->data);
		}			
	}
	public function delete_college($id = null)
    {	
		$this->bpas->checkPermissions('colleges');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteCollege($id)){
        		$this->session->set_flashdata('message', lang("college_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	function college_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('colleges');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteCollege($id);
                    }
                    $this->session->set_flashdata('message', lang("colleges_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('skill');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('name'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('description'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $skill = $this->schools_model->getCollegeByID($id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $skill->name);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->remove_tag($skill->description));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);

					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'Colleges_List_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
	
	public function skills()
	{	
		$this->bpas->checkPermissions();	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')),array('link' => 'schools', 'page' => lang('schools')), array('link' => '#', 'page' => lang('skills')));
		$meta = array('page_title' => lang('skills'), 'bc' => $bc);
		$this->page_construct('schools/skills', $meta, $this->data);
	}

	public function getSkills()
	{	
		$this->bpas->checkPermissions('skills');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_skill") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_skill/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_skill') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_skill/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_skill').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
						{$this->db->dbprefix('sh_skills')}.id as id, 
						{$this->db->dbprefix('sh_skills')}.code,
						{$this->db->dbprefix('sh_skills')}.name,
						{$this->db->dbprefix('sh_skills')}.description,
						{$this->db->dbprefix('sh_colleges')}.name as college
					")
            ->from("sh_skills")
			->join("sh_colleges", "sh_colleges.id=sh_skills.college_id", "left")
			->order_by('sh_skills.id')
			->order_by('sh_colleges.id')
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	
	public function add_skill()
	{
		$this->bpas->checkPermissions('skills', true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_skills.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		$this->form_validation->set_rules('college', lang("college"), 'required');
		if ($this->form_validation->run() == true){
			$data = array(
				'college_id'  => $post['college'],
				'code'        => $post['code'],
				'name'        => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	
		if ($this->form_validation->run() == true && $id = $this->schools_model->addSkill($data)) {
            $this->session->set_flashdata('message', $this->lang->line("skill_added"));
            admin_redirect("schools/skills");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['colleges'] = $this->schools_model->getColleges();
			$this->load->view($this->theme . 'schools/add_skill', $this->data);	
		}	
	}
	
	public function edit_skill($id = null)
	{		
		$this->bpas->checkPermissions('skills',true);
		$post = $this->input->post();
		$data = $this->schools_model->getSkillByID($id);
		if(isset($post['code']) && $post['code'] != $data->code){
			$this->form_validation->set_rules('code', lang("code"), 'required|is_unique[sh_skills.code]');
		}
		$this->form_validation->set_rules('name', lang("name"), 'required');
		$this->form_validation->set_rules('college', lang("college"), 'required');
		if($this->form_validation->run() == true){						
			$data = array(
				'college_id'  => $post['college'],
				'code'  	  => $post['code'],
				'name'  	  => $post['name'],
				'description' => $this->bpas->clear_tags($post['description']),
			);
		}elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
		if($this->form_validation->run() == true && $id = $this->schools_model->updateSkill($id, $data)) {
            $this->session->set_flashdata('message', $this->lang->line("skill_updated"));
            admin_redirect("schools/skills");
        }else{
			$this->data['error']    = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']       = $id;
			$this->data['row']      = $this->schools_model->getSkillByID($id);
			$this->data['colleges'] = $this->schools_model->getColleges();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_skill', $this->data);
		}			
	}
	
	public function delete_skill($id = null)
    {	
		$this->bpas->checkPermissions('skills');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteSkill($id)){
        		$this->session->set_flashdata('message', lang("skill_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }
	
	function skill_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('skills');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteSkill($id);
                    }
                    $this->session->set_flashdata('message', lang("skill_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('skill');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('college'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $skill   = $this->schools_model->getSkillByID($id);
                        $college = $this->schools_model->getCollegeByID($skill->college_id);
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $skill->code);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $skill->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->remove_tag($skill->description));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, ($college ? $college->name : ''));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);

					$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'Skill_List_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }
    public function getStudent($id = null)
    {
        // $this->bpas->checkPermissions('index');
        $row = $this->schools_model->getStudentByID($id);
        $this->bpas->send_json([['id' => $row->id, 'text' => ($row->company && $row->company != '-' ? $row->company : $row->name)]]);
    }
    /*public function suggestions($term = null, $limit = null, $a = null)
    {
        // $this->bpas->checkPermissions('index');
        if ($this->input->get('term')) {
            $term = $this->input->get('term', true);
        }
        if (strlen($term) < 1) {
            return false;
        }
        $limit  = $this->input->get('limit', true);
        $result = $this->companies_model->getCustomerSuggestions($term, $limit);
        if ($a) {
            $this->bpas->send_json($result);
        }
        $rows['results'] = $result;
        $this->bpas->send_json($rows);
    }	*/

    public function getSubjectsBySkill() 
    {
    	$skill_id = $this->input->get('skill_id') ? $this->input->get('skill_id') : null;
    	if ($subjects = $this->schools_model->getSubjectsBySkill($skill_id)) {	
    		$this->bpas->send_json($subjects);
    	}
    	$this->bpas->send_json(false);
    }

    public function getSectionsBy_program_skill_grade()
    {
    	$program_id = $this->input->get('program_id') ? $this->input->get('program_id') : null;
    	$skill_id   = $this->input->get('skill_id') ? $this->input->get('skill_id') : null;
    	$grade_id   = $this->input->get('grade_id') ? $this->input->get('grade_id') : null;
    	if ($program_id && $skill_id && $grade_id) {
    		if ($sections = $this->schools_model->getSections($program_id, $skill_id, $grade_id)) {
    			$this->bpas->send_json($sections);
	    	}	
	    	$this->bpas->send_json(false);
    	}
    	$this->bpas->send_json(false);
    }

	public function getSubjectBy_class_id_academic_year_section_id_day()
    {
    	$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : null;
    	$class_id      = $this->input->get('class_id') ? $this->input->get('class_id') : null;
    	$section_id    = $this->input->get('section_id') ? $this->input->get('section_id') : null;
		$timestamp     = $this->input->get('day') ? $this->bpas->fld($this->input->get('day')) : null;
    	if ($class_id  && $academic_year  && $section_id && $timestamp ) {
    		if ($subject = $this->schools_model->getSubjectByclass_id_academic_year_section_id_day($class_id, $academic_year, $section_id, $timestamp)) {
    			$this->bpas->send_json($subject);
	    	}	
	    	$this->bpas->send_json(false);
    	}
    	$this->bpas->send_json(false);
    }

	public function getClassesBy_academic_biller_program_skill_grade_timeshift()
	{
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : null;
		$biller_id     = $this->input->get('biller_id') ? $this->input->get('biller_id') : null;
		$program_id    = $this->input->get('program_id') ? $this->input->get('program_id') : null;
    	$skill_id      = $this->input->get('skill_id') ? $this->input->get('skill_id') : null;
    	$grade_id      = $this->input->get('grade_id') ? $this->input->get('grade_id') : null;
    	$timeshift_id  = $this->input->get('timeshift_id') ? $this->input->get('timeshift_id') : null;
    	if ($biller_id && $program_id && $skill_id && $grade_id) {
    		if ($classes = $this->schools_model->getClassesBy_academic_biller_program_skill_grade_timeshift($academic_year, $biller_id, $program_id, $skill_id, $grade_id, $timeshift_id)) {
    			$this->bpas->send_json($classes);
	    	}	
	    	$this->bpas->send_json(false);
    	}
    	$this->bpas->send_json(false);
	}
	public function fees_type()
	{	
		$this->bpas->checkPermissions();	
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')),array('link' => 'schools', 'page' => lang('schools')), array('link' => '#', 'page' => lang('fees_type')));
		$meta = array('page_title' => lang('fees_type'), 'bc' => $bc);
		$this->page_construct('schools/fees_type', $meta, $this->data);
	}
	public function getFeesType()
	{	
		$this->bpas->checkPermissions('fees_type');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_fees_type") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_feetype/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_fees_type') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li><a href="'.admin_url('schools/edit_feetype/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_fees_type').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
						{$this->db->dbprefix('sh_feestype')}.id as id, 
						{$this->db->dbprefix('sh_feestype')}.code,
						{$this->db->dbprefix('sh_feestype')}.name,
						{$this->db->dbprefix('custom_field')}.name as type,
						{$this->db->dbprefix('sh_feestype')}.description
						
					")
            ->from("sh_feestype")
			->join("custom_field", "custom_field.id=sh_feestype.fee_category_id", "left")
			->order_by('sh_feestype.id')
            ->add_column("Actions", $action_link, "id");
        echo $this->datatables->generate();
	}
	public function add_feetype()
	{
		$this->bpas->checkPermissions('fees_type', true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_skills.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		$this->form_validation->set_rules('fee_category', lang("fee_category"), 'required');
		if ($this->form_validation->run() == true){
			$data = array(
				'fee_category_id'	=> $post['fee_category'],
				'code'        		=> $post['code'],
				'name'        		=> $post['name'],
				'description' 		=> $this->bpas->clear_tags($post['description']),
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	
		if ($this->form_validation->run() == true && $id = $this->schools_model->addFeeType($data)) {
            $this->session->set_flashdata('message', $this->lang->line("feetype_added"));
            admin_redirect("schools/fees_type");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['colleges'] = $this->schools_model->getColleges();
			$this->load->view($this->theme . 'schools/add_feetype', $this->data);	
		}	
	}
	
	public function edit_feetype($id = null)
	{		
		$this->bpas->checkPermissions('fees_type',true);
		$post = $this->input->post();
		$data = $this->schools_model->getFeeTypeByID($id);
		if(isset($post['code']) && $post['code'] != $data->code){
			$this->form_validation->set_rules('code', lang("code"), 'required|is_unique[sh_feestype.code]');
		}

		$this->form_validation->set_rules('code', lang("code"), 'is_unique[sh_skills.code]');
		$this->form_validation->set_rules('name', lang("name"), 'required');
		$this->form_validation->set_rules('fee_category', lang("fee_category"), 'required');
		if($this->form_validation->run() == true){						
			$data = array(
				'fee_category_id'	=> $post['fee_category'],
				'code'  	  		=> $post['code'],
				'name'  	  		=> $post['name'],
				'description' 		=> $this->bpas->clear_tags($post['description']),
			);
		}elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
		if($this->form_validation->run() == true && $id = $this->schools_model->updateFeeType($id, $data)) {
            $this->session->set_flashdata('message', $this->lang->line("feetype_updated"));
            admin_redirect("schools/fees_type");
        }else{
			$this->data['error']    = validation_errors()?validation_errors():$this->session->flashdata('error');          
			$this->data['id']       = $id;
			$this->data['row']      = $data;
			$this->data['colleges'] = $this->schools_model->getColleges();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_feetype', $this->data);
		}			
	}
	public function fees_master()
	{
		$this->bpas->checkPermissions('fees_master');	
		$this->data['modal_js'] = $this->site->modal_js();
		$this->data['billers']  = $this->site->getBillers();
        $this->data['programs'] = $this->schools_model->getPrograms();	
		$this->data['grades']   = $this->schools_model->getGrades();	
		$this->data['skills']   = $this->schools_model->getSkills();
		$this->data['section']       = ($this->input->post('section') ? $this->input->post('section') : null);
		$this->data['academic_year'] = ($this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y'));
        $this->data['error']    = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools/fees_master'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('fees_master')));
        $meta = array('page_title' => lang('fees_master'), 'bc' => $bc);
        $this->page_construct('schools/fees_master', $meta, $this->data);
	}

	public function getFeesMaster()
	{
		$this->bpas->checkPermissions('fees_master');
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date('Y');
		$program       = $this->input->get('program') ? $this->input->get('program') : null;
		$skill         = $this->input->get('skill') ? $this->input->get('skill') : null;
		$grade         = $this->input->get('grade') ? $this->input->get('grade') : null;
		$section       = $this->input->get('section') ? $this->input->get('section') : null;

        $this->load->library('datatables');
        $this->datatables->select("
        		sh_grade_fees.id as id, 
        		{$this->db->dbprefix('companies')}.name as biller,
        		sh_grade_fees.academic_year as academic_year,
				sh_skills.name as skill,
				sh_grades.name as grade,
				sh_sections.name as section,
				sh_feestype.name as feestype,
				
				sh_grade_fees.price,
			", FALSE)
            ->from("sh_grade_fees")
            ->join('companies','companies.id = sh_grade_fees.biller_id','left')
			->join("products", "products.id = sh_grade_fees.product_id","left")
			->join('sh_feestype', 'sh_feestype.id=sh_grade_fees.feestype_id', 'left')
			->join('sh_skills', 'sh_skills.id=sh_grade_fees.skill_id', 'left')
			->join('sh_grades', 'sh_grades.id=sh_grade_fees.grade_id', 'left')
			->join('sh_sections', 'sh_sections.id=sh_grade_fees.section_id', 'left');

		if ($academic_year) {
			$this->datatables->where('sh_grade_fees.academic_year', $academic_year);
		}
		if ($program) {
			$this->datatables->where('sh_grade_fees.program_id', $program);
		}
		if ($skill) {
			$this->datatables->where('sh_grade_fees.skill_id', $skill);
		}
		if ($grade) {
			$this->datatables->where('sh_grade_fees.grade_id', $grade);
		}
		if ($section) {
			$this->datatables->where('sh_grade_fees.section_id', $section);
		}   
        $this->datatables->add_column(
        	"Actions", 
        	"<div class=\"text-center\">
            	<a href='" . admin_url('schools/edit_grade_fee/$1') . "' data-toggle='modal' data-backdrop='static' data-keyboard='false' data-target='#myModal' title='" . lang("edit_grade_fee") . "'>
            	<i class=\"fa fa-edit\"></i></a> 
            	<a href='#' class='po' title='" . lang("delete_grade_fee") . "' data-content=\"<p>" . lang('r_u_sure') . "</p>
            	<a class='btn btn-danger po-delete124' href='" . admin_url('schools/delete_grade_fee/$1') . "'>" . lang('i_m_sure') . "</a> 
            	<button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i></a></div>",
             "id");

        echo $this->datatables->generate();
	}

	function add_grade_fee()
    {
		$this->bpas->checkPermissions("grades-add", true);
		$this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		$this->form_validation->set_rules('program', lang("program"), 'required');
		$this->form_validation->set_rules('skill', lang("skill"), 'required');
		$this->form_validation->set_rules('grade', lang("grade"), 'required');
		$this->form_validation->set_rules('section', lang("section"), 'required');
		$this->form_validation->set_rules('product_id', lang("product"), 'required');
        if ($this->form_validation->run() == true) {
            $data = array(
            	'biller_id'     => $this->input->post('biller'),
				'fee_type'      => $this->input->post('fee_type') ? $this->input->post('fee_type') : null,
				'feestype_id'   => $this->input->post('fee_type') ? $this->input->post('fee_type') : null,
				'name'          => $this->input->post('name') ? $this->input->post('name') : null,
				'child_no'      => $this->input->post('child_no'),
				'product_id'    => $this->input->post('product_id'),
				'price'    		=> $this->input->post('price'),
				'student_type'  => $this->input->post('student_type'),
				'academic_year' => $this->input->post('academic_year'),
				'program_id'    => $this->input->post('program'),
				'skill_id'      => $this->input->post('skill'),
				'grade_id'      => $this->input->post('grade'),
				'section_id'    => $this->input->post('section'),
			);
        } elseif ($this->input->post('add_grade_fee')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect("schools/fees_master");
        }
        if ($this->form_validation->run() == true && $this->schools_model->addGradeFee($data)) {
            $this->session->set_flashdata('message', lang("grade_fee_added") . " " . $data['name']);
			admin_redirect("schools/fees_master");
        } else {
            $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
            $this->data['modal_js'] = $this->site->modal_js();
            $this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['programs'] = $this->schools_model->getPrograms();	
			$this->data['grades'] = $this->schools_model->getGrades();	
			$this->data['skills'] = $this->schools_model->getSkills();
			$this->data['feestype'] = $this->schools_model->getFeeType();
			$this->data['products'] = $this->site->getProducts();
            $this->load->view($this->theme . 'schools/add_grade_fee', $this->data);
        }
    }
	
	function edit_grade_fee($id = NULL)
    {
		$this->bpas->checkPermissions("grades-edit", true);
        $this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		$this->form_validation->set_rules('program', lang("program"), 'required');
		$this->form_validation->set_rules('skill', lang("skill"), 'required');
		$this->form_validation->set_rules('grade', lang("grade"), 'required');
		$this->form_validation->set_rules('section', lang("section"), 'required');
		$this->form_validation->set_rules('product_id', lang("product"), 'required');	
        if ($this->form_validation->run() == true) {

			$data = array(
				'biller_id'     => $this->input->post('biller'),
				'fee_type'      => $this->input->post('fee_type') ? $this->input->post('fee_type') : null,
				'feestype_id'   => $this->input->post('fee_type') ? $this->input->post('fee_type') : null,
				'name'          => $this->input->post('name') ? $this->input->post('name') : null,
				'child_no'      => $this->input->post('child_no'),
				'product_id'    => $this->input->post('product_id'),
				'price'    		=> $this->input->post('price'),
				'student_type'  => $this->input->post('student_type'),
				'academic_year' => $this->input->post('academic_year'),
				'program_id'    => $this->input->post('program'),
				'skill_id'      => $this->input->post('skill'),
				'grade_id'      => $this->input->post('grade'),
				'section_id'    => $this->input->post('section'),
			);	
        } elseif ($this->input->post('edit_grade_fee')) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect("schools/fees_master");
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateGradeFee($id, $data)) {
            $this->session->set_flashdata('message', lang("grade_fee_edited"));
            admin_redirect("schools/fees_master");
        } else {
            $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
            $this->data['modal_js'] = $this->site->modal_js();
            $this->data['billers'] = $this->site->getAllCompanies('biller');   
            $this->data['grade_fee'] = $this->schools_model->getGradeFeeByID($id);
			$this->data['products']  = $this->site->getProducts();
			$this->data['programs']  = $this->schools_model->getPrograms();	
			$this->data['grades']    = $this->schools_model->getGrades();	
			$this->data['skills']    = $this->schools_model->getSkills();
			$this->data['feestype'] = $this->schools_model->getFeeType();
            $this->load->view($this->theme . 'schools/edit_grade_fee', $this->data);
        }
    }
	
	function delete_grade_fee($id = NULL)
    {
        $this->bpas->checkPermissions("grades-delete", true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
		$grade_fee = $this->schools_model->getGradeFeeByID($id);	
        if ($this->schools_model->deleteGradeFee($id)) {
            if ($this->input->is_ajax_request()) {
                echo lang("grade_fee_deleted"); die();
            }
            $this->session->set_flashdata('message', lang('grade_fee_deleted'));
            admin_redirect("schools/fees_master");
        }
    }

	function fees_master_actions() 
	{
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
					$this->bpas->checkPermissions("grades-delete", true);
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteGradeFee($id);
                    }
                    $this->session->set_flashdata('message', lang("grade_fee_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('grade_fee'));
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('skill'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('grade'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('section'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('fee_type'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('product'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('price'));
					$row = 2;
                    foreach ($_POST['val'] as $id) {
                        $grade_fee = $this->schools_model->getFeesMasterByID($id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, ($grade_fee->academic_year . ' - ' . ($grade_fee->academic_year + 1)));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $grade_fee->skill);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $grade_fee->grade);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $grade_fee->section);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $grade_fee->fee_type);
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $grade_fee->product);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($grade_fee->fee_price));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);

                    $filename = 'fees_master_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
					create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }

	public function scholarships()
	{	
		$this->bpas->checkPermissions('scholarships');	
		$this->data['modal_js'] = $this->site->modal_js();
		$this->data['academic_year'] = $this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y');
		$bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('scholarships')));
		$meta = array('page_title' => lang('scholarships'), 'bc' => $bc);
		$this->page_construct('schools/scholarships', $meta, $this->data);
	}

	public function getScholarships()
	{	
		$this->bpas->checkPermissions('scholarships');
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date('Y');
		$scholarship   = $this->input->get('scholarship') ? $this->input->get('scholarship') : null;
        
		$assign_scholarship_link = anchor('admin/schools/assign_scholarship/$1', '<i class="fa fa-money"></i> ' . lang('assign_scholarship'), ' class="assign_scholarship"');
		$edit_link               = anchor('admin/schools/edit_scholarship/$1', '<i class="fa fa fa-edit"></i>'.lang('edit_scholarship'), 'data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal" class="edit_scholarship"');
		$delete_link             = "<a href='#' class='po' title='<b>" . $this->lang->line('delete_scholarship') . "</b>' data-content=\"<p>"
        	. lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('schools/delete_scholarship/$1') . "'>"
        	. lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
        	. lang('delete_scholarship') . '</a>';
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
								<li>'.$assign_scholarship_link.'</li>
								<li>'.$edit_link.'</li>
								<li>'.$delete_link.'</li>';

		$this->load->library('datatables');	
        $this->datatables->select("
				{$this->db->dbprefix('sh_scholarships')}.id as id, 
				CONCAT(" . $this->db->dbprefix('sh_scholarships') . ".academic_year, ' - ', (" . $this->db->dbprefix('sh_scholarships') . ".academic_year + 1)) as academic_year,
				{$this->db->dbprefix('sh_scholarships')}.name,
				{$this->db->dbprefix('sh_scholarships')}.description,
				{$this->db->dbprefix('price_groups')}.name as price_group
			")
            ->from("{$this->db->dbprefix('sh_scholarships')}")
			->join("{$this->db->dbprefix('price_groups')}", "{$this->db->dbprefix('sh_scholarships')}.price_group_id={$this->db->dbprefix('price_groups')}.id", "left")
            ->add_column("Actions", $action_link, "id");
		
		if ($academic_year) {
			$this->datatables->where("{$this->db->dbprefix('sh_scholarships')}.academic_year", $academic_year);
		}
		if ($scholarship) {
			$this->datatables->like("{$this->db->dbprefix('sh_scholarships')}.name", $scholarship, 'both');
		}
        echo $this->datatables->generate();
	}

	public function add_scholarship()
	{
		$this->bpas->checkPermissions('scholarships', true);	
		$post = $this->input->post();
		$this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		$this->form_validation->set_rules('scholarship', lang("scholarship"), 'required');
		$this->form_validation->set_rules('price_group', lang("price_group"), 'required');
		if ($this->form_validation->run() == true) {	
			$data = array(
				'academic_year'  => $post['academic_year'],
				'name'           => $post['scholarship'],
				'description'    => $this->bpas->clear_tags($post['description']),
				'price_group_id' => $post['price_group'],
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	
		if ($this->form_validation->run() == true && $id = $this->schools_model->addScholarship($data)) {
            $this->session->set_flashdata('message', $this->lang->line("schoarship_added"));
            admin_redirect("schools/scholarships");
        }else{
			$this->data['error']        = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js']     = $this->site->modal_js();
			$this->data['price_groups'] = $this->site->getAllPriceGroups('price_group');
			$this->load->view($this->theme . 'schools/add_scholarship', $this->data);	
		}	
	}

	public function edit_scholarship($id = null)
	{		
		$this->bpas->checkPermissions('scholarships',true);
		$post = $this->input->post();		
		$this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		$this->form_validation->set_rules('scholarship', lang("scholarship"), 'required');
		$this->form_validation->set_rules('price_group', lang("price_group"), 'required');
		if ($this->form_validation->run() == true) {						
			$data = array(
				'academic_year'  => $post['academic_year'],
				'name'           => $post['scholarship'],
				'description'    => $this->bpas->clear_tags($post['description']),
				'price_group_id' => $post['price_group'],
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }
		if ($this->form_validation->run() == true && $id = $this->schools_model->updateScholarship($id, $data)) {
            $this->session->set_flashdata('message', $this->lang->line("scholarship_updated"));
            admin_redirect("schools/scholarships");
        } else {
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']           = $id;
			$this->data['price_groups'] = $this->site->getAllPriceGroups('price_group');
			$this->data['scholarship']  = $this->schools_model->getScholarshipByID($id);
			$this->data['modal_js']     = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_scholarship', $this->data);
		}			
	}

	public function delete_scholarship($id = null)
    {	
		$this->bpas->checkPermissions('scholarships');
        if (isset($id) || $id != null){        	
        	if($this->schools_model->deleteScholarshipByID($id)){
        		$this->session->set_flashdata('message', lang("scholarship_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }

	function scholarship_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('scholarships');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteScholarshipByID($id);
                    }
                    $this->session->set_flashdata('message', lang("scholarship_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                } else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('scholarships');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('academic_year'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('scholarship'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('price_group'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $scholarship = $this->schools_model->getScholarshipByID($id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, ($scholarship->academic_year . ' - ' . ($scholarship->academic_year +1)));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $scholarship->name);
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->remove_tag($scholarship->description));
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $scholarship->price_group);
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'scholarship_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }

    public function add_attendance_student()
    {
		$this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
        $this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
        $this->form_validation->set_rules('timetable', $this->lang->line("subject"), 'required');
        if ($this->form_validation->run() == true) {
			if ($this->Owner || $this->Admin || $this->bpas->GP['hr-id_cards_date'] ) {
                $date = $this->bpas->fld(trim($this->input->post('date')));
            } else {
                $date = date('Y-m-d H:i:s');
            }
			$biller_id 		= $this->input->post('biller') ? $this->input->post('biller') : null;
			$academic_year 	= $this->input->post('academic_year') ? $this->input->post('academic_year') : null;
			$program_id 	= $this->input->post('program') ? $this->input->post('program') : null;
			$skill_id 		= $this->input->post('skill') ? $this->input->post('skill') : null;
			$grade_id 		= $this->input->post('grade') ? $this->input->post('grade') : null;
			$section_id 	= $this->input->post('section') ? $this->input->post('section') : null;
			$timeshift 		= $this->input->post('timeshift') ? $this->input->post('timeshift') : null;
			$class_id 		= $this->input->post('class_id') ? $this->input->post('class_id') : null;
			$day 			= $this->input->post('day') ? $this->bpas->fld($this->input->post('day')) : null;
			$note 			= $this->input->post('note') ? $this->input->post('note') : null;
			$table_time_id 	= $this->input->post('timetable') ? $this->input->post('timetable') : null;
			$status         = "completed";
			if($class_id){
				$class_name = $this->schools_model->getClassByID($class_id);
			}
			if($section_id){
				$section_name = $this->schools_model->getSectionByID($section_id);
			}
			$month 		= date('m', strtotime($day));
			$year 		= date('Y', strtotime($day));
			$day_num 	= $day;
			$student_id = $this->input->post('study_info_id');
			foreach ($student_id as $key => $value) {
				$attendance_id 	= $value;
				$student_id 	= $_POST['student_id'][$key];
				$att 			= $this->input->post('att' . $value);
				$note 			= $this->input->post('note' . $value);
				$present    = 0;
				$absent     = 0;
				$permission = 0;
				if($att == 1){
					$present = 1;
				} elseif ($att == 2) {
					$absent = 1;
				} elseif ($att == 3) {
					$permission = 1;
				}
				$items[] = array(
					"student_id" => $student_id,
					"present" 	 => $present,
					"absent" 	 => $absent,
					"permission" => $permission,
					"note"		 => $note,
				);
			}
			$data = array(	
				'date' 			=> $date,
                'biller_id' 	=> $biller_id,
				'academic_year' => $academic_year,
				'program_id' 	=> $program_id,
				'grade_id' 		=> $grade_id,
				'class_id' 		=> $class_id,
				'class_name' 	=> $class_name->name,
				'section_id' 	=> $section_id,
				'section_name'  => $section_name->name,
				'year' 			=> $year,
				'month' 		=> $month,
				'day' 			=> $day_num,
				'final_file' 	=> '',
				'note' 			=> $note,
				'created_by' 	=> $this->session->userdata('user_id'),
				'updated_by' 	=> $this->session->userdata('user_id'),
				'status' 		=> $status,
				'table_time_id' => $table_time_id,
            );
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $attachment = $this->upload->file_name;
                $data['attachment'] = $attachment;
            }
            // $this->bpas->print_arrays($data, $items);
        }
		if ($this->form_validation->run() == true && $this->schools_model->addAttendanceStudent($data,$items)) {	
            $this->session->set_flashdata('message', $this->lang->line("attendances_added"));          
			admin_redirect('schools/attendances');
        } else {
            $this->data['error'] 		= (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['tax_rates'] 	= $this->site->getAllTaxRates();
			$this->data['billers'] 		= $this->site->getBillers();
			$this->data['programs'] 	= $this->schools_model->getPrograms();	
			$this->data['grades'] 		= $this->schools_model->getGrades();
			$this->data['skills'] 		= $this->schools_model->getSkills();
			// $this->data['subject'] 	= $this->schools_model->getSubjects();
			$bc = array(array('link' 	=> admin_url(), 'page' => lang('home')),array('link' => admin_url('hr'), 'page' => lang('hr')), array('link' => admin_url('hr/id_cards'), 'page' => lang('id_cards')), array('link' => '#', 'page' => lang('add_attendance_student')));
            $meta = array('page_title' 	=> lang('add_attendance_student'), 'bc' => $bc);
            $this->page_construct('schools/add_attendance_student', $meta, $this->data);
        }
	}

	public function add_teacher_attendance()
	{
		$this->bpas->checkPermissions();
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
        $this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('attendance_day', $this->lang->line("attendance_day"), 'required');
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('teacher', $this->lang->line("teacher"), '');
        if ($this->form_validation->run() == true) {
			if ($this->Owner || $this->Admin || $this->GP['change_date'] ) {
                $date = $this->bpas->fld(trim($this->input->post('date')));
            } else {
                $date = date('Y-m-d H:i:s');
            }
			$attendance_day = $this->bpas->fsd(trim($this->input->post('attendance_day')));
			$biller_id      = $this->input->post('biller') ? $this->input->post('biller') : null;
			$biller         = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
			$teacher        = $this->input->post('teacher') ? $this->input->post('teacher') : null;
			$academic_year  = $this->input->post('academic_year') ? $this->input->post('academic_year') : null;
			$note           = $this->input->post('note') ? $this->input->post('note') : null;
			$status         = "completed";
			$items          = false;
			$user_type_ary  = $this->input->post('tid');
			foreach ($user_type_ary as $key => $value) {
				$tid 		= $value;
				$teacher_id = $_POST['teacher_id'][$key];
				$attendance = $this->input->post('att' . $value);
				$std_note   = $this->input->post('note' . $value);
				$present    = 0;
				$absent     = 0;
				if ($attendance == 1) {
					$present = 1;
				} else {
					$absent  = 1;
				}
				$items[]    = array(
					"teacher_id" 	=> $teacher_id,
					"table_time_id" => $tid,
					"present" 		=> $present,
					"absent" 		=> $absent,
					"note" 		    => $std_note,
				);
			}
			if (!$items) {
				$this->form_validation->set_rules('teacher', lang("order_items"), 'required');
			} else {
				krsort($items);
			}
			$data = array(
				'academic_year' => $academic_year,
				'date' 			=> $date,
                'day' 			=> $attendance_day,
                'biller_id' 	=> $biller_id,
                'biller_name' 	=> ($biller ? $biller->name : ''),
                'teacher_id' 	=> $teacher,
				'note' 			=> $note,
				'status' 		=> $status,
				'created_by' 	=> $this->session->userdata('user_id'),
            );
        }
		if ($this->form_validation->run() == true && $this->schools_model->addAttendanceTeacher($data,$items)) {	
            $this->session->set_flashdata('message', $this->lang->line("teacher_attendances_added"));          
			admin_redirect('schools/teacher_attendances');
        } else {
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['tax_rates'] = $this->site->getAllTaxRates();
			$this->data['billers'] = $this->site->getBillers();
			$this->data['programs'] = $this->schools_model->getPrograms();	
			$this->data['grades'] = $this->schools_model->getGrades();
			$this->data['skills'] = $this->schools_model->getSkills();
			$bc = array(array('link' => admin_url(), 'page' => lang('home')),array('link' => admin_url('hr'), 'page' => lang('hr')), array('link' => admin_url('hr/id_cards'), 'page' => lang('id_cards')), array('link' => '#', 'page' => lang('add_teacher_attendance')));
            $meta = array('page_title' => lang('add_teacher_attendance'), 'bc' => $bc);
            $this->page_construct('schools/add_teacher_attendance', $meta, $this->data);
        }
	}

	public function get_teachers()
	{
		$biller_id = $this->input->get('biller_id');
		$position_id = $this->input->get('position_id');
		$department_id = $this->input->get('department_id');
		$group_id = $this->input->get('group_id');
		$status = "active";
		$employees = $this->schools_model->getTeachers($biller_id,0,0,0,0);
		echo json_encode($employees);
	}

	public function get_class_attendance_teacher()
	{
		$biller_id      = $this->input->get('biller_id');
		$position_id    = $this->input->get('position_id');
		$department_id  = $this->input->get('department_id');
		$group_id       = $this->input->get('group_id');
		$att_date       = $this->bpas->fsd($this->input->get('att_date'));
		$employee_id   = $this->input->get('employee_id');
		$academic_year = $this->input->get('academic_year');
		$status        = "active";
		$employees = $this->schools_model->get_class_attendance_teacher($biller_id, $att_date, $employee_id, $academic_year);
		echo json_encode($employees);
	}

	public function getClassStudentAttendances()
	{
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : null;
		$biller_id     = $this->input->get('biller_id') 	? $this->input->get('biller_id') : null;
		$program_id    = $this->input->get('program_id') 	? $this->input->get('program_id') : null;
    	$skill_id      = $this->input->get('skill_id') 		? $this->input->get('skill_id') : null;
    	$grade_id      = $this->input->get('grade_id') 		? $this->input->get('grade_id') : null;
		$section_id    = $this->input->get('section_id') 	? $this->input->get('section_id') : null;
		$class_id      = $this->input->get('class_id') 		? $this->input->get('class_id') : null;
		$timeshift     = $this->input->get('timeshift') 	? $this->input->get('timeshift') : null;
    	if ($academic_year && $biller_id && $program_id && $skill_id && $grade_id && $section_id && $class_id) {
    		if ($studentAttendance = $this->schools_model->getClassStudentAttendances($academic_year, $biller_id, $program_id, $skill_id, $grade_id, $timeshift, $section_id, $class_id)) {
    			$this->bpas->send_json($studentAttendance);
	    	}	
	    	$this->bpas->send_json(false);
    	}
		$this->bpas->send_json(false);
	}

	public function assign_scholarship($id = null)
	{
		$this->bpas->checkPermissions();
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('scholarship', $this->lang->line("scholarship"), 'required');
		if ($this->form_validation->run() == true) {
			$scholarship_id = $this->input->post('scholarship');
			$i = isset($_POST['study_info_id']) ? sizeof($_POST['study_info_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
            	$data[] = $_POST['study_info_id'][$r];
            }
		} 
		if ($this->form_validation->run() == true && $this->schools_model->assignStudentsScholarship($scholarship_id, $data)) {
			$this->session->set_userdata('remove_stsls', 1);
            $this->session->set_flashdata('message', $this->lang->line("assign_student_scholarship_added"));
			admin_redirect('schools/students_scholarship');
		} else {
			$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
	        if(isset($action)) {
	        	$this->data['action'] = $action;
	        }
	        if ($id) {
	        	$scholarship = $this->schools_model->getScholarshipByID($id);
	        }
			$academic_year = ((isset($scholarship) && !empty($scholarship)) ? $scholarship->academic_year : date('Y'));
			$this->data['scholarship_id'] = $id;
			$this->data['academic_years'] = $this->schools_model->getAcademicYears();
			$this->data['academic_year']  = $academic_year;
			$this->data['billers']  = $this->site->getBillers();
			$this->data['programs'] = $this->schools_model->getPrograms();
			$this->data['grades']   = $this->schools_model->getGrades();
			$this->data['skills']   = $this->schools_model->getSkills();
			$this->data['scholarships'] = ((isset($scholarship) && !empty($scholarship)) ? $scholarship : $this->schools_model->getScholarships($academic_year));
			
	        $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('schools'), 'page' => lang('school')), array('link' => site_url('schools/assign_scholarship'), 'page' => lang('assign_scholarship')), array('link' => '#', 'page' => lang('assign_scholarship')));
			$meta = array('page_title' => lang('assign_scholarship'), 'bc' => $bc);
	        $this->page_construct('schools/assign_scholarship', $meta, $this->data);
		}
	}

	public function edit_assign_scholarship($id = null)
	{
		$this->bpas->checkPermissions();
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('biller', $this->lang->line("biller"), 'required');
		$this->form_validation->set_rules('scholarship', $this->lang->line("scholarship"), 'required');
		if ($this->form_validation->run() == true) {
			$scholarship_id = $this->input->post('scholarship');
			$i = isset($_POST['study_info_id']) ? sizeof($_POST['study_info_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
            	$data[] = $_POST['study_info_id'][$r];
            }
		} 
		if ($this->form_validation->run() == true && $this->schools_model->assignStudentsScholarship($scholarship_id, $data)) {
			$this->session->set_userdata('remove_stsls', 1);
            $this->session->set_flashdata('message', $this->lang->line("assign_student_scholarship_added"));
			admin_redirect('schools/students_scholarship');
		} else {
			$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
	        if(isset($action)) {
	        	$this->data['action'] = $action;
	        }
	        if ($id) {
	        	$study_info     = $this->schools_model->getStudyInfoByID($id);
	        	$biller_id      = $study_info->biller_id;
	        	$academic_year  = $study_info->academic_year;
	        	$scholarship    = $this->schools_model->getScholarshipByID($study_info->scholarship_id);
	        	$rows = $this->schools_model->getStudentNames_for_Scholarship(null, $biller_id, $academic_year, null, $id);
		        if ($rows) {
		            foreach ($rows as $row) {
						$row->gender = lang($row->gender);
		                $pr[] = array(
							'id' => $row->id, 'item_id' => $row->id, 
							'label' => $row->code . " - " . $row->lastname . ' ' . $row->firstname . ' (' . $row->class . ' - ' . $row->grade . ' - ' . $row->section . ') ', 
							'row' => $row);
		            }
		        }
	        }
			$academic_year = ((isset($scholarship) && !empty($scholarship)) ? $scholarship->academic_year : date('Y'));
			$this->data['study_info_id'] 	   = $id;
			$this->data['study_info']		   = (isset($study_info) ? $study_info : null);
			$this->data['scholarship_id']      = isset($study_info->scholarship_id) ? $study_info->scholarship_id : null;
			$this->data['student_scholarship'] = (isset($pr) && !empty($pr)) ? json_encode($pr) : null;
			$this->data['academic_years']      = $this->schools_model->getAcademicYears();
			$this->data['academic_year']       = $academic_year;
			$this->data['billers']             = $this->site->getBillers();
			$this->data['programs']            = $this->schools_model->getPrograms();
			$this->data['grades']              = $this->schools_model->getGrades();
			$this->data['skills']              = $this->schools_model->getSkills();
			$this->data['scholarships']        = $this->schools_model->getScholarships($academic_year);
			
	        $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('schools'), 'page' => lang('school')), array('link' => site_url('schools/edit_assign_scholarship'), 'page' => lang('edit_assign_scholarship')), array('link' => '#', 'page' => lang('edit_assign_scholarship')));
			$meta = array('page_title' => lang('edit_assign_scholarship'), 'bc' => $bc);
	        $this->page_construct('schools/edit_assign_scholarship', $meta, $this->data);
		}
	}

	public function students_scholarship($biller_id = null, $academic_year = null)
	{
		$this->bpas->checkPermissions();
		if($biller_id=="null"){
			$biller_id = null;
		}
		if($academic_year=="null"){
			$academic_year = null;
		}
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if(isset($action)) {
        	$this->data['action'] = $action;
        }
		$this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year']  = ($academic_year ? $academic_year : date('Y'));
		$this->data['billers'] = $this->site->getBillers();
		$this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;

		$this->data['programs'] = $this->schools_model->getPrograms();
		$this->data['grades'] = $this->schools_model->getGrades();
		$this->data['skills'] = $this->schools_model->getSkills();
		$this->data['scholarships'] = $this->schools_model->getScholarships($this->data['academic_year']);

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('students')));
        $meta = array('page_title' => lang('students_scholarship'), 'bc' => $bc);
        $this->page_construct('schools/students_scholarship', $meta, $this->data);
	}

	public function getStudentsScholarship($biller_id = null, $academic_year = null)
    {
		if($biller_id == "null"){
			$biller_id = null;
		}
		if($academic_year == "null"){
			$academic_year = null;
		}
		$biller        = $this->input->get('biller') ? $this->input->get('biller') : null;
		$academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date('Y');
		$student_id    = $this->input->get('student_id') ? $this->input->get('student_id') : null;
		$student_name  = $this->input->get('student_name') ? $this->input->get('student_name') : null;
		$gender        = $this->input->get('gender') ? $this->input->get('gender') : null;
		$program       = $this->input->get('program') ? $this->input->get('program') : null;
		$skill         = $this->input->get('skill') ? $this->input->get('skill') : null;
		$grade         = $this->input->get('grade') ? $this->input->get('grade') : null;
		$class         = $this->input->get('class') ? $this->input->get('class') : null;
		$timeshift     = $this->input->get('timeshift') ? $this->input->get('timeshift') : null;
		$batch         = $this->input->get('batch') ? $this->input->get('batch') : null;
		$generation    = $this->input->get('generation') ? $this->input->get('generation') : null;
		$scholarship   = $this->input->get('scholarship') ? $this->input->get('scholarship') : null;
		$start_date    = $this->input->get('start_date') ? $this->input->get('start_date') : null;
		$end_date      = $this->input->get('end_date') ? $this->input->get('end_date') : null;

		if ($start_date) {
	        $start_date = $this->bpas->fld($start_date . ' 00:00:00');
	        $end_date   = $this->bpas->fld($end_date . ' 23:59:00');
	    }

		$this->bpas->checkPermissions('index');
        $this->load->library('datatables');
		$detail_link = anchor('admin/schools/view_student/0/$1', '<i class="fa fa-file-text-o"></i> ' . lang('student_details'));
		$delete_link = "<a href='#' class='po delete_student' title='" . lang("delete_assign_scholarship") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_assign_scholarship/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_assign_scholarship') . "</a>";

		$action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
							<ul class="dropdown-menu pull-right" role="menu">
								<li>'.$detail_link.'</li>
								<li><a class="edit_assign_scholarship" href="'.admin_url('schools/edit_assign_scholarship/$1').'" ><i class="fa fa fa-edit"></i>'.lang('edit_assign_scholarship').'</a></li>
					            <li>'.$delete_link.'</li>
							</ul>
						</div>';
						
        $this->datatables->select("
				sh_study_infos.id as id,
				CONCAT(".$this->db->dbprefix('sh_study_infos').".academic_year,' - ',".$this->db->dbprefix('sh_study_infos').".academic_year + 1) as academic_year,
				sh_students.code,
				CONCAT(".$this->db->dbprefix('sh_students').".lastname,' ',".$this->db->dbprefix('sh_students').".firstname) as full_name,
				CONCAT(".$this->db->dbprefix('sh_students').".lastname_other,' ',".$this->db->dbprefix('sh_students').".firstname_other) as full_name_kh,
				sh_students.gender,
				sh_study_infos.program,
				CONCAT({$this->db->dbprefix('sh_skills')}.code, ' - ', {$this->db->dbprefix('sh_skills')}.name) as skill,
				sh_study_infos.grade,
				sh_study_infos.class,
				custom_field.name as timeshift,
				sh_scholarships.name AS scholarship,
				sh_study_infos.batch,
				sh_study_infos.id as info_id
			")

		->from("sh_students")
		->join("sh_study_infos","sh_study_infos.student_id = sh_students.id","inner")
		->join("sh_skills", "sh_skills.id=sh_study_infos.skill_id", "left")
		->join("custom_field", "custom_field.id=sh_study_infos.timeshift_id", "left")
		->join("companies","companies.id=sh_study_infos.biller_id", "left")
		->join("sh_scholarships", "sh_scholarships.id=sh_study_infos.scholarship_id", "left")
		// ->where('sh_students.is_admission', 0)
		->where('sh_study_infos.scholarship_id !=', null)
		->group_by("sh_study_infos.id")
		->add_column("Actions", $action_link, "info_id");

		$this->datatables->unset_column('info_id');
		if ($academic_year) {
			$this->datatables->where('sh_study_infos.academic_year', $academic_year);
        }
		if ($biller_id) {
			$this->datatables->where('sh_study_infos.biller_id', $biller_id);
        } 
		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_study_infos.biller_id', $this->session->userdata('biller_id'));
		}
		if ($biller) {
			$this->datatables->where('sh_study_infos.biller_id', $biller);
		}
		if ($academic_year)
			$this->datatables->where('sh_study_infos.academic_year', $academic_year);
		if ($student_id) {
			$this->datatables->where('sh_students.code', $student_id);
		}
		if ($student_name) {
			$this->db->like("{$this->db->dbprefix('sh_students')}.firstname", $student_name, 'both');
			$this->db->or_like("{$this->db->dbprefix('sh_students')}.lastname", $student_name, 'both');
			$this->db->or_like("CONCAT({$this->db->dbprefix('sh_students')}.firstname, ' ', {$this->db->dbprefix('sh_students')}.lastname)", $student_name, 'both');

			$this->db->or_like("{$this->db->dbprefix('sh_students')}.firstname_other", $student_name, 'both');
			$this->db->or_like("{$this->db->dbprefix('sh_students')}.lastname_other", $student_name, 'both');
			$this->db->or_like("CONCAT({$this->db->dbprefix('sh_students')}.firstname_other, ' ', {$this->db->dbprefix('sh_students')}.lastname_other)", $student_name, 'both');
		}
		if ($gender) {
			$this->datatables->where('sh_students.gender', $gender);
		}
		if ($program) {
			$this->datatables->where('sh_study_infos.program_id', $program);
		}
		if ($skill) {
			$this->datatables->where('sh_study_infos.skill_id', $skill);
		}
		if ($grade) {
			$this->datatables->where('sh_study_infos.grade_id', $grade);
		}
		if ($class) {
			$this->datatables->where('sh_study_infos.class', $class);
		}
		if ($timeshift) {
			$this->datatables->where('sh_study_infos.timeshift_id', $timeshift);
		}
		if ($batch) {
			$this->datatables->where('sh_study_infos.batch', $batch);
		}
		if ($generation) {
			$this->datatables->where('sh_study_infos.generation', $generation);
		}
		if ($scholarship) {
			$this->datatables->where('sh_study_infos.scholarship_id', $scholarship);
		}
		if ($start_date) {
			$this->datatables->where($this->db->dbprefix('sh_study_infos') . '.created_at BETWEEN "' . $start_date . '" and "' . $end_date . '"');
		}

        echo $this->datatables->generate();
    }

    public function student_scholarship_actions()
	{
        if (!$this->Owner && !$this->Admin && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
				if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('delete');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteAssignStudentScholarchip($id);
                    }
                    $this->session->set_flashdata('message', lang("assign_students_scholarship_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                } else if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('student');
					$this->excel->getActiveSheet()->SetCellValue('A1', lang('acedemic_year'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('code'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('first_name'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('last_name'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('gender'));
					$this->excel->getActiveSheet()->SetCellValue('F1', lang('phone'));
					$this->excel->getActiveSheet()->SetCellValue('G1', lang('email'));
					$this->excel->getActiveSheet()->SetCellValue('H1', lang('program'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('skill'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('grade'));
					$this->excel->getActiveSheet()->SetCellValue('K1', lang('class'));
					$this->excel->getActiveSheet()->SetCellValue('L1', lang('section'));
					$this->excel->getActiveSheet()->SetCellValue('M1', lang('batch'));
					$this->excel->getActiveSheet()->SetCellValue('N1', lang('timeshift'));
					$this->excel->getActiveSheet()->SetCellValue('O1', lang('scholarship'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $study_info  = $this->schools_model->getStudentStudyInfoByID($id);
                        $student     = $this->schools_model->getStudentByID($study_info->student_id);
                        $scholarship = $this->schools_model->getScholarshipByID($study_info->scholarship_id);
                        $scholarship = ((!empty($study_info->scholarship_id) && $study_info->scholarship_id != '') ? $this->schools_model->getScholarshipByID($study_info->scholarship_id) : null);
		
						$this->excel->getActiveSheet()->SetCellValue('A' . $row, $study_info->academic_year);
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $student->code);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $student->lastname);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $student->firstname);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($student->gender));
						$this->excel->getActiveSheet()->SetCellValue('F' . $row, $student->phone);
						$this->excel->getActiveSheet()->SetCellValue('G' . $row, $student->email);
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, $study_info->program);
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, $study_info->skill);
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, $study_info->grade);
						$this->excel->getActiveSheet()->SetCellValue('K' . $row, $study_info->class);
						$this->excel->getActiveSheet()->SetCellValue('L' . $row, $study_info->section);
						$this->excel->getActiveSheet()->SetCellValue('M' . $row, $study_info->batch);
						$this->excel->getActiveSheet()->SetCellValue('N' . $row, $study_info->timeshift);
						$this->excel->getActiveSheet()->SetCellValue('O' . $row, (!empty($scholarship) ? $scholarship->name : ''));
						$row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'student_scholarship_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }

	public function student_scholarship_suggestions()
	{
		$term          = $this->input->get('term', true);
		$biller_id     = $this->input->get('biller_id', true);
		$academic_year = $this->input->get('academic_year', true);
        if (strlen($term) < 1) {
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . admin_url('welcome') . "'; }, 10);</script>");
        }
        $analyzed = $this->bpas->analyze_term($term);
        $sr   = $analyzed['term'];
        $rows = $this->schools_model->getStudentNames_for_Scholarship($sr, $biller_id, $academic_year);
        if ($rows) {
            foreach ($rows as $row) {
				$row->gender = lang($row->gender);
                $pr[] = array(
					'id' => $row->id, 'item_id' => $row->id, 
					'label' => $row->code . " - " . $row->lastname . ' ' . $row->firstname . ' (' . $row->class . ' - ' . $row->grade . ' - ' . $row->section . ') ', 
					'row' => $row);
            }
			$this->bpas->send_json($pr);
        } else {
            $this->bpas->send_json(array(array('id' => 0, 'label' => lang('no_match_found'), 'value' => $term)));
        }
	}

	public function delete_assign_scholarship($id) 
	{
		if ($id) {
			if($this->schools_model->deleteAssignStudentScholarchip($id)){
        		$this->session->set_flashdata('message', lang("delete_assign_scholarship_deleted"));
        	} 
		}
		admin_redirect('schools/students_scholarship');
	}

	public function getStudyInfoByCustomer($data) 
	{
		$customer_id   = isset($data['customer_id']) ? $data['customer_id'] : null;
		$biller_id     = isset($data['biller_id']) ?   $data['biller_id'] : null;
		$academic_year = isset($data['academic_year']) ? $data['academic_year'] : null;
		$program_id    = isset($data['program_id']) ? $data['program_id'] : null;
		$skill_id      = isset($data['skill_id']) ? $data['skill_id'] : null;
		$grade_id      = isset($data['grade_id']) ? $data['grade_id'] : null;
		$section_id    = isset($data['section_id']) ? $data['section_id'] : null;
		$class_id      = isset($data['class_id']) ? $data['class_id'] : null;
		$timeshift_id  = isset($data['timeshift_id']) ? $data['timeshift_id'] : null;
		if (!empty($customer_id) && !empty($biller_id) && !empty($academic_year) && !empty($program_id) && !empty($skill_id) && !empty($grade_id) && !empty($section_id && !empty($class_id))) {
			$customer   = $this->site->getCompanyByID($customer_id);
			$student_id = $customer->student_id;
			if (!empty($student_id) && $student_id != ''){
				$arr = array(
					'student_id'    => $student_id,
					'biller_id'     => $biller_id,
					'academic_year' => $academic_year,
					'program_id' 	=> $program_id,
					'skill_id' 		=> $skill_id,
					'grade_id' 		=> $grade_id,
					'section_id' 	=> $section_id,
					'class_id' 		=> $class_id
				);
				if ($timeshift_id) {
					$arr['timeshift_id'] = $timeshift_id;
				}
				if ($study_info = $this->schools_model->getStudyInfoByArray($arr)) {
					return $study_info;
				}
				return false;
			}
			return false;
		}
		return false;
	}

	public function sale_actions()
    {
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            redirect($_SERVER['HTTP_REFERER']);
        }
        $this->form_validation->set_rules('form_action', lang('form_action'), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('delete');
                    $settings = $this->site->getSettings();
                    if($settings->hide != 0){
                        foreach ($_POST['val'] as $id) {
                            $this->schools_model->deleteSale($id);
                        }
                        $this->session->set_flashdata('message', lang('sales_deleted'));
                        redirect($_SERVER['HTTP_REFERER']);
                    } else {
                        foreach ($_POST['val'] as $id) {
                            $this->sales_model->removeSale($id);
                        }
                        $this->session->set_flashdata('message', lang('sales_removed'));
                        redirect($_SERVER['HTTP_REFERER']);
                    }
                } elseif ($this->input->post('form_action') == 'combine') {
                    $html = $this->combine_pdf($_POST['val']);
                } elseif ($this->input->post('form_action') == 'export_excel') {
                        $this->load->library('excel');
                        $this->excel->setActiveSheetIndex(0);
                        $this->excel->getActiveSheet()->setTitle(lang('sales'));
                        $this->excel->getActiveSheet()->SetCellValue('A1', lang('no'));
                        $this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
                        $this->excel->getActiveSheet()->SetCellValue('C1', lang('project'));
                        $this->excel->getActiveSheet()->SetCellValue('D1', lang('saleman'));
                        $this->excel->getActiveSheet()->SetCellValue('E1', lang('order_ref'));
                        $this->excel->getActiveSheet()->SetCellValue('F1', lang('reference_no'));
                        $this->excel->getActiveSheet()->SetCellValue('G1', lang('biller'));
                        $this->excel->getActiveSheet()->SetCellValue('H1', lang('customer'));
                        $this->excel->getActiveSheet()->SetCellValue('I1', lang('total'));
                        $this->excel->getActiveSheet()->SetCellValue('J1', lang('discount'));
                        $this->excel->getActiveSheet()->SetCellValue('K1', lang('grand_total'));
                        $this->excel->getActiveSheet()->SetCellValue('L1', lang('paid'));
                        $this->excel->getActiveSheet()->SetCellValue('M1', lang('payment_status'));
                        $row = 2;
                        $i=1;
                        foreach ($_POST['val'] as $id) {
                            $sale = $this->sales_model->getInvoiceByID($id);
                            $saleman = $this->auth_model->getUserByID($sale->saleman_by);
                            $project = $this->projects_model->getProjectByID($sale->project_id);
                            $sale_order = $this->sales_order_model->getSaleOrderRefByID($sale->so_id);

                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, $i);
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($sale->date));
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $project ? $project->project_name : '');
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $saleman != false ? $saleman->first_name . ' ' . $saleman->last_name : '');
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sale_order != false ? $sale_order->reference_no : '');
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sale->reference_no);
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sale->biller);
                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $sale->customer);
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $sale->total);
                            $this->excel->getActiveSheet()->SetCellValue('J' . $row, $sale->total_discount);
                            $this->excel->getActiveSheet()->SetCellValue('K' . $row, $sale->grand_total);
                            $this->excel->getActiveSheet()->SetCellValue('L' . $row, lang($sale->paid));
                            $this->excel->getActiveSheet()->SetCellValue('M' . $row, lang($sale->payment_status));
                            $row++;
                            $i++;
                        }
                        $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                        $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                        $filename = 'sales_' . date('Y_m_d_H_i_s');
                        $this->load->helper('excel');
                        create_excel($this->excel, $filename);

                } else {
                    $this->session->set_flashdata('error', lang('no_sale_selected'));
                    redirect($_SERVER['HTTP_REFERER']);
                }
            } else {
                $this->session->set_flashdata('error', validation_errors());
                redirect($_SERVER['HTTP_REFERER']);
            }
        }
    }

    public function getStudentByClass()
    {
		if($this->input->get('class_id')){
			$class_id = $this->input->get('class_id', true);
		}else{
			$class_id = false;
		}

		$section_id = $this->input->get('section_id') ? $this->input->get('section_id', true):0;
	
		if($this->input->get('academic_year')){
			$academic_year = $this->input->get('academic_year', true);
		}else{
			$academic_year = false;
		}
		$subjects = false;
		if($this->input->get("section_id")){
			$section = $this->schools_model->getSectionByID($this->input->get("section_id"));
			if($section){
				$subject_ids = json_decode($section->subject_id);
				$subjects = $this->schools_model->getSubjectByIDs($subject_ids);
			}
		}
        $rows = $this->schools_model->getStudentByClass($class_id,$section_id,$academic_year);
        $review_employees = false;
        if ($rows) {
   			// foreach ($rows as $row) {	
   				// $row['subjects'] = 123;
   				// $review_employees[] = $row;
			// }
			// echo json_encode($rows);
			echo json_encode(array('subjects'  => $subjects,'rows'=> $rows));
        }
    }

    ////////////////////// Examinations 01/11/2022 //////////////////////

    public function exams($biller_id = null, $academic_year = null)
    {
    	$this->bpas->checkPermissions('examinations');
    	if($biller_id == "null"){
			$biller_id = null;
		}
		if($academic_year == "null"){
			$academic_year = null;
		}
        $this->data['error']          = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year']  = ($academic_year ? $academic_year : ($this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y')));
		$this->data['billers']        = $this->site->getBillers();
		$this->data['biller']         = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
		$this->data['programs']       = $this->schools_model->getPrograms();

        $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('examinations')));
        $meta = array('page_title' => lang('examinations'), 'bc' => $bc);
        $this->page_construct('schools/exams', $meta, $this->data);	
    }

    public function getExams($biller_id = null, $academic_year = null)
    {
    	$this->bpas->checkPermissions('examinations', TRUE);
    	if($biller_id == "null"){
			$biller_id = null;
		}
		if($academic_year == "null"){
			$academic_year = null;
		}
		$biller        = $this->input->get('biller') ? $this->input->get('biller') : null;
        $academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date('Y');
        $reference_no  = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $title         = $this->input->get('title') ? $this->input->get('title') : null;
        $program       = $this->input->get('program') ? $this->input->get('program') : null;
        $semester      = $this->input->get('semester') ? $this->input->get('semester') : null;
        $note          = $this->input->get('note') ? $this->input->get('note') : null;
        $type          = $this->input->get('type') ? $this->input->get('type') : null;
        $start_date    = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date      = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date . ' 00:00:00');
            $end_date   = $this->bpas->fld($end_date . ' 23:59:00');
        }
        $detail_link         = '<a href="'.admin_url("schools/view_exam/$1") . '" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa-file-text-o"></i>'.lang('view_examination').'</a>';
        $set_exam_schedule   = '<a href="'.admin_url("schools/set_exam_schedule/$1") . '" class="tip"><i class="fa fa-edit"></i>'.lang('set_examination_schedule').'</a>';
        $view_exam_schedule  = '<a href="'.admin_url("schools/view_exam_schedule/$1") . '" class="tip"><i class="fa fa-file-text-o"></i>'.lang('view_examination_schedule').'</a>';
        $exam_students       = '<a href="'.admin_url("schools/exam_students/$1") . '" class="tip"><i class="fa fa-file-text-o"></i>'.lang('examination_students').'</a>';
        $edit_link	         = '<a href="'.admin_url("schools/edit_exam/$1") . '" class="tip"><i class="fa fa-edit"></i>'.lang('edit_examination').'</a>';
		$delete_link         = "<a href='#' class='po' title='" . lang("delete_examination") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_exam/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_examination') . "</a>";
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">            
					        	<li>' . $set_exam_schedule . '</li>               
					        	<li>' . $view_exam_schedule . '</li>               
					        	<li>' . $exam_students . '</li>               
								<li>' . $edit_link   . '</li>
					            <li>' . $delete_link . '</li>
					        </ul>
					    </div>';
		$this->load->library('datatables');
        $this->datatables
            ->select("
            	{$this->db->dbprefix('sh_exams')}.id as id, 
            	CONCAT({$this->db->dbprefix('sh_exams')}.academic_year, ' - ', {$this->db->dbprefix('sh_exams')}.academic_year + 1) as academic_year,
            	DATE_FORMAT({$this->db->dbprefix('sh_exams')}.date, '%Y-%m-%d %T') as date, 
            	{$this->db->dbprefix('sh_exams')}.reference_no, 
            	{$this->db->dbprefix('sh_exams')}.title,
            	{$this->db->dbprefix('sh_programs')}.name AS program,
            	IF ({$this->db->dbprefix('sh_exams')}.semester = 1, 'Semester I', 'Semester II') AS semester,
            	CONCAT(
            		'From ', DATE_FORMAT({$this->db->dbprefix('sh_exams')}.start_date, '%d/%m/%Y'), ' To ', 
            		DATE_FORMAT({$this->db->dbprefix('sh_exams')}.end_date, '%d/%m/%Y')
            	) AS duration,
            	UPPER({$this->db->dbprefix('sh_exams')}.type) AS type,
            	{$this->db->dbprefix('sh_exams')}.note,
            	{$this->db->dbprefix('sh_exams')}.file")
            ->from("sh_exams")
            ->join("sh_programs", "sh_programs.id = sh_exams.program_id", "left");

		if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
			$this->datatables->where('sh_exams.biller_id =', $this->session->userdata('biller_id'));
		}
		if ($academic_year) {
			$this->datatables->where('sh_exams.academic_year', $academic_year);
        }
		if ($biller_id) {
			$this->datatables->where('sh_exams.biller_id', $biller_id);
        } 
		if ($biller) {
            $this->datatables->where('sh_exams.biller_id', $biller);
        }
        if ($reference_no) {
            $this->datatables->like('sh_exams.reference_no', $reference_no, 'both');
        }
        if ($title) {
            $this->datatables->like('sh_exams.title', $title, 'both');
        }
        if ($program) {
            $this->datatables->where('sh_exams.program_id', $program);
        }
		if ($semester) {
            $this->datatables->where('sh_exams.semester', $semester);
        }
        if ($note) {
            $this->datatables->like('sh_exams.note', $note, 'both');
        }
        if ($type) {
            $this->datatables->where('sh_exams.type', $type);
        }
        if ($start_date) {
            $this->datatables->where($this->db->dbprefix('sh_exams') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
        }
        $this->datatables->add_column('Actions', $action_link, "id");
        echo $this->datatables->generate();
    }

    public function add_exam()
    {
        $this->bpas->checkPermissions('examinations-add');
        $this->form_validation->set_rules('date', lang("date"), 'required');
        $this->form_validation->set_rules('biller', lang("biller"), 'required');
        $this->form_validation->set_rules('reference_no', lang("reference_no"), 'required');
		$this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		$this->form_validation->set_rules('program', lang("program"), 'required');
		$this->form_validation->set_rules('semester', lang("semester"), 'required');
		$this->form_validation->set_rules('title', lang("title"), 'required');
		$this->form_validation->set_rules('type', lang("type"), 'required');
        if ($this->form_validation->run() == true) {
            $data = array(
                'date' 			=> $this->bpas->fld(trim($this->input->post('date'))),
				'biller_id' 	=> $this->input->post('biller'),
				'reference_no' 	=> $this->input->post('reference_no'),
				'academic_year' => $this->input->post('academic_year'),
				'program_id' 	=> $this->input->post('program'),
				'semester' 		=> $this->input->post('semester'),
                'title' 		=> $this->input->post('title'),
                'start_date' 	=> ($this->input->post('start_date') ? $this->bpas->fld(trim($this->input->post('start_date'))) : null),
                'end_date' 		=> ($this->input->post('end_date') ? $this->bpas->fld(trim($this->input->post('end_date'))) : null),
                'type' 			=> $this->input->post('type'),
                'note' 			=> strip_tags(trim($this->input->post('note'))),
				'created_by'    => $this->session->userdata('user_id')
            );
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['file'] = $photo;
            }
            // $this->bpas->print_arrays($data);
        }
        if ($this->form_validation->run() == true && $this->schools_model->addExam($data)) {
			$this->session->set_flashdata('message', lang("examination_added"));
			admin_redirect('schools/exams');
        } else {
            $this->data['error']    	= (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['reference_no'] = $this->site->getReference('sh_exm');
			$this->data['programs']     = $this->schools_model->getPrograms();	
			$this->data['billers']      = $this->site->getBillers();
            $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('add_examination')));
            $meta = array('page_title' => lang('add_examination'), 'bc' => $bc);
            $this->page_construct('schools/add_exam', $meta, $this->data);
        }
    }

    public function edit_exam($id)
    {
    	$this->bpas->checkPermissions('examinations-edit');
        $this->form_validation->set_rules('date', lang("date"), 'required');
        $this->form_validation->set_rules('biller', lang("biller"), 'required');
        $this->form_validation->set_rules('reference_no', lang("reference_no"), 'required');
		$this->form_validation->set_rules('academic_year', lang("academic_year"), 'required');
		$this->form_validation->set_rules('program', lang("program"), 'required');
		$this->form_validation->set_rules('semester', lang("semester"), 'required');
		$this->form_validation->set_rules('title', lang("title"), 'required');
		$this->form_validation->set_rules('type', lang("type"), 'required');
        if ($this->form_validation->run() == true) {
            $data = array(
                'date' 			=> $this->bpas->fld(trim($this->input->post('date'))),
				'biller_id' 	=> $this->input->post('biller'),
				'reference_no' 	=> $this->input->post('reference_no'),
				'academic_year' => $this->input->post('academic_year'),
				'program_id' 	=> $this->input->post('program'),
				'semester' 		=> $this->input->post('semester'),
                'title' 		=> $this->input->post('title'),
                'start_date' 	=> ($this->input->post('start_date') ? $this->bpas->fld(trim($this->input->post('start_date'))) : null),
                'end_date' 		=> ($this->input->post('end_date') ? $this->bpas->fld(trim($this->input->post('end_date'))) : null),
                'type' 			=> $this->input->post('type'),
                'note' 			=> strip_tags(trim($this->input->post('note'))),
				'updated_by'	=> $this->session->userdata('user_id')
            );
			if ($_FILES['document']['size'] > 0) {
                $this->load->library('upload');
                $config['upload_path'] = $this->digital_upload_path;
                $config['allowed_types'] = $this->digital_file_types;
                $config['max_size'] = $this->allowed_file_size;
                $config['overwrite'] = false;
                $config['encrypt_name'] = true;
                $this->upload->initialize($config);
                if (!$this->upload->do_upload('document')) {
                    $error = $this->upload->display_errors();
                    $this->session->set_flashdata('error', $error);
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                }
                $photo = $this->upload->file_name;
                $data['file'] = $photo;
            }
            // $this->bpas->print_arrays($data);
        }
        if ($this->form_validation->run() == true && $this->schools_model->updateExam($id, $data)) {
			$this->session->set_flashdata('message', lang("examination_updated"));
			admin_redirect('schools/exams');
        } else {
            $this->data['error']    	= (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['reference_no'] = $this->site->getReference('sh_exm');
			$this->data['programs']     = $this->schools_model->getPrograms();	
			$this->data['billers']      = $this->site->getBillers();
			$this->data['id']           = $id;
			$this->data['exam']         = $this->schools_model->getExamByID($id);
            $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('edit_examination')));
            $meta = array('page_title' => lang('edit_examination'), 'bc' => $bc);
            $this->page_construct('schools/edit_exam', $meta, $this->data);
        }
    }

    public function delete_exam($id)
    {
    	$this->bpas->checkPermissions('examinations-delete');
        if (!empty($id) || $id != ''){        	
        	if($this->schools_model->deleteExam($id)){
        		$this->session->set_flashdata('message', lang("examanition_deleted"));
            	admin_redirect($_SERVER['HTTP_REFERER']);
        	}
        }
    }

    public function exam_actions()
	{
        if (!$this->Owner && !$this->GP['bulk_actions']) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
				if ($this->input->post('form_action') == 'delete') {
                    $this->bpas->checkPermissions('examinations-delete');
                    foreach ($_POST['val'] as $id) {
                        $this->schools_model->deleteExam($id);
                    }
                    $this->session->set_flashdata('message', lang("examanition_deleted"));
                    admin_redirect($_SERVER["HTTP_REFERER"]);
                } elseif ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle('examanition');
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('academic_year'));
					$this->excel->getActiveSheet()->SetCellValue('B1', lang('biller'));
					$this->excel->getActiveSheet()->SetCellValue('C1', lang('date'));
					$this->excel->getActiveSheet()->SetCellValue('D1', lang('reference_no'));
					$this->excel->getActiveSheet()->SetCellValue('E1', lang('title'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('program'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('semester'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('duration'));
					$this->excel->getActiveSheet()->SetCellValue('I1', lang('type'));
					$this->excel->getActiveSheet()->SetCellValue('J1', lang('note'));
                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $examanition = $this->schools_model->getExamByID($id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, ($examanition->academic_year . '-' . ($examanition->academic_year +1)));
						$this->excel->getActiveSheet()->SetCellValue('B' . $row, $examanition->biller);                        
						$this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->hrld($examanition->date));                        
						$this->excel->getActiveSheet()->SetCellValue('D' . $row, $examanition->reference_no);
						$this->excel->getActiveSheet()->SetCellValue('E' . $row, $examanition->title);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $examanition->program);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, ($examanition->semester == 1 ? 'Semester I' : 'Semester II'));
						$this->excel->getActiveSheet()->SetCellValue('H' . $row, ('From ' . $this->bpas->hrsd($examanition->start_date) . ' To ' . $this->bpas->hrsd($examanition->end_date)));
						$this->excel->getActiveSheet()->SetCellValue('I' . $row, strtoupper($examanition->type));
						$this->excel->getActiveSheet()->SetCellValue('J' . $row, strip_tags($examanition->note));
						$row++;
                    }
					$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
					$this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'examanition_list_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_record_selected"));
                admin_redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER["HTTP_REFERER"]);
        }
    }

    public function set_exam_schedule($id)
    {
    	$this->bpas->checkPermissions('examinations-add');
        $this->form_validation->set_rules('exam_id', lang("exam"), 'required');
        $this->form_validation->set_rules('room[]', lang("room"), 'required');
        $this->form_validation->set_rules('start_time[]', lang("start_time"), 'required');
        $this->form_validation->set_rules('end_time[]', lang("end_time"), 'required');
        $this->form_validation->set_rules('start_time[]', lang("start_time"), 'required');
        $this->form_validation->set_rules('skill[]', lang("skill"), 'required');
        if ($this->form_validation->run() == true) {
        	$schedules = [];
        	$exam_id   = ($this->input->post('exam_id') ? $this->input->post('exam_id') : null);
        	$i = isset($_POST['skill']) ? sizeof($_POST['skill']) : 0;
        	for ($r = 0; $r < $i; $r++) {
        		$room_id     = (isset($_POST['room'][$r]) ? $_POST['room'][$r] : null);
        		$start_time  = (isset($_POST['start_time'][$r]) ? $_POST['start_time'][$r] : null);
        		$end_time    = (isset($_POST['end_time'][$r]) ? $_POST['end_time'][$r] : null);
        		$batch       = (isset($_POST['batch'][$r]) ? $_POST['batch'][$r] : null);
        		$skill_id    = (isset($_POST['skill'][$r]) ? $_POST['skill'][$r] : null);
        		$description = ((isset($_POST['description'][$r]) && trim($_POST['description'][$r]) != '') ? trim($_POST['description'][$r]) : null);
        		$row_id      = (isset($_POST['row_id'][$r]) ? $_POST['row_id'][$r] : null);
        		if (isset($_POST['subject_monday'][$r]) && !empty($_POST['subject_monday'][$r]) && $_POST['subject_monday'][$r] != '') {
	                $schedule = array(
	                	'exam_id'	  => $exam_id,
	                	'day' 		  => "monday",
	                	'room_id' 	  => $room_id,
	                	'start_time'  => $start_time,
	                	'end_time' 	  => $end_time,
	                	'batch' 	  => $batch,
	                	'skill_id' 	  => $skill_id,
	                	'subject_id'  => (isset($_POST['subject_monday'][$r]) ? $_POST['subject_monday'][$r] : null),
	                	'description' => $description,
	                	'row_id'	  => $row_id
	                );
	                $schedules[] = $schedule;
        		}
        		if (isset($_POST['subject_tuesday'][$r]) && !empty($_POST['subject_tuesday'][$r]) && $_POST['subject_tuesday'][$r] != '') {
	                $schedule = array(
	                	'exam_id'	  => $exam_id,
	                	'day' 		  => "tuesday",
	                	'room_id' 	  => $room_id,
	                	'start_time'  => $start_time,
	                	'end_time' 	  => $end_time,
	                	'batch' 	  => $batch,
	                	'skill_id' 	  => $skill_id,
	                	'subject_id'  => (isset($_POST['subject_tuesday'][$r]) ? $_POST['subject_tuesday'][$r] : null),
	                	'description' => $description,
	                	'row_id'	  => $row_id
	                );
	                $schedules[] = $schedule;
        		}
        		if (isset($_POST['subject_wednesday'][$r]) && !empty($_POST['subject_wednesday'][$r]) && $_POST['subject_wednesday'][$r] != '') {
	                $schedule = array(
	                	'exam_id'	  => $exam_id,
	                	'day' 		  => "wednesday",
	                	'room_id' 	  => $room_id,
	                	'start_time'  => $start_time,
	                	'end_time' 	  => $end_time,
	                	'batch' 	  => $batch,
	                	'skill_id' 	  => $skill_id,
	                	'subject_id'  => (isset($_POST['subject_wednesday'][$r]) ? $_POST['subject_wednesday'][$r] : null),
	                	'description' => $description,
	                	'row_id'	  => $row_id
	                );
	                $schedules[] = $schedule;
        		}
        		if (isset($_POST['subject_thursday'][$r]) && !empty($_POST['subject_thursday'][$r]) && $_POST['subject_thursday'][$r] != '') {
	                $schedule = array(
	                	'exam_id'	  => $exam_id,
	                	'day' 		  => "thursday",
	                	'room_id' 	  => $room_id,
	                	'start_time'  => $start_time,
	                	'end_time' 	  => $end_time,
	                	'batch' 	  => $batch,
	                	'skill_id' 	  => $skill_id,
	                	'subject_id'  => (isset($_POST['subject_thursday'][$r]) ? $_POST['subject_thursday'][$r] : null),
	                	'description' => $description,
	                	'row_id'	  => $row_id
	                );
	                $schedules[] = $schedule;
        		}
        		if (isset($_POST['subject_friday'][$r]) && !empty($_POST['subject_friday'][$r]) && $_POST['subject_friday'][$r] != '') {
	                $schedule = array(
	                	'exam_id'	  => $exam_id,
	                	'day' 		  => "friday",
	                	'room_id' 	  => $room_id,
	                	'start_time'  => $start_time,
	                	'end_time' 	  => $end_time,
	                	'batch' 	  => $batch,
	                	'skill_id' 	  => $skill_id,
	                	'subject_id'  => (isset($_POST['subject_friday'][$r]) ? $_POST['subject_friday'][$r] : null),
	                	'description' => $description,
	                	'row_id'	  => $row_id
	                );
	                $schedules[] = $schedule;
        		}
        		if (isset($_POST['subject_saturday'][$r]) && !empty($_POST['subject_saturday'][$r]) && $_POST['subject_saturday'][$r] != '') {
	                $schedule = array(
	                	'exam_id'	  => $exam_id,
	                	'day' 		  => "saturday",
	                	'room_id' 	  => $room_id,
	                	'start_time'  => $start_time,
	                	'end_time' 	  => $end_time,
	                	'batch' 	  => $batch,
	                	'skill_id' 	  => $skill_id,
	                	'subject_id'  => (isset($_POST['subject_saturday'][$r]) ? $_POST['subject_saturday'][$r] : null),
	                	'description' => $description,
	                	'row_id'	  => $row_id
	                );
	                $schedules[] = $schedule;
        		}
        		if (isset($_POST['subject_sunday'][$r]) && !empty($_POST['subject_sunday'][$r]) && $_POST['subject_sunday'][$r] != '') {
	                $schedule = array(
	                	'exam_id'	  => $exam_id,
	                	'day' 		  => "sunday",
	                	'room_id' 	  => $room_id,
	                	'start_time'  => $start_time,
	                	'end_time' 	  => $end_time,
	                	'batch' 	  => $batch,
	                	'skill_id' 	  => $skill_id,
	                	'subject_id'  => (isset($_POST['subject_sunday'][$r]) ? $_POST['subject_sunday'][$r] : null),
	                	'description' => $description,
	                	'row_id'	  => $row_id
	                );
	                $schedules[] = $schedule;
        		}
        		if (empty($_POST['subject_monday'][$r]) && 
					empty($_POST['subject_tuesday'][$r]) && 
					empty($_POST['subject_wednesday'][$r]) && 
					empty($_POST['subject_thursday'][$r]) && 
					empty($_POST['subject_friday'][$r]) && 
					empty($_POST['subject_saturday'][$r]) && 
					empty($_POST['subject_sunday'][$r])) {
        			$this->session->set_flashdata('error', 'The Subject field is required.');
        			admin_redirect($_SERVER["HTTP_REFERER"]);
        		}
            }
            // $this->bpas->print_arrays($schedules);
        }
        if ($this->form_validation->run() == true && $this->schools_model->addExamSchedule($exam_id, $schedules)) {
			$this->session->set_flashdata('message', lang("examination_schedule_added"));
			admin_redirect('schools/exams');
        } else {
            $this->data['error']    	  = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
			$this->data['id']             = $id;
			$this->data['exam']           = $this->schools_model->getExamByID($id);
			$this->data['exam_schedules'] = $this->schools_model->getExamScheduleByExamID($id);
			$this->data['programs']       = $this->schools_model->getPrograms();	
			$this->data['billers']        = $this->site->getBillers();
			$this->data['rooms']          = $this->schools_model->getRooms($this->data['exam']->biller_id);
			$this->data['skills']		  = $this->schools_model->getSkills();
            $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('set_examination_schedule')));
            $meta = array('page_title' => lang('set_examination_schedule'), 'bc' => $bc);
            $this->page_construct('schools/set_exam_schedule', $meta, $this->data);
        }
    }

    public function view_exam_schedule($id)
    {
    	$this->bpas->checkPermissions('examinations');
    	$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
    	$this->data['id']             = $id;
    	$this->data['exam']           = $this->schools_model->getExamByID($id);
    	$this->data['exam_schedules'] = $this->schools_model->getExamScheduleByExamID($id);
		$this->data['created_by']     = $this->site->getUserByID($this->data['exam']->created_by);
    	$this->data['biller']		  = $this->site->getCompanyByID($this->data['exam']->biller_id);
    	$bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('view_examination_schedule')));
        $meta = array('page_title' => lang('view_examination_schedule'), 'bc' => $bc);
        $this->page_construct('schools/view_exam_schedule', $meta, $this->data);	
    }

	public function exam_students($id)
    {
        $this->bpas->checkPermissions('examinations');
		$exam_schedules = $this->schools_model->getExamScheduleByExamID($id);
		if (empty($exam_schedules)) {
			$this->session->set_flashdata('error', lang('please_set_examination_schedule'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
		}
		$this->data['error']    	  = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
		$this->data['id']             = $id;
		$this->data['exam']           = $this->schools_model->getExamByID($id);
		$this->data['exam_schedules'] = $this->schools_model->getExamScheduleByExamID($id);
		$this->data['programs']       = $this->schools_model->getPrograms();	
		$this->data['billers']        = $this->site->getBillers();
		$this->data['rooms']          = $this->schools_model->getRooms($this->data['exam']->biller_id);
		$this->data['skills']		  = $this->schools_model->getSkills();
		$bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('examination_students')));
        $meta = array('page_title' => lang('examination_students'), 'bc' => $bc);
        $this->page_construct('schools/exam_students', $meta, $this->data);
    }

    public function assign_exam_student($exam_id, $exam_schedule_id)
    {
        $this->bpas->checkPermissions('examinations');
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('exam_id', $this->lang->line("exam"), 'required');
		$this->form_validation->set_rules('exam_schedule_id', $this->lang->line("exam_schedule"), 'required');
		$this->form_validation->set_rules('student_id[]', $this->lang->line("student"), 'required');
		$this->form_validation->set_rules('study_info_id[]', $this->lang->line("study_info"), 'required');
		$this->form_validation->set_rules('status[]', $this->lang->line("status"), 'required');
        if ($this->form_validation->run() == true) {
			$exam_id          = $this->input->post('exam_id') ? $this->input->post('exam_id') : null;
			$exam_schedule_id = $this->input->post('exam_schedule_id') ? $this->input->post('exam_schedule_id') : null;
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
				$data[] = array(
					'exam_id'          => $exam_id,
					'exam_schedule_id' => $exam_schedule_id,
					'student_id' 	   => (isset($_POST['student_id'][$r]) ? $_POST['student_id'][$r] : null),
					'study_info_id'    => (isset($_POST['study_info_id'][$r]) ? $_POST['study_info_id'][$r] : null),
					'status' 		   => (isset($_POST['status'][$r]) ? $_POST['status'][$r] : null)
				);
			}
			// $this->bpas->print_arrays($data);
        }
        if ($this->form_validation->run() == true && $this->schools_model->assignExamStudents($exam_id, $exam_schedule_id, $data)) {
            $this->session->set_userdata('remove_stls', 1);
            $this->session->set_flashdata('message', $this->lang->line("examination_student_assigned"));
			admin_redirect('schools/exam_students/' . $exam_id);
        } else {
            $this->data['error']            = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['exam_id']          = $exam_id;
            $this->data['exam_schedule_id'] = $exam_schedule_id;
            $this->data['billers']          = $this->site->getBillers();
			$this->data['exam']             = $this->schools_model->getExamByID($exam_id);
			$this->data['exam_schedules']   = $this->schools_model->getExamScheduleByExamID($exam_id, $exam_schedule_id);
			$this->data['exam_students']    = $this->schools_model->getExamStudentsByExamID($exam_id, $exam_schedule_id);
			$this->data['programs']         = $this->schools_model->getPrograms();	
			$this->data['skills']		    = $this->schools_model->getSkills();
			$this->data['grades']   	    = $this->schools_model->getGrades();	
			$this->data['rooms']            = $this->schools_model->getRooms($this->data['exam']->biller_id);
            $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('schools'), 'page' => lang('school')), array('link' => site_url('schools/exams'), 'page' => lang('examinations')), array('link' => '#', 'page' => lang('assign_examination_student')));
			$meta = array('page_title' => lang('assign_examination_student'), 'bc' => $bc);
            $this->page_construct('schools/assign_exam_student', $meta, $this->data);
        }
    }

    public function view_exam_student($exam_id, $exam_schedule_id, $xls = null)
    {
    	$this->bpas->checkPermissions('examinations');
    	$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
    	$this->data['exam_id']          = $exam_id;    
    	$this->data['exam_schedule_id'] = $exam_schedule_id;    
    	$this->data['exam']             = $this->schools_model->getExamByID($exam_id);
    	$this->data['exam_schedules']   = $this->schools_model->getExamScheduleByExamID($exam_id, $exam_schedule_id);
    	$this->data['exam_students']    = $this->schools_model->getExamStudentsByExamID($exam_id, $exam_schedule_id, 'active');
		$this->data['created_by']       = $this->site->getUserByID($this->data['exam']->created_by);
    	$this->data['biller']		    = $this->site->getCompanyByID($this->data['exam']->biller_id);
    	if ($xls) {
    		$exam           = $this->schools_model->getExamByID($exam_id);
	    	$exam_schedules = $this->schools_model->getExamScheduleByExamID($exam_id, $exam_schedule_id);
	    	$exam_students  = $this->schools_model->getExamStudentsByExamID($exam_id, $exam_schedule_id);
			$created_by     = $this->site->getUserByID($exam->created_by);
	    	$biller	    	= $this->site->getCompanyByID($exam->biller_id);

    		$this->load->library('excel');
    		$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->setTitle('List Students Exam');
			$style_font_KHML        = array('font' => array('color' => array('rgb' => '#000000'), 'size'  => 12, 'name'  => 'Khmer OS Muol Light'));
	        $style_font_KHBK        = array('font' => array('color' => array('rgb' => '#000000'), 'size'  => 12, 'name'  => 'Khmer OS Bokor'));
	        $style_font_Monotype_16 = array('font' => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 16, 'name'  => 'Monotype Corsiva'));
	        $style_font_Monotype_24 = array('font' => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 24, 'name'  => 'Monotype Corsiva'));
	        $style_font_Stencil_12  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 12, 'name'  => 'Stencil'));
	        $style_font_Stencil_14  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 14, 'name'  => 'Stencil'));
	        $style_font_Stencil_16  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 16, 'name'  => 'Stencil'));
	        $style_font_Stencil_21  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 21, 'name'  => 'Stencil'));
	        $style_font_Stencil_22  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 22, 'name'  => 'Stencil'));
	        $style_font_Tacteng     = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 28, 'name'  => 'Tacteing'));
	        $style_font_red      	= array('font' => array('color' => array('rgb' => 'FF0000')));
	        $style_alignment_center = array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER, 'wrap' => true));
	        $style_alignment_left   = array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT, 'vertical'   => PHPExcel_Style_Alignment::VERTICAL_CENTER, 'wrap' => true));
	        $style_alignment_left_bottom = array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT, 'vertical'   => PHPExcel_Style_Alignment::VERTICAL_BOTTOM, 'wrap' => true));
	        $style_border 		    = array('borders'   => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
			$objDrawing = new PHPExcel_Worksheet_Drawing();
			$logo       = $_SERVER['DOCUMENT_ROOT'] . '/' . dirname($_SERVER['SCRIPT_NAME']) . '/assets/uploads/logos/' . 'pcu_logo_title.png';
			$objDrawing->setPath($logo);
			$objDrawing->setOffsetX(50);    
			$objDrawing->setOffsetY(0);  
			$objDrawing->setCoordinates('B1');
			$objDrawing->setHeight(100);          
			$objDrawing->setWorksheet($this->excel->getActiveSheet());

			$this->excel->getActiveSheet()->mergeCells('A3:C3')->setCellValue('A3', $biller->company);
			$this->excel->getActiveSheet()->getStyle('A3:C3')->applyFromArray($style_font_Stencil_16);
			$this->excel->getActiveSheet()->getStyle('A3:C3')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells('A4:C4')->setCellValue('A4', 3);
			$this->excel->getActiveSheet()->getStyle('A4:C4')->applyFromArray($style_font_Tacteng);
			$this->excel->getActiveSheet()->getStyle('A4:C4')->applyFromArray($style_alignment_center);
 
			$this->excel->getActiveSheet()->mergeCells('E1:H1')->setCellValue('E1', 'Kingdom of Cambodia');
			$this->excel->getActiveSheet()->getStyle('E1:H1')->applyFromArray($style_font_Monotype_24);
			$this->excel->getActiveSheet()->getStyle('E1:H1')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells('E2:H2')->setCellValue('E2', 'Nation  Religion  King');
			$this->excel->getActiveSheet()->getStyle('E2:H2')->applyFromArray($style_font_Monotype_24);
			$this->excel->getActiveSheet()->getStyle('E2:H2')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells('E3:H3')->setCellValue('E3', 3);
			$this->excel->getActiveSheet()->getStyle('E3:H3')->applyFromArray($style_font_Tacteng);
			$this->excel->getActiveSheet()->getStyle('E3:H3')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells('A5:H5')->setCellValue('A5', ('Student List For ' . ($exam->type == 'final' ? ($exam->type . ' Exam') : $exam->type)));
			$this->excel->getActiveSheet()->getStyle('A5:H5')->applyFromArray($style_font_Stencil_22);
			$this->excel->getActiveSheet()->getStyle('A5:H5')->applyFromArray($style_alignment_center);

			$tStd   = 0;
            $tStd_m = 0;
            $tStd_f = 0;
            if (!empty($exam_students)) {
                $tStd = count($exam_students);
                foreach ($exam_students as $student) {
                    if (strtolower($student->gender) == 'm' || strtolower($student->gender) == 'male') {
                        $tStd_m++;
                    } else {
                        $tStd_f++;
                    }
                }
            }
			$title = (
				$exam->academic_year . '.' . 
				($exam->academic_year +1) . '.' . 
				Date('a', strtotime($exam_schedules[$exam_schedule_id][0]->start_time)) . '.' . 
				$exam_schedules[$exam_schedule_id][0]->skill_code . '.' . 
				$exam_schedules[$exam_schedule_id][0]->room_name . '.' . 
				$exam_schedules[$exam_schedule_id][0]->description . '.' . 
				'Total' . ':' . $tStd . 'N' . '.' . 
				'M' . ':' . $tStd_m . 'N' . '.' . 
				'F' . ':' . $tStd_f . 'N'
			);
			$this->excel->getActiveSheet()->mergeCells('A6:H6')->setCellValue('A6', $title);
			$this->excel->getActiveSheet()->getStyle('A6:H6')->applyFromArray($style_font_Stencil_21);
			$this->excel->getActiveSheet()->getStyle('A6:H6')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells('A7:A8')->setCellValue('A7', 'Nº');
			$this->excel->getActiveSheet()->mergeCells('B7:B8')->setCellValue('B7', 'ID CARD');
			$this->excel->getActiveSheet()->mergeCells('C7:D7')->setCellValue('C7', 'NAME');
			$this->excel->getActiveSheet()->setCellValue('C8', 'KHMER');
			$this->excel->getActiveSheet()->setCellValue('D8', 'ENGLISH');
			$this->excel->getActiveSheet()->mergeCells('E7:E8')->setCellValue('E7', 'SEX');
			$this->excel->getActiveSheet()->mergeCells('F7:F8')->setCellValue('F7', 'DOB');
			$this->excel->getActiveSheet()->mergeCells('G7:G8')->setCellValue('G7', 'MAJOR');
			$this->excel->getActiveSheet()->mergeCells('H7:H8')->setCellValue('H7', 'APSENT');

			$this->excel->getActiveSheet()->getStyle('A7:H7')->applyFromArray($style_font_Stencil_14);
			$this->excel->getActiveSheet()->getStyle('A7:H7')->applyFromArray($style_alignment_center);
			$this->excel->getActiveSheet()->getStyle('A7:H7')->applyFromArray($style_border);
			$this->excel->getActiveSheet()->getStyle('A8:H8')->applyFromArray($style_font_Stencil_14);
			$this->excel->getActiveSheet()->getStyle('A8:H8')->applyFromArray($style_alignment_center);
			$this->excel->getActiveSheet()->getStyle('A8:H8')->applyFromArray($style_border);
			$row = 9;
			if (!empty($exam_students)) {
				foreach ($exam_students as $std) {
					$group_exam_students[$std->status][] = $std;
				}
				if (isset($group_exam_students['active']) && !empty($group_exam_students['active'])) {
					foreach ($group_exam_students['active'] as $key => $student) {
						$this->excel->getActiveSheet()->setCellValue('A' . $row, ($key +1));
						$this->excel->getActiveSheet()->setCellValue('B' . $row, $student->code);
						$this->excel->getActiveSheet()->setCellValue('C' . $row, ($student->lastname_other . ' ' . $student->firstname_other));
						$this->excel->getActiveSheet()->setCellValue('D' . $row, ($student->lastname . ' ' . $student->firstname));
						$this->excel->getActiveSheet()->setCellValue('E' . $row, ((strtolower($student->gender) == 'M' || strtolower($student->gender) == 'Male') ? 'M' : 'F'));
						$this->excel->getActiveSheet()->setCellValue('F' . $row, Date('d.m.Y', strtotime($student->dob)));
						$this->excel->getActiveSheet()->setCellValue('G' . $row, $student->skill_code);
						$this->excel->getActiveSheet()->setCellValue('H' . $row, $student->total_attendance);

						$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_font_Stencil_12);
						$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_alignment_center);
						$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_border);
						$this->excel->getActiveSheet()->getStyle('C' . $row)->applyFromArray($style_font_KHBK);
						$this->excel->getActiveSheet()->getStyle('C' . $row)->applyFromArray($style_alignment_left_bottom);
						$this->excel->getActiveSheet()->getStyle('D' . $row)->applyFromArray($style_alignment_left);
						$row++;
					}
				}
				if (isset($group_exam_students['inactive']) && !empty($group_exam_students['inactive'])) {
					foreach ($group_exam_students['inactive'] as $key => $student) {
						$this->excel->getActiveSheet()->setCellValue('A' . $row, ($key +1));
						$this->excel->getActiveSheet()->setCellValue('B' . $row, $student->code);
						$this->excel->getActiveSheet()->setCellValue('C' . $row, ($student->lastname_other . ' ' . $student->firstname_other));
						$this->excel->getActiveSheet()->setCellValue('D' . $row, ($student->lastname . ' ' . $student->firstname));
						$this->excel->getActiveSheet()->setCellValue('E' . $row, ((strtolower($student->gender) == 'M' || strtolower($student->gender) == 'Male') ? 'M' : 'F'));
						$this->excel->getActiveSheet()->setCellValue('F' . $row, Date('d.m.Y', strtotime($student->dob)));
						$this->excel->getActiveSheet()->setCellValue('G' . $row, $student->skill_code);
						$this->excel->getActiveSheet()->setCellValue('H' . $row, $student->total_attendance);

						$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_font_Stencil_12);
						$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_alignment_center);
						$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_border);
						$this->excel->getActiveSheet()->getStyle('C' . $row)->applyFromArray($style_font_KHBK);
						$this->excel->getActiveSheet()->getStyle('C' . $row)->applyFromArray($style_alignment_left_bottom);
						$this->excel->getActiveSheet()->getStyle('D' . $row)->applyFromArray($style_alignment_left);
						$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_font_red);
						$row++;
					}
				}
			}
			$row++;
			$text_left  = ('Phnom Penh , ' . Date('d F Y', strtotime($exam->date)) . PHP_EOL . 'Head of Academic & Research' . PHP_EOL . 'Affairs');
			$this->excel->getActiveSheet()->mergeCellsByColumnAndRow(0, $row, 2, ($row +2))->setCellValue('A' . $row, $text_left);
			$text_right = ('Phnom Penh , ' . Date('d F Y', strtotime($exam->date)) . PHP_EOL . 'Prepare by' . PHP_EOL . PHP_EOL . PHP_EOL . PHP_EOL . $created_by->first_name . ' ' . $created_by->last_name);
			$this->excel->getActiveSheet()->mergeCellsByColumnAndRow(5, $row, 7, ($row +4))->setCellValue('F' . $row, $text_right);
			$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_font_Monotype_16);
			$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(27);
			$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(27);
			$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(10);
			$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
			$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
			$total_rows = (8 + (!empty($exam_students) ? count($exam_students) : 0));
			for ($i=0; $i < $total_rows; $i++) { 
				$this->excel->getActiveSheet()->getRowDimension($i)->setRowHeight(40);	
			}
			for ($i=$total_rows; $i < ($total_rows +20); $i++) { 
				$this->excel->getActiveSheet()->getRowDimension($i)->setRowHeight(30);	
			}
			$this->excel->getActiveSheet()->getRowDimension(4)->setRowHeight(30);	
			$filename = 'List_student_examination_' . date('Y_m_d_H_i_s');
			$this->load->helper('excel');
            create_excel($this->excel, $filename);
    	}
    	$bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('list_examination_students')));
        $meta = array('page_title' => lang('list_examination_students'), 'bc' => $bc);
        $this->page_construct('schools/view_exam_student', $meta, $this->data);	
    }

	public function getStudentsByArray()
    {
    	$condition    = $this->input->get('condition') ? $this->input->get('condition') : null;
    	if ($students = $this->schools_model->getStudentsByArray($condition)) {
    		$this->bpas->send_json($students);
    	}
    	$this->bpas->send_json(false);
    }

    public function student_exam_suggestions()
    {
		$term 	   = $this->input->get('term', true);
		$condition = $this->input->get('condition') ? $this->input->get('condition') : null;
        if (strlen($term) < 1) {
            die("<script type='text/javascript'>setTimeout(function(){ window.top.location.href = '" . admin_url('welcome') . "'; }, 10);</script>");
        }
        $analyzed = $this->bpas->analyze_term($term);
        $sr       = $analyzed['term'];
        $rows     = $this->schools_model->getStudentsByArray($condition, $term);
        if ($rows) {
            foreach ($rows as $row) {
                $pr[] = array('id' => $row->id, 'item_id' => $row->id, 'label' => $row->number . " - " . $row->lastname . ' ' . $row->firstname, 'row' => $row);
            }
			$this->bpas->send_json($pr);
        } else {
            $this->bpas->send_json(array(array('id' => 0, 'label' => lang('no_match_found'), 'value' => $term)));
        }
    }

    public function assign_exam_student_mark($exam_id, $row_id)
    {
		$this->bpas->checkPermissions('examinations');
		$exam_schedules = $this->schools_model->getExamScheduleByExamID($exam_id, $row_id);
		$exam_students  = $this->schools_model->getExamStudentsByExamID($exam_id, $row_id, 'active');
		if (empty($exam_schedules)) {
			$this->session->set_flashdata('error', lang('please_set_examination_schedule'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
		}
		if (empty($exam_students)) {
			$this->session->set_flashdata('error', lang('please_assign_examination_student'));
            admin_redirect($_SERVER["HTTP_REFERER"]);
		}
        $this->form_validation->set_message('is_natural_no_zero', $this->lang->line("no_zero_required"));
		$this->form_validation->set_rules('exam_id', $this->lang->line("exam"), 'required');
		$this->form_validation->set_rules('row_id', $this->lang->line("exam_schedule"), 'required');
		$this->form_validation->set_rules('student_id[]', $this->lang->line("student"), 'required');
		$this->form_validation->set_rules('exam_student_id[]', $this->lang->line("exam_student"), 'required');
        if ($this->form_validation->run() == true) {
			$exam_id = $this->input->post('exam_id') ? $this->input->post('exam_id') : null;
			$row_id  = $this->input->post('row_id') ? $this->input->post('row_id') : null;
			$i = isset($_POST['student_id']) ? sizeof($_POST['student_id']) : 0;
			for ($r = 0; $r < $i; $r++) {
				foreach ($exam_schedules as $schedule) {
                	foreach ($schedule as $subject) {
                		$exam_schedule_subject_id	=  	((isset($_POST['exam_schedule_' . $subject->exam_schedule_subject_id][$r]) && $_POST['exam_schedule_' . $subject->exam_schedule_subject_id][$r] != '') ? $_POST['exam_schedule_' . $subject->exam_schedule_subject_id][$r] : null);
                		$exam_schedule_student_id 	=  	((isset($_POST['exam_student_id'][$r]) && $_POST['exam_student_id'][$r] != '') ? $_POST['exam_student_id'][$r] : null);
                		$attendance_mark	   	  	=  	(
                											(
                												isset($_POST['subject_' . $subject->exam_schedule_subject_id . '_att_mark'][$r])  && 
                												!empty($_POST['subject_' . $subject->exam_schedule_subject_id . '_att_mark'][$r]) && 
                												$_POST['subject_' . $subject->exam_schedule_subject_id . '_att_mark'][$r] != ''
                							  				) ? $_POST['subject_' . $subject->exam_schedule_subject_id . '_att_mark'][$r] : 0
                										);
                		$assignment_mark     	   	=  	(
                											(
                												isset($_POST['subject_' . $subject->exam_schedule_subject_id . '_ass_mark'][$r])  && 
                												!empty($_POST['subject_' . $subject->exam_schedule_subject_id . '_ass_mark'][$r]) && 
                												$_POST['subject_' . $subject->exam_schedule_subject_id . '_ass_mark'][$r] != ''
                							  				) ? $_POST['subject_' . $subject->exam_schedule_subject_id . '_ass_mark'][$r] : 0
                										);
                		$midterm_mark     	   	  	=  	(
                											(
                												isset($_POST['subject_' . $subject->exam_schedule_subject_id . '_mid_mark'][$r])  && 
                												!empty($_POST['subject_' . $subject->exam_schedule_subject_id . '_mid_mark'][$r]) && 
                												$_POST['subject_' . $subject->exam_schedule_subject_id . '_mid_mark'][$r] != ''
                							  				) ? $_POST['subject_' . $subject->exam_schedule_subject_id . '_mid_mark'][$r] : 0
                										);
                		$final_mark     	   	  	=  	(
                											(
                												isset($_POST['subject_' . $subject->exam_schedule_subject_id . '_final_mark'][$r])  && 
                												!empty($_POST['subject_' . $subject->exam_schedule_subject_id . '_final_mark'][$r]) && 
                												$_POST['subject_' . $subject->exam_schedule_subject_id . '_final_mark'][$r] != ''
                							  				) ? $_POST['subject_' . $subject->exam_schedule_subject_id . '_final_mark'][$r] : 0
                										);

                		$data[] = array(
							'exam_schedule_id' => $exam_schedule_subject_id,
							'exam_student_id'  => $exam_schedule_student_id,
							'attendance'	   => $attendance_mark,       
							'assignment'	   => $assignment_mark,       
							'midterm'	   	   => $midterm_mark,       
							'final'	   		   => $final_mark,
							'row_id' 		   => $row_id
						);
                	}
                }
			}
			// $this->bpas->print_arrays($data);
        }
        if ($this->form_validation->run() == true && $this->schools_model->assignExamStudentSubjectMarks($row_id, $data)) {
            $this->session->set_userdata('remove_stls', 1);
            $this->session->set_flashdata('message', $this->lang->line("examination_student_mark_assigned"));
			admin_redirect('schools/exam_students/' . $exam_id);
        } else {
            $this->data['error']                      = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['exam_id']                    = $exam_id;
            $this->data['row_id']                     = $row_id;
			$this->data['exam']                       = $this->schools_model->getExamByID($exam_id);
			$this->data['exam_schedules']             = $exam_schedules;
			$this->data['exam_students']              = $exam_students;
			$this->data['exam_student_subject_marks'] = $this->schools_model->getExamStudentSubjectMarks($row_id);
			$this->data['billers']                    = $this->site->getBillers();
			$this->data['programs']                   = $this->schools_model->getPrograms();	
			$this->data['skills']		              = $this->schools_model->getSkills();
			$this->data['grades']   	              = $this->schools_model->getGrades();	
			$this->data['rooms']                      = $this->schools_model->getRooms($this->data['exam']->biller_id);
            $bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('schools'), 'page' => lang('school')), array('link' => site_url('schools/exams'), 'page' => lang('examinations')), array('link' => '#', 'page' => lang('assign_examination_student_mark')));
			$meta = array('page_title' => lang('assign_examination_student_mark'), 'bc' => $bc);
            $this->page_construct('schools/assign_exam_student_mark', $meta, $this->data);
        }
    }

    public function credit_score_percentage()
    {
    	$this->bpas->checkPermissions('examinations');
		$this->form_validation->set_rules('academic_year', $this->lang->line("academic_year"), 'required');
		$this->form_validation->set_rules('attendance', $this->lang->line("attendance"), 'required');
		$this->form_validation->set_rules('assignment', $this->lang->line("assignment"), 'required');
		$this->form_validation->set_rules('midterm', $this->lang->line("midterm"), 'required');
		$this->form_validation->set_rules('final', $this->lang->line("final"), 'required');
		if ($this->form_validation->run() == true) {
			$academic_year = ($this->input->post('academic_year') ? $this->input->post('academic_year') : null);
			$data = [
				'academic_year' => $academic_year,
				'attendance' 	=> $this->input->post('attendance'),
				'assignment' 	=> $this->input->post('assignment'),
				'midterm' 		=> $this->input->post('midterm'),
				'final' 		=> $this->input->post('final')
			];
		} 
		if ($this->form_validation->run() == true && $this->schools_model->setCreditScorePercentage($academic_year, $data)) {
			$this->session->set_flashdata('message', $this->lang->line("credit_score_percentage_set"));
			admin_redirect('schools/credit_score_percentage');
		} else {
			$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
    		$this->data['page_title']  = lang('credit_score_percentage');
			$bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('credit_score_percentage')));
	        $meta = array('page_title' => lang('credit_score_percentage'), 'bc' => $bc);
	        $this->page_construct('schools/credit_score_percentage', $meta, $this->data);	
		}
    }

    public function getCreditScorePercentage()
    {
    	$this->bpas->checkPermissions('examinations');
    	$this->load->library('datatables');
    	$this->datatables
    		->select(" 
    				CONCAT({$this->db->dbprefix('sh_credit_score_percentage')}.academic_year, '-', ({$this->db->dbprefix('sh_credit_score_percentage')}.academic_year +1)) AS academic_year,
    				{$this->db->dbprefix('sh_credit_score_percentage')}.attendance,
    				{$this->db->dbprefix('sh_credit_score_percentage')}.assignment,
    				{$this->db->dbprefix('sh_credit_score_percentage')}.midterm,
    				{$this->db->dbprefix('sh_credit_score_percentage')}.final
    			")
    		->from('sh_credit_score_percentage')
    		->order_by('academic_year', 'DESC');
    	echo $this->datatables->generate();
    }

    public function grade_point_average()
    {
    	$this->bpas->checkPermissions('examinations');
		$this->form_validation->set_rules('min_score[]', $this->lang->line("min_score"), 'required');
		$this->form_validation->set_rules('max_score[]', $this->lang->line("max_score"), 'required');
		$this->form_validation->set_rules('grade[]', $this->lang->line("grade"), 'required');
		$this->form_validation->set_rules('point[]', $this->lang->line("point"), 'required');
		if ($this->form_validation->run() == true) {
			$i = isset($_POST['min_score']) ? sizeof($_POST['min_score']) : 0;
			for ($r = 0; $r < $i; $r++) {
				$data[] = [
					'min_score'   => (!empty($_POST['min_score'][$r]) ? $_POST['min_score'][$r] : 0),
					'max_score'   => (!empty($_POST['max_score'][$r]) ? $_POST['max_score'][$r] : 0),
					'grade' 	  => ((!empty($_POST['grade'][$r]) && trim($_POST['grade'][$r]) != '') ? trim($_POST['grade'][$r]) : null),
					'point' 	  => (!empty($_POST['point'][$r]) ? $_POST['point'][$r] : 0),
					'description' => ((!empty($_POST['description'][$r]) && trim($_POST['description'][$r]) != '') ? trim($_POST['description'][$r]) : null)
				];
			}
		} 
		if ($this->form_validation->run() == true && $this->schools_model->setGradePointAverage($data)) {
			$this->session->set_flashdata('message', $this->lang->line("grade_point_average_set"));
			admin_redirect('schools/grade_point_average');
		} else {
			$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
    		$this->data['page_title'] 		   = lang('grade_point_average');
    		$this->data['grade_point_average'] = $this->schools_model->getGradePointAverage();
			$bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('grade_point_average')));
	        $meta = array('page_title' => lang('grade_point_average'), 'bc' => $bc);
	        $this->page_construct('schools/grade_point_average', $meta, $this->data);	
		}
    }

    public function getGradePointAverage()
    {
    	$this->bpas->checkPermissions('examinations');
    	$this->load->library('datatables');
    	$this->datatables
    		->select(" 
    				CONCAT({$this->db->dbprefix('sh_credit_score_percentage')}.academic_year, '-', ({$this->db->dbprefix('sh_credit_score_percentage')}.academic_year +1)) AS academic_year,
    				{$this->db->dbprefix('sh_credit_score_percentage')}.attendance,
    				{$this->db->dbprefix('sh_credit_score_percentage')}.assignment,
    				{$this->db->dbprefix('sh_credit_score_percentage')}.midterm,
    				{$this->db->dbprefix('sh_credit_score_percentage')}.final
    			")
    		->from('sh_credit_score_percentage')
    		->order_by('academic_year', 'DESC');
    	echo $this->datatables->generate();
    }

    public function view_exam_student_mark($exam_id, $row_id, $xls = null)
    {
    	$this->bpas->checkPermissions('examinations');
    	$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
    	$this->data['exam']             = $this->schools_model->getExamByID($exam_id);
    	$this->data['exam_schedules']   = $this->schools_model->getExamScheduleByExamID($exam_id, $row_id);
    	$this->data['exam_students']    = $this->schools_model->getExamStudentsByExamID($exam_id, $row_id, 'active');
    	$this->data['exam_student_subject_marks'] = $this->schools_model->getExamStudentsSubjectsMarkGPA($exam_id, $row_id, $this->data['exam']->academic_year);
		$this->data['created_by']       = $this->site->getUserByID($this->data['exam']->created_by);
    	$this->data['biller']		    = $this->site->getCompanyByID($this->data['exam']->biller_id);
		$this->data['program']          = $this->schools_model->getProgramByID($this->data['exam']->program_id);	
		$this->data['rooms']            = $this->schools_model->getRooms($this->data['exam']->biller_id);
    	if ($xls) {
    		$exam           = $this->schools_model->getExamByID($exam_id);
	    	$exam_schedules = $this->schools_model->getExamScheduleByExamID($exam_id, $row_id);
	    	$exam_students  = $this->schools_model->getExamStudentsByExamID($exam_id, $row_id, 'active');
			$exam_student_subject_marks = $this->schools_model->getExamStudentsSubjectsMarkGPA($exam_id, $row_id, $exam->academic_year);
			$created_by     = $this->site->getUserByID($exam->created_by);
    		$biller		    = $this->site->getCompanyByID($exam->biller_id);
			$program        = $this->schools_model->getProgramByID($exam->program_id);	
			$rooms          = $this->schools_model->getRooms($exam->biller_id);
    		$this->load->library('excel');
    		$this->excel->setActiveSheetIndex(0);
			$this->excel->getActiveSheet()->setTitle(lang('examination_student_mark_ranks'));
			$style_font_KHML        = array('font' => array('color' => array('rgb' => '#000000'), 'size'  => 12, 'name'  => 'Khmer OS Muol Light'));
	        $style_font_KHBK        = array('font' => array('color' => array('rgb' => '#000000'), 'size'  => 12, 'name'  => 'Khmer OS Bokor'));
	        $style_font_KHBK_14     = array('font' => array('color' => array('rgb' => '#000000'), 'size'  => 14, 'name'  => 'Khmer OS Bokor'));
	        $style_font_Monotype_16 = array('font' => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 16, 'name'  => 'Monotype Corsiva'));
	        $style_font_Monotype_24 = array('font' => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 24, 'name'  => 'Monotype Corsiva'));
	        $style_font_Stencil_12  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 12, 'name'  => 'Stencil'));
	        $style_font_Stencil_14  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 14, 'name'  => 'Stencil'));
	        $style_font_Stencil_16  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 16, 'name'  => 'Stencil'));
	        $style_font_Stencil_21  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 21, 'name'  => 'Stencil'));
	        $style_font_Stencil_22  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 22, 'name'  => 'Stencil'));
	        $style_font_Tacteng     = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 28, 'name'  => 'Tacteing'));
	        $style_font_Tacteng_38  = array('font' => array('color' => array('rgb' => '000000'), 'size'  => 38, 'name'  => 'Tacteing'));
	        $style_font_red      	= array('font' => array('color' => array('rgb' => 'FF0000')));
	        $style_alignment_center = array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER, 'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER, 'wrap' => true));
	        $style_alignment_left   = array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT, 'vertical'   => PHPExcel_Style_Alignment::VERTICAL_CENTER, 'wrap' => true));
	        $style_alignment_left_bottom = array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT, 'vertical'   => PHPExcel_Style_Alignment::VERTICAL_BOTTOM, 'wrap' => true));
	        $style_alignment_left_top    = array('alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT, 'vertical'   => PHPExcel_Style_Alignment::VERTICAL_TOP, 'wrap' => true));
	        $style_border 		    = array('borders'   => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
			$style_fill_color_pink 	= array('fill' => array('type' => PHPExcel_Style_Fill::FILL_SOLID, 'color' => array('rgb' => 'E6B8B7')));
			$style_fill_color_green = array('fill' => array('type' => PHPExcel_Style_Fill::FILL_SOLID, 'color' => array('rgb' => 'EBF1DE')));
			
			$objDrawing = new PHPExcel_Worksheet_Drawing();
			$logo       = $_SERVER['DOCUMENT_ROOT'] . '/' . dirname($_SERVER['SCRIPT_NAME']) . '/assets/uploads/logos/' . 'pcu_logo_title.png';
			$objDrawing->setPath($logo);
			$objDrawing->setOffsetX(80);    
			$objDrawing->setOffsetY(0);  
			$objDrawing->setCoordinates('C1');
			$objDrawing->setHeight(110);          
			$objDrawing->setWorksheet($this->excel->getActiveSheet());

			$total_subjects = ((!empty($exam_student_subject_marks) && !empty($exam_student_subject_marks[0]->total_subjects)) ? $exam_student_subject_marks[0]->total_subjects : 0);
			$total_columns  = (8 + ($total_subjects * 7) + 6);
			function getColumn($column, $step, $type) 
			{ 
				if ($type == 'add') {
					$columnNumber = PHPExcel_Cell::columnIndexFromString($column) + $step;
					$column = PHPExcel_Cell::stringFromColumnIndex($columnNumber - 1);
				} else {
					$columnNumber = PHPExcel_Cell::columnIndexFromString($column) - $step;
					$column = PHPExcel_Cell::stringFromColumnIndex($columnNumber - 1);
				}
				return $column;
			}
			$last_column        = getColumn("A", ($total_columns -1), "add");
			$last_column_sub_10 = getColumn($last_column, 9, "sub");

			$this->excel->getActiveSheet()->mergeCells('A3:E3')->setCellValue('A3', $biller->company);
			$this->excel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($style_font_Stencil_16);
			$this->excel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells('A4:E4')->setCellValue('A4', 3);
			$this->excel->getActiveSheet()->getStyle('A4:E4')->applyFromArray($style_font_Tacteng);
			$this->excel->getActiveSheet()->getStyle('A4:E4')->applyFromArray($style_alignment_center);
 
			$this->excel->getActiveSheet()->mergeCells($last_column_sub_10 . '1:' . $last_column . '1')->setCellValue($last_column_sub_10 . '1', 'Kingdom of Cambodia');
			$this->excel->getActiveSheet()->getStyle($last_column_sub_10 . '1:' . $last_column . '1')->applyFromArray($style_font_Monotype_24);
			$this->excel->getActiveSheet()->getStyle($last_column_sub_10 . '1:' . $last_column . '1')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells($last_column_sub_10 . '2:' . $last_column . '2')->setCellValue($last_column_sub_10 . '2', 'Nation  Religion  King');
			$this->excel->getActiveSheet()->getStyle($last_column_sub_10 . '2:' . $last_column . '2')->applyFromArray($style_font_Monotype_24);
			$this->excel->getActiveSheet()->getStyle($last_column_sub_10 . '2:' . $last_column . '2')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells($last_column_sub_10 . '3:' . $last_column . '3')->setCellValue($last_column_sub_10 . '3', 4);
			$this->excel->getActiveSheet()->getStyle($last_column_sub_10 . '3:' . $last_column . '3')->applyFromArray($style_font_Tacteng_38);
			$this->excel->getActiveSheet()->getStyle($last_column_sub_10 . '3:' . $last_column . '3')->applyFromArray($style_alignment_center);

			$title_1 = ('Result For ' . ($exam->type == 'final' ? ($exam->type . ' Exam') : $exam->type));
			$tStd    = 0;
            $tStd_m  = 0;
            $tStd_f  = 0;
            if (!empty($exam_students)) {
                $tStd = count($exam_students);
                foreach ($exam_students as $student) {
                    if (strtolower($student->gender) == 'm' || strtolower($student->gender) == 'male') {
                        $tStd_m++;
                    } else {
                        $tStd_f++;
                    }
                }
            }
			$title_2 = (
				$exam->academic_year . '.' . 
				($exam->academic_year +1) . '.' . 
				Date('a', strtotime($exam_schedules[$row_id][0]->start_time)) . '.' . 
				$exam_schedules[$row_id][0]->skill_code . '.' . 
				$exam_schedules[$row_id][0]->room_name . '.' . 
				$exam_schedules[$row_id][0]->description . '.' . 
				'Total' . ':' . $tStd . 'N' . '.' . 
				'M' . ':' . $tStd_m . 'N' . '.' . 
				'F' . ':' . $tStd_f . 'N'
			);
			$title_3 = (
				"Exam Date." .
				(
					(Date('F', strtotime($exam->start_date))) == Date('F', strtotime($exam->end_date)) ? 
					(Date('d', strtotime($exam->start_date)) . '-') :
					(Date('d', strtotime($exam->start_date)) . '.' . Date('F', strtotime($exam->start_date)) . '-')
				) .
				Date('d', strtotime($exam->end_date)) . '.' . Date('F', strtotime($exam->end_date)) . '.' . 
				Date('Y', strtotime($exam->end_date))
			);

			$this->excel->getActiveSheet()->mergeCells('A5:' . $last_column . '5')->setCellValue('A5', $title_1);
			$this->excel->getActiveSheet()->getStyle('A5:' . $last_column . '5')->applyFromArray($style_font_Stencil_22);
			$this->excel->getActiveSheet()->getStyle('A5:' . $last_column . '5')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells('A6:' . $last_column . '6')->setCellValue('A6', $title_2);
			$this->excel->getActiveSheet()->getStyle('A6:' . $last_column . '6')->applyFromArray($style_font_Stencil_22);
			$this->excel->getActiveSheet()->getStyle('A6:' . $last_column . '6')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells('A7:' . $last_column . '7')->setCellValue('A7', $title_3);
			$this->excel->getActiveSheet()->getStyle('A7:' . $last_column . '7')->applyFromArray($style_font_Stencil_22);
			$this->excel->getActiveSheet()->getStyle('A7:' . $last_column . '7')->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->mergeCells('A8:A9')->setCellValue('A8', 'Nº');
			$this->excel->getActiveSheet()->mergeCells('B8:B9')->setCellValue('B8', 'ID CARD');
			$this->excel->getActiveSheet()->mergeCells('C8:D8')->setCellValue('C8', 'NAME');
			$this->excel->getActiveSheet()->setCellValue('C9', 'KHMER');
			$this->excel->getActiveSheet()->setCellValue('D9', 'ENGLISH');
			$this->excel->getActiveSheet()->mergeCells('E8:E9')->setCellValue('E8', 'SEX');
			$this->excel->getActiveSheet()->mergeCells('F8:F9')->setCellValue('F8', 'DOB');
			$this->excel->getActiveSheet()->mergeCells('G8:G9')->setCellValue('G8', 'MAJOR');
			$this->excel->getActiveSheet()->mergeCells('H8:H9')->setCellValue('H8', 'BATCH');

			$this->excel->getActiveSheet()->getStyle('A8:H8')->applyFromArray($style_font_Stencil_14);
			$this->excel->getActiveSheet()->getStyle('A8:H8')->applyFromArray($style_alignment_center);
			$this->excel->getActiveSheet()->getStyle('A8:H8')->applyFromArray($style_border);
			$this->excel->getActiveSheet()->getStyle('A9:H9')->applyFromArray($style_font_Stencil_14);
			$this->excel->getActiveSheet()->getStyle('A9:H9')->applyFromArray($style_alignment_center);
			$this->excel->getActiveSheet()->getStyle('A9:H9')->applyFromArray($style_border);

			$col = "H";
			if (!empty($exam_student_subject_marks) && isset($exam_student_subject_marks[0]->subjects_mark_gpa) && !empty($exam_student_subject_marks[0]->subjects_mark_gpa)) { 
				foreach ($exam_student_subject_marks[0]->subjects_mark_gpa as $subject) { 
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 1, 'add') . '8', 'Att.'); 
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 1, 'add') . '9', $subject->subject_mark->subject_percentage->attendance); 
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 2, 'add') . '8', 'Ass.');	
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 2, 'add') . '9', $subject->subject_mark->subject_percentage->assignment); 
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 3, 'add') . '8', 'Mid.');	
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 3, 'add') . '9', $subject->subject_mark->subject_percentage->midterm); 
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 4, 'add') . '8', 'Final');	
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 4, 'add') . '9', $subject->subject_mark->subject_percentage->final); 
					$this->excel->getActiveSheet()->mergeCells(getColumn($col, 5, 'add') . '8:' . getColumn($col, 6, 'add') . '8')->setCellValue(getColumn($col, 5, 'add') . '8', $subject->subject_details->subject_name);	
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 5, 'add') . '9', 'Score');	
					$this->excel->getActiveSheet()->setCellValue(getColumn($col, 6, 'add') . '9', 'Grade');	
					$this->excel->getActiveSheet()->mergeCells(getColumn($col, 7, 'add') . '8:' . getColumn($col, 7, 'add') . '9')->setCellValue(getColumn($col, 7, 'add') . '8', 'GPA');	

					$this->excel->getActiveSheet()->getStyle(getColumn($col, 5, 'add') . '8:' . getColumn($col, 5, 'add') . '9')->applyFromArray($style_fill_color_pink);
					$this->excel->getActiveSheet()->getStyle(getColumn($col, 6, 'add') . '8:' . getColumn($col, 6, 'add') . '9')->applyFromArray($style_fill_color_pink);
					$this->excel->getActiveSheet()->getStyle(getColumn($col, 7, 'add') . '8:' . getColumn($col, 7, 'add') . '9')->applyFromArray($style_fill_color_green);
					for ($i=0; $i < 7; $i++) { 
						$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . '8:' . getColumn($col, ($i +1), 'add') . '9')->applyFromArray($style_font_Stencil_14);
						$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . '8:' . getColumn($col, ($i +1), 'add') . '9')->applyFromArray($style_alignment_center);
						$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . '8:' . getColumn($col, ($i +1), 'add') . '9')->applyFromArray($style_border);	
					}
					$col = getColumn($col, 7, 'add');
				}
				$this->excel->getActiveSheet()->mergeCells(getColumn($col, 1, 'add') . '8:' . getColumn($col, 1, 'add') . '9')->setCellValue(getColumn($col, 1, 'add') . '8', 'Total Score'); 
				$this->excel->getActiveSheet()->getStyle(getColumn($col, 1, 'add') . '8')->getAlignment()->setTextRotation(90);
				$this->excel->getActiveSheet()->mergeCells(getColumn($col, 2, 'add') . '8:' . getColumn($col, 4, 'add') . '8')->setCellValue(getColumn($col, 2, 'add') . '8', 'Average'); 
				$this->excel->getActiveSheet()->setCellValue(getColumn($col, 2, 'add') . '9', 'Score');
				$this->excel->getActiveSheet()->setCellValue(getColumn($col, 3, 'add') . '9', 'Grade');
				$this->excel->getActiveSheet()->setCellValue(getColumn($col, 4, 'add') . '9', 'GPA');
				$this->excel->getActiveSheet()->mergeCells(getColumn($col, 5, 'add') . '8:' . getColumn($col, 5, 'add') . '9')->setCellValue(getColumn($col, 5, 'add') . '8', 'Rank Class');
				$this->excel->getActiveSheet()->getStyle(getColumn($col, 5, 'add') . '8')->getAlignment()->setTextRotation(90);
				$this->excel->getActiveSheet()->mergeCells(getColumn($col, 6, 'add') . '8:' . getColumn($col, 6, 'add') . '9')->setCellValue(getColumn($col, 6, 'add') . '8', 'Grade Meaning');
				$this->excel->getActiveSheet()->getStyle(getColumn($col, 6, 'add') . '8')->getAlignment()->setTextRotation(90);
				for ($i=0; $i < 6; $i++) { 
					$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . '8:' . getColumn($col, ($i +1), 'add') . '9')->applyFromArray($style_font_Stencil_14);
					$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . '8:' . getColumn($col, ($i +1), 'add') . '9')->applyFromArray($style_alignment_center);
					$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . '8:' . getColumn($col, ($i +1), 'add') . '9')->applyFromArray($style_border);	
				}
			}

			$row = 10; $col = "H";
			if (!empty($exam_student_subject_marks)) { 
				foreach ($exam_student_subject_marks as $key => $exam_student) {
					$student           = $exam_student->student_details; 
                    $subjects          = $exam_student->subjects_mark_gpa; 
                    $total_score       = ((isset($exam_student->total_score) && !empty($exam_student->total_score)) ? $exam_student->total_score : 0); 
                    $total_score_avg   = ((isset($exam_student->total_score_avg) && !empty($exam_student->total_score_avg)) ? $exam_student->total_score_avg : 0); 
                    $total_score_grade = ((isset($exam_student->total_score_gpa->grade) && !empty($exam_student->total_score_gpa->grade)) ? $exam_student->total_score_gpa->grade : ''); 
                    $total_score_point = ((isset($exam_student->total_score_gpa->point) && !empty($exam_student->total_score_gpa->point)) ? $exam_student->total_score_gpa->point : 0); 
                    $rank = ((isset($exam_student->rank) && !empty($exam_student->rank)) ? $exam_student->rank : 1); 
                    $total_score_grade_meaning = ((isset($exam_student->total_score_gpa->description) && !empty($exam_student->total_score_gpa->description)) ? $exam_student->total_score_gpa->description : ''); 

					$this->excel->getActiveSheet()->setCellValue('A' . $row, ($key +1));
					$this->excel->getActiveSheet()->setCellValue('B' . $row, $student->code);
					$this->excel->getActiveSheet()->setCellValue('C' . $row, ($student->lastname_other . ' ' . $student->firstname_other));
					$this->excel->getActiveSheet()->setCellValue('D' . $row, ($student->lastname . ' ' . $student->firstname));
					$this->excel->getActiveSheet()->setCellValue('E' . $row, ((strtolower($student->gender) == 'M' || strtolower($student->gender) == 'Male') ? 'M' : 'F'));
					$this->excel->getActiveSheet()->setCellValue('F' . $row, Date('d.m.Y', strtotime($student->dob)));
					$this->excel->getActiveSheet()->setCellValue('G' . $row, $student->skill_code);
					$this->excel->getActiveSheet()->setCellValue('H' . $row, $student->batch);

					$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_font_Stencil_12);
					$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_alignment_center);
					$this->excel->getActiveSheet()->getStyle('A' . $row . ':H' . $row)->applyFromArray($style_border);
					$this->excel->getActiveSheet()->getStyle('C' . $row)->applyFromArray($style_font_KHBK_14);
					$this->excel->getActiveSheet()->getStyle('C' . $row)->applyFromArray($style_alignment_left_top);
					$this->excel->getActiveSheet()->getStyle('D' . $row)->applyFromArray($style_alignment_left);
					if (!empty($subjects)) { 
						foreach ($subjects as $subject) { 
							$att   = ((isset($subject->subject_mark->attendance) && !empty($subject->subject_mark->attendance)) ? $subject->subject_mark->attendance : 0); 
							$ass   = ((isset($subject->subject_mark->assignment) && !empty($subject->subject_mark->assignment)) ? $subject->subject_mark->assignment : 0); 
							$mid   = ((isset($subject->subject_mark->midterm) && !empty($subject->subject_mark->midterm)) ? $subject->subject_mark->midterm : 0); 
							$final = ((isset($subject->subject_mark->final) && !empty($subject->subject_mark->final)) ? $subject->subject_mark->final : 0); 
							$subject_score = ((isset($subject->subject_mark->subject_score) && !empty($subject->subject_mark->subject_score)) ? $subject->subject_mark->subject_score : ''); 
							$subject_grade = ((isset($subject->subject_mark->grade_point_average->grade) && !empty($subject->subject_mark->grade_point_average->grade)) ? $subject->subject_mark->grade_point_average->grade : ''); 
							$subject_point = ((isset($subject->subject_mark->grade_point_average->point) && !empty($subject->subject_mark->grade_point_average->point)) ? $subject->subject_mark->grade_point_average->point : 0); 

							$this->excel->getActiveSheet()->setCellValue(getColumn($col, 1, 'add') . $row, $this->bpas->formatDecimal($att, 2)); 
							$this->excel->getActiveSheet()->setCellValue(getColumn($col, 2, 'add') . $row, $this->bpas->formatDecimal($ass, 2)); 
							$this->excel->getActiveSheet()->setCellValue(getColumn($col, 3, 'add') . $row, $this->bpas->formatDecimal($mid, 2)); 
							$this->excel->getActiveSheet()->setCellValue(getColumn($col, 4, 'add') . $row, $this->bpas->formatDecimal($final, 2)); 
							$this->excel->getActiveSheet()->setCellValue(getColumn($col, 5, 'add') . $row, $this->bpas->formatDecimal($subject_score, 2)); 
							$this->excel->getActiveSheet()->setCellValue(getColumn($col, 6, 'add') . $row, $subject_grade); 
							$this->excel->getActiveSheet()->setCellValue(getColumn($col, 7, 'add') . $row, $this->bpas->formatDecimal($subject_point, 2)); 
							for ($i=0; $i < 7; $i++) { 
								if ($i != 5) {
									$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . $row)->getNumberFormat()->setFormatCode("0.00");
								}
								$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . $row)->applyFromArray($style_font_Stencil_12);
								$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . $row)->applyFromArray($style_alignment_center);
								$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . $row)->applyFromArray($style_border);
							}
							$this->excel->getActiveSheet()->getStyle(getColumn($col, 5, 'add') . $row)->applyFromArray($style_fill_color_pink);
							$this->excel->getActiveSheet()->getStyle(getColumn($col, 6, 'add') . $row)->applyFromArray($style_fill_color_pink);
							$this->excel->getActiveSheet()->getStyle(getColumn($col, 7, 'add') . $row)->applyFromArray($style_fill_color_green);
							$col = getColumn($col, 7, 'add');
						} 
						$this->excel->getActiveSheet()->setCellValue(getColumn($col, 1, 'add') . $row, $this->bpas->formatDecimal($total_score, 2)); 
						$this->excel->getActiveSheet()->setCellValue(getColumn($col, 2, 'add') . $row, $this->bpas->formatDecimal($total_score_avg, 2)); 
						$this->excel->getActiveSheet()->setCellValue(getColumn($col, 3, 'add') . $row, $total_score_grade); 
						$this->excel->getActiveSheet()->setCellValue(getColumn($col, 4, 'add') . $row, floatval($total_score_point)); 
						$this->excel->getActiveSheet()->setCellValue(getColumn($col, 5, 'add') . $row, $rank); 
						$this->excel->getActiveSheet()->setCellValue(getColumn($col, 6, 'add') . $row, $total_score_grade_meaning); 
						for ($i=0; $i < 6; $i++) { 
							if ($i == 0 || $i == 1) {
								$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . $row)->getNumberFormat()->setFormatCode("0.00");
							}
							if ($i == 4 || $i == 5) {
								$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . $row)->applyFromArray($style_font_Stencil_14);
							}
							$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . $row)->applyFromArray($style_font_Stencil_12);
							$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . $row)->applyFromArray($style_alignment_center);
							$this->excel->getActiveSheet()->getStyle(getColumn($col, ($i +1), 'add') . $row)->applyFromArray($style_border);
						}
					} 
					$row++;
				}
			}
			$row++;
			$text_left  = ('Seen andApproved' . PHP_EOL . 'President');
			$this->excel->getActiveSheet()->mergeCellsByColumnAndRow(0, $row, 3, ($row +2))->setCellValue('A' . $row, $text_left);
			$text_right = ('Phnom Penh , ' . Date('d F Y', strtotime($exam->date)) . PHP_EOL . 'Head of Academic and Research Affairs');
			$this->excel->getActiveSheet()->mergeCellsByColumnAndRow(($total_columns -8), $row, ($total_columns -1), ($row +2))->setCellValue(getColumn($last_column, 7, 'sub') . $row, $text_right);
			$this->excel->getActiveSheet()->getStyle('A' . $row . ':' . $last_column . $row)->applyFromArray($style_font_Monotype_16);
			$this->excel->getActiveSheet()->getStyle('A' . $row . ':' . $last_column . $row)->applyFromArray($style_alignment_center);

			$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(7);
			$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(27);
			$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(27);
			$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(10);
			$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
			$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(12);
			$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(12);
			for ($i=0; $i < ($total_columns -8); $i++) { 
				$this->excel->getActiveSheet()->getColumnDimension(getColumn('H', ($i +1), 'add'))->setWidth(15);
			}
			$total_rows = (8 + (!empty($exam_students) ? count($exam_students) : 0));
			for ($i=0; $i < $total_rows; $i++) { 
				$this->excel->getActiveSheet()->getRowDimension($i)->setRowHeight(40);	
			}
			for ($i=$total_rows; $i < ($total_rows +20); $i++) { 
				$this->excel->getActiveSheet()->getRowDimension($i)->setRowHeight(35);	
			}
			$this->excel->getActiveSheet()->getRowDimension(4)->setRowHeight(30);
			$this->excel->getActiveSheet()->getRowDimension(8)->setRowHeight(60);
			
			$filename = 'Result_student_examination_' . date('Y_m_d_H_i_s');
			$this->load->helper('excel');
            create_excel($this->excel, $filename);
    	}
    	$bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('school')), array('link' => '#', 'page' => lang('view_examination_student_mark')));
        $meta = array('page_title' => lang('view_examination_student_mark'), 'bc' => $bc);
        $this->page_construct('schools/view_exam_student_mark', $meta, $this->data);	
    }

    public function exam_report($biller_id = null, $academic_year = null)
    {
    	$this->bpas->checkPermissions('examanition_report');
		if($biller_id == "null"){
			$biller_id = null;
		}
		if($academic_year == "null"){
			$academic_year = null;
		}
        $this->data['error']          = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['academic_years'] = $this->schools_model->getAcademicYears();
		$this->data['academic_year']  = ($academic_year ? $academic_year : ($this->input->post('academic_year') ? $this->input->post('academic_year') : date('Y')));
		$this->data['billers']        = $this->site->getBillers();
		$this->data['biller']         = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
		$this->data['programs']       = $this->schools_model->getPrograms();

		$bc   = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('examanition_report')));
		$meta = array('page_title' => lang('examanition_report'), 'bc' => $bc);	
		$this->page_construct('schools/exam_report',$meta,$this->data);
    }

    public function getExamReport($biller_id = null, $academic_year = null, $xls = null)
    {
    	$this->bpas->checkPermissions('examinations', TRUE);
    	if($biller_id == "null"){
			$biller_id = null;
		}
		if($academic_year == "null"){
			$academic_year = null;
		}
		$biller        = $this->input->get('biller') ? $this->input->get('biller') : null;
        $academic_year = $this->input->get('academic_year') ? $this->input->get('academic_year') : date('Y');
        $reference_no  = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $title         = $this->input->get('title') ? $this->input->get('title') : null;
        $program       = $this->input->get('program') ? $this->input->get('program') : null;
        $semester      = $this->input->get('semester') ? $this->input->get('semester') : null;
        $note          = $this->input->get('note') ? $this->input->get('note') : null;
        $type          = $this->input->get('type') ? $this->input->get('type') : null;
        $start_date    = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date      = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date . ' 00:00:00');
            $end_date   = $this->bpas->fld($end_date . ' 23:59:00');
        }
        if ($xls) {
        	$this->db
	            ->select("
		            	CONCAT({$this->db->dbprefix('sh_exams')}.academic_year, ' - ', {$this->db->dbprefix('sh_exams')}.academic_year + 1) as academic_year,
		            	DATE_FORMAT({$this->db->dbprefix('sh_exams')}.date, '%Y-%m-%d %T') as date, 
		            	{$this->db->dbprefix('sh_exams')}.reference_no, 
		            	{$this->db->dbprefix('sh_exams')}.title,
		            	{$this->db->dbprefix('sh_programs')}.name AS program,
		            	IF ({$this->db->dbprefix('sh_exams')}.semester = 1, 'Semester I', 'Semester II') AS semester,
		            	CONCAT(
		            		'From ', DATE_FORMAT({$this->db->dbprefix('sh_exams')}.start_date, '%d/%m/%Y'), ' To ', 
		            		DATE_FORMAT({$this->db->dbprefix('sh_exams')}.end_date, '%d/%m/%Y')
		            	) AS duration,
		            	UPPER({$this->db->dbprefix('sh_exams')}.type) AS type,
		            	{$this->db->dbprefix('sh_exams')}.note,
		            	{$this->db->dbprefix('sh_exams')}.file
	            	")
	            ->from("sh_exams")
	            ->join("sh_programs", "sh_programs.id = sh_exams.program_id", "left")
	            ->group_by("{$this->db->dbprefix('sh_exams')}.id");

	        if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->db->where('sh_exams.biller_id =', $this->session->userdata('biller_id'));
			}
			if ($academic_year) {
				$this->db->where('sh_exams.academic_year', $academic_year);
	        }
			if ($biller_id) {
				$this->db->where('sh_exams.biller_id', $biller_id);
	        } 
			if ($biller) {
	            $this->db->where('sh_exams.biller_id', $biller);
	        }
	        if ($reference_no) {
	            $this->db->like('sh_exams.reference_no', $reference_no, 'both');
	        }
	        if ($title) {
	            $this->db->like('sh_exams.title', $title, 'both');
	        }
	        if ($program) {
	            $this->db->where('sh_exams.program_id', $program);
	        }
			if ($semester) {
	            $this->db->where('sh_exams.semester', $semester);
	        }
	        if ($note) {
	            $this->db->like('sh_exams.note', $note, 'both');
	        }
	        if ($type) {
	            $this->db->where('sh_exams.type', $type);
	        }
	        if ($start_date) {
	            $this->db->where($this->db->dbprefix('sh_exams') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
	        }
	        $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
				$this->load->library('excel');
				$this->excel->setActiveSheetIndex(0);
				$this->excel->getActiveSheet()->setTitle(lang('examinations_report'));
				$this->excel->getActiveSheet()->SetCellValue('A1', lang('academic_year'));
				$this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
				$this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
				$this->excel->getActiveSheet()->SetCellValue('D1', lang('title'));
				$this->excel->getActiveSheet()->SetCellValue('E1', lang('program'));
				$this->excel->getActiveSheet()->SetCellValue('F1', lang('semester'));
				$this->excel->getActiveSheet()->SetCellValue('G1', lang('duration'));
				$this->excel->getActiveSheet()->SetCellValue('H1', lang('type'));
				$this->excel->getActiveSheet()->SetCellValue('I1', lang('note'));
				$row = 2;
				foreach ($data as $data_row){
					$this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->academic_year);                   
					$this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));                        
					$this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
					$this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->title);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->program);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->semester);
					$this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->duration);
					$this->excel->getActiveSheet()->SetCellValue('H' . $row, strtoupper($data_row->type));
					$this->excel->getActiveSheet()->SetCellValue('I' . $row, strip_tags($data_row->note));
					$row++;
				}
				$this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
				$this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
				$filename = 'Examinations_report_' . date('Y_m_d_H_i_s');
				$this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				$this->load->helper('excel');
                create_excel($this->excel, $filename);
			}
			$this->session->set_flashdata('error', lang('nothing_found'));
			admin_redirect($_SERVER["HTTP_REFERER"]);
        } else {
			$this->load->library('datatables');
			$sub_q = " 
						(
							SELECT 
								{$this->db->dbprefix('sh_exam_schedules')}.exam_id,
								GROUP_CONCAT(DISTINCT CONCAT({$this->db->dbprefix('sh_exam_schedules')}.row_id, '_x_', {$this->db->dbprefix('sh_rooms')}.name) SEPARATOR '__') AS row_id
							FROM {$this->db->dbprefix('sh_exam_schedules')} 
							LEFT JOIN {$this->db->dbprefix('sh_rooms')} ON {$this->db->dbprefix('sh_rooms')}.id = {$this->db->dbprefix('sh_exam_schedules')}.room_id
							INNER JOIN (
								SELECT 
									{$this->db->dbprefix('sh_exam_schedules')}.exam_id,
									{$this->db->dbprefix('sh_exam_schedules')}.row_id
								FROM {$this->db->dbprefix('sh_exam_schedules')} 
								GROUP BY {$this->db->dbprefix('sh_exam_schedules')}.row_id
							) sch ON sch.exam_id = {$this->db->dbprefix('sh_exam_schedules')}.exam_id
							GROUP BY {$this->db->dbprefix('sh_exam_schedules')}.exam_id
						) bpas_ex_sch
					";
	        $this->datatables
	            ->select("
		            	CONCAT({$this->db->dbprefix('sh_exams')}.academic_year, ' - ', {$this->db->dbprefix('sh_exams')}.academic_year + 1) as academic_year,
		            	DATE_FORMAT({$this->db->dbprefix('sh_exams')}.date, '%Y-%m-%d %T') as date, 
		            	{$this->db->dbprefix('sh_exams')}.reference_no, 
		            	{$this->db->dbprefix('sh_exams')}.title,
		            	{$this->db->dbprefix('sh_programs')}.name AS program,
		            	IF ({$this->db->dbprefix('sh_exams')}.semester = 1, 'Semester I', 'Semester II') AS semester,
		            	CONCAT(
		            		'From ', DATE_FORMAT({$this->db->dbprefix('sh_exams')}.start_date, '%d/%m/%Y'), ' To ', 
		            		DATE_FORMAT({$this->db->dbprefix('sh_exams')}.end_date, '%d/%m/%Y')
		            	) AS duration,
		            	UPPER({$this->db->dbprefix('sh_exams')}.type) AS type,
		            	{$this->db->dbprefix('sh_exams')}.note,
		            	{$this->db->dbprefix('sh_exams')}.file,
		            	CONCAT({$this->db->dbprefix('sh_exams')}.id, '___', IFNULL({$this->db->dbprefix('ex_sch')}.row_id, '')) AS row_id
	            	")
	            ->from("sh_exams")
	            ->join($sub_q, "ex_sch.exam_id = sh_exams.id", 'left')
	            ->join("sh_programs", "sh_programs.id = sh_exams.program_id", "left")
	            ->group_by("{$this->db->dbprefix('sh_exams')}.id");

			if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sh_exams.biller_id =', $this->session->userdata('biller_id'));
			}
			if ($academic_year) {
				$this->datatables->where('sh_exams.academic_year', $academic_year);
	        }
			if ($biller_id) {
				$this->datatables->where('sh_exams.biller_id', $biller_id);
	        } 
			if ($biller) {
	            $this->datatables->where('sh_exams.biller_id', $biller);
	        }
	        if ($reference_no) {
	            $this->datatables->like('sh_exams.reference_no', $reference_no, 'both');
	        }
	        if ($title) {
	            $this->datatables->like('sh_exams.title', $title, 'both');
	        }
	        if ($program) {
	            $this->datatables->where('sh_exams.program_id', $program);
	        }
			if ($semester) {
	            $this->datatables->where('sh_exams.semester', $semester);
	        }
	        if ($note) {
	            $this->datatables->like('sh_exams.note', $note, 'both');
	        }
	        if ($type) {
	            $this->datatables->where('sh_exams.type', $type);
	        }
	        if ($start_date) {
	            $this->datatables->where($this->db->dbprefix('sh_exams') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
	        }
	        echo $this->datatables->generate();
        }
    }

    public function get_examschedules_ajax()
    {
    	$exam_id = $this->input->get('exam_id') ? $this->input->get('exam_id') : null;
    	if ($exam_id) {
    		$exam_schedules = $this->schools_model->getExamScheduleByExamID($exam_id);
    		$this->bpas->send_json($exam_schedules);
    	}
    	$this->bpas->send_json(false);
    }

    ////////////////////// Examinations 01/11/2022 //////////////////////

    public function getStudentCode_ajax($program_id = null) 
    {
    	$student_code = $this->site->getReference('sh_std_code');
    	if ($program_id) {
    		$program = $this->schools_model->getProgramByID($program_id);
    		$student_code = (($program->description ? strip_tags(html_entity_decode($program->description)) : '') . $student_code);
    	}
    	$this->bpas->send_json($student_code);
    }

    public function assign_class_teacher($biller_id = false)
	{	
		$this->bpas->checkPermissions('assign_class_teacher');	
		$this->data['billers'] = $this->site->getBillers();
        $this->data['biller'] = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
		$this->data['modal_js'] = $this->site->modal_js();
		$bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('schools'), 'page' => lang('schools')), array('link' => '#', 'page' => lang('assign_class_teacher')));
		$meta = array('page_title' => lang('assign_class_teacher'), 'bc' => $bc);
		$this->page_construct('schools/assign_class_teacher', $meta, $this->data);
	}
	public function getAssignClassTeacher($biller_id = false)
	{	
		$this->bpas->checkPermissions('assign_class_teacher');
        $this->load->library('datatables');
		$delete_link = "<a href='#' class='po' title='" . lang("delete_assign_class_teacher") . "' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger' href='" . admin_url('schools/delete_assign_class_teacher/$1') . "'>"
            . lang('i_m_sure') . "</a><button class='btn'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_assign_class_teacher') . "</a>";
		
        $action_link = '<div class="btn-group text-left"><button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'.lang("actions").'<span class="caret"></span></button>
					        <ul class="dropdown-menu pull-right" role="menu">
					        	<li class="hide"><a href="'.admin_url('schools/class_years/$1').'" ><i class="fa fa fa-clock-o"></i>'.lang('class_years').'</a></li>
								<li><a href="'.admin_url('schools/edit_assign_class_teacher/$1').'" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"><i class="fa fa fa-edit"></i>'.lang('edit_assign_class_teacher').'</a></li>
					            <li>'.$delete_link.'</li>
					        </ul>
					    </div>';
        $this->datatables
            ->select("
					{$this->db->dbprefix('sh_assign_class_teacher')}.id as id, 
					{$this->db->dbprefix('sh_classes')}.name as class,
					{$this->db->dbprefix('sh_sections')}.name as section,
					CONCAT({$this->db->dbprefix('sh_teachers')}.firstname, ' ', {$this->db->dbprefix('sh_teachers')}.lastname) as teacher")

            ->from("sh_assign_class_teacher")
			->join("sh_classes",'sh_classes.id = sh_assign_class_teacher.class_id',"left")
			->join("sh_sections","sh_sections.id = sh_assign_class_teacher.section_id","left")
			->join("sh_teachers","sh_teachers.id = sh_assign_class_teacher.teacher_id","left")
            ->add_column("Actions", $action_link, "id");

			// $this->datatables
            // ->select("
			// 		{$this->db->dbprefix('sh_classes')}.id as id, 
			// 		{$this->db->dbprefix('sh_classes')}.code,
			// 		{$this->db->dbprefix('sh_classes')}.name,
			// 		{$this->db->dbprefix('sh_programs')}.name as program,
			// 		{$this->db->dbprefix('sh_skills')}.name as skills,
			// 		{$this->db->dbprefix('sh_grades')}.name as grade,
			// 		{$this->db->dbprefix('custom_field')}.name as timeshift,
			// 		{$this->db->dbprefix('sh_classes')}.description")
            // ->from("sh_classes")
			// ->join("sh_programs","sh_programs.id = sh_classes.program_id","left")
			// ->join("sh_skills","sh_skills.id = sh_classes.skill_id","left")
			// ->join("sh_grades","sh_grades.id = sh_classes.grade_id","left")
			// ->join("custom_field","custom_field.id = sh_classes.timeshift_id","left")
            // ->add_column("Actions", $action_link, "id");
			
			if ($biller_id) {
				$this->datatables->where('sh_classes.biller_id', $biller_id);
			}else if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
				$this->datatables->where('sh_classes.biller_id =', $this->session->userdata('biller_id'));
			}
			
        echo $this->datatables->generate();
	}
	public function add_assign_class_teacher()
	{
		$this->bpas->checkPermissions('assign_class_teacher',true);
		$this->form_validation->set_rules('class_id', lang("class_id"), 'required');
		$this->form_validation->set_rules('section_id', lang("section_id"), 'required');	
		$post = $this->input->post();
		if ($this->form_validation->run() == true) {	
			$data = array(
				'biller_id'   => $post['biller'],
				'class_id'  => $post['class_id'],
				'section_id'  => $post['section_id'],
				'teacher_id'  => $post['teacher_id'],
				
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }	

		if ($this->form_validation->run() == true && $id = $this->schools_model->addAssignClasssTeacher($data)) {
            $this->session->set_flashdata('message', $this->lang->line("Assign_Class_Teacher_added"));
            admin_redirect("schools/assign_class_teacher");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['modal_js'] = $this->site->modal_js();
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['classes'] = $this->schools_model->getClasses();
			$this->data['sections'] = $this->schools_model->getSection();
			$this->data['teachers'] = $this->schools_model->getTeachers();
			$this->load->view($this->theme . 'schools/add_assign_class_teacher', $this->data);	
		}	
	}

	public function edit_assign_class_teacher($id = null)
	{		
		$this->bpas->checkPermissions('assign_class_teacher',true);
		$post = $this->input->post();		
		$assign_class_teacher_info = $this->schools_model->getAssignClassTeacherByID($id);	
		if ($post && $post['class_id'] != $assign_class_teacher_info->class_id) {
			$this->form_validation->set_rules('class_id', lang("class_id"), 'required');
        }
		$this->form_validation->set_rules('section_id', lang("section_id"), 'required');

		if ($this->form_validation->run() == true) 
		{						
			$data = array(
				'biller_id'   => $post['biller'],
				'class_id'  => $post['class_id'],
				'section_id'  => $post['section_id'],
				'teacher_id'  => $post['teacher_id'],
			);
		} elseif ($post) {
            $this->session->set_flashdata('error', validation_errors());
            admin_redirect($_SERVER['HTTP_REFERER']);
        }

		if ($this->form_validation->run() == true && $id = $this->schools_model->updateAssignClassTeacher($id,$data)) {
            $this->session->set_flashdata('message', $this->lang->line("class_updated"));
            admin_redirect("schools/assign_class_teacher");
        }else{
			$this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');          
			$this->data['id']=$id;
			$this->data['row'] = $assign_class_teacher_info;
			$this->data['billers'] = $this->site->getAllCompanies('biller');
			$this->data['classes'] = $this->schools_model->getClasses();
			$this->data['sections'] = $this->schools_model->getSection();
			$this->data['teachers'] = $this->schools_model->getTeachers();
			$this->data['modal_js'] = $this->site->modal_js();
			$this->load->view($this->theme . 'schools/edit_assign_class_teacher', $this->data);
		}			
	}
}