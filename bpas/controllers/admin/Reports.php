<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Reports extends MY_Controller
{
    public function __construct()
    {
        parent::__construct();
        if (!$this->loggedIn) {
            $this->session->set_userdata('requested_page', $this->uri->uri_string());
            $this->bpas->md('login');
        }

        $this->lang->admin_load('reports', $this->Settings->user_language);
        $this->lang->admin_load('pos', $this->Settings->user_language);
        $this->load->library('form_validation');
        $this->load->admin_model('auth_model');
        $this->load->admin_model('pos_model');
        $this->load->admin_model('reports_model');
        $this->load->admin_model('accounts_model');
        $this->load->admin_model('products_model');
        $this->load->admin_model('sales_model');
        $this->load->admin_model('companies_model');
        $this->load->admin_model('companies_model');
        $this->load->admin_model('site');
        $this->data['pb'] = [
            'cash'       => lang('cash'),
            'CC'         => lang('CC'),
            'Cheque'     => lang('Cheque'),
            'paypal_pro' => lang('paypal_pro'),
            'stripe'     => lang('stripe'),
            'gift_card'  => lang('gift_card'),
            'deposit'    => lang('deposit'),
            'authorize'  => lang('authorize'),
        ];
    } 
    public function adjustments($warehouse_id = null)
    {
        $this->bpas->checkPermissions('products');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('adjustments_report')]];
        $meta = ['page_title' => lang('adjustments_report'), 'bc' => $bc];
        $this->page_construct('reports/adjustments', $meta, $this->data);
    }
    public function adjustment_details ()
    {
        $this->bpas->checkPermissions('adjustments', TRUE);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('adjustment_details_report')));
        $meta = array('page_title' => lang('adjustment_details_report'), 'bc' => $bc);
        $this->page_construct('reports/adjustment_details', $meta, $this->data);
    }
    
    public function getAdjustmentDetailsReport ($pdf = null , $xls = null)
    {
        $this->bpas->checkPermissions('adjustments', TRUE);  
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if ($xls) {
            $this->db->select("
                                adjustments.date,
                                adjustments.reference_no,
                                warehouses.name as warehouse,
                                CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
                                products.name as product_name,
                                adjustment_items.type,
                                convert_qty(".$this->db->dbprefix('products').".id,".$this->db->dbprefix('adjustment_items').".quantity) as qty,
                                (".$this->db->dbprefix('adjustment_items').".quantity * IFNULL(".$this->db->dbprefix('adjustment_items').".real_unit_cost,0)) as total_cost,
                                adjustments.status,
                                adjustments.id", FALSE)
                        ->from('adjustments')
                        ->join('adjustment_items','adjustment_items.adjustment_id = adjustments.id','INNER')
                        ->join('warehouses','warehouses.id = adjustments.warehouse_id','LEFT')
                        ->join('products','products.id = adjustment_items.product_id','LEFT')
                        ->join('users','users.id = adjustments.created_by','LEFT')
                        ->group_by('adjustment_items.id');

            if ($user) {
                $this->db->where('adjustments.created_by', $user);
            }
            if ($product) {
                $this->db->where('adjustment_items.product_id', $product);
            }           
            if ($warehouse) {
                $this->db->where('adjustments.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->where('adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('adjustments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('adjustments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('adjustments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
    
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('adjustment_details_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('type'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('quantity'));
                
                if($this->Owner || $this->Admin || $this->session->userdata('show_cost')){ 
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('total_cost'));
                }
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
                
                $row = 2;
                $grand_cost = 0;
                foreach ($data as $data_row){

                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->warehouse);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, lang($data_row->type));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->remove_tag($data_row->qty));
                    if($this->Owner || $this->Admin || $this->session->userdata('show_cost')){ 
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->total_cost));
                        $grand_cost += $data_row->total_cost;
                    }
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
                    $row++;
                }
                if($this->Owner || $this->Admin || $this->session->userdata('show_cost')){ 
                    $this->excel->getActiveSheet()->getStyle("H" . $row . ":H" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($grand_cost));
                }
                
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

                $filename = 'adjustment_details_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
            
        } else{  
            $this->load->library('datatables');
            $this->datatables
                            ->select("
                                    adjustments.date,
                                    adjustments.reference_no,
                                    warehouses.name as warehouse,
                                    CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
                                    products.name as product_name,
                                    adjustment_items.type,
                                    convert_qty(".$this->db->dbprefix('products').".id,".$this->db->dbprefix('adjustment_items').".quantity) as qty,
                                    (".$this->db->dbprefix('adjustment_items').".quantity * IFNULL(".$this->db->dbprefix('adjustment_items').".real_unit_cost,0)) as total_cost,
                                    adjustments.status,
                                    adjustments.id", FALSE)
                            ->from('adjustments')
                            ->join('adjustment_items','adjustment_items.adjustment_id = adjustments.id','INNER')
                            ->join('warehouses','warehouses.id = adjustments.warehouse_id','LEFT')
                            ->join('products','products.id = adjustment_items.product_id','LEFT')
                            ->join('users','users.id = adjustments.created_by','LEFT')
                            ->group_by('adjustment_items.id');

            if ($user) {
                $this->datatables->where('adjustments.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('adjustment_items.product_id', $product);
            }           
            if ($warehouse) {
                $this->datatables->where('adjustments.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->where('adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('adjustments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('adjustments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('adjustments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            echo $this->datatables->generate();
            
        }
    }
    public function booking($product_id = null)
    {
        $this->bpas->checkPermissions('products'); 
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses(); 
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('booking_report')]];
        $meta = ['page_title' => lang('booking_report'), 'bc' => $bc];
        $this->page_construct('reports/booking', $meta, $this->data);
    }

    public function blocking($product_id = null)
    {
        $this->bpas->checkPermissions('products'); 
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses(); 
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('blocking_report')]];
        $meta = ['page_title' => lang('blocking_report'), 'bc' => $bc];
        $this->page_construct('reports/blocking', $meta, $this->data);
    }

    public function properties($warehouse_id = NULL)
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        } else {
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $this->session->userdata('warehouse_id');
            $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->site->getWarehouseByID($this->session->userdata('warehouse_id')) : NULL;
        }
        $this->data['products'] = $this->site->getProducts('property');
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['supplier'] = $this->input->get('supplier') ? $this->site->getCompanyByID($this->input->get('supplier')) : NULL;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('property')));
        $meta = array('page_title' => lang('property'), 'bc' => $bc);
        $this->page_construct('property/property_report', $meta, $this->data);
    }

    public function best_sellers__($warehouse_id = null)
    {
        $this->bpas->checkPermissions('products'); 
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $y1                  = date('Y', strtotime('-1 month'));
        $m1                  = date('m', strtotime('-1 month'));
        $m1sdate             = $y1 . '-' . $m1 . '-01 00:00:00';
        $m1edate             = $y1 . '-' . $m1 . '-' . days_in_month($m1, $y1) . ' 23:59:59';
        $this->data['m1']    = date('M Y', strtotime($y1 . '-' . $m1));
        $this->data['m1bs']  = $this->reports_model->getBestSeller($m1sdate, $m1edate, $warehouse_id);
        $y2                  = date('Y', strtotime('-2 months'));
        $m2                  = date('m', strtotime('-2 months'));
        $m2sdate             = $y2 . '-' . $m2 . '-01 00:00:00';
        $m2edate             = $y2 . '-' . $m2 . '-' . days_in_month($m2, $y2) . ' 23:59:59';
        $this->data['m2']    = date('M Y', strtotime($y2 . '-' . $m2));
        $this->data['m2bs']  = $this->reports_model->getBestSeller($m2sdate, $m2edate, $warehouse_id);
        $y3                  = date('Y', strtotime('-3 months'));
        $m3                  = date('m', strtotime('-3 months'));
        $m3sdate             = $y3 . '-' . $m3 . '-01 23:59:59';
        $this->data['m3']    = date('M Y', strtotime($y3 . '-' . $m3)) . ' - ' . $this->data['m1'];
        $this->data['m3bs']  = $this->reports_model->getBestSeller($m3sdate, $m1edate, $warehouse_id);
        $y4                  = date('Y', strtotime('-12 months'));
        $m4                  = date('m', strtotime('-12 months'));
        $m4sdate             = $y4 . '-' . $m4 . '-01 23:59:59';
        $this->data['m4']    = date('M Y', strtotime($y4 . '-' . $m4)) . ' - ' . $this->data['m1'];
        $this->data['m4bs']  = $this->reports_model->getBestSeller($m4sdate, $m1edate, $warehouse_id);
        // $this->bpas->print_arrays($this->data['m1bs'], $this->data['m2bs'], $this->data['m3bs'], $this->data['m4bs']);
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['warehouse']  = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : null;
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('best_sellers')]];
        $meta                     = ['page_title' => lang('best_sellers'), 'bc' => $bc];
        $this->page_construct('reports/best_sellers', $meta, $this->data);
    }

    public function best_sellers($warehouse_id = null)
    {
        $this->bpas->checkPermissions('products');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $y1                  = date('Y');
        $m1                  = date('m');
        $m1sdate             = $y1 . '-' . $m1 . '-01 00:00:00';
        $m1edate             = $y1 . '-' . $m1 . '-' . days_in_month($m1, $y1) . ' 23:59:59';
        $this->data['m1']    = date('M Y', strtotime($y1 . '-' . $m1));
        $this->data['m1bs']  = $this->reports_model->getBestSeller($m1sdate, $m1edate, $warehouse_id);

        $y2                  = date('Y', strtotime('-1 month'));
        $m2                  = date('m', strtotime('-1 month'));
        $m2sdate             = $y2 . '-' . $m2 . '-01 00:00:00';
        $m2edate             = $y2 . '-' . $m2 . '-' . days_in_month($m2, $y2) . ' 23:59:59';
        $this->data['m2']    = date('M Y', strtotime($y2 . '-' . $m2));
        $this->data['m2bs']  = $this->reports_model->getBestSeller($m2sdate, $m2edate, $warehouse_id);
   
        $y3                  = date('Y', strtotime('-2 months'));
        $m3                  = date('m', strtotime('-2 months'));
        $m3sdate             = $y3 . '-' . $m3 . '-01 00:00:00';
        $m3edate             = $y3 . '-' . $m3 . '-' . days_in_month($m3, $y3) . ' 23:59:59';
        $this->data['m3']    = date('M Y', strtotime($y3 . '-' . $m3));
        $this->data['m3bs']  = $this->reports_model->getBestSeller($m3sdate, $m3edate, $warehouse_id);

        $y4                  = date('Y', strtotime('-3 months'));
        $m4                  = date('m', strtotime('-3 months'));
        $m4sdate             = $y4 . '-' . $m4 . '-01 00:00:00';
        $m4edate             = $y4 . '-' . $m4 . '-' . days_in_month($m4, $y4) . ' 23:59:59';
        $this->data['m4']    = date('M Y', strtotime($y4 . '-' . $m4));
        $this->data['m4bs']  = $this->reports_model->getBestSeller($m4sdate, $m4edate, $warehouse_id);

        // $this->bpas->print_arrays($this->data['m1bs'], $this->data['m2bs'], $this->data['m3bs'], $this->data['m4bs']);
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['warehouse']  = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : null;
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('best_sellers')]];
        $meta                     = ['page_title' => lang('best_sellers'), 'bc' => $bc];
        $this->page_construct('reports/best_sellers', $meta, $this->data);
    }
    
    public function saleman_actions()
    {
        if (!$this->Owner) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            redirect($_SERVER['HTTP_REFERER']);
        }
        $this->form_validation->set_rules('form_action', lang('form_action'), 'required');
        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('staff'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('Username'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('Email'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('Phone'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('Commission'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('Commission_product'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('Total_commission'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('Amount'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('Paid'));
                    $this->excel->getActiveSheet()->SetCellValue('I1', lang('Balance'));
                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $user = $this->site->getUser($id);
                        $staff_amount = $this->site->getStaffById($user->id);
                        $act = ['0' => 'inactive', '1' => 'active'];
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $user->username);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $user->email);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $user->phone);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $user->commission);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $user->commission_product);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, ($user->commission + $user->commission_product));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, ($staff_amount->total_amount == 0 ? 0 : $staff_amount->total_amount));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, ($staff_amount->paid == 0 ? 0 : $staff_amount->paid ));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($staff_amount->total_amount - $staff_amount->paid));
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(25);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'users_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', lang('no_user_selected'));
                redirect($_SERVER['HTTP_REFERER']);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER['HTTP_REFERER']);
        }
    }

    public function brands()
    {
        $this->bpas->checkPermissions('products');
        $this->data['error']      = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['brands']     = $this->site->getAllBrands();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        if ($this->input->post('start_date')) {
            $dt = 'From ' . $this->input->post('start_date') . ' to ' . $this->input->post('end_date');
        } else {
            $dt = 'Till ' . $this->input->post('end_date');
        }
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('brands_report')]];
        $meta = ['page_title' => lang('brands_report'), 'bc' => $bc];
        $this->page_construct('reports/brands', $meta, $this->data);
    }

    public function categories()
    {
        $this->bpas->checkPermissions('products');
        $this->data['error']      = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        if ($this->input->post('start_date')) {
            $dt = 'From ' . $this->input->post('start_date') . ' to ' . $this->input->post('end_date');
        } else {
            $dt = 'Till ' . $this->input->post('end_date');
        }
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('categories_report')]];
        $meta = ['page_title' => lang('categories_report'), 'bc' => $bc];
        $this->page_construct('reports/categories', $meta, $this->data);
    }

    public function customer_report($user_id)
    {
        $this->bpas->checkPermissions('customers', true);
        if (!$user_id) {
            $this->session->set_flashdata('error', lang('no_customer_selected'));
            admin_redirect('reports/customers');
        }
        $this->data['sales']         = $this->reports_model->getSalesTotals($user_id);
        $this->data['total_sales']   = $this->reports_model->getCustomerSales($user_id);
        $this->data['total_quotes']  = $this->reports_model->getCustomerQuotes($user_id);
        $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
        $this->data['users']         = $this->reports_model->getStaff();
        $this->data['warehouses']    = $this->site->getAllWarehouses();
        $this->data['billers']       = $this->site->getAllCompanies('biller');
        $this->data['user_id']       = $user_id;
        $this->data['error']         = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('customers_report')]];
        $meta = ['page_title' => lang('customers_report'), 'bc' => $bc];
        $this->page_construct('reports/customer_report', $meta, $this->data);
    }

    public function borrower_report($user_id = null)
    {
        $this->bpas->checkPermissions('customers', true);
        if (!$user_id) {
            $this->session->set_flashdata('error', lang('no_customer_selected'));
            admin_redirect('reports/customers');
        }
        $this->data['sales']         = $this->reports_model->getSalesTotals($user_id);
        $this->data['total_sales']   = $this->reports_model->getCustomerSales($user_id);
        $this->data['total_quotes']  = $this->reports_model->getCustomerQuotes($user_id);
        $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
        $this->data['users']         = $this->reports_model->getStaff();
        $this->data['warehouses']    = $this->site->getAllWarehouses();
        $this->data['currencies']   = $this->site->getAllCurrencies();
        $this->data['products']   = $this->site->getProducts();
        $this->data['billers']       = $this->site->getAllCompanies('biller');
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['user_id'] = $user_id;

        $bc                    = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('customers_report')]];
        $meta                  = ['page_title' => lang('customers_report'), 'bc' => $bc];
        $this->page_construct('reports/borrower_report', $meta, $this->data);
    }
    
    public function customers()
    {
        $this->bpas->checkPermissions('customers');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('customers_report')]];
        $meta = ['page_title' => lang('customers_report'), 'bc' => $bc];
        $this->page_construct('reports/customers', $meta, $this->data);
    }

    public function leads_report()
    {
        $this->bpas->checkPermissions('leads');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']         = $this->site->getAllProject();
        $this->data['zones']      = $this->site->getAllZones_Order_Group();
        $this->data['agents']           = $this->site->getAllSalemans($this->Settings->group_saleman_id);
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('customers_report')]];
        $meta = ['page_title' => lang('leads_report'), 'bc' => $bc];
        $this->page_construct('reports/leads_report', $meta, $this->data);
    }

    public function daily_purchases($biller_id = null, $year = null, $month = null, $pdf = null, $user_id = null)
    {
        $this->bpas->checkPermissions();
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_id = $this->session->userdata('warehouse_id');
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
            $biller_id = $this->session->userdata('biller_id');
        }
        if (!$year) {
            $year = date('Y');
        }
        if (!$month) {
            $month = date('m');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $config              = [
            'show_next_prev' => true,
            'next_prev_url'  => admin_url('reports/daily_purchases/' . ($biller_id ? str_replace(",", "_", $biller_id) : 0)),
            'month_type'     => 'long',
            'day_type'       => 'long',
        ];
        $config['template'] = '{table_open}<div class="table-responsive"><table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
        {heading_row_start}<tr>{/heading_row_start}
        {heading_previous_cell}<th><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
        {heading_title_cell}<th colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
        {heading_next_cell}<th><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
        {heading_row_end}</tr>{/heading_row_end}
        {week_row_start}<tr>{/week_row_start}
        {week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
        {week_row_end}</tr>{/week_row_end}
        {cal_row_start}<tr class="days">{/cal_row_start}
        {cal_cell_start}<td class="day">{/cal_cell_start}
        {cal_cell_content}
        <div class="day_num">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content}
        {cal_cell_content_today}
        <div class="day_num highlight">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content_today}
        {cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
        {cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
        {cal_cell_blank}&nbsp;{/cal_cell_blank}
        {cal_cell_end}</td>{/cal_cell_end}
        {cal_row_end}</tr>{/cal_row_end}
        {table_close}</table></div>{/table_close}';

        $this->load->library('calendar', $config);
        $purchases = $user_id ? $this->reports_model->getStaffDailyPurchases($user_id, $year, $month, null, str_replace("_", ",", $biller_id)) : $this->reports_model->getDailyPurchases($year, $month, null, str_replace("_", ",", $biller_id));

        if (!empty($purchases)) {
            foreach ($purchases as $purchase) {
                $daily_purchase[$purchase->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang('discount') . '</td><td>' . $this->bpas->formatMoney($purchase->discount) . '</td></tr><tr><td>' . lang('shipping') . '</td><td>' . $this->bpas->formatMoney($purchase->shipping) . '</td></tr><tr><td>' . lang('product_tax') . '</td><td>' . $this->bpas->formatMoney($purchase->tax1) . '</td></tr><tr><td>' . lang('order_tax') . '</td><td>' . $this->bpas->formatMoney($purchase->tax2) . '</td></tr><tr><td>' . lang('total') . '</td><td>' . $this->bpas->formatMoney($purchase->total) . '</td></tr></table>';
            }
        } else {
            $daily_purchase = [];
        }

        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_purchase);
        $this->data['year']     = $year;
        $this->data['month']    = $month;
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/daily', $this->data, true);
            $name = lang('daily_purchases') . '_' . $year . '_' . $month . '.pdf';
            $html = str_replace('<p class="introtext">' . lang('reports_calendar_text') . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $this->data['warehouses']    = $this->site->getAllWarehouses();
        $this->data['warehouse_id']  = isset($warehouse_id) ? $warehouse_id : null;
        $this->data['sel_warehouse'] = (isset($warehouse_id) && $warehouse_id) ? $this->site->getMultiWarehouseByID($warehouse_id) : null;

        $this->data['billers']       = $this->site->getAllCompanies('biller');
        $this->data['warehouse_id']  = isset($biller_id) ? $biller_id : null;
        $this->data['sel_biller']    = (isset($biller_id) && $biller_id) ? $this->reports_model->getMultiBillerByID($biller_id) : null;
        $bc                          = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('daily_purchases_report')]];
        $meta                        = ['page_title' => lang('daily_purchases_report'), 'bc' => $bc];
        $this->page_construct('reports/daily_purchases', $meta, $this->data);
    }

    public function daily_sales($biller_id = null, $year = null, $month = null, $pdf = null, $user_id = null)
    {
        $this->bpas->checkPermissions();
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_id = $this->session->userdata('warehouse_id');
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
            $biller_id = $this->session->userdata('biller_id');
        }
        if (!$year) {
            $year = date('Y');
        }
        if (!$month) {
            $month = date('m');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $config              = [
            'show_next_prev' => true,
            'next_prev_url'  => admin_url('reports/daily_sales/' . ($biller_id ? str_replace(",", "_", $biller_id) : 0)),
            'month_type'     => 'long',
            'day_type'       => 'long',
        ];

        $config['template'] = '{table_open}<div class="table-responsive"><table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
        {heading_row_start}<tr>{/heading_row_start}
        {heading_previous_cell}<th><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
        {heading_title_cell}<th colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
        {heading_next_cell}<th><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
        {heading_row_end}</tr>{/heading_row_end}
        {week_row_start}<tr>{/week_row_start}
        {week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
        {week_row_end}</tr>{/week_row_end}
        {cal_row_start}<tr class="days">{/cal_row_start}
        {cal_cell_start}<td class="day">{/cal_cell_start}
        {cal_cell_content}
        <div class="day_num">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content}
        {cal_cell_content_today}
        <div class="day_num highlight">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content_today}
        {cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
        {cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
        {cal_cell_blank}&nbsp;{/cal_cell_blank}
        {cal_cell_end}</td>{/cal_cell_end}
        {cal_row_end}</tr>{/cal_row_end}
        {table_close}</table></div>{/table_close}';

        $this->load->library('calendar', $config);
        $sales = $user_id ? $this->reports_model->getStaffDailySales($user_id, $year, $month, null, str_replace("_", ",", $biller_id)) : $this->reports_model->getDailySales($year, $month, null, str_replace("_", ",", $biller_id));

        if (!empty($sales)) {
            foreach ($sales as $sale) {
                $daily_sale[$sale->date] = "
                <table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'>
                <tr><td>
                    " . lang('discount') . '
                </td><td>
                    ' . $this->bpas->formatMoney($sale->discount) . '
                </td></tr><tr><td>
                    ' . lang('shipping') . '
                </td><td>
                    ' . $this->bpas->formatMoney($sale->shipping) . '
                </td></tr><tr><td>
                    ' . lang('product_tax') . '
                </td><td>
                    ' . $this->bpas->formatMoney($sale->tax1) . '
                </td></tr><tr><td>
                    ' . lang('order_tax') . '
                </td><td>
                    ' . $this->bpas->formatMoney($sale->tax2) . '
                </td></tr><tr><td>
                    ' . lang('total') . '
                </td><td>
                    ' . $this->bpas->formatMoney($sale->total) . '
                </td></tr></table>';
            }
        } else {
            $daily_sale = [];
        }

        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
        $this->data['year']     = $year;
        $this->data['month']    = $month;
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/daily', $this->data, true);
            $name = lang('daily_sales') . '_' . $year . '_' . $month . '.pdf';
            $html = str_replace('<p class="introtext">' . lang('reports_calendar_text') . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        
        $this->data['billers']       = $this->site->getAllCompanies('biller');
        $this->data['warehouses']    = $this->site->getAllWarehouses();
        $this->data['biller_id']     = isset($biller_id) ? $biller_id : null;
        $this->data['warehouse_id']  = isset($warehouse_id) ? $warehouse_id : null;
        $this->data['sel_warehouse'] = (isset($warehouse_id) && $warehouse_id) ? $this->site->getMultiWarehouseByID($warehouse_id) : null;
        $this->data['sel_biller']    = (isset($biller_id) && $biller_id)       ? $this->reports_model->getMultiBillerByID($biller_id) : null;
        $bc                          = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('daily_sales_report')]];
        $meta                        = ['page_title' => lang('daily_sales_report'), 'bc' => $bc];
        $this->page_construct('reports/daily', $meta, $this->data);
    }

    public function expenses($biller_id = null)
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $user = $this->site->getUser($this->session->userdata('user_id'));
        if ($this->Settings->multi_biller) {
            $user_biller_id = $user->multi_biller;
        } else {
            $user_biller_id = $user->biller_id;
        }
        $count = explode(',', $user_biller_id);
        if (($this->Owner || $this->Admin) || !$user_biller_id) {
            $this->data['billers']   = $this->site->getAllCompanies('biller');
            $this->data['biller_id'] = $biller_id;
            $this->data['biller']    = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        } else {
            if (count($count) > 1) {
                $this->data['billers']   = $this->site->getAllCompanies('biller');
            } else {
                $this->data['billers']   = null;
            }
            $this->data['count_billers'] = $count;
            $this->data['biller_id']     = $biller_id;
            $this->data['biller']        = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        }

        $this->data['user_biller_id'] = $user_biller_id;
        $this->data['multi_biller']   = $user_biller_id ? $this->site->getMultiBillerByID($user_biller_id) : null;
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['categories'] = $this->reports_model->getExpenseCategories();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('expenses')]];
        $meta                     = ['page_title' => lang('expenses'), 'bc' => $bc];
        $this->page_construct('reports/expenses', $meta, $this->data);
    }
    public function expenses_monthly($biller_id = null)
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $user = $this->site->getUser($this->session->userdata('user_id'));
        if ($this->Settings->multi_biller) {
            $user_biller_id = $user->multi_biller;
        } else {
            $user_biller_id = $user->biller_id;
        }
        $count = explode(',', $user_biller_id);
        if (($this->Owner || $this->Admin) || !$user_biller_id) {
            $this->data['billers']   = $this->site->getAllCompanies('biller');
            $this->data['biller_id'] = $biller_id;
            $this->data['biller']    = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        } else {
            if (count($count) > 1) {
                $this->data['billers']   = $this->site->getAllCompanies('biller');
            } else {
                $this->data['billers']   = null;
            }
            $this->data['count_billers'] = $count;
            $this->data['biller_id']     = $biller_id;
            $this->data['biller']        = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        }

        $this->data['user_biller_id'] = $user_biller_id;
        $this->data['multi_biller']   = $user_biller_id ? $this->site->getMultiBillerByID($user_biller_id) : null;
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['categories'] = $this->reports_model->getExpenseCategories();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('expenses')]];
        $meta                     = ['page_title' => lang('expenses'), 'bc' => $bc];
        $this->page_construct('reports/expenses_monthly', $meta, $this->data);
    }
    public function expiry_alerts($warehouse_id = null)
    {   
        $this->bpas->checkPermissions('expiry_alerts');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses']   = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            // $this->data['warehouse']    = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : null;
            $this->data['warehouse']    = $warehouse_id ? $this->site->getMultiWarehouseByID($warehouse_id) : null;
        } else {
            $user                       = $this->site->getUser();
            $this->data['warehouses']   = $user->warehouse_id ? $this->site->getMultiWarehouseByID($user->warehouse_id) : null;
            $this->data['warehouse_id'] = $warehouse_id;
            // $this->data['warehouse']    = $user->warehouse_id ? $this->site->getWarehouseByID($user->warehouse_id) : null;
            $this->data['warehouse']    = $user->warehouse_id ? $this->site->getMultiWarehouseByID($user->warehouse_id) : null;
        }
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('product_expiry_alerts')]];
        $meta = ['page_title' => lang('product_expiry_alerts'), 'bc' => $bc];
        $this->page_construct('reports/expiry_alerts', $meta, $this->data);
    }

    public function getExpiryAlerts($warehouse_id = null, $preview = null)
    {
        $this->bpas->checkPermissions('expiry_alerts', true);
        $expiry_alert_days    = $this->Settings->expiry_alert_days;
        $settings_expiry_date = (!empty($expiry_alert_days) && $expiry_alert_days != '' && $expiry_alert_days !== 0) ? date('Y-m-d', strtotime(" +{$expiry_alert_days} days ")) : null;

        // $date = date('Y-m-d', strtotime('+3 months'));

        if (!$this->Owner && !$warehouse_id) {
            $user         = $this->site->getUser();
            $warehouse_id = str_replace(",", "_", $user->warehouse_id); 
        }

        $product     = $this->input->get('product') ? $this->input->get('product') : null;
        $category    = $this->input->get('category') ? $this->input->get('category') : null;
        $brand       = $this->input->get('brand') ? $this->input->get('brand') : null;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : null;
        $start_date  = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date    = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $warehouse   = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;

        $start_date = $start_date ? $this->bpas->fsd($start_date) : '';
        $end_date   = $end_date ? $this->bpas->fsd($end_date) : '';

        if($preview){
            if ($warehouse_id) {
                $w = explode('_', $warehouse_id);
                $this->db
                    ->select('image, product_code, product_name, quantity_balance, warehouses.name, expiry')
                    ->from('purchase_items')
                    ->join('products', 'products.id=purchase_items.product_id', 'left')
                    ->join('warehouses', 'warehouses.id=purchase_items.warehouse_id', 'left')
                    ->where_in('warehouse_id', $w)
                    ->where('expiry !=', null)->where('expiry !=', '0000-00-00')
                    ->where('quantity_balance >', 0);
            } else {
                $this->db
                    ->select('image, product_code, product_name, quantity_balance, warehouses.name, expiry')
                    ->from('purchase_items')
                    ->join('products', 'products.id=purchase_items.product_id', 'left')
                    ->join('warehouses', 'warehouses.id=purchase_items.warehouse_id', 'left')
                    ->where('expiry !=', null)->where('expiry !=', '0000-00-00')
                    ->where('quantity_balance >', 0);
            }
            $this->db->group_by('products.id, purchase_items.expiry, warehouses.id');
            $this->db->order_by('products.code, warehouses.name, purchase_items.expiry');
            if ($this->Settings->expiry_alert_by == 1) {
                if ($settings_expiry_date) {
                    $this->db->where($this->db->dbprefix('purchase_items') . '.expiry <=', $settings_expiry_date);
                }
            } else {
                $this->db->where("
                    {$this->db->dbprefix('products')}.expiry_alert_days IS NOT NULL AND 
                    {$this->db->dbprefix('products')}.expiry_alert_days != '' AND
                    {$this->db->dbprefix('products')}.expiry_alert_days != 0 AND
                    {$this->db->dbprefix('purchase_items')}.expiry <= DATE_ADD(CURDATE(), INTERVAL {$this->db->dbprefix('products')}.expiry_alert_days DAY)  
                ");
            }
            if ($warehouse) {
                $this->db->where($this->db->dbprefix('warehouses') . '.id', $warehouse);
            }
            if ($product) {
                $this->db->where($this->db->dbprefix('products') . '.id', $product);
            }
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
            }
            if ($subcategory) {
                $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
            }
            if ($brand) {
                $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('purchase_items') . '.expiry BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('expenses_budget_report')]];
                $meta = ['page_title' => lang('expenses_budget_report'), 'bc' => $bc];
                $this->page_construct('reports/expiry_alerts_preview', $meta, $this->data);
            }
        } else {
            $this->load->library('datatables');
            if ($warehouse_id) {
                $w = explode('_', $warehouse_id);
                $this->datatables
                    ->select('image, product_code, product_name, SUM(quantity_balance) as quantity_balance, warehouses.name, expiry')
                    ->from('purchase_items')
                    ->join('products', 'products.id=purchase_items.product_id', 'left')
                    ->join('warehouses', 'warehouses.id=purchase_items.warehouse_id', 'left')
                    ->where_in('warehouse_id', $w)
                    ->where('expiry !=', null)->where('expiry !=', '0000-00-00')
                    ->where('purchase_items.quantity_balance >', 0);
            } else {
                $this->datatables
                    ->select('image, product_code, product_name, SUM(quantity_balance) as quantity_balance, warehouses.name, expiry')
                    ->from('purchase_items')
                    ->join('products', 'products.id=purchase_items.product_id', 'left')
                    ->join('warehouses', 'warehouses.id=purchase_items.warehouse_id', 'left')
                    ->where('expiry !=', null)->where('expiry !=', '0000-00-00')
                    ->where('purchase_items.quantity_balance >', 0);
            }
            $this->datatables->group_by('products.id, purchase_items.expiry, warehouses.id');
            $this->datatables->order_by('products.code, warehouses.name, purchase_items.expiry');
            
            if ($this->Settings->expiry_alert_by == 1) {
                if ($settings_expiry_date) {
                    $this->datatables->where($this->db->dbprefix('purchase_items') . '.expiry <=', $settings_expiry_date);
                }
            } else {
                $this->datatables->where("
                    {$this->db->dbprefix('products')}.expiry_alert_days IS NOT NULL AND 
                    {$this->db->dbprefix('products')}.expiry_alert_days != '' AND
                    {$this->db->dbprefix('products')}.expiry_alert_days != 0 AND
                    {$this->db->dbprefix('purchase_items')}.expiry <= DATE_ADD(CURDATE(), INTERVAL {$this->db->dbprefix('products')}.expiry_alert_days DAY)  
                ");
            }

            if ($warehouse) {
                $this->datatables->where($this->db->dbprefix('warehouses') . '.id', $warehouse);
            }
            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . '.id', $product);
            }
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . '.category_id', $category);
            }
            if ($subcategory) {
                $this->datatables->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
            }
            if ($brand) {
                $this->datatables->where($this->db->dbprefix('products') . '.brand', $brand);
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('purchase_items') . '.expiry BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }

    public function get_deposits($company_id = null)
    {
        $this->bpas->checkPermissions('customers', true);
        $this->load->library('datatables');
        $this->datatables
            ->select("date, amount, paid_by, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, note", false)
            ->from('deposits')
            ->join('users', 'users.id=deposits.created_by', 'left')
            ->where($this->db->dbprefix('deposits') . '.company_id', $company_id);
        echo $this->datatables->generate();
    }
    public function getAdjustmentReport_old($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);

        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {
           
            $this->db->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, {$this->db->dbprefix('adjustments')}.reference_no as reference_no , {$this->db->dbprefix('warehouses')}.name as wh_name, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, {$this->db->dbprefix('adjustments')}.note as note, {$this->db->dbprefix('products')}.name as product_name, {$this->db->dbprefix('products')}.code as product_code, (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END) as product_qty, {$this->db->dbprefix('adjustment_items')}.expiry as expiry_date")
            ->from('adjustment_items')
            ->join('adjustments', 'adjustments.id = adjustment_items.adjustment_id', 'left')
            ->join('products' , 'products.id = adjustment_items.product_id' , 'left')
            ->join('warehouses' , 'warehouses.id = adjustments.warehouse_id' ,'left')
            ->join('users' , 'users.id = adjustments.created_by','left');
            
            if ($user) {
                $this->db->where('adjustments.created_by', $user);
            }
            if ($product) {
                $this->db->where('adjustment_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('adjustment_items.serial_no', $serial);
            }
            if ($warehouse) {
                $this->db->where('adjustment_items.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('adjustments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row){
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

     
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('adjustments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('products'). ' ' . lang('name') );
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('products'). ' ' . lang('code'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('expiry_date'));


                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->wh_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, strip_tags($this->bpas->decode_html($data_row->note)));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->product_code);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->product_qty);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->expiry_date != '' ? $this->bpas->hrsd($data_row->expiry_date) : ''));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'adjustments_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $ai = "(SELECT adjustment_id, product_id, {$this->db->dbprefix('adjustment_items')}.serial_no, SUM(CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END) as item_qty, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.code, '__', (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END)) SEPARATOR '___') as item_nane from {$this->db->dbprefix('adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('adjustment_items')}.product_id ";
            if ($product || $serial) {
                $ai .= ' WHERE ';
            }
            if ($product) {
                $ai .= " {$this->db->dbprefix('adjustment_items')}.product_id = {$product} ";
            }
            if ($product && $serial) {
                $ai .= ' AND ';
            }
            if ($serial) {
                $ai .= " {$this->db->dbprefix('adjustment_items')}.serial_no LIKe '%{$serial}%' ";
            }
            $ai .= " GROUP BY {$this->db->dbprefix('adjustment_items')}.adjustment_id ) FAI";
            $this->load->library('datatables');
            $this->datatables
            
            ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference_no, warehouses.name as wh_name, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, note,FAI.item_qty as iqty, FAI.item_nane as iname, {$this->db->dbprefix('adjustments')}.id as id", false)
            ->from('adjustments')
            ->join($ai, 'FAI.adjustment_id=adjustments.id', 'left')
            ->join('users', 'users.id=adjustments.created_by', 'left')
            ->join('warehouses', 'warehouses.id=adjustments.warehouse_id', 'left');

            if ($user) {
                $this->datatables->where('adjustments.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FAI.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('FAI.serial_no', $serial);
            }
            if ($warehouse) {
                $this->datatables->where('adjustments.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('adjustments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }

    public function getAdjustmentReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);

        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {
           
            $this->db->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, {$this->db->dbprefix('adjustments')}.reference_no as reference_no , {$this->db->dbprefix('warehouses')}.name as wh_name, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, {$this->db->dbprefix('adjustments')}.note as note, {$this->db->dbprefix('products')}.name as product_name, {$this->db->dbprefix('products')}.code as product_code, (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END) as product_qty, {$this->db->dbprefix('adjustment_items')}.expiry as expiry_date")
            ->from('adjustment_items')
            ->join('adjustments', 'adjustments.id = adjustment_items.adjustment_id', 'left')
            ->join('products' , 'products.id = adjustment_items.product_id' , 'left')
            ->join('warehouses' , 'warehouses.id = adjustments.warehouse_id' ,'left')
            ->join('users' , 'users.id = adjustments.created_by','left');
            
            if ($user) {
                $this->db->where('adjustments.created_by', $user);
            }
            if ($product) {
                $this->db->where('adjustment_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('adjustment_items.serial_no', $serial);
            }
            if ($warehouse) {
                $this->db->where('adjustment_items.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('adjustments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row){
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

     
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('adjustments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('products'). ' ' . lang('name') );
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('products'). ' ' . lang('code'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('expiry_date'));


                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->wh_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, strip_tags($this->bpas->decode_html($data_row->note)));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->product_code);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->product_qty);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->expiry_date != '' ? $this->bpas->hrsd($data_row->expiry_date) : ''));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'adjustments_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $ai = "( SELECT adjustment_id, product_id, {$this->db->dbprefix('adjustment_items')}.serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '__', (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END)) SEPARATOR '___') as item_nane from {$this->db->dbprefix('adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('adjustment_items')}.product_id ";
            if ($product || $serial) {
                $ai .= ' WHERE ';
            }
            if ($product) {
                $ai .= " {$this->db->dbprefix('adjustment_items')}.product_id = {$product} ";
            }
            if ($product && $serial) {
                $ai .= ' AND ';
            }
            if ($serial) {
                $ai .= " {$this->db->dbprefix('adjustment_items')}.serial_no LIKe '%{$serial}%' ";
            }
            $ai .= " GROUP BY {$this->db->dbprefix('adjustment_items')}.adjustment_id ) FAI";
            $this->load->library('datatables');
            $this->datatables
            
            ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference_no, warehouses.name as wh_name, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, note, FAI.item_nane as iname, {$this->db->dbprefix('adjustments')}.id as id", false)
            ->from('adjustments')
            ->join($ai, 'FAI.adjustment_id=adjustments.id', 'left')
            ->join('users', 'users.id=adjustments.created_by', 'left')
            ->join('warehouses', 'warehouses.id=adjustments.warehouse_id', 'left');

            if ($user) {
                $this->datatables->where('adjustments.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FAI.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('FAI.serial_no', $serial);
            }
            if ($warehouse) {
                $this->datatables->where('adjustments.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('adjustments.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('adjustments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }
    // public function getBookingReport($pdf = null, $xls = null)
    // {
    //     $this->bpas->checkPermissions('products', true);

    //     $product      = $this->input->get('product') ? $this->input->get('product') : null;
    //     $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
    //     $user         = $this->input->get('user') ? $this->input->get('user') : null;
    //     $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
    //     $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
    //     $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
    //     $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;
    //     // date("Y-m-d", strtotime($this->input->post('current_date'))),
    //     if ($start_date) {
    //         $start_date = date("Y-m-d", strtotime($start_date));
    //         $end_date   = date("Y-m-d", strtotime($end_date));
    //     }

    //     if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
    //         $user = $this->session->userdata('user_id');
    //     }

    //     if ($pdf || $xls) {
    //         // $ai = "( SELECT adjustment_id, product_id, {$this->db->dbprefix('adjustment_items')}.serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, ' (', (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END), ')') SEPARATOR '\n') as item_nane from {$this->db->dbprefix('adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('adjustment_items')}.product_id GROUP BY {$this->db->dbprefix('adjustment_items')}.adjustment_id ) FAI";

    //         // $this->db->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference_no, warehouses.name as wh_name, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, note, FAI.item_nane as iname, {$this->db->dbprefix('adjustments')}.id as id", false)
    //         // ->from('adjustments')
    //         // ->join($ai, 'FAI.adjustment_id=adjustments.id', 'left')
    //         // ->join('users', 'users.id=adjustments.created_by', 'left')
    //         // ->join('warehouses', 'warehouses.id=adjustments.warehouse_id', 'left');
    //     $this->db->select("DATE_FORMAT(current_date, '%Y-%m-%d %T') as c_date,DATE_FORMAT(expiry_date, '%Y-%m-%d %T') as e_date, CONCAT({$this->db->dbprefix('products')}.code, ' - ', {$this->db->dbprefix('products')}.name) as description, CONCAT({$this->db->dbprefix('companies')}.name, ' ', {$this->db->dbprefix('companies')}.company) as customer, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, {$this->db->dbprefix('audit_booking')}.note as note, booking_price, {$this->db->dbprefix('audit_booking')}.status as status, {$this->db->dbprefix('audit_booking')}.id as id", false)
    //         ->from('audit_booking')
    //         ->join('users', 'users.id=audit_booking.create_by', 'left')
    //         ->join('products', 'products.id=audit_booking.product_id', 'left')
    //         ->join('companies', 'companies.id=audit_booking.customer', 'left');
    //         if ($user) {
    //             $this->db->where('audit_booking.create_by', $user);
    //         }
    //         if ($product) {
    //             $this->db->where("{$this->db->dbprefix('audit_booking')}.product_id", $product);
    //         }
    //         // if ($serial) {
    //         //     $this->db->like('FAI.serial_no', $serial);
    //         // }
    //         // if ($warehouse) {
    //         //     $this->db->where('adjustments.warehouse_id', $warehouse);
    //         // }
    //         // if ($reference_no) {
    //         //     $this->db->like('adjustments.reference_no', $reference_no, 'both');
    //         // }
    //         if ($start_date) {
    //             $this->db->where($this->db->dbprefix('audit_booking') . '.current_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
    //         }

    //         $q = $this->db->get();
    //         if ($q->num_rows() > 0) {
    //             foreach (($q->result()) as $row) {
    //                 $data[] = $row;
    //             }
    //         } else {
    //             $data = null;
    //         }

    //         if (!empty($data)) {
    //             $this->load->library('excel');
    //             $this->excel->setActiveSheetIndex(0);
    //             $this->excel->getActiveSheet()->setTitle(lang('booking_report'));
    //             $this->excel->getActiveSheet()->SetCellValue('A1', lang('currency_date'));
    //             $this->excel->getActiveSheet()->SetCellValue('B1', lang('expiry_date'));
    //             $this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));
    //             $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
    //             $this->excel->getActiveSheet()->SetCellValue('E1', lang('created_by'));
    //             $this->excel->getActiveSheet()->SetCellValue('F1', lang('note'));
    //             $this->excel->getActiveSheet()->SetCellValue('G1', lang('booking_price'));
    //             $this->excel->getActiveSheet()->SetCellValue('H1', lang('status'));


    //             $row = 2;
    //             foreach ($data as $data_row) {
    //                 $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->c_date));
    //                 $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->e_date));
    //                 $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->description);
    //                 $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
    //                 $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->created_by);
    //                 $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->decode_html($data_row->note));
    //                 $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->booking_price);
    //                 $status = "success";
    //                 if($data_row->status == 1){
    //                     $status = "deadline";
    //                 }
    //                 $this->excel->getActiveSheet()->SetCellValue('H' . $row, $status);
    //                 $row++;
    //             }

    //             $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
    //             $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
    //             $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
    //             $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
    //             $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
    //             $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
    //             $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
    //             $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
    //             $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
    //             $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
    //             $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
    //             $filename = 'Booking_report';
    //             $this->load->helper('excel');
    //             create_excel($this->excel, $filename);
    //         }
    //         $this->session->set_flashdata('error', lang('nothing_found'));
    //         redirect($_SERVER['HTTP_REFERER']);
    //         } else {
    //         // $ai = "( SELECT adjustment_id, product_id, {$this->db->dbprefix('adjustment_items')}.serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '__', (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END)) SEPARATOR '___') as item_nane from {$this->db->dbprefix('adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('adjustment_items')}.product_id ";
    //         // if ($product || $serial) {
    //         //     $ai .= ' WHERE ';
    //         // }
    //         // if ($product) {
    //         //     $ai .= " {$this->db->dbprefix('adjustment_items')}.product_id = {$product} ";
    //         // }
    //         // if ($product && $serial) {
    //         //     $ai .= ' AND ';
    //         // }
    //         // if ($serial) {
    //         //     $ai .= " {$this->db->dbprefix('adjustment_items')}.serial_no LIKe '%{$serial}%' ";
    //         // }
    //         // $ai .= " GROUP BY {$this->db->dbprefix('adjustment_items')}.adjustment_id ) FAI";
    //         $this->load->library('datatables');
    //         $this->datatables
    //         ->select("DATE_FORMAT(current_date, '%Y-%m-%d %T') as c_date,DATE_FORMAT(expiry_date, '%Y-%m-%d %T') as e_date, CONCAT({$this->db->dbprefix('products')}.code, ' - ', {$this->db->dbprefix('products')}.name) as description, CONCAT({$this->db->dbprefix('companies')}.name, ' ', {$this->db->dbprefix('companies')}.company) as customer, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, {$this->db->dbprefix('audit_booking')}.note as note, booking_price, {$this->db->dbprefix('audit_booking')}.status as status, {$this->db->dbprefix('audit_booking')}.id as id", false)
    //         ->from('audit_booking')
    //         ->join('users', 'users.id=audit_booking.create_by', 'left')
    //         ->join('products', 'products.id=audit_booking.product_id', 'left')
    //         ->join('companies', 'companies.id=audit_booking.customer', 'left');
    //         if ($user) {
    //             $this->db->where('audit_booking.create_by', $user);
    //         }
    //         if ($product) {
    //             $this->db->where("{$this->db->dbprefix('audit_booking')}.product_id", $product);
    //         }
    //          if ($start_date) {
    //             $this->db->where($this->db->dbprefix('audit_booking') . '.current_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
    //         }
    //         // ->join('warehouses', 'warehouses.id=adjustments.warehouse_id', 'left');

    //         // if ($user) {
    //         //     $this->datatables->where('adjustments.created_by', $user);
    //         // }
    //         // if ($product) {
    //         //     $this->datatables->where('FAI.product_id', $product);
    //         // }
    //         // if ($serial) {
    //         //     $this->datatables->like('FAI.serial_no', $serial);
    //         // }
    //         // if ($warehouse) {
    //         //     $this->datatables->where('adjustments.warehouse_id', $warehouse);
    //         // }
    //         // if ($reference_no) {
    //         //     $this->datatables->like('adjustments.reference_no', $reference_no, 'both');
    //         // }
    //         // if ($start_date) {
    //         //     $this->datatables->where($this->db->dbprefix('adjustments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
    //         // }

    //         echo $this->datatables->generate();
    //     }
    // }
    public function getBookingReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);

        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;
        // date("Y-m-d", strtotime($this->input->post('current_date'))),
        if ($start_date) {
            $start_date = date("Y-m-d", strtotime($start_date));
            $end_date   = date("Y-m-d", strtotime($end_date));
        }

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {
            $this->db->select("DATE_FORMAT(date, '%Y-%m-%d %T') as c_date,DATE_FORMAT(expired_paid, '%Y-%m-%d %T') as e_date, CONCAT({$this->db->dbprefix('products')}.code, ' - ', {$this->db->dbprefix('products')}.name) as description, CONCAT({$this->db->dbprefix('companies')}.name, ' ', {$this->db->dbprefix('companies')}.company) as customer, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, {$this->db->dbprefix('audit_booking')}.note as note, paid, {$this->db->dbprefix('audit_booking')}.status as status, {$this->db->dbprefix('audit_booking')}.id as id", false)
            ->from('audit_booking')
            ->join('users', 'users.id=audit_booking.created_by', 'left')
            ->join('products', 'products.id=audit_booking.product_id', 'left')
            ->join('companies', 'companies.id=audit_booking.customer_id', 'left');
            if ($user) {
                $this->db->where('audit_booking.created_by', $user);
            }
            if ($product) {
                $this->db->where("{$this->db->dbprefix('audit_booking')}.product_id", $product);
            }

            if ($start_date) {
                $this->db->where($this->db->dbprefix('audit_booking') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('booking_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('currency_date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('expiry_date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('booking_price'));
                // $this->excel->getActiveSheet()->SetCellValue('H1', lang('status'));


                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->c_date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->e_date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->description);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->decode_html($data_row->note));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid);
                    $status = "success";
                    if($data_row->status == 1){
                        $status = "deadline";
                    }
                    // $this->excel->getActiveSheet()->SetCellValue('H' . $row, $status);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'Booking_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            // $ai = "( SELECT adjustment_id, product_id, {$this->db->dbprefix('adjustment_items')}.serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '__', (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END)) SEPARATOR '___') as item_nane from {$this->db->dbprefix('adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('adjustment_items')}.product_id ";
            // if ($product || $serial) {
            //     $ai .= ' WHERE ';
            // }
            // if ($product) {
            //     $ai .= " {$this->db->dbprefix('adjustment_items')}.product_id = {$product} ";
            // }
            // if ($product && $serial) {
            //     $ai .= ' AND ';
            // }
            // if ($serial) {
            //     $ai .= " {$this->db->dbprefix('adjustment_items')}.serial_no LIKe '%{$serial}%' ";
            // }
            // $ai .= " GROUP BY {$this->db->dbprefix('adjustment_items')}.adjustment_id ) FAI";
            $this->load->library('datatables');
            $this->datatables
            ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as c_date,DATE_FORMAT(expired_paid, '%Y-%m-%d %T') as e_date, CONCAT({$this->db->dbprefix('products')}.code, ' - ', {$this->db->dbprefix('products')}.name) as description, CONCAT({$this->db->dbprefix('companies')}.name, ' ', {$this->db->dbprefix('companies')}.company) as customer, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, {$this->db->dbprefix('audit_booking')}.note as note, paid, {$this->db->dbprefix('audit_booking')}.astatus as status, {$this->db->dbprefix('audit_booking')}.id as id", false)
            ->from('audit_booking')
            ->join('users', 'users.id=audit_booking.created_by', 'left')
            ->join('products', 'products.id=audit_booking.product_id', 'left')
            ->join('companies', 'companies.id=audit_booking.customer_id', 'left');
            if ($user) {
                $this->db->where('audit_booking.created_by', $user);
            }
            if ($product) {
                $this->db->where("{$this->db->dbprefix('audit_booking')}.product_id", $product);
            }
             if ($start_date) {
                $this->db->where($this->db->dbprefix('audit_booking') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            // ->join('warehouses', 'warehouses.id=adjustments.warehouse_id', 'left');

            // if ($user) {
            //     $this->datatables->where('adjustments.created_by', $user);
            // }
            // if ($product) {
            //     $this->datatables->where('FAI.product_id', $product);
            // }
            // if ($serial) {
            //     $this->datatables->like('FAI.serial_no', $serial);
            // }
            // if ($warehouse) {
            //     $this->datatables->where('adjustments.warehouse_id', $warehouse);
            // }
            // if ($reference_no) {
            //     $this->datatables->like('adjustments.reference_no', $reference_no, 'both');
            // }
            // if ($start_date) {
            //     $this->datatables->where($this->db->dbprefix('adjustments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            // }

            echo $this->datatables->generate();
        }
    }
    public function getBlockingReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);

        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;

        if ($start_date) {
            $start_date = date("Y-m-d", strtotime($start_date));
            $end_date   = date("Y-m-d", strtotime($end_date));
        }

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {
            // $ai = "( SELECT adjustment_id, product_id, {$this->db->dbprefix('adjustment_items')}.serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, ' (', (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END), ')') SEPARATOR '\n') as item_nane from {$this->db->dbprefix('adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('adjustment_items')}.product_id GROUP BY {$this->db->dbprefix('adjustment_items')}.adjustment_id ) FAI";

            $this->db->select("DATE_FORMAT(current_date, '%Y-%m-%d %T') as c_date,DATE_FORMAT(expiry_date, '%Y-%m-%d %T') as e_date, CONCAT({$this->db->dbprefix('products')}.code, ' - ', {$this->db->dbprefix('products')}.name) as description, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by,{$this->db->dbprefix('audit_blocking')}.note as note,{$this->db->dbprefix('audit_blocking')}.status as status, {$this->db->dbprefix('audit_blocking')}.id as id", false)
            ->from('audit_blocking')
            ->join('users', 'users.id=audit_blocking.create_by', 'left')
            ->join('products', 'products.id=audit_blocking.product_id', 'left');
            if ($user) {
                $this->db->where('audit_blocking.create_by', $user);
            }
            if ($product) {
                $this->db->where("{$this->db->dbprefix('audit_blocking')}.product_id", $product);
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('audit_blocking') . '.current_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
               $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('blocking_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('currency_date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('expiry_date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->c_date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->e_date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->description);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->decode_html($data_row->note));
                    $status = "Action";
                    if($data_row->status == 1){
                        $status = "Dealine";
                    }
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $status);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(40);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'blocking_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            // $ai = "( SELECT adjustment_id, product_id, {$this->db->dbprefix('adjustment_items')}.serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('products')}.name, '__', (CASE WHEN {$this->db->dbprefix('adjustment_items')}.type  = 'subtraction' THEN (0-{$this->db->dbprefix('adjustment_items')}.quantity) ELSE {$this->db->dbprefix('adjustment_items')}.quantity END)) SEPARATOR '___') as item_nane from {$this->db->dbprefix('adjustment_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id={$this->db->dbprefix('adjustment_items')}.product_id ";
            // if ($product || $serial) {
            //     $ai .= ' WHERE ';
            // }
            // if ($product) {
            //     $ai .= " {$this->db->dbprefix('adjustment_items')}.product_id = {$product} ";
            // }
            // if ($product && $serial) {
            //     $ai .= ' AND ';
            // }
            // if ($serial) {
            //     $ai .= " {$this->db->dbprefix('adjustment_items')}.serial_no LIKe '%{$serial}%' ";
            // }
             $this->load->library('datatables');
            $this->datatables
            ->select("DATE_FORMAT(current_date, '%Y-%m-%d %T') as c_date,DATE_FORMAT(expiry_date, '%Y-%m-%d %T') as e_date, CONCAT({$this->db->dbprefix('products')}.code, ' - ', {$this->db->dbprefix('products')}.name) as description, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, {$this->db->dbprefix('audit_blocking')}.note as note,{$this->db->dbprefix('audit_blocking')}.status as status, {$this->db->dbprefix('audit_blocking')}.id as id", false)
            ->from('audit_blocking')
            ->join('users', 'users.id=audit_blocking.create_by', 'left')
            ->join('products', 'products.id=audit_blocking.product_id', 'left');
            if ($user) {
                $this->db->where('audit_blocking.create_by', $user);
            }
            if ($product) {
                $this->db->where("{$this->db->dbprefix('audit_blocking')}.product_id", $product);
            }
             if ($start_date) {
                $this->db->where($this->db->dbprefix('audit_blocking') . '.current_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }
    public function getBrandsReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);
        $warehouse  = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $brand      = $this->input->get('brand') ? $this->input->get('brand') : null;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date   = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        $pp = "( SELECT pp.brand as brand, SUM( pi.quantity ) purchasedQty, SUM( pi.subtotal ) totalPurchase from {$this->db->dbprefix('products')} pp
                left JOIN " . $this->db->dbprefix('purchase_items') . ' pi ON pp.id = pi.product_id
                left join ' . $this->db->dbprefix('purchases') . ' p ON p.id = pi.purchase_id ';
        $sp = "( SELECT sp.brand as brand, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale from {$this->db->dbprefix('products')} sp
                left JOIN " . $this->db->dbprefix('sale_items') . ' si ON sp.id = si.product_id
                left join ' . $this->db->dbprefix('sales') . ' s ON s.id = si.sale_id ';
        if ($start_date || $warehouse) {
            $pp .= ' WHERE ';
            $sp .= ' WHERE ';
            if ($start_date) {
                $start_date = $this->bpas->fld($start_date);
                $end_date   = $end_date ? $this->bpas->fld($end_date) : date('Y-m-d');
                $pp .= " p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
                $sp .= " s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
                if ($warehouse) {
                    $pp .= ' AND ';
                    $sp .= ' AND ';
                }
            }
            if ($warehouse) {
                $pp .= " pi.warehouse_id = '{$warehouse}' ";
                $sp .= " si.warehouse_id = '{$warehouse}' ";
            }
        }
        $pp .= ' GROUP BY pp.brand ) PCosts';
        $sp .= ' GROUP BY sp.brand ) PSales';

        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('brands') . '.name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit', false)
                ->from('brands')
                ->join($sp, 'brands.id = PSales.brand', 'left')
                ->join($pp, 'brands.id = PCosts.brand', 'left')
                ->group_by('brands.id, brands.name')
                ->order_by('brands.code', 'asc');

            if ($brand) {
                $this->db->where($this->db->dbprefix('brands') . '.id', $brand);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('brands_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('brands'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('profit_loss'));

                $row  = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $pl   = 0;
                foreach ($data as $data_row) {
                    $profit = $data_row->TotalSales - $data_row->TotalPurchase;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $profit);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $pl   += $profit;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('B' . $row . ':F' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $pl);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                $filename = 'brands_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('brands') . '.id as id, ' . $this->db->dbprefix('brands') . '.name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit', false)
                ->from('brands')
                ->join($sp, 'brands.id = PSales.brand', 'left')
                ->join($pp, 'brands.id = PCosts.brand', 'left');

            if ($brand) {
                $this->datatables->where('brands.id', $brand);
            }
            $this->datatables->group_by('brands.id, brands.name, PSales.SoldQty, PSales.totalSale, PCosts.purchasedQty, PCosts.totalPurchase');
            $this->datatables->unset_column('id');
            echo $this->datatables->generate();
        }
    }

    public function getCategoriesReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);
        $warehouse  = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $category   = $this->input->get('category') ? $this->input->get('category') : null;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date   = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        $pp = "( SELECT pp.category_id as category, SUM( pi.quantity ) purchasedQty, SUM( pi.subtotal ) totalPurchase from {$this->db->dbprefix('products')} pp
                left JOIN " . $this->db->dbprefix('purchase_items') . ' pi ON pp.id = pi.product_id
                left join ' . $this->db->dbprefix('purchases') . ' p ON p.id = pi.purchase_id ';
        $sp = "( SELECT sp.category_id as category, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale from {$this->db->dbprefix('products')} sp
                left JOIN " . $this->db->dbprefix('sale_items') . ' si ON sp.id = si.product_id
                left join ' . $this->db->dbprefix('sales') . ' s ON s.id = si.sale_id ';
        if ($start_date || $warehouse) {
            $pp .= ' WHERE ';
            $sp .= ' WHERE ';
            if ($start_date) {
                $start_date = $this->bpas->fld($start_date);
                $end_date   = $end_date ? $this->bpas->fld($end_date) : date('Y-m-d');
                $pp .= " p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
                $sp .= " s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
                if ($warehouse) {
                    $pp .= ' AND ';
                    $sp .= ' AND ';
                }
            }
            if ($warehouse) {
                $pp .= " pi.warehouse_id = '{$warehouse}' ";
                $sp .= " si.warehouse_id = '{$warehouse}' ";
            }
        }
        $pp .= ' GROUP BY pp.category_id ) PCosts';
        $sp .= ' GROUP BY sp.category_id ) PSales';

        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('categories') . '.code, ' . $this->db->dbprefix('categories') . '.name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit', false)
                ->from('categories')
                ->join($sp, 'categories.id = PSales.category', 'left')
                ->join($pp, 'categories.id = PCosts.category', 'left')
                ->group_by('categories.id, categories.code, categories.name')
                ->order_by('categories.code', 'asc');

            if ($category) {
                $this->db->where($this->db->dbprefix('categories') . '.id', $category);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('categories_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('category_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('category_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('profit_loss'));

                $row  = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $pl   = 0;
                foreach ($data as $data_row) {
                    $profit = $data_row->TotalSales - $data_row->TotalPurchase;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $profit);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $pl   += $profit;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('C' . $row . ':G' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $pl);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                $filename = 'categories_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('categories') . '.id as cid, ' . $this->db->dbprefix('categories') . '.code, ' . $this->db->dbprefix('categories') . '.name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit', false)
                ->from('categories')
                ->join($sp, 'categories.id = PSales.category', 'left')
                ->join($pp, 'categories.id = PCosts.category', 'left');

            if ($category) {
                $this->datatables->where('categories.id', $category);
            }
            $this->datatables->group_by('categories.id, categories.code, categories.name, PSales.SoldQty, PSales.totalSale, PCosts.purchasedQty, PCosts.totalPurchase');
            $this->datatables->unset_column('cid');
            echo $this->datatables->generate();
        }
    }

    public function getCustomerLogins($id = null)
    {
        if ($this->input->get('login_start_date')) {
            $login_start_date = $this->input->get('login_start_date');
        } else {
            $login_start_date = null;
        }
        if ($this->input->get('login_end_date')) {
            $login_end_date = $this->input->get('login_end_date');
        } else {
            $login_end_date = null;
        }
        if ($login_start_date) {
            $login_start_date = $this->bpas->fld($login_start_date);
            $login_end_date   = $login_end_date ? $this->bpas->fld($login_end_date) : date('Y-m-d H:i:s');
        }
        $this->load->library('datatables');
        $this->datatables
            ->select('login, ip_address, time')
            ->from('user_logins')
            ->where('customer_id', $id);
        if ($login_start_date) {
            $this->datatables->where('time BETWEEN "' . $login_start_date . '" and "' . $login_end_date . '"');
        }
        echo $this->datatables->generate();
    }

    public function getCustomers($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('customers', true);
        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $customer     = $this->input->get('customer') ? $this->input->get('customer') : null;
        $phone        = $this->input->get('phone') ? $this->input->get('phone') : null;
        $address      = $this->input->get('address') ? $this->input->get('address') : null;
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project      = $this->input->get('project') ? $this->input->get('project') : null;
        $sale_type    = $this->input->get('sale_type') ? $this->input->get('sale_type') : null;
        $sale_status  = $this->input->get('sale_status') ? $this->input->get('sale_status') : null;

        $sources      = $this->input->get('sources') ? $this->input->get('sources') : null;
        $age          = $this->input->get('age') ? $this->input->get('age') : null;
        $gender       = $this->input->get('gender') ? $this->input->get('gender') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('companies') . '.id as id, company, name, phone, address, count(' . $this->db->dbprefix('sales') . '.id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance', false)
                ->from('companies')
                ->join('sales', 'sales.customer_id=companies.id')
                ->where('companies.group_name', 'customer')
                ->order_by('companies.company asc')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
                $total = 0;
                $amount_total = 0;
                $paid_total = 0; 
                $balance_total = 0; 
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatMoney($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatMoney($data_row->balance));
                   $total += $data_row->total;  
                    $amount_total += $data_row->total_amount;
                    $paid_total += $data_row->paid;
                    $balance_total +=$data_row->balance;
                    $row++;
                }
                 $this->excel->getActiveSheet()->getStyle('E' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $total);
                $this->excel->getActiveSheet()->getStyle('F' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $amount_total);
                $this->excel->getActiveSheet()->getStyle('G' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $paid_total);
                $this->excel->getActiveSheet()->getStyle('H' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $balance_total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'customers_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $s = '( SELECT customer_id, count(' . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance from {$this->db->dbprefix('sales')} GROUP BY {$this->db->dbprefix('sales')}.customer_id ) FS";

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . '.id as id, company, name, phone, address, FS.total, FS.total_amount, FS.paid, FS.balance', false)
                ->from('companies')
                ->join($s, 'FS.customer_id=companies.id')
                ->where('companies.group_name', 'customer')
                ->group_by('companies.id')
                ->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_report') . "' href='" . admin_url('reports/customer_report/$1') . "'><span class='label label-primary'>" . lang('view_report') . '</span></a></div>', 'id')
                ->unset_column('id');
            echo $this->datatables->generate();
        }
    }
    public function getLeads($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('leads', true);
        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $agent         = $this->input->get('agent') ? $this->input->get('agent') : null;
        $customer     = $this->input->get('customer') ? $this->input->get('customer') : null;
        $phone        = $this->input->get('phone') ? $this->input->get('phone') : null;
        $address      = $this->input->get('address') ? $this->input->get('address') : null;
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project      = $this->input->get('project') ? $this->input->get('project') : null;
        $sale_type    = $this->input->get('sale_type') ? $this->input->get('sale_type') : null;
        $sale_status  = $this->input->get('sale_status') ? $this->input->get('sale_status') : null;

        $sources      = $this->input->get('sources') ? $this->input->get('sources') : null;
        $age          = $this->input->get('age') ? $this->input->get('age') : null;
        $gender       = $this->input->get('gender') ? $this->input->get('gender') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }

        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('companies') . '.id as id, company, companies.name, phone, address, gender, age, custom_field.name as source,containers.container_name', false)
                ->from('companies')
                ->join('containers', 'containers.container_id=companies.lead_group', 'left')
                ->join('custom_field', 'custom_field.id=companies.source', 'left')
                ->where('companies.group_name', 'lead')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('gender'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('age'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('source'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('group'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->gender);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->age);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->source);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->container_name);
                    $row++;
                }
   
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = lang('leads_report');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
      

            $this->load->library('datatables');
            $this->datatables
            ->select($this->db->dbprefix('companies') . '.id as id, 
            '.$this->db->dbprefix('companies') . '.company as company,
            '.$this->db->dbprefix('companies') . '.name as name,
              '.$this->db->dbprefix('projects') . '.project_name as project_name,
              '.$this->db->dbprefix('companies') . '.products as products,
              '.$this->db->dbprefix('companies') . '.phone as phone,
              '.$this->db->dbprefix('companies') . '.email as email,
              '.$this->db->dbprefix('companies') . '.gender as gender,
              '.$this->db->dbprefix('companies') . '.age as age,
              '.$this->db->dbprefix('custom_field') . '.name as source,
              '.$this->db->dbprefix('containers') . '.container_name as container_name,
                ', false)
                ->from('companies')
                ->join('containers', 'containers.container_id=companies.lead_group', 'left')
                ->join('projects', 'projects.project_id=companies.projects', 'left')
                ->join('custom_field', 'custom_field.id=companies.source', 'left')
                ->where('companies.group_name', 'lead')
                ->group_by('companies.id')
                ->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('history') . "' href='" . admin_url('reports/customer_report/$1') . "'><span class='label label-primary'>" . lang('history') . '</span></a></div>', 'id')
                ->unset_column('id');

            if ($user) {
                $this->datatables->where('companies.created_by', $user);
            }
            if ($phone) {
                $this->datatables->where('companies.phone', $phone);
            }
            if ($product) {
                // search product in multi product
                $this->db->where('FIND_IN_SET('.$product.', bpas_companies.products)');
                //  $this->datatables->where('companies.products', $product);
            }
            if ($project) {
                $this->datatables->where('companies.projects', $project);
            }
            if ($customer) {
                $this->datatables->where('companies.name', $customer);
            }
            if ($address) {
                $this->datatables->where('companies.email', $address);
            }
            //------------
            if ($sources) {
                $this->datatables->where('companies.source', $sources);
            }
            if ($gender) {
                $this->datatables->where('companies.gender', $gender);
            }
            if ($age) {
                $rage_age = explode("_",$age);
                $this->datatables->where('companies.age >= "' . $rage_age[0] . '"');
                $this->datatables->where('companies.age <= "' . $rage_age[1] . '"');
            }
            //----------
            // if ($start_date) {
            //     $this->datatables->where('FS.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            // }
   
            
            echo $this->datatables->generate();
        }
    }
    public function getExpensesReport($biller_id = null, $pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('expenses');

        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $category     = $this->input->get('category') ? $this->input->get('category') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $note         = $this->input->get('note') ? $this->input->get('note') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        $search_biller = $biller_id ? $biller_id : null;
        if ((!$this->Owner && !$this->Admin) && !$biller_id) {
            $user_log = $this->site->getUser($this->session->userdata('user_id'));
            if ($this->Settings->multi_biller) {
                $biller_id = $user_log->multi_biller;
            } else {
                $biller_id = $user_log->biller_id;
            }
        } 
        if ($pdf || $xls) {
            $this->db
                ->select("date, reference, 
                    IF (
                        parent_cat.id IS NOT NULL,
                        CONCAT(parent_cat.name, '/', {$this->db->dbprefix('expense_categories')}.name),
                        {$this->db->dbprefix('expense_categories')}.name
                    ) as category,
                    amount, expenses.note, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as created_by, attachment, {$this->db->dbprefix('expenses')}.id as id", false)
                ->from('expenses')
                ->join('users', 'users.id=expenses.created_by', 'left')
                ->join('expense_categories', 'expense_categories.id=expenses.category_id', 'left')
                ->join('expense_categories parent_cat', 'parent_cat.id=expense_categories.parent_id', 'left')
                ->group_by('expenses.id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('created_by', $this->session->userdata('user_id'));
            }
            if ($biller_id) {
                $this->db->where('expenses.biller_id IN ('.$biller_id.')');
            }
            if ($note) {
                $this->db->like('expenses.note', $note, 'both');
            }
            if ($reference_no) {
                $this->db->like('reference', $reference_no, 'both');
            }
            if ($category) {
                $this->db->where("expenses.category_id = {$category} OR parent_cat.id = {$category}");
            }
            if ($warehouse) {
                $this->db->where('expenses.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->db->where('created_by', $user);
            }
            if ($start_date) {
                $this->db->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $biller = $this->site->getBillerDetails($search_biller);
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $style_font_TNR = array(
                    'font' => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 12,
                        'name'  => 'Time New Romance'
                    ),
                );
                $objDrawing = new PHPExcel_Worksheet_Drawing();
                $logo = $_SERVER['DOCUMENT_ROOT'] . '/' . dirname($_SERVER['SCRIPT_NAME']) . '/assets/uploads/logos/' . (!empty($biller) ? $biller->logo : $this->Settings->logo);
                $objDrawing->setPath($logo);
                $objDrawing->setOffsetX(8);
                $objDrawing->setOffsetY(50);
                $objDrawing->setCoordinates('B1');
                $objDrawing->setHeight(75);
                $objDrawing->setWorksheet($this->excel->getActiveSheet());
                $this->excel->getActiveSheet()->SetCellValue('D2', (!empty($biller) ? $biller->company . ' ' . $biller->name : ''));    
                $this->excel->getActiveSheet()->getStyle('D2')->applyFromArray($style_font_TNR);
                $this->excel->getActiveSheet()->mergeCells('D3:E3')->setCellValue('D3', (!empty($biller) ? strip_tags($biller->address) : ''));
                $this->excel->getActiveSheet()->getRowDimension('3')->setRowHeight(30);
                $this->excel->getActiveSheet()->getStyle('D3')->getAlignment()->setWrapText(true);
                $this->excel->getActiveSheet()->SetCellValue('C6', lang('expenses_report'));
                $this->excel->getActiveSheet()->getStyle('C6')->applyFromArray($style_font_TNR);
                $this->excel->getActiveSheet()->setTitle(lang('expenses_report'));
                $this->excel->getActiveSheet()->SetCellValue('A8', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B8', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C8', lang('category'));
                $this->excel->getActiveSheet()->SetCellValue('D8', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('E8', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('F8', lang('created_by'));
                $row   = 9;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->category);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->remove_tag($data_row->note));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
                    $total += $data_row->amount;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('D' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'expenses_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date, reference, 
                    IF (
                        parent_cat.id IS NOT NULL,
                        CONCAT(parent_cat.name, '/', {$this->db->dbprefix('expense_categories')}.name),
                        {$this->db->dbprefix('expense_categories')}.name
                    ) as category,
                    amount, expenses.note, CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as user, attachment, {$this->db->dbprefix('expenses')}.id as id", false)
                ->from('expenses')
                ->join('users', 'users.id=expenses.created_by', 'left')
                ->join('expense_categories', 'expense_categories.id=expenses.category_id', 'left')
                ->join('expense_categories parent_cat', 'parent_cat.id=expense_categories.parent_id', 'left')
                ->group_by('expenses.id');
                
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('created_by', $this->session->userdata('user_id'));
            }
            if ($biller_id) {
                $this->datatables->where('expenses.biller_id IN ('.$biller_id.')');
            }
            if ($note) {
                $this->datatables->like('expenses.note', $note, 'both');
            }
            if ($reference_no) {
                $this->datatables->like('reference', $reference_no, 'both');
            }
            if ($category) {
                $this->datatables->where("expenses.category_id = {$category} OR parent_cat.id = {$category}");
            }
            if ($warehouse) {
                $this->datatables->where('expenses.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->datatables->where('created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }

    public function getExpensesMonthlyReport($biller_id = null, $pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('expenses');

        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $category     = $this->input->get('category') ? $this->input->get('category') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $note         = $this->input->get('note') ? $this->input->get('note') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $year         = $this->input->get('year') ? $this->input->get('year') : date('Y');

        $search_biller = $biller_id ? $biller_id : null;
        if ((!$this->Owner && !$this->Admin) && !$biller_id) {
            $user_log = $this->site->getUser($this->session->userdata('user_id'));
            if ($this->Settings->multi_biller) {
                $biller_id = $user_log->multi_biller;
            } else {
                $biller_id = $user_log->biller_id;
            }
        } 

        $ex1 = '(SELECT category_id as id1,SUM(amount) as jan FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "01" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp1';
        $ex2 = '(SELECT category_id as id2,SUM(amount) as feb FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "02" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp2';
        $ex3 = '(SELECT category_id as id3,SUM(amount) as mar FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "03" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp3';
        $ex4 = '(SELECT category_id as id4,SUM(amount) as apr FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "04" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp4';
        $ex5 = '(SELECT category_id as id5,SUM(amount) as may FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "05" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp5';
        $ex6 = '(SELECT category_id as id6,SUM(amount) as june FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "06" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp6';
        $ex7 = '(SELECT category_id as id7,SUM(amount) as jul FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "07" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp7';
        $ex8 = '(SELECT category_id as id8,SUM(amount) as aug FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "08" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp8';
        $ex9 = '(SELECT category_id as id9,SUM(amount) as sep FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "09" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp9';
        $ex10 = '(SELECT category_id as id10,SUM(amount) as oct FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "10" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp10';
        $ex11 = '(SELECT category_id as id11,SUM(amount) as nov FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "11" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp11';
        $ex12 = '(SELECT category_id as id12,SUM(amount) as dece FROM '.$this->db->dbprefix("expenses").' WHERE YEAR(DATE) = "'.$year.'" AND MONTH(DATE) = "12" GROUP BY '.$this->db->dbprefix("expenses").'.category_id ) exsp12';

        if ($pdf || $xls) {
            $this->db
                ->select("
                    
                    {$this->db->dbprefix('expense_categories')}.name as category,
                    COALESCE(exsp1.jan,0) as amount1,
                    COALESCE(exsp2.feb,0) as amount2,
                    COALESCE(exsp3.mar,0) as amount3,
                    COALESCE(exsp4.apr,0) as amount4, 
                    COALESCE(exsp5.may,0) as amount5,
                    COALESCE(exsp6.june,0) as amount6,
                    COALESCE(exsp7.jul,0) as amount7,
                    COALESCE(exsp8.aug,0) as amount8,
                    COALESCE(exsp9.sep,0) as amount9,
                    COALESCE(exsp10.oct,0) as amount10,
                    COALESCE(exsp11.nov,0) as amount11,
                    COALESCE(exsp12.dece,0) as amount12,
                    (
                    COALESCE(exsp1.jan,0)+COALESCE(exsp2.feb,0)+COALESCE(exsp3.mar,0)+COALESCE(exsp4.apr,0)+
                    COALESCE(exsp5.may,0)+COALESCE(exsp6.june,0)+COALESCE(exsp7.jul,0)+COALESCE(exsp8.aug,0)+
                    COALESCE(exsp9.sep,0)+COALESCE(exsp10.oct,0)+COALESCE(exsp10.oct,0)+COALESCE(exsp12.dece,0)) as total,
                     
                    {$this->db->dbprefix('expenses')}.id as id", false)
                ->from('expenses')
                ->join($ex1, 'expenses.category_id = exsp1.id1', 'left')
                ->join($ex2, 'expenses.category_id = exsp2.id2', 'left')
                ->join($ex3, 'expenses.category_id = exsp3.id3', 'left')
                ->join($ex4, 'expenses.category_id = exsp4.id4', 'left')
                ->join($ex5, 'expenses.category_id = exsp5.id5', 'left')
                ->join($ex6, 'expenses.category_id = exsp6.id6', 'left')
                ->join($ex7, 'expenses.category_id = exsp7.id7', 'left')
                ->join($ex8, 'expenses.category_id = exsp8.id8', 'left')
                ->join($ex9, 'expenses.category_id = exsp9.id9', 'left')
                ->join($ex10, 'expenses.category_id = exsp10.id10', 'left')
                ->join($ex11, 'expenses.category_id = exsp11.id11', 'left')
                ->join($ex12, 'expenses.category_id = exsp12.id12', 'left')
                ->join('users', 'users.id=expenses.created_by', 'left')
                ->join('expense_categories', 'expense_categories.id=expenses.category_id', 'left')
                ->group_by('expenses.category_id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('created_by', $this->session->userdata('user_id'));
            }
            if ($biller_id) {
                $this->db->where('expenses.biller_id IN ('.$biller_id.')');
            }
            if ($note) {
                $this->db->like('note', $note, 'both');
            }
            if ($reference_no) {
                $this->db->like('reference', $reference_no, 'both');
            }
            if ($category) {
                $this->db->where('category_id', $category);
            }
            if ($warehouse) {
                $this->db->where('expenses.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->db->where('created_by', $user);
            }
   
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $biller = $this->site->getBillerDetails($search_biller);
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $style_font_TNR = array(
                    'font' => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 12,
                        'name'  => 'Time New Romance'
                    ),
                );

                $objDrawing = new PHPExcel_Worksheet_Drawing();
                $logo = $_SERVER['DOCUMENT_ROOT'] . '/' . dirname($_SERVER['SCRIPT_NAME']) . '/assets/uploads/logos/' . (!empty($biller) ? $biller->logo : $this->Settings->logo);
                $objDrawing->setPath($logo);
                $objDrawing->setOffsetX(8);
                $objDrawing->setOffsetY(50);
                $objDrawing->setCoordinates('B1');
                $objDrawing->setHeight(75);
                $objDrawing->setWorksheet($this->excel->getActiveSheet());

                $this->excel->getActiveSheet()->SetCellValue('D2', (!empty($biller) ? $biller->company . ' ' . $biller->name : ''));    
                $this->excel->getActiveSheet()->getStyle('D2')->applyFromArray($style_font_TNR);
                $this->excel->getActiveSheet()->mergeCells('D3:E3')->setCellValue('D3', (!empty($biller) ? strip_tags($biller->address) : ''));
                $this->excel->getActiveSheet()->getRowDimension('3')->setRowHeight(30);
                $this->excel->getActiveSheet()->getStyle('D3')->getAlignment()->setWrapText(true);
                $this->excel->getActiveSheet()->SetCellValue('C6', lang('expenses_monthly_report'));
                $this->excel->getActiveSheet()->getStyle('C6')->applyFromArray($style_font_TNR);
                $this->excel->getActiveSheet()->setTitle(lang('expenses_monthly_report'));

                $this->excel->getActiveSheet()->SetCellValue('A8', lang('No'));
                $this->excel->getActiveSheet()->SetCellValue('B8', lang('category'));
                $this->excel->getActiveSheet()->SetCellValue('C8', lang('jan'));
                $this->excel->getActiveSheet()->SetCellValue('D8', lang('feb'));
                $this->excel->getActiveSheet()->SetCellValue('E8', lang('mar'));
                $this->excel->getActiveSheet()->SetCellValue('F8', lang('apr'));
                $this->excel->getActiveSheet()->SetCellValue('G8', lang('may'));
                $this->excel->getActiveSheet()->SetCellValue('H8', lang('jun'));
                $this->excel->getActiveSheet()->SetCellValue('I8', lang('jul'));
                $this->excel->getActiveSheet()->SetCellValue('J8', lang('aug'));
                $this->excel->getActiveSheet()->SetCellValue('K8', lang('sep'));
                $this->excel->getActiveSheet()->SetCellValue('L8', lang('oct'));
                $this->excel->getActiveSheet()->SetCellValue('M8', lang('nov'));
                $this->excel->getActiveSheet()->SetCellValue('N8', lang('dec'));
                $this->excel->getActiveSheet()->SetCellValue('O8', lang('total'));

                $row   = 9;
                $total = 0;$total1 = 0;$total2 = 0;$total3 = 0;$total4 = 0;$total5 = 0;$total6 = 0;$total7 = 0;$total8 = 0;$total9 = 0;$total10 = 0;$total11 = 0;$total12 = 0;
                $i=1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $i);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->category);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->amount1);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->amount2);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->amount3);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->amount4);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->amount5);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->amount6);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->amount7);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->amount8);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->amount9);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->amount10);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->amount11);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->amount12);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->total);
                    $total1 += $data_row->amount1;
                    $total2 += $data_row->amount2;
                    $total3 += $data_row->amount3;
                    $total4 += $data_row->amount4;
                    $total5 += $data_row->amount5;
                    $total6 += $data_row->amount6;
                    $total7 += $data_row->amount7;
                    $total8 += $data_row->amount8;
                    $total9 += $data_row->amount9;
                    $total10 += $data_row->amount10;
                    $total11 += $data_row->amount11;
                    $total12 += $data_row->amount12;
                    $total += $data_row->total;
                    $row++;
                    $i++;
                }
                $this->excel->getActiveSheet()->getStyle('D' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $total1);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $total2);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $total3);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total4);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total5);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $total6);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $total7);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $total8);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $total9);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $total10);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $total11);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $total12);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(10);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'expenses_monthly_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
            ->select("{$this->db->dbprefix('expense_categories')}.name as category,
                    COALESCE(exsp1.jan,0) as amount1,
                    COALESCE(exsp2.feb,0) as amount2,
                    COALESCE(exsp3.mar,0) as amount3,
                    COALESCE(exsp4.apr,0) as amount4, 
                    COALESCE(exsp5.may,0) as amount5,
                    COALESCE(exsp6.june,0) as amount6,
                    COALESCE(exsp7.jul,0) as amount7,
                    COALESCE(exsp8.aug,0) as amount8,
                    COALESCE(exsp9.sep,0) as amount9,
                    COALESCE(exsp10.oct,0) as amount10,
                    COALESCE(exsp11.nov,0) as amount11,
                    COALESCE(exsp12.dece,0) as amount12,
                    (
                    COALESCE(exsp1.jan,0)+COALESCE(exsp2.feb,0)+COALESCE(exsp3.mar,0)+COALESCE(exsp4.apr,0)+
                    COALESCE(exsp5.may,0)+COALESCE(exsp6.june,0)+COALESCE(exsp7.jul,0)+COALESCE(exsp8.aug,0)+
                    COALESCE(exsp9.sep,0)+COALESCE(exsp10.oct,0)+COALESCE(exsp10.oct,0)+COALESCE(exsp12.dece,0)) as total
                ", false)

            ->from('expenses')
            ->join($ex1, 'expenses.category_id = exsp1.id1', 'left')
            ->join($ex2, 'expenses.category_id = exsp2.id2', 'left')
            ->join($ex3, 'expenses.category_id = exsp3.id3', 'left')
            ->join($ex4, 'expenses.category_id = exsp4.id4', 'left')
            ->join($ex5, 'expenses.category_id = exsp5.id5', 'left')
            ->join($ex6, 'expenses.category_id = exsp6.id6', 'left')
            ->join($ex7, 'expenses.category_id = exsp7.id7', 'left')
            ->join($ex8, 'expenses.category_id = exsp8.id8', 'left')
            ->join($ex9, 'expenses.category_id = exsp9.id9', 'left')
            ->join($ex10, 'expenses.category_id = exsp10.id10', 'left')
            ->join($ex11, 'expenses.category_id = exsp11.id11', 'left')
            ->join($ex12, 'expenses.category_id = exsp12.id12', 'left')

            ->join('users', 'users.id=expenses.created_by', 'left')
            ->join('expense_categories', 'expense_categories.id=expenses.category_id', 'left')
            ->group_by('expenses.category_id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('created_by', $this->session->userdata('user_id'));
            }
            if ($biller_id) {
                $this->datatables->where('expenses.biller_id IN ('.$biller_id.')');
            }
            if ($note) {
                $this->datatables->like('note', $note, 'both');
            }
            if ($reference_no) {
                $this->datatables->like('reference', $reference_no, 'both');
            }
            if ($category) {
                $this->datatables->where('category_id', $category);
            }
            if ($warehouse) {
                $this->datatables->where('expenses.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->datatables->where('created_by', $user);
            }
      
            echo $this->datatables->generate();
        }
    }
    /*
    public function getProductsReport_($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('products', true);

        $product     = $this->input->get('product') ? $this->input->get('product') : null;
        $category    = $this->input->get('category') ? $this->input->get('category') : null;
        $brand       = $this->input->get('brand') ? $this->input->get('brand') : null;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : null;
        $warehouse   = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $cf1         = $this->input->get('cf1') ? $this->input->get('cf1') : null;
        $cf2         = $this->input->get('cf2') ? $this->input->get('cf2') : null;
        $cf3         = $this->input->get('cf3') ? $this->input->get('cf3') : null;
        $cf4         = $this->input->get('cf4') ? $this->input->get('cf4') : null;
        $cf5         = $this->input->get('cf5') ? $this->input->get('cf5') : null;
        $cf6         = $this->input->get('cf6') ? $this->input->get('cf6') : null;
        $start_date  = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date    = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        $pp = "( SELECT product_id, SUM(CASE WHEN pi.purchase_id IS NOT NULL THEN quantity ELSE 0 END) as purchasedQty, 
            SUM(quantity_balance) as balacneQty, 
            SUM( unit_cost * quantity_balance ) balacneValue, SUM( (CASE WHEN pi.purchase_id IS NOT NULL THEN (pi.subtotal) ELSE 0 END) ) totalPurchase from {$this->db->dbprefix('purchase_items')} pi LEFT JOIN {$this->db->dbprefix('purchases')} p on p.id = pi.purchase_id WHERE pi.status = 'received' ";

        // WHERE p.status != 'pending' AND p.status != 'ordered'
        // $sp = '( SELECT si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, SUM( si.item_discount ) totalItemDiscount,s.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s JOIN ' . $this->db->dbprefix('sale_items') . ' si on s.id = si.sale_id ';
        // $sp = '( SELECT si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, SUM( si.item_discount ) totalItemDiscount, SUM( si.total_weight ) totalWeight, s.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s JOIN ' . $this->db->dbprefix('sale_items') . ' si on s.id = si.sale_id ';
        
        $sp = '( SELECT si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, SUM( si.item_discount ) totalItemDiscount, SUM( si.total_weight ) totalWeight, s.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s JOIN ' . $this->db->dbprefix('sale_items') . ' si on s.id = si.sale_id WHERE s.sale_status != "returned" ';
        $pr1 = '( SELECT si_return.product_id, SUM( si_return.quantity ) soldQty_return, SUM( si_return.subtotal ) totalSale_return from ' . $this->db->dbprefix('sales') . ' ss JOIN ' . $this->db->dbprefix('sale_items') . ' si_return on ss.id = si_return.sale_id WHERE ss.sale_status = "returned" ';
        $pr2 = "( SELECT product_id, SUM(sri.quantity) as returnQty, SUM(sri.subtotal) returnTotalSale from {$this->db->dbprefix('returns')} sr LEFT JOIN {$this->db->dbprefix('return_items')} sri on sr.id = sri.return_id";
        if ($start_date || $warehouse) {
            $pr2 .= ' WHERE ';
            if ($start_date) {
                $start_date = $this->bpas->fld($start_date);
                $end_date   = $end_date ? $this->bpas->fld($end_date) : date('Y-m-d');
                $pp .= " AND p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
                $sp .= " AND s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
                $pr1 .= " AND ss.date >= '{$start_date}' AND ss.date < '{$end_date}' ";
                $pr2 .= " sr.date >= '{$start_date}' AND sr.date < '{$end_date}' ";
            }
            if ($warehouse) {
                if($start_date){
                    $pr2 .= " AND ";
                }
                $pp .= " AND pi.warehouse_id = '{$warehouse}' ";
                $sp .= " AND si.warehouse_id = '{$warehouse}' ";
                $pr1 .= " AND si_return.warehouse_id = '{$warehouse}' ";
                $pr2 .= " sr.warehouse_id = '{$warehouse}' ";
            }
        }
        $pp .= ' GROUP BY pi.product_id ) PCosts';
        $sp .= ' GROUP BY si.product_id ) PSales';
        $pr1 .= ' GROUP BY si_return.product_id ) PSReturn';
        $pr2 .= ' GROUP BY sri.product_id ) PReturn';

        $vrn = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="New" GROUP BY product_id) NVariant';
        $vro = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="Old" GROUP BY product_id) OVariant';
        $vrb = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="Broken" GROUP BY product_id) BVariant';

        if ($preview) {
            $this->db
                ->select($this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . ".name, 
                    COALESCE( PCosts.purchasedQty, 0 ) as PurchasedQty,
                    COALESCE( PSales.soldQty, 0 ) as SoldQty,
                    COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                    COALESCE( PSales.totalItemDiscount, 0 ) as discount,
                    COALESCE( PCosts.balacneQty, 0 ) as BalacneQty,
                    COALESCE( PSales.totalWeight, 0 ) as weight,
                    COALESCE(NVariant.sQty, 0) as qtyNewVar,
                    COALESCE(OVariant.sQty, 0) as qtyOldVar,
                    COALESCE(BVariant.sQty, 0) as qtyBrokenVar,
                    {$this->db->dbprefix('products')}.id as id", false)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->join($pr1, 'products.id = PSReturn.product_id', 'left')
                ->join($pr2, 'products.id = PReturn.product_id', 'left')
                ->join($vrn, 'products.id = NVariant.product_id', 'left')
                ->join($vro, 'products.id = OVariant.product_id', 'left')
                ->join($vrb, 'products.id = BVariant.product_id', 'left')
                ->where('PCosts.totalPurchase !=', 0)
                ->or_where('PCosts.totalPurchase !=', null)
                ->where('PSales.totalSale !=', 0)
                ->or_where('PSales.totalSale !=', null)
                ->group_by('products.code');
            
            if ($product) {
                $this->db->where($this->db->dbprefix('products') . '.id', $product);
            }
            if ($cf1) {
                $this->db->where($this->db->dbprefix('products') . '.cf1', $cf1);
            }
            if ($cf2) {
                $this->db->where($this->db->dbprefix('products') . '.cf2', $cf2);
            }
            if ($cf3) {
                $this->db->where($this->db->dbprefix('products') . '.cf3', $cf3);
            }
            if ($cf4) {
                $this->db->where($this->db->dbprefix('products') . '.cf4', $cf4);
            }
            if ($cf5) {
                $this->db->where($this->db->dbprefix('products') . '.cf5', $cf5);
            }
            if ($cf6) {
                $this->db->where($this->db->dbprefix('products') . '.cf6', $cf6);
            }
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
            }
            if ($subcategory) {
                $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
            }
            if ($brand) {
                $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_report')]];
                $meta = ['page_title' => lang('products_report'), 'bc' => $bc];
                $this->page_construct('reports/products_report_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . '.name,
                    ' . $this->db->dbprefix('products') . '.serial_no,
                    ' . $this->db->dbprefix('products') . '.category_id,
                COALESCE( PCosts.purchasedQty, 0 ) as PurchasedQty,
                COALESCE( PSales.soldQty, 0 ) as SoldQty,
                COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                COALESCE( PCosts.balacneQty, 0 ) as BalacneQty,
                COALESCE( PCosts.totalPurchase, 0 ) as TotalPurchase,
                COALESCE( PCosts.balacneValue, 0 ) as TotalBalance,
                COALESCE( PSales.totalSale, 0 ) as TotalSales,
                COALESCE( PSales.totalWeight, 0 ) as TotalWeight,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit,
                COALESCE(NVariant.sQty, 0) as qtyNewVar,
                COALESCE(OVariant.sQty, 0) as qtyOldVar,
                COALESCE(BVariant.sQty, 0) as qtyBrokenVar,', false)

                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->join($pr1, 'products.id = PSReturn.product_id', 'left')
                ->join($pr2, 'products.id = PReturn.product_id', 'left')
                ->join($vrn, 'products.id = NVariant.product_id', 'left')
                ->join($vro, 'products.id = OVariant.product_id', 'left')
                ->join($vrb, 'products.id = BVariant.product_id', 'left')
                ->where('PCosts.totalPurchase !=', 0)
                ->or_where('PCosts.totalPurchase !=', null)
                ->where('PSales.totalSale !=', 0)
                ->or_where('PSales.totalSale !=', null)
                ->order_by('products.name');

            if ($product) {
                $this->db->where($this->db->dbprefix('products') . '.id', $product);
            }
            if ($cf1) {
                $this->db->where($this->db->dbprefix('products') . '.cf1', $cf1);
            }
            if ($cf2) {
                $this->db->where($this->db->dbprefix('products') . '.cf2', $cf2);
            }
            if ($cf3) {
                $this->db->where($this->db->dbprefix('products') . '.cf3', $cf3);
            }
            if ($cf4) {
                $this->db->where($this->db->dbprefix('products') . '.cf4', $cf4);
            }
            if ($cf5) {
                $this->db->where($this->db->dbprefix('products') . '.cf5', $cf5);
            }
            if ($cf6) {
                $this->db->where($this->db->dbprefix('products') . '.cf6', $cf6);
            }
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
            }
            if ($subcategory) {
                $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
            }
            if ($brand) {
                $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('serial'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('category'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('return'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('weight'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('profit_loss'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('stock_in_hand'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('new'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('old'));
                $this->excel->getActiveSheet()->SetCellValue('P1', lang('broken'));

                $row  = 2;
                $sQty = 0;
                $pQty = 0;
                $rQty = 0;
                $bQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $bAmt = 0;
                $pl   = 0;
                $pw   = 0;
                $nVarQty = 0;
                $oVarQty = 0;
                $bVarQty = 0;
                foreach ($data as $data_row) {
                    $get_categories= $this->site->getCategoryByID($data_row->category_id);

                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->serial_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $get_categories->name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->returnQty);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->BalacneQty);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->TotalWeight);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->Profit);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->TotalBalance);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->qtyNewVar);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->qtyOldVar);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->qtyBrokenVar);

                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $rQty += $data_row->returnQty;
                    $bQty += $data_row->BalacneQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $bAmt += $data_row->TotalBalance;
                    $pl   += $data_row->Profit;
                    $nVarQty += $data_row->qtyNewVar;
                    $oVarQty += $data_row->qtyOldVar;
                    $bVarQty += $data_row->qtyBrokenVar;
                    $pw += $data_row->TotalWeight;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('C' . $row . ':L' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $rQty);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $bQty);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $pw);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $pl);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $bAmt);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $nVarQty);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $oVarQty);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $bVarQty);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                $filename = 'products_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . ".name,
                CONCAT(COALESCE( PCosts.purchasedQty, 0 ), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
                CONCAT(COALESCE( PSales.soldQty, 0 ), '__', COALESCE( PSales.totalSale, 0), '__', COALESCE( PSales.order_discount, 0 )) as sold, 
                COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                COALESCE( PSales.totalItemDiscount, 0 ) as discount,
                CONCAT(COALESCE( PCosts.balacneQty, 0 ), '__', COALESCE( PCosts.balacneValue, 0 )) as balance,
                COALESCE( PSales.totalWeight, 0 ) as weight,
                CONCAT(COALESCE(NVariant.sQty, 0), '__',COALESCE(NVariant.name, '' ), '__', COALESCE(OVariant.sQty, 0), '__', COALESCE(OVariant.name, ''), '__', COALESCE(BVariant.sQty, 0), '__', COALESCE(BVariant.name, '')) as variant, {$this->db->dbprefix('products')}.id as id", false)
                ->from('products')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pr1, 'products.id = PSReturn.product_id', 'left')
                ->join($pr2, 'products.id = PReturn.product_id', 'left')
                ->join($vrn, 'products.id = NVariant.product_id', 'left')
                ->join($vro, 'products.id = OVariant.product_id', 'left')
                ->join($vrb, 'products.id = BVariant.product_id', 'left')                
                ->where('PCosts.totalPurchase !=', 0)
                ->or_where('PCosts.totalPurchase !=', null)
                ->where('PSales.totalSale !=', 0)
                ->or_where('PSales.totalSale !=', null)
                ->group_by('products.code');

            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . '.id', $product);
            }
            if ($cf1) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf1', $cf1);
            }
            if ($cf2) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf2', $cf2);
            }
            if ($cf3) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf3', $cf3);
            }
            if ($cf4) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf4', $cf4);
            }
            if ($cf5) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf5', $cf5);
            }
            if ($cf6) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf6', $cf6);
            }
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . '.category_id', $category);
            }
            if ($subcategory) {
                $this->datatables->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
            }
            if ($brand) {
                $this->datatables->where($this->db->dbprefix('products') . '.brand', $brand);
            }

            echo $this->datatables->generate();
        }
    }*/

    public function getPurchasesReport($pdf = null, $xls = null,$preview=null,$excel_deatail = null)
    {
        $this->bpas->checkPermissions('purchases', true);
        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $supplier     = $this->input->get('supplier') ? $this->input->get('supplier') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $project      = $this->input->get('project') ? $this->input->get('project') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if($preview){
            $this->db
            ->select('' . $this->db->dbprefix('purchases') . '.date, project_name, reference_no, 
                ' . $this->db->dbprefix('warehouses') . '.name as wname, supplier, 
                ' . $this->db->dbprefix("purchase_items") . '.product_code,
                ' . $this->db->dbprefix("purchase_items") . '.product_name,
                ' . $this->db->dbprefix("purchase_items") . '.expiry,
                ' . $this->db->dbprefix("purchase_items") . '.quantity,
                ' . $this->db->dbprefix("purchase_items") . '.product_unit_code, 
                ' . $this->db->dbprefix("purchase_items") . '.subtotal,
                ' . $this->db->dbprefix("purchase_items") . '.unit_cost,
                ' . $this->db->dbprefix("purchase_items") . '.item_discount,
                ' . $this->db->dbprefix("purchase_items") . '.item_tax,
                grand_total, paid, ' . $this->db->dbprefix("purchases") . '.status'
            , false)
            ->from('purchase_items')
            ->join('purchases', 'purchase_items.purchase_id=purchases.id', 'right')
            ->join('projects', 'projects.project_id=purchases.project_id', 'left')
            ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
            ->order_by('purchases.date desc');

            if ($user) {
                $this->db->where('purchases.created_by', $user);
            }
            if ($product) {
                $this->db->where('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('purchases') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('purchases.project_id', $project);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
            } else {
                $data = null;
            }
            
            $this->data['rows'] = $data;
            $this->data['start_date'] = $start_date;
            $this->data['end_date'] = $end_date;
    
            
            $bc = array(array('link'   => base_url(), 'page' => lang('home')), array('link' => admin_url('purchases'), 'page' => lang('purchases')), array('link' => '#', 'page' => lang('purchases_report')));
            $meta = array('page_title' => lang('purchases_report'), 'bc' => $bc);
            $this->page_construct('reports/purchases_preview', $meta, $this->data);
          
        }elseif ($pdf || $xls) {
            $this->db
                ->select('' . $this->db->dbprefix('purchases') . '.date,project_name, reference_no, ' . $this->db->dbprefix('warehouses') . '.name as wname, supplier, GROUP_CONCAT(CONCAT(' . $this->db->dbprefix('purchase_items') . ".product_name, ' (', " . $this->db->dbprefix('purchase_items') . ".quantity, ')', ' Exp: [', " . $this->db->dbprefix('purchase_items') . ".expiry, ']') SEPARATOR '\n') as iname, grand_total, paid, " . $this->db->dbprefix('purchases') . '.status', false)
                ->from('purchases')
                ->join('purchase_items', 'purchase_items.purchase_id=purchases.id', 'left')
                ->join('projects', 'projects.project_id=purchases.project_id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
                ->group_by('purchases.id')
                ->order_by('purchases.date desc');

            if ($user) {
                $this->db->where('purchases.created_by', $user);
            }
            if ($product) {
                $this->db->where('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('purchases') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('purchases.project_id', $project);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));

                $row     = 2;
                $total   = 0;
                $paid    = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status);
                    $total   += $data_row->grand_total;
                    $paid    += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('J' . $row . ':I' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(55);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'purchase_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif($excel_deatail) {
            $this->db
            ->select('' . $this->db->dbprefix('purchases') . '.date, project_name, reference_no, 
                ' . $this->db->dbprefix('warehouses') . '.name as wname, supplier, 
                ' . $this->db->dbprefix("purchase_items") . '.product_code,
                ' . $this->db->dbprefix("purchase_items") . '.product_name,
                ' . $this->db->dbprefix("purchase_items") . '.expiry,
                ' . $this->db->dbprefix("purchase_items") . '.quantity,
                ' . $this->db->dbprefix("purchase_items") . '.product_unit_code, 
                ' . $this->db->dbprefix("purchase_items") . '.subtotal,
                ' . $this->db->dbprefix("purchase_items") . '.unit_cost,
                ' . $this->db->dbprefix("purchase_items") . '.item_discount,
                ' . $this->db->dbprefix("purchase_items") . '.item_tax,
                grand_total, paid, ' . $this->db->dbprefix("purchases") . '.status'
            , false)
            ->from('purchase_items')
            ->join('purchases', 'purchase_items.purchase_id=purchases.id', 'left')
            ->join('projects', 'projects.project_id=purchases.project_id', 'left')
            ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left')
            ->order_by('purchases.date desc');

            if ($user) {
                $this->db->where('purchases.created_by', $user);
            }
            if ($product) {
                $this->db->where('purchase_items.product_id', $product);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('purchases') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('purchases.project_id', $project);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('purchase_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('expiry'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('cost'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('vat'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('subtotal'));

                $row = 2;
                $total = 0; $quantity = 0; $unit_cost = 0; $discount = 0; $tax = 0; $sub_total = 0;
  
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->expiry);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->product_unit_code);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->unit_cost);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->quantity * $data_row->unit_cost);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->item_discount);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->item_tax);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, lang($data_row->subtotal));

                    $quantity   += $data_row->quantity;
                    $unit_cost  += $data_row->unit_cost;
                    $discount   += $data_row->item_discount;
                    $tax        += $data_row->item_tax;
                    $total      += $data_row->quantity * $data_row->unit_cost;
                    $sub_total  += $data_row->subtotal;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('I' . $row . ':O' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $quantity);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $unit_cost);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $discount);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $tax);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $sub_total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'purchase_report_detail';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->db->simple_query('SET SESSION group_concat_max_len=15000');
            $pi = "( 
            SELECT purchase_id, product_id, 
                (GROUP_CONCAT(CONCAT({$this->db->dbprefix('purchase_items')}.purchase_id, '__', {$this->db->dbprefix('purchase_items')}.product_name, ' (', {$this->db->dbprefix('units')}.name, ')', '__', 
                {$this->db->dbprefix('purchase_items')}.unit_quantity, '__', 
                COALESCE({$this->db->dbprefix('purchase_items')}.expiry, 'N/A')) SEPARATOR '___')) as item_nane 
            from {$this->db->dbprefix('purchase_items')} 
            LEFT JOIN {$this->db->dbprefix('units')} ON {$this->db->dbprefix('units')}.id={$this->db->dbprefix('purchase_items')}.product_unit_id";
            if ($product) {
                $pi .= " WHERE {$this->db->dbprefix('purchase_items')}.product_id = {$product} ";
            }
            $pi .= " GROUP BY {$this->db->dbprefix('purchase_items')}.purchase_id ) FPI";

            $this->load->library('datatables');

            if(!$this->Settings->avc_costing){
                $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('purchases')}.date, '%Y-%m-%d %T') as date,
                    project_name,reference_no, {$this->db->dbprefix('warehouses')}.name as wname, supplier, (FPI.item_nane) as iname, 
                    grand_total, paid, (grand_total-paid) as balance, {$this->db->dbprefix('purchases')}.status, {$this->db->dbprefix('purchases')}.id as id", false);
            }else{
                $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('purchases')}.date, '%Y-%m-%d %T') as date,
                    project_name,reference_no, {$this->db->dbprefix('warehouses')}.name as wname, supplier, (FPI.item_nane) as iname, 
                    (grand_total-shipping), paid, 
                    ((grand_total-shipping)-paid) as balance, {$this->db->dbprefix('purchases')}.status, {$this->db->dbprefix('purchases')}.id as id", false);
            }
             $this->datatables->from('purchases')
                ->join($pi, 'FPI.purchase_id=purchases.id', 'left')
                ->join('projects', 'projects.project_id=purchases.project_id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left');
            // ->group_by('purchases.id');

            if ($user) {
                $this->datatables->where('purchases.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FPI.product_id', $product, false);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('purchases.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('purchases.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('purchases') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('purchases.project_id', $project);
            }

            echo $this->datatables->generate();
        }
    }

    public function getQuotesReport($pdf = null, $xls = null)
    {
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = null;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = null;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = null;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = null;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = null;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = null;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = null;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = null;
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if ($pdf || $xls) {
            $this->db
                ->select('date, reference_no, biller, customer, GROUP_CONCAT(CONCAT(' . $this->db->dbprefix('quote_items') . ".product_name, ' (', " . $this->db->dbprefix('quote_items') . ".quantity, ')') SEPARATOR '<br>') as iname, grand_total, status", false)
                ->from('quotes')
                ->join('quote_items', 'quote_items.quote_id=quotes.id', 'left')
                ->join('warehouses', 'warehouses.id=quotes.warehouse_id', 'left')
                ->group_by('quotes.id');

            if ($user) {
                $this->db->where('quotes.created_by', $user);
            }
            if ($product) {
                $this->db->where('quote_items.product_id', $product);
            }
            if ($biller) {
                $this->db->where('quotes.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('quotes.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('quotes.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('quotes.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('quotes') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('quotes_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'quotes_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $qi = "( SELECT quote_id, product_id, GROUP_CONCAT(CONCAT({$this->db->dbprefix('quote_items')}.product_name, '__', {$this->db->dbprefix('quote_items')}.quantity) SEPARATOR '___') as item_nane from {$this->db->dbprefix('quote_items')} ";
            if ($product) {
                $qi .= " WHERE {$this->db->dbprefix('quote_items')}.product_id = {$product} ";
            }
            $qi .= " GROUP BY {$this->db->dbprefix('quote_items')}.quote_id ) FQI";
            $this->load->library('datatables');
            $this->datatables
                ->select("date, reference_no, biller, customer, FQI.item_nane as iname, grand_total, status, {$this->db->dbprefix('quotes')}.id as id", false)
                ->from('quotes')
                ->join($qi, 'FQI.quote_id=quotes.id', 'left')
                ->join('warehouses', 'warehouses.id=quotes.warehouse_id', 'left')
                ->group_by('quotes.id');

            if ($user) {
                $this->datatables->where('quotes.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FQI.product_id', $product, false);
            }
            if ($biller) {
                $this->datatables->where('quotes.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('quotes.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('quotes.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('quotes.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('quotes') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }

    public function getRegisterlogs($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('register', true);
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = null;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = null;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = null;
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }

        if ($pdf || $xls) {
            $this->db
                ->select('date, closed_at, CONCAT(' . $this->db->dbprefix('users') . ".first_name, ' ', " . $this->db->dbprefix('users') . ".last_name, ' (', users.email, ')') as user, cash_in_hand, total_cc_slips, total_cheques, total_cash, total_cc_slips_submitted, total_cheques_submitted,total_cash_submitted, note", false)
                ->from('pos_register')
                ->join('users', 'users.id=pos_register.user_id', 'left')
                ->order_by('date desc');
            //->where('status', 'close');

            if ($user) {
                $this->db->where('pos_register.user_id', $user);
            }
            if ($start_date) {
                $this->db->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('register_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('open_time'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('close_time'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('cash_in_hand'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('cc_slips'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('cheques'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('total_cash'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('cc_slips_submitted'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('cheques_submitted'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('total_cash_submitted'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('note'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->closed_at);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->user);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->cash_in_hand);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->total_cc_slips);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->total_cheques);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->total_cash);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->total_cc_slips_submitted);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->total_cheques_submitted);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->total_cash_submitted);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->note);
                    if ($data_row->total_cash_submitted < $data_row->total_cash || $data_row->total_cheques_submitted < $data_row->total_cheques || $data_row->total_cc_slips_submitted < $data_row->total_cc_slips) {
                        $this->excel->getActiveSheet()->getStyle('A' . $row . ':K' . $row)->applyFromArray(
                                ['fill' => ['type' => PHPExcel_Style_Fill::FILL_SOLID, 'color' => ['rgb' => 'F2DEDE']]]
                                );
                    }
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(35);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'register_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select('pos_register.id as id, date, closed_at, CONCAT(' . $this->db->dbprefix('users') . ".first_name, ' ', " . $this->db->dbprefix('users') . ".last_name, '<br>', " . $this->db->dbprefix('users') . ".email) as user, cash_in_hand, CONCAT(total_cc_slips, ' (', total_cc_slips_submitted, ')'), CONCAT(total_cheques, ' (', total_cheques_submitted, ')'), CONCAT(total_cash, ' (', total_cash_submitted, ')'), note", false)
                ->from('pos_register')
                ->join('users', 'users.id=pos_register.user_id', 'left')
                ->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_report') . "' data-toggle='modal' data-backdrop='static' data-target='#myModal' href='" . admin_url('reports/close_register/$1') . "'><span class='label label-primary'>" . lang('view_report') . '</span></a></div>', 'id')
                ->unset_column('id');

            if ($user) {
                $this->datatables->where('pos_register.user_id', $user);
            }
            if ($start_date) {
                $this->datatables->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }
    public function close_register($id = null)
    {
        $closeRegister = $this->site->getPosCloseRegiter($id);
      
        $this->bpas->checkPermissions('index');
        // if (!$this->Owner && !$this->Admin) {
            $user_id = $closeRegister->user_id;
        // }
        $this->form_validation->set_rules('total_cash', lang('total_cash'), 'trim|required|numeric');
        $this->form_validation->set_rules('total_cheques', lang('total_cheques'), 'trim|required|numeric');
        $this->form_validation->set_rules('total_cc_slips', lang('total_cc_slips'), 'trim|required|numeric');
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $warehouse = $this->site->getAllWarehouses();
        
        $start_date = $closeRegister->date;
      
        $end_date = $closeRegister->closed_at ? $closeRegister->closed_at : $this->bpas->hrld(date('Y-m-d H:i:s'));
        if ($this->form_validation->run() == true) {
            if ($this->Owner || $this->Admin) {
                $user_register = $user_id ? $this->pos_model->registerDataByID($id) : null;
                $rid           = $user_register ? $user_register->id : $this->session->userdata('register_id');
                $user_id       = $user_register ? $user_register->user_id : $this->session->userdata('user_id');
            } else {
                $rid     = $this->session->userdata('register_id');
                $user_id = $this->session->userdata('user_id');
            }
      
            $data = [
                'closed_at'                => date('Y-m-d H:i:s'),
                'total_cash'               => $this->input->post('total_cash'),
                'total_cheques'            => $this->input->post('total_cheques'),
                'total_cc_slips'           => $this->input->post('total_cc_slips'),
                'total_cash_submitted'     => $this->input->post('total_cash_submitted'),
                'total_cheques_submitted'  => $this->input->post('total_cheques_submitted'),
                'total_cc_slips_submitted' => $this->input->post('total_cc_slips_submitted'),
                'note'                     => $this->input->post('note'),
                'status'                   => 'close',
                'transfer_opened_bills'    => $this->input->post('transfer_opened_bills'),
                'closed_by'                => $this->session->userdata('user_id'),
            ];
        } elseif ($this->input->post('close_register')) {
            $this->session->set_flashdata('error', (validation_errors() ? validation_errors() : $this->session->flashdata('error')));
            admin_redirect('pos');
        }

        if ($this->form_validation->run() == true && $this->pos_model->closeRegister($rid, $user_id, $data)) {
            $this->session->set_flashdata('message', lang('register_closed'));
            admin_redirect('welcome');
        } else {
            if ($this->Owner || $this->Admin) {
                $user_register                    = $user_id ? $this->pos_model->registerDataByID($id) : null;
                $register_open_time               = $user_register ? $user_register->date : null;
                $this->data['cash_in_hand']       = $user_register ? $user_register->cash_in_hand : null;
                $this->data['register_open_time'] = $user_register ? $register_open_time : null;
            } else {
                $register_open_time               = $this->session->userdata('register_open_time');
                $this->data['cash_in_hand']       = null;
                $this->data['register_open_time'] = null;
            }
  
            $this->data['error']            = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['getcategoryInOut'] = $this->reports_model->getCategoryInOuts($start_date, $end_date, $user_id,$id);
            $this->data['get_warehouse']   = $warehouse;
            $this->data['settings']        = $this->site->getSettings();
            $this->data['ccsales']         = $this->reports_model->getRegisterCCSales($register_open_time, $user_id, $end_date);
            $this->data['cashsales']       = $this->reports_model->getRegisterCashSales($register_open_time, $user_id, $end_date);
            $this->data['chsales']         = $this->reports_model->getRegisterChSales($register_open_time, $user_id, $end_date);
            $this->data['gcsales']         = $this->reports_model->getRegisterGCSales($register_open_time, $user_id, $end_date);
            $this->data['pppsales']        = $this->reports_model->getRegisterPPPSales($register_open_time, $user_id, $end_date);
            $this->data['stripesales']     = $this->reports_model->getRegisterStripeSales($register_open_time, $user_id, $end_date);
            $this->data['authorizesales']  = $this->reports_model->getRegisterAuthorizeSales($register_open_time, $user_id, $end_date);
            $this->data['totalsales']      = $this->reports_model->getRegisterSales($register_open_time, $user_id, $end_date);
            $this->data['inv']              = $closeRegister;
            $this->data['abasales']         = $this->reports_model->getRegisterABASales($register_open_time, $user_id, 'ABA', $end_date);
            $this->data['acledasales']      = $this->reports_model->getRegisterABASales($register_open_time, $user_id, 'Acleda', $end_date);
            $this->data['alipay']           = $this->reports_model->getRegisterABASales($register_open_time, $user_id, 'Alipay', $end_date);
            $this->data['pipay']            = $this->reports_model->getRegisterABASales($register_open_time, $user_id, 'PiPay', $end_date);
            $this->data['wing']             = $this->reports_model->getRegisterABASales($register_open_time, $user_id, 'Wing', $end_date);
            $this->data['other']             = $this->reports_model->getRegisterABASales($register_open_time, $user_id, 'other', $end_date);
            $this->data['totalreceipt']     = $this->reports_model->getRegisterTotalTrans($register_open_time, $user_id, $end_date);
            
            $this->data['refunds']         = $this->reports_model->getRegisterRefunds($register_open_time, $user_id, $end_date);
            $this->data['returns']         = $this->reports_model->getRegisterReturns($register_open_time, $user_id, $end_date);
            $this->data['cashrefunds']     = $this->reports_model->getRegisterCashRefunds($register_open_time, $user_id, $end_date);
            $this->data['expenses']        = $this->reports_model->getRegisterExpenses($register_open_time, $user_id, $end_date);
            $this->data['users']           = $this->pos_model->getUsers($user_id);
            $this->data['suspended_bills'] = $this->reports_model->getSuspendedsales($user_id);
            $this->data['user_id']         = $user_id;
            $this->data['modal_js']        = $this->site->modal_js();
            $this->load->view($this->theme . 'pos/close_register', $this->data);
        }
    }
    public function getSaleEditRequest($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('register', true);
        $user_query   = $this->input->get('user') ? $this->input->get('user') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        //    $product      = $this->input->get('product') ? $this->input->get('product') : null;
        //    $user         = $this->input->get('user') ? $this->input->get('user') : null;
        //    $customer     = $this->input->get('customer') ? $this->input->get('customer') : null;
        //    $phone        = $this->input->get('phone') ? $this->input->get('phone') : null;
        //    $address      = $this->input->get('address') ? $this->input->get('address') : null;
        //    $biller       = $this->input->get('biller') ? $this->input->get('biller') : $this->session->userdata('biller_id');
        //    $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : $this->session->userdata('warehouse_id');
        //    $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;  
        //    $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;
        //    $project      = $this->input->get('project') ? $this->input->get('project') : null;
        //    $sale_type    = $this->input->get('sale_type') ? $this->input->get('sale_type') : null;
        //    $sale_status  = $this->input->get('sale_status') ? $this->input->get('sale_status') : null;
        //    $zone         = $this->input->get('zone_id') ? $this->input->get('zone_id') : null;
        //    $payment_status = $this->input->get('payment_status') ? $this->input->get('payment_status') : null;
        if ($pdf || $xls) {
            $this->db
            ->select("date,updated_date,reference_no,sale_reference_no, warehouses.name as warehouse ,CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as user,companies.company as biller,{$this->db->dbprefix('sales_edit_request')}.attachment,{$this->db->dbprefix('sales_edit_request')}.status")
            ->from('sales_edit_request')
            ->join('warehouses', 'warehouses.id = sales_edit_request.warehouse_id' , 'left' )
            ->join('companies', 'companies.id = sales_edit_request.biller_id' , 'left' )
            ->join('users', 'users.id = sales_edit_request.created_by', 'left');
            if ($user_query) {
                $this->db->where('sales_edit_request.created_by', $user_query);
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales_edit_request') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('Sale_request'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('updated_date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sale_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('branch'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('attachment'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->updated_date);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->sale_reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->warehouse);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->user);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->attachment);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->status);
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'Sale_request';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("date,updated_date,reference_no,sale_reference_no, warehouses.name ,CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) as user,companies.company,{$this->db->dbprefix('sales_edit_request')}.attachment,{$this->db->dbprefix('sales_edit_request')}.status")
                ->from('sales_edit_request')
                ->join('warehouses', 'warehouses.id = sales_edit_request.warehouse_id' , 'left' )
                ->join('companies', 'companies.id = sales_edit_request.biller_id' , 'left' )
                ->join('users', 'users.id = sales_edit_request.created_by', 'left');
            if ($user_query) {
                $this->datatables->where('sales_edit_request.created_by', $user_query);
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales_edit_request') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }
   
    public function consignment_report($product_id = null)
    {
        $this->bpas->checkPermissions('customers', true);
        if (!$product_id) {
            $this->session->set_flashdata('error', lang('no_customer_selected'));
            admin_redirect('reports/customers');
        }
        // $this->data['sales']         = $this->reports_model->getSalesTotals($user_id);
        // $this->data['total_sales']   = $this->reports_model->getCustomerSales($user_id);
        // $this->data['total_quotes']  = $this->reports_model->getCustomerQuotes($user_id);
        // $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['error']      = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['product']    = $product_id;

        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('consignment_report')]];
        $meta = ['page_title' => lang('consignment_report'), 'bc' => $bc];
        $this->page_construct('reports/consignment_report', $meta, $this->data);
    }

    public function getConsignmentReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('sales', true);
        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $customer     = $this->input->get('customer') ? $this->input->get('customer') : null;
        $phone        = $this->input->get('phone') ? $this->input->get('phone') : null;
        $address      = $this->input->get('address') ? $this->input->get('address') : null;
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project       = $this->input->get('project') ? $this->input->get('project') : null;
        $sale_type       = $this->input->get('sale_type') ? $this->input->get('sale_type') : null;
        $sale_status       = $this->input->get('sale_status') ? $this->input->get('sale_status') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {
            $this->db
                ->select('date, project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    '. $this->db->dbprefix('suspended_note').'.name as suspend,
                    reference_no, biller, customer, c.phone, c.address, '. $this->db->dbprefix('sales').'.customer_qty, 

                    GROUP_CONCAT(
                        CONCAT(
                            '.$this->db->dbprefix('sale_items') . ".product_code,
                            '_', " . $this->db->dbprefix('sale_items') .".product_name,
                            ' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')') SEPARATOR '\n') as iname, grand_total, total,order_discount, paid, payment_status", false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('suspended_note', 'suspended_note.note_id=sales.suspend_note', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->group_by('sales.id')
                ->order_by('sales.date desc');

            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($sale_status != null) {
                $this->db->where('sales.sale_status', $sale_status);
            }
            
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
             
            if($start_date){
                $report_date = 'From '.$start_date.' To '.$end_date ;
            }else{
               $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 25,
                        'name'  => 'Verdana'
                    )
                );

                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);

                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('customer') .' (QTY)');
                $this->excel->getActiveSheet()->SetCellValue('K4',($this->pos_settings->pos_type =='pos') ? lang('product_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('payment_status'));

                $row = 5; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->customer_qty);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, ($this->pos_settings->pos_type =='pos') ? $data_row->iname : $data_row->suspend);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->order_discount);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, lang($data_row->payment_status));
                    $cus_qty     += $data_row->customer_qty;
                    $total       += $data_row->total;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('N' . $row . ':P' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $cus_qty);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
                            $this->datatables->select('product_id,CONCAT(product_name,"-",product_code) as pname,SUM(quantity) as pqty,SUM(subtotal) as ptotal')
                            ->from("sale_items")->group_by('product_id')->having('COUNT(product_id) >= 1')
                             ->join('sales', 'sales.id=sale_items.sale_id', 'left')
                             ->join('projects', 'projects.project_id=sales.project_id', 'left')
                             ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
                             ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_report') . "' href='" . admin_url('reports/consignment_report/$1') . "'><span class='label label-primary'>" . lang('view_report') . '</span></a></div>', 'product_id')
                ->unset_column('product_id');
                $this->datatables->where('sales.sale_status', 'consignment');
            // $this->datatables->select("project_name,sale_status,reference_no as b, biller,c.name as customer_id,c.phone,c.address,CONCAT(product_name,'-',product_code) as pname, unit_price, quantity, warehouses.name,payment_status,")
            //                  ->from("sale_items")
            //                  ->join('sales', 'sales.id=sale_items.sale_id', 'left')
            //                  ->join('projects', 'projects.project_id=sales.project_id', 'left')
            //                  ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
            //                  ->join('companies c', 'c.id=sales.customer_id', 'left');
            //                  $this->db->where('sales.sale_status', 'consignment');
            // $si = "( SELECT sale_id, product_id, serial_no,
            // GROUP_CONCAT(CONCAT({$this->db->dbprefix('sale_items')}.product_name, '__', {$this->db->dbprefix('sale_items')}.quantity) SEPARATOR '___') as item_nane from {$this->db->dbprefix('sale_items')} ";
            // $sj = "( SELECT sale_id, product_id, serial_no,
            //  SUM({$this->db->dbprefix('sale_items')}.original_price * {$this->db->dbprefix('sale_items')}.unit_quantity) as item_real_price from {$this->db->dbprefix('sale_items')} ";
            // if ($product || $serial) {
            //     $si .= ' WHERE ';
            //     $sj .= ' WHERE ';
            // }
            // if ($product) {
            //     $si .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            //     $sj .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            // }
            // if ($product && $serial) {
            //     $si .= ' AND ';
            //     $sj .= ' AND ';
            // }
            // if ($serial) {
            //     $si .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
            //     $sj .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
            // }
            // $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            // $sj .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSJ";
            // $this->load->library('datatables');
            // $this->datatables
            //     ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date,
            //         project_name,
            //         reference_no,
            //         biller,
            //         c.name as customer_id,
            //         c.phone,
            //         c.address,
            //         customer_qty,
            //         FSI.item_nane as iname,
            //         sale_status,
            //         grand_total, paid,
            //         (grand_total-paid) as balance,
            //         payment_status,
            //         {$this->db->dbprefix('sales')}.id as id", false)
            //     ->from('sales')
            //     ->join($si, 'FSI.sale_id=sales.id', 'left')
            //     ->join($sj, 'FSJ.sale_id=sales.id', 'left')
            //     ->join('projects', 'projects.project_id=sales.project_id', 'left')
            //     ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
            //     ->join('companies c', 'c.id=sales.customer_id', 'left');
            // // ->group_by('sales.id');

            // if ($user) {
            //     $this->datatables->where('sales.created_by', $user);
            // }
            // //  if ($sale_status != '') {
            // //     $this->db->where('sales.sale_status', $sale_status);
            // // }
            // if($this->db->where('sales.sale_status', 'consignment')){
            // //     $this->db->where('sales.sale_status', 'returned');
            // }
            // if ($product) {
            //     $this->datatables->where('FSI.product_id', $product);
            // }
            // if ($serial) {
            //     $this->datatables->like('FSI.serial_no', $serial);
            // }
            // if ($biller) {
            //     $this->datatables->where('sales.biller_id', $biller);
            // }
            // if ($customer) {
            //     $this->datatables->where('sales.customer_id', $customer);
            // }
            // if ($phone) {
            //     $this->datatables->where('c.phone', $phone);
            // }
            // if ($address) {
            //     $this->datatables->where('c.address', $address);
            // }
            // if ($warehouse) {
            //     $this->datatables->where('sales.warehouse_id', $warehouse);
            // }
            // if ($reference_no) {
            //     $this->datatables->like('sales.reference_no', $reference_no, 'both');
            // }
            // if ($start_date) {
            //     $this->datatables->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            // }
            // if ($project) {
            //     $this->db->where('sales.project_id', $project);
            // }
            // if ($sale_type) {
            //     $this->datatables->where('sales.pos', $sale_type);
            // }
            
            echo $this->datatables->generate();
        }
    }
    public function getCommissionProducts($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('sales', true);
        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $customer     = $this->input->get('customer') ? $this->input->get('customer') : null;
        $phone        = $this->input->get('phone') ? $this->input->get('phone') : null;
        $address      = $this->input->get('address') ? $this->input->get('address') : null;
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project       = $this->input->get('project') ? $this->input->get('project') : null;
        $sale_type       = $this->input->get('sale_type') ? $this->input->get('sale_type') : null;
        $sale_status       = $this->input->get('sale_status') ? $this->input->get('sale_status') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        $Settings = $this->site->getSettings();
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {
            $this->db
                ->select('date, project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    '. $this->db->dbprefix('suspended_note').'.name as suspend,
                    reference_no, biller, customer, c.phone, c.address, '. $this->db->dbprefix('sales').'.customer_qty, 

                    GROUP_CONCAT(
                        CONCAT(
                            '.$this->db->dbprefix('sale_items') . ".product_code,
                            '_', " . $this->db->dbprefix('sale_items') .".product_name,
                            ' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')') SEPARATOR '\n') as iname, grand_total, total,order_discount, paid, payment_status", false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('suspended_note', 'suspended_note.note_id=sales.suspend_note', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->group_by('sales.id')
                ->order_by('sales.date desc');

            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($sale_status != null) {
                $this->db->where('sales.sale_status', $sale_status);
            }
            
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
             
            if($start_date){
                $report_date = 'From '.$start_date.' To '.$end_date ;
            }else{
               $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 25,
                        'name'  => 'Verdana'
                    )
                );

                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);

                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('customer') .' (QTY)');
                $this->excel->getActiveSheet()->SetCellValue('K4',($this->pos_settings->pos_type =='pos') ? lang('product_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('payment_status'));

                $row = 5; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->customer_qty);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, ($this->pos_settings->pos_type =='pos') ? $data_row->iname : $data_row->suspend);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->order_discount);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $data_row->payment_status);
                }
            }
        } else {
            $this->load->library('datatables');
            if ($warehouse_id) {
                $this->datatables
                    ->select('image, code, name, SUM(wp.quantity), alert_quantity')
                    ->from('products')
                    ->join("( SELECT * from {$this->db->dbprefix('warehouses_products')} WHERE warehouse_id IN ({$warehouse_id})) wp", 'products.id=wp.product_id', 'left')
                    ->where('alert_quantity > wp.quantity', null)
                    ->or_where('wp.quantity', null)
                    ->where('track_quantity', 1)
                    ->group_by('products.id');
            } else {
                $this->datatables
                    ->select('image, code, name, quantity, alert_quantity')
                    ->from('products')
                    ->where('alert_quantity > quantity', null)
                    ->where('track_quantity', 1);
            }
            echo $this->datatables->generate();
        }
    }

    public function getSalesReport($pdf = null, $xls = null, $preview = null, $excel_deatail = null, $xls2 = null)
    {
        $this->bpas->checkPermissions('sales', true);
        $userdata = $this->site->getUserByID($this->session->userdata('user_id'));
        $product        = $this->input->get('product') ? $this->input->get('product') : null;
        $user           = $this->input->get('user') ? $this->input->get('user') : null;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : null;
        $phone          = $this->input->get('phone') ? $this->input->get('phone') : null;
        $address        = $this->input->get('address') ? $this->input->get('address') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse      = $this->input->get('warehouse') ? $this->input->get('warehouse') :null;
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $biller     = $this->input->get('biller') ? $this->input->get('biller') : explode(',', $userdata->multi_biller);
            $warehouse  = $this->input->get('warehouse') ? $this->input->get('warehouse') : explode(',', $userdata->warehouse_id);
        }
        $reference_no   = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial         = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project        = $this->input->get('project') ? $this->input->get('project') : null;
        $sale_type      = $this->input->get('sale_type') ? $this->input->get('sale_type') : null;
        $sale_status    = $this->input->get('sale_status') ? $this->input->get('sale_status') : null;
        $zone           = $this->input->get('zone_id') ? $this->input->get('zone_id') : null;
        $saleman        = $this->input->get('saleman') ? $this->input->get('saleman') : null;
        $payment_status = $this->input->get('payment_status') ? $this->input->get('payment_status') : null;
        $category       = $this->input->get('category') ? $this->input->get('category') : null;
        $brand          = $this->input->get('brand') ? $this->input->get('brand') : null;
        $cat_ids        = NULL;
        if ($category) {
            if ($child_category = $this->site->getCategoriesByParent($category)) {
                $cat_ids = $this->GetMultiLevelCategoryId($child_category);
            }
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($preview) {
            $this->db->select($this->db->dbprefix('sales') .'.date,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    reference_no, biller, customer, 
                    ' . $this->db->dbprefix('sale_items') . ".product_code,
                    " . $this->db->dbprefix('sale_items') . ".product_name,
                    " . $this->db->dbprefix('sale_items') . ".expiry,
                    " . $this->db->dbprefix('sale_items') . ".quantity, 
                    " . $this->db->dbprefix('sale_items') . ".unit_quantity, 
                    " . $this->db->dbprefix('sale_items') . ".product_unit_code, 
                    " . $this->db->dbprefix('warehouses') . ".name as warehouse_name,
                    " . $this->db->dbprefix('sale_items') . ".subtotal,
                    " . $this->db->dbprefix('sale_items') . ".unit_price,
                    " . $this->db->dbprefix('sale_items') . ".item_discount,
                    " . $this->db->dbprefix('sale_items') . ".item_tax,
                    grand_total,
                    total,
                    order_discount,
                    paid,
                    payment_status
                ", false)
                ->from('sale_items')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('categories', 'categories.id = products.category_id', 'left')
                ->join('sales', 'sales.id = sale_items.sale_id', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->order_by('sales.date desc'); 
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($sale_status != null) {
                if($sale_status == "consignment"){
                     $this->db->where('consignment_status', 1);
                }else{
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($category && empty($cat_ids)) {
                $this->db->where('categories.id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->db->where("categories.id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->db->where('products.brand', $brand);
            }
            if ($biller) {
                $this->db->where_in('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where_in('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($sale_type) {
                $this->db->where('sales.pos', $sale_type);
            }
            if($saleman){
                $this->db->where('sales.saleman_by', $saleman);
            }
            if ($zone) {
                $this->db->where_in('sales.zone_id', $arr_zone);
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->db->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
            } else {
                $data = null;
            } 
            $this->data['biller']     =  $this->site->getCompanyByID($biller);
            $this->data['rows']       = $data;
            $this->data['start_date'] = $start_date;
            $this->data['end_date']   = $end_date;
            if ($zone) {
                $this->data['zone']   = $this->site->getZoneByID($zone);    
            } 
            $bc   = array(array('link'   => base_url(), 'page' => lang('home')), array('link' => admin_url('sales'), 'page' => lang('sales')), array('link' => '#', 'page' => lang('sale_report')));
            $meta = array('page_title' => lang('sale_report'), 'bc' => $bc);
            $this->page_construct('reports/sale_preview', $meta, $this->data);
        } elseif ($pdf || $xls) {
            $this->db->select($this->db->dbprefix('sales') .'.date, project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    '. $this->db->dbprefix('suspended_note').'.name as suspend,
                    reference_no, biller, customer, c.phone, c.address, '. $this->db->dbprefix('sales').'.customer_qty, 
                    GROUP_CONCAT(CONCAT('.$this->db->dbprefix('sale_items') . ".product_code,
                            '_', " . $this->db->dbprefix('sale_items') .".product_name,
                            ' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')') SEPARATOR '\n') as iname, grand_total, total,order_discount, paid, payment_status", false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('categories', 'categories.id = products.category_id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('suspended_note', 'suspended_note.note_id=sales.suspend_note', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->group_by('sales.id')
                ->order_by('sales.date desc'); 
            if ($sale_status != null) {
                if($sale_status == "consignment") {
                     $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if (($category && empty($cat_ids))) {
                $this->db->where('categories.id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->db->where("categories.id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->db->where('products.brand', $brand);
            }
            if ($biller) {
                $this->db->where_in('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where_in('sales.warehouse_id', $warehouse);
            }
            if($saleman){
                $this->db->where('sales.saleman_by', $saleman);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($sale_status != null) {
                if ($sale_status == "consignment") {
                     $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->db->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if ($start_date) {
                $report_date = 'From '.$start_date.' To '.$end_date ;
            }else{
               $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array('font'  => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 25, 'name'  => 'Verdana'));
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('product') .' (QTY)');
                $this->excel->getActiveSheet()->SetCellValue('K4',($this->pos_settings->pos_type =='pos') ? lang('product_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('payment_status'));
                $row = 5; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->customer_qty);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, ($this->pos_settings->pos_type =='pos') ? $data_row->iname : $data_row->suspend);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->order_discount);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, lang($data_row->payment_status));
                    $cus_qty     += $data_row->customer_qty;
                    $total       += $data_row->total;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('N' . $row . ':P' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $cus_qty);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $balance); 
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($excel_deatail) {
            $this->db->select('
                    date, project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    reference_no, biller, customer,c.phone, c.address, 
                    '. $this->db->dbprefix('sales').'.customer_qty,
                    '.$this->db->dbprefix('sale_items') . ".product_code,
                    " . $this->db->dbprefix('sale_items') .".product_name,
                    " . $this->db->dbprefix('sale_items') .".expiry,
                    " . $this->db->dbprefix('sale_items') . ".quantity, 
                    " . $this->db->dbprefix('sale_items') . ".unit_quantity, 
                    " . $this->db->dbprefix('sale_items') . ".product_unit_code, 
                    " . $this->db->dbprefix('warehouses') . ".name as warehouse_name,
                    " . $this->db->dbprefix('sale_items') . ".subtotal,
                    " . $this->db->dbprefix('sale_items') . ".unit_price,
                    " . $this->db->dbprefix('sale_items') . ".item_discount,
                    " . $this->db->dbprefix('sale_items') . ".item_tax,
                    grand_total,
                    total,
                    order_discount,
                    paid,
                    payment_status
                ", false)
                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'left')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('categories', 'categories.id = products.category_id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->order_by('sales.date desc'); 
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($sale_status != null) {
                if ($sale_status == "consignment") {
                     $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($saleman) {
                $this->db->where('sales.saleman_by', $saleman);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if (($category && empty($cat_ids))) {
                $this->db->where('categories.id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->db->where("categories.id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->db->where('products.brand', $brand);
            }
            if ($biller) {
                $this->db->where_in('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where_in('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->db->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if ($start_date) {
                $report_date = 'From '.$start_date.' To '.$end_date;
            } else {
               $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array('font'  => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 25, 'name'  => 'Verdana'));
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('K4',($this->pos_settings->pos_type =='pos') ? lang('product_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('vat'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('subtotal'));
                $row = 5; $sub_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->product_unit_code);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->unit_quantity * $data_row->unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->item_discount);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->item_tax);
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, lang($data_row->subtotal));
                    $sub_qty     += $data_row->quantity;
                    $total       += $data_row->total;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('N' . $row . ':P' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $sub_qty);
                /*$this->excel->getActiveSheet()->SetCellValue('L' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $balance);*/
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report_detail';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($xls2) {
            $this->db->select(
                    $this->db->dbprefix('sales').'.date,
                    ' . $this->db->dbprefix('sales').'.id as id, project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    ' . $this->db->dbprefix('users').'.last_name) as created_by,
                    ' . $this->db->dbprefix('suspended_note').'.name as suspend,
                    reference_no, biller, customer, c.phone, c.address, '. $this->db->dbprefix('sales').'.customer_qty, 
                    GROUP_CONCAT(CONCAT('.$this->db->dbprefix('sale_items') . ".product_code, '_', " . $this->db->dbprefix('sale_items') .".product_name,' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')') SEPARATOR '\n') as iname, 
                    COALESCE(( SELECT COALESCE(SUM({$this->db->dbprefix('costing')}.purchase_unit_cost * {$this->db->dbprefix('costing')}.quantity), 0) FROM {$this->db->dbprefix('costing')} WHERE {$this->db->dbprefix('costing')}.sale_id = {$this->db->dbprefix('sales')}.id GROUP BY {$this->db->dbprefix('costing')}.sale_id ), 0) AS sale_costing,
                    grand_total, total, order_discount, order_tax, COALESCE(shipping, 0) as shipping, paid, payment_status", false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('categories', 'categories.id = products.category_id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('suspended_note', 'suspended_note.note_id=sales.suspend_note', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->group_by('sales.id')
                ->order_by('sales.date desc');
            if ($sale_status != null) {
                if ($sale_status == "consignment"){
                    $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if (($category && empty($cat_ids))) {
                $this->db->where('categories.id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->db->where("categories.id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->db->where('products.brand', $brand);
            }
            if ($biller) {
                $this->db->where_in('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($saleman) {
                $this->db->where('sales.saleman_by', $saleman);
            }
            if ($warehouse) {
                $this->db->where_in('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($sale_status != null) {
                if ($sale_status == "consignment") {
                    $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->db->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if ($start_date) {
                $report_date = 'From '.$start_date.' To '.$end_date ;
            } else {
                $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array('font'  => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 25, 'name'  => 'Verdana'));
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('K4', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('tax'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('shipping'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('R4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('S4', lang('payment_status'));
                $row = 5; $count_row = 0; $cus_qty = 0; $total = 0; $shipping = 0; $grand_total = 0; $tax = 0; $discount = 0; $paid = 0; $balance = 0; $cost = 0; $n = 1;
                foreach ($data as $data_row) {
                    $inv_items = $this->sales_model->getAllInvoiceItems($data_row->id);
                    $count_row = ($row + count($inv_items) -1);
                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':A' . $count_row)->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->mergeCells('B' . $row . ':B' . $count_row)->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->mergeCells('C' . $row . ':C' . $count_row)->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->mergeCells('D' . $row . ':D' . $count_row)->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->mergeCells('E' . $row . ':E' . $count_row)->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->mergeCells('F' . $row . ':F' . $count_row)->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->mergeCells('G' . $row . ':G' . $count_row)->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->mergeCells('H' . $row . ':H' . $count_row)->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->mergeCells('L' . $row . ':L' . $count_row)->SetCellValue('L' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->mergeCells('M' . $row . ':M' . $count_row)->SetCellValue('M' . $row, $data_row->order_discount);
                    $this->excel->getActiveSheet()->mergeCells('N' . $row . ':N' . $count_row)->SetCellValue('N' . $row, $data_row->order_tax);
                    $this->excel->getActiveSheet()->mergeCells('O' . $row . ':O' . $count_row)->SetCellValue('O' . $row, $data_row->shipping);
                    $this->excel->getActiveSheet()->mergeCells('P' . $row . ':P' . $count_row)->SetCellValue('P' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->mergeCells('Q' . $row . ':Q' . $count_row)->SetCellValue('Q' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->mergeCells('R' . $row . ':R' . $count_row)->SetCellValue('R' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->mergeCells('S' . $row . ':S' . $count_row)->SetCellValue('S' . $row, lang($data_row->payment_status));
                    foreach ($inv_items as $item) {
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $item->product_name);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $item->quantity);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $item->unit_price);
                        $row++;
                    }
                    $total       += $data_row->total;
                    $shipping    += $data_row->shipping;
                    $discount    += $data_row->order_discount;
                    $tax         += $data_row->order_tax;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('L' . $row . ':S' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $discount);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $tax);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $shipping);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('R' . $row, $balance);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $si = "( 
                    SELECT sale_id, product_id, {$this->db->dbprefix('sale_items')}.serial_no, {$this->db->dbprefix('products')}.category_id, {$this->db->dbprefix('products')}.brand, GROUP_CONCAT(CONCAT({$this->db->dbprefix('sale_items')}.product_name, '__', {$this->db->dbprefix('sale_items')}.quantity) SEPARATOR '___') as item_nane, SUM({$this->db->dbprefix('sale_items')}.quantity) as item_qty 
                    FROM {$this->db->dbprefix('sale_items')} 
                    LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id = {$this->db->dbprefix('sale_items')}.product_id WHERE 1 ";
            $sj = "( 
                    SELECT sale_id, product_id, {$this->db->dbprefix('sale_items')}.serial_no, {$this->db->dbprefix('products')}.category_id, {$this->db->dbprefix('products')}.brand, SUM({$this->db->dbprefix('sale_items')}.original_price * {$this->db->dbprefix('sale_items')}.unit_quantity) as item_real_price 
                    FROM {$this->db->dbprefix('sale_items')} 
                    LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id = {$this->db->dbprefix('sale_items')}.product_id WHERE 1 ";
            if ($product) {
                $si .= " AND {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
                $sj .= " AND {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            }
            if ($serial) {
                $si .= " AND {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
                $sj .= " AND {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
            }
            if (($category && empty($cat_ids))) {
                $si .= " AND {$this->db->dbprefix('products')}.category_id = {$category} ";
                $sj .= " AND {$this->db->dbprefix('products')}.category_id = {$category} ";
                $ci .= " AND {$this->db->dbprefix('products')}.category_id = {$category} ";
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $si .= " AND {$this->db->dbprefix('products')}.category_id IN ($cat_ids) ";
                $sj .= " AND {$this->db->dbprefix('products')}.category_id IN ($cat_ids) ";
                $ci .= " AND {$this->db->dbprefix('products')}.category_id IN ($cat_ids) ";
            }
            if ($brand) {
                $si .= " AND {$this->db->dbprefix('products')}.brand = {$brand} ";
                $sj .= " AND {$this->db->dbprefix('products')}.brand = {$brand} ";
            }
            $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            $sj .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSJ";
            $this->datatables->select("
                    DATE_FORMAT({$this->db->dbprefix('sales')}.date, '%Y-%m-%d %T') as date,
                    project_name,
                    reference_no,
                    biller,
                    c.name as customer_id,
                    c.phone,
                    c.address,
                    FSI.item_qty as iqty,
                    FSI.item_nane as iname,
                    sale_status,
                    grand_total, paid,
                    (grand_total - paid) as balance,
                    payment_status,
                    {$this->db->dbprefix('sales')}.id as id", false)
                ->from('sales')
                ->join($si, 'FSI.sale_id=sales.id', 'left')
                ->join($sj, 'FSJ.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                // ->where('sales.store_sale !=', 1)
                ->order_by("sales.reference_no");
            // ->group_by('sales.id');
            if ($sale_status != null) {
                if($sale_status == "consignment"){
                    $this->datatables->where('consignment_status', 1);
                } else {
                    $this->datatables->where('sales.sale_status', $sale_status);
                }
            }
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FSI.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('FSI.serial_no', $serial);
            }
            if ($category && empty($cat_ids)) {
                $this->datatables->where('FSI.category_id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->datatables->where("FSI.category_id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->datatables->where('FSI.brand', $brand);
            }
            if ($saleman) {
                $this->datatables->where('sales.saleman_by', $saleman);
            }
            if ($biller) {
                $this->datatables->where_in('sales.biller_id', $biller);
            } 
            if ($warehouse) {
                $this->datatables->where_in('sales.warehouse_id', $warehouse);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->datatables->where('c.phone', $phone);
            }
            if ($address) {
                $this->datatables->where('c.address', $address);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->datatables->where('sales.project_id', $project);
            }
            if ($sale_type) {
                $this->datatables->where('sales.pos', $sale_type);
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->datatables->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->datatables->where('sales.payment_status !=', 'paid');
                }
            }
            echo $this->datatables->generate();
        }
    }

    public function getticket_reports($pdf = null, $xls = null, $preview = null, $excel_deatail = null)
    {
        $this->bpas->checkPermissions('sales', true);
        $product        = $this->input->get('product') ? $this->input->get('product') : null;
        $user           = $this->input->get('user') ? $this->input->get('user') : null;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : null;
        $phone          = $this->input->get('phone') ? $this->input->get('phone') : null;
        $address        = $this->input->get('address') ? $this->input->get('address') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse      = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no   = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $from           = $this->input->get('from') ? $this->input->get('from') : null;
        $destination    = $this->input->get('destination') ? $this->input->get('destination') : null;
        $timeout        = $this->input->get('time_out') ? $this->input->get('time_out') : null;
        $serial         = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project        = $this->input->get('project') ? $this->input->get('project') : null;
        $sale_type      = $this->input->get('sale_type') ? $this->input->get('sale_type') : null;
        $sale_status    = $this->input->get('sale_status') ? $this->input->get('sale_status') : null;
        $zone           = $this->input->get('zone_id') ? $this->input->get('zone_id') : null;
        $payment_status = $this->input->get('payment_status') ? $this->input->get('payment_status') : null;
 
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }       

        if($preview){
            $cositng = " ( SELECT COALESCE(IF({$this->db->dbprefix('products')}.type = 'service', {$this->db->dbprefix('costing')}.service_cost, {$this->db->dbprefix('costing')}.purchase_unit_cost), 0) FROM {$this->db->dbprefix('costing')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('costing')}.product_id = {$this->db->dbprefix('products')}.id WHERE {$this->db->dbprefix('costing')}.sale_id = {$this->db->dbprefix('sale_items')}.sale_id AND {$this->db->dbprefix('costing')}.product_id = {$this->db->dbprefix('sale_items')}.product_id LIMIT 1 ) ";
            $this->db->select('
                    date, CONCAT('.$this->db->dbprefix('users').'.first_name, " ", '.$this->db->dbprefix('users').'.last_name) as created_by, reference_no, biller, customer, 
                    ' . $this->db->dbprefix('sale_items') . ".product_code,
                    " . $this->db->dbprefix('sale_items') . ".product_name,
                    " . $this->db->dbprefix('sale_items') . ".expiry,
                    " . $this->db->dbprefix('sale_items') . ".quantity, 
                    " . $this->db->dbprefix('sale_items') . ".unit_quantity, 
                    " . $this->db->dbprefix('sale_items') . ".product_unit_code, 
                    " . $this->db->dbprefix('warehouses') . ".name as warehouse_name,
                    " . $this->db->dbprefix('sale_items') . ".subtotal,
                    COALESCE(" . $cositng . ", 0) AS unit_cost,
                    " . $this->db->dbprefix('sale_items') . ".unit_price,
                    " . $this->db->dbprefix('sale_items') . ".item_discount,
                    " . $this->db->dbprefix('sale_items') . ".item_tax,
                    grand_total,
                    total,
                    order_discount,
                    paid,
                    payment_status
                ", false)
                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->order_by('sales.date desc');

            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($sale_status != null) {
                if($sale_status == "consignment"){
                    $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($sale_type) {
                $this->db->where('sales.pos', $sale_type);
            }
            if ($zone) {
                $this->db->where_in('sales.zone_id', $arr_zone);
            }
            if ($payment_status) {
                if($payment_status == 'paid'){
                    $this->db->where('sales.payment_status', $payment_status);
                } else {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
            } else {
                $data = null;
            }
            
            $this->data['biller'] =  $this->site->getCompanyByID($biller);
            $this->data['rows'] = $data;
            $this->data['start_date'] = $start_date;
            $this->data['end_date'] = $end_date;
            if($zone){
                $this->data['zone'] = $this->site->getZoneByID($zone);    
            }
            
            $bc = array(array('link'   => base_url(), 'page' => lang('home')), array('link' => admin_url('sales'), 'page' => lang('sales')), array('link' => '#', 'page' => lang('sale_report')));
            $meta = array('page_title' => lang('sale_report'), 'bc' => $bc);
            $this->page_construct('reports/sale_costing_preview', $meta, $this->data);
        } elseif ($pdf || $xls) {
            $this->db->select($this->db->dbprefix('sales').'.date,
            project_name,
            cf_from.name as fr,
            cf_des.name as des,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    '. $this->db->dbprefix('suspended_note').'.name as suspend,
                    reference_no, biller, customer, c.phone, c.address, '. $this->db->dbprefix('sales').'.customer_qty, 
                    GROUP_CONCAT(CONCAT('.$this->db->dbprefix('sale_items') . ".product_code, '_', " . $this->db->dbprefix('sale_items') .".product_name,' (', " . $this->db->dbprefix('sale_items') . ".quantity, ') : ',". $this->db->dbprefix('sale_items') .".timeout_name) SEPARATOR '\n') as iname, 
                    COALESCE(( SELECT COALESCE(SUM({$this->db->dbprefix('costing')}.purchase_unit_cost * {$this->db->dbprefix('costing')}.quantity), 0) FROM {$this->db->dbprefix('costing')} WHERE {$this->db->dbprefix('costing')}.sale_id = {$this->db->dbprefix('sales')}.id GROUP BY {$this->db->dbprefix('costing')}.sale_id ), 0) AS sale_costing,
                    grand_total, total,order_discount, paid, payment_status", false)
                ->from('sales')
                ->join('sale_items' , 'sale_items.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('suspended_note', 'suspended_note.note_id=sales.suspend_note', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')

                ->join('custom_field cf_from', 'cf_from.id = sale_items.from_id', 'left')
                ->join('custom_field cf_des', 'cf_des.id = sale_items.destination_id', 'left')

                ->where('sales.store_sale !=', 1)
                ->where('sales.module_type =','ticket')
                ->group_by('sales.id')
                ->order_by('sales.date desc');

            if ($sale_status != null) {
                if($sale_status == "consignment"){
                    $this->db->where('consignment_status', 1);
                }else{
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }

            if ($from) {
                $this->db->where('sale_items.from_id', $from);
            }
            if ($destination) {
                $this->db->where('sale_items.destination_id', $destination);
            }
            
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($payment_status) {
                $this->datatables->where('payment_status', $payment_status);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($sale_status != null) {
                if($sale_status == "consignment"){
                    $this->db->where('consignment_status', 1);
                }else{
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if($start_date){
                $report_date = 'From '.$start_date.' To '.$end_date ;
            }else{
                $report_date = '' ;
            }
        
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 25,
                        'name'  => 'Verdana'
                    )
                );

                $this->excel->getActiveSheet()->setTitle(lang('ticket_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('ticket_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('from'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('destination'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('H4',($this->pos_settings->pos_type =='pos') ? lang('seat_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('K4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('payment_status'));

                $row = 5; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $cost = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->fr);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->des);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, ($this->pos_settings->pos_type =='pos') ? $data_row->iname : $data_row->suspend);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->order_discount);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, lang($data_row->payment_status));
                    $cus_qty     += $data_row->customer_qty;
                    $cost        += $data_row->sale_costing;
                    $total       += $data_row->total;
                    $discount    += $data_row->order_discount;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('N' . $row . ':P' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $discount);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($excel_deatail) {
            $cositng = " ( SELECT COALESCE(IF({$this->db->dbprefix('products')}.type = 'service', {$this->db->dbprefix('costing')}.service_cost, {$this->db->dbprefix('costing')}.purchase_unit_cost), 0) FROM {$this->db->dbprefix('costing')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('costing')}.product_id = {$this->db->dbprefix('products')}.id WHERE {$this->db->dbprefix('costing')}.sale_id = {$this->db->dbprefix('sale_items')}.sale_id AND {$this->db->dbprefix('costing')}.product_id = {$this->db->dbprefix('sale_items')}.product_id LIMIT 1 ) ";
            $this->db->select('date,
                    project_name,
                    cf_from.name as fr,
                    cf_des.name as des,        
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    reference_no, 
                    biller, customer,c.phone, c.address, 
                    '. $this->db->dbprefix('sales').'.customer_qty,
                    '.$this->db->dbprefix('sale_items') . ".product_code,
                    " . $this->db->dbprefix('sale_items') .".product_name,
                    " . $this->db->dbprefix('sale_items') .".expiry,
                    " . $this->db->dbprefix('sale_items') . ".quantity, 
                    " . $this->db->dbprefix('sale_items') . ".product_unit_code, 
                    " . $this->db->dbprefix('warehouses') . ".name as warehouse_name,
                    " . $this->db->dbprefix('sale_items') . ".subtotal,
                    COALESCE(" . $cositng . ", 0) AS unit_cost,
                    " . $this->db->dbprefix('sale_items') . ".unit_price,
                    " . $this->db->dbprefix('sale_items') . ".item_discount,
                    " . $this->db->dbprefix('sale_items') . ".item_tax,
                    grand_total,
                    total,
                    order_discount,
                    paid,
                    payment_status
                ", false)

                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->join('custom_field cf_from', 'cf_from.id = sale_items.from_id', 'left')
                ->join('custom_field cf_des', 'cf_des.id = sale_items.destination_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->where('sales.module_type =','ticket')
                ->order_by('sales.date desc');


            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($sale_status != null) {
                if($sale_status == "consignment"){
                     $this->db->where('consignment_status', 1);
                }else{
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }

            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }

            if ($from) {
                $this->db->where('sale_items.from_id', $from);
            }

            if ($destination) {
                $this->db->where('sale_items.destination_id', $destination);
            }
            if ($payment_status) {
                $this->datatables->where('payment_status', $payment_status);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if($start_date){
                $report_date = 'From '.$start_date.' To '.$end_date ;
            }else{
               $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 25,
                        'name'  => 'Verdana'
                    )
                );

                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('from'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('destination'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('J4',($this->pos_settings->pos_type =='pos') ? lang('product_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('K4', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('vat'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('subtotal'));

                $row = 5; $sub_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->fr);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->des);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->product_unit_code);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->quantity * $data_row->unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->item_discount);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->item_tax);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, lang($data_row->subtotal));
                    $sub_qty     += $data_row->quantity;
                    $total       += $data_row->total;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('M' . $row . ':O' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $sub_qty);
                /*$this->excel->getActiveSheet()->SetCellValue('L' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $balance);*/

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report_detail';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $si = " ( SELECT sale_id, product_id, {$this->db->dbprefix('sale_items')}.serial_no, GROUP_CONCAT( CONCAT({$this->db->dbprefix('sale_items')}.product_name, '__', {$this->db->dbprefix('sale_items')}.quantity, '__', {$this->db->dbprefix('sale_items')}.timeout_name ) SEPARATOR '___') as item_nane, SUM({$this->db->dbprefix('sale_items')}.quantity) as item_qty from {$this->db->dbprefix('sale_items')} ";
            $sj = " ( SELECT sale_id, product_id, {$this->db->dbprefix('sale_items')}.serial_no, SUM({$this->db->dbprefix('sale_items')}.original_price * {$this->db->dbprefix('sale_items')}.unit_quantity) as item_real_price from {$this->db->dbprefix('sale_items')} ";
            $ci = " ( SELECT sale_id, product_id, {$this->db->dbprefix('products')}.serial_no, SUM(IF({$this->db->dbprefix('products')}.type = 'service', {$this->db->dbprefix('costing')}.service_cost, {$this->db->dbprefix('costing')}.purchase_unit_cost) * {$this->db->dbprefix('costing')}.quantity) as sale_costing FROM {$this->db->dbprefix('costing')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id = {$this->db->dbprefix('costing')}.product_id ";
            $ti = " ( SELECT 
                        {$this->db->dbprefix('reservation')}.sale_id,
                        cf_from.name AS place_start,
                        cf_from.id AS place_from_id,
                        cf_des.name AS place_end,
                        cf_des.id AS place_des_id,
                        cf_timeout.id AS timeout_id,
                        GROUP_CONCAT(cf_timeout.name SEPARATOR '__') AS timeout
                    FROM {$this->db->dbprefix('reservation')} 
                    LEFT JOIN {$this->db->dbprefix('custom_field')} AS cf_from ON cf_from.id = {$this->db->dbprefix('reservation')}.from
                    LEFT JOIN {$this->db->dbprefix('custom_field')} AS cf_des ON cf_des.id = {$this->db->dbprefix('reservation')}.destination
                    LEFT JOIN {$this->db->dbprefix('custom_field')} AS cf_timeout ON cf_timeout.id = {$this->db->dbprefix('reservation')}.timeout ";

            if ($product || $serial) {
                $si .= ' WHERE ';
                $sj .= ' WHERE ';
                $ci .= ' WHERE ';
                $ti .= ' WHERE ';
            }

            if ($product) {
                $si .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
                $sj .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
                $ci .= " {$this->db->dbprefix('costing')}.product_id = {$product} ";
                $ti .= " {$this->db->dbprefix('reservation')}.note_id = {$product} ";
            }

            if ($product && $serial) {
                $si .= ' AND ';
                $sj .= ' AND ';
                $ci .= ' AND ';
            }

            if ($serial) {
                $si .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
                $sj .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
                $ci .= " {$this->db->dbprefix('products')}.serial_no   LIKe '%{$serial}%' ";
            }

            $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            $sj .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSJ";
            $ci .= " GROUP BY {$this->db->dbprefix('costing')}.sale_id )    FCI";
            $ti .= " GROUP BY {$this->db->dbprefix('reservation')}.sale_id ) FTI";

            $this->load->library('datatables');
            $this->datatables
                ->select("
                    DATE_FORMAT(date, '%Y-%m-%d %T') as date,
                    FTI.place_start,
                    FTI.place_end,
                    reference_no,
                    biller,
                    c.name as customer_id,
                    FSI.item_nane as iname,
                    sale_status,
                    grand_total, paid,
                    (grand_total-paid) as balance,
                    payment_status,
                    {$this->db->dbprefix('sales')}.id as id", false)
                ->from('sales')
                ->join($si, 'FSI.sale_id = sales.id', 'left')
                ->join($sj, 'FSJ.sale_id = sales.id', 'left')
                ->join($ci, 'FCI.sale_id = sales.id', 'left')
                ->join($ti, 'FTI.sale_id = sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->where('sales.module_type =','ticket')
                ->order_by("sales.reference_no");

            if ($sale_status != null) {
                if($sale_status == "consignment"){
                    $this->datatables->where('consignment_status', 1);
                }else{
                    $this->datatables->where('sales.sale_status', $sale_status);
                }
            }
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FSI.product_id', $product);
                $this->datatables->where('FCI.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('FSI.serial_no', $serial);
                $this->datatables->like('FCI.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->datatables->where('c.phone', $phone);
            }
            if ($address) {
                $this->datatables->where('c.address', $address);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($from) {
                $this->datatables->like('FTI.place_from_id', $from);
            }
            if ($destination) {
                $this->datatables->like('FTI.place_des_id', $destination);
            }
            if ($timeout) {
                $this->datatables->like('FTI.timeout_id', $timeout);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($sale_type) {
                $this->datatables->where('sales.pos', $sale_type);
            }
            if ($payment_status) {
                $this->datatables->where('payment_status', $payment_status);
            }
            
            echo $this->datatables->generate();
        }
    }

    function GetMultiLevelCategoryId($datas)
    {
        $category_ids = ''; 
        foreach ($datas as $key => $categories){
            if (!empty($categories->children)) {
                $category_ids .= (($category_ids != '' ? ',' : '') . $categories->id);
                $category_ids .= (($category_ids != '' ? ',' : '') . $this->GetMultiLevelCategoryId($categories->children));
            } else {
                $category_ids .= (($category_ids != '' ? ',' : '') . $categories->id);
            }
        }
        return $category_ids;
    }

    public function getSales_with_Costing_Report($pdf = null, $xls = null, $preview = null, $excel_deatail = null, $xls2 = null)
    {
        $this->bpas->checkPermissions('sales', true);
        $product        = $this->input->get('product') ? $this->input->get('product') : null;
        $user           = $this->input->get('user') ? $this->input->get('user') : null;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : null;
        $phone          = $this->input->get('phone') ? $this->input->get('phone') : null;
        $address        = $this->input->get('address') ? $this->input->get('address') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse      = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no   = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial         = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project        = $this->input->get('project') ? $this->input->get('project') : null;
        $sale_type      = $this->input->get('sale_type') ? $this->input->get('sale_type') : null;
        $sale_status    = $this->input->get('sale_status') ? $this->input->get('sale_status') : null;
        $zone           = $this->input->get('zone_id') ? $this->input->get('zone_id') : null;
        $saleman_by     = $this->input->get('saleman') ? $this->input->get('saleman') : null;
        $payment_status = $this->input->get('payment_status') ? $this->input->get('payment_status') : null;
        $category       = $this->input->get('category') ? $this->input->get('category') : null;
        $brand          = $this->input->get('brand') ? $this->input->get('brand') : null;
        $cat_ids        = NULL;
        if ($category) {
            if ($child_category = $this->site->getCategoriesByParent($category)) {
                $cat_ids = $this->GetMultiLevelCategoryId($child_category);
            }
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($preview) {
            $cositng = " ( SELECT COALESCE(IF({$this->db->dbprefix('products')}.type = 'service', {$this->db->dbprefix('costing')}.service_cost, {$this->db->dbprefix('costing')}.purchase_unit_cost), 0) FROM {$this->db->dbprefix('costing')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('costing')}.product_id = {$this->db->dbprefix('products')}.id WHERE {$this->db->dbprefix('costing')}.sale_id = {$this->db->dbprefix('sale_items')}.sale_id AND {$this->db->dbprefix('costing')}.product_id = {$this->db->dbprefix('sale_items')}.product_id LIMIT 1 ) ";
            $this->db->select($this->db->dbprefix('sales') . '
                    .date, CONCAT('.$this->db->dbprefix('users').'.first_name, " ", '.$this->db->dbprefix('users').'.last_name) as created_by, reference_no, biller, customer, 
                    ' . $this->db->dbprefix('sale_items') . ".product_code,
                    " . $this->db->dbprefix('sale_items') . ".product_name,
                    " . $this->db->dbprefix('sale_items') . ".expiry,
                    " . $this->db->dbprefix('sale_items') . ".quantity, 
                    " . $this->db->dbprefix('sale_items') . ".unit_quantity, 
                    " . $this->db->dbprefix('sale_items') . ".product_unit_code, 
                    " . $this->db->dbprefix('warehouses') . ".name as warehouse_name,
                    " . $this->db->dbprefix('sale_items') . ".subtotal,
                    COALESCE(" . $cositng . ", 0) AS unit_cost,
                    " . $this->db->dbprefix('sale_items') . ".unit_price,
                    " . $this->db->dbprefix('sale_items') . ".item_discount,
                    " . $this->db->dbprefix('sale_items') . ".item_tax,
                    " . $this->db->dbprefix('categories') . ".name as category_name,
                    grand_total,
                    total,
                    order_discount,
                    paid,
                    payment_status
                ", false)
                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'left')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('categories', 'categories.id = products.category_id', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->order_by('sales.date desc');
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($sale_status != null) {
                if($sale_status == "consignment"){
                    $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if (($category && empty($cat_ids))) {
                $this->db->where('categories.id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->db->where("categories.id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->db->where('products.brand', $brand);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($sale_type == 1) { 
                $this->db->where('sales.pos', 1);
            } elseif ($sale_type == 2) {
                $this->db->where('sales.pos', 0);
            }
            if ($saleman_by) {
                $this->db->where('sales.saleman_by', $saleman_by);
            }
            if ($zone) {
                $this->db->where_in('sales.zone_id', $arr_zone);
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->db->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
            } else {
                $data = null;
            }
            $this->data['biller']     =  $this->site->getCompanyByID($biller);
            $this->data['rows']       = $data;
            $this->data['start_date'] = $start_date;
            $this->data['end_date']   = $end_date;
            if ($zone) {
                $this->data['zone'] = $this->site->getZoneByID($zone);    
            }
            $bc = array(array('link'   => base_url(), 'page' => lang('home')), array('link' => admin_url('sales'), 'page' => lang('sales')), array('link' => '#', 'page' => lang('sale_report')));
            $meta = array('page_title' => lang('sale_report'), 'bc' => $bc);
            $this->page_construct('reports/sale_costing_preview', $meta, $this->data);
        } elseif ($pdf || $xls) {
            $this->db->select($this->db->dbprefix('sales').'.date, project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    '. $this->db->dbprefix('suspended_note').'.name as suspend,
                    reference_no, biller, customer, c.phone, c.address, '. $this->db->dbprefix('sales').'.customer_qty, 
                    GROUP_CONCAT(CONCAT('.$this->db->dbprefix('sale_items') . ".product_code, '_', " . $this->db->dbprefix('sale_items') .".product_name,' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')',' (', " . $this->db->dbprefix('sale_items') . ".expiry, ')') SEPARATOR '\n') as iname, 
                    COALESCE(( SELECT COALESCE(SUM({$this->db->dbprefix('costing')}.purchase_unit_cost * {$this->db->dbprefix('costing')}.quantity), 0) FROM {$this->db->dbprefix('costing')} WHERE {$this->db->dbprefix('costing')}.sale_id = {$this->db->dbprefix('sales')}.id GROUP BY {$this->db->dbprefix('costing')}.sale_id ), 0) AS sale_costing,
                    grand_total, total,order_discount, paid, payment_status", false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('categories', 'categories.id = products.category_id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('suspended_note', 'suspended_note.note_id=sales.suspend_note', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->group_by('sales.id')
                ->order_by('sales.date desc');
            if ($sale_status != null) {
                if ($sale_status == "consignment") {
                    $this->db->where('consignment_status', 1);
                }else{
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($category && empty($cat_ids)) {
                $this->db->where('categories.id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->db->where("categories.id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->db->where('products.brand', $brand);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($saleman_by) {
                $this->db->where('sales.saleman_by', $saleman_by);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($sale_type == 1) { 
                $this->db->where('sales.pos', 1);
            } elseif ($sale_type == 2) {
                $this->db->where('sales.pos', 0);
            }
            if ($sale_status != null) {
                if ($sale_status == "consignment") {
                    $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->db->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if ($start_date) {
                $report_date = 'From '.$start_date.' To '.$end_date ;
            } else {
                $report_date = '';
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array('font'  => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 25, 'name'  => 'Verdana'));
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('customer') .' (QTY)');
                $this->excel->getActiveSheet()->SetCellValue('K4',($this->pos_settings->pos_type =='pos') ? lang('product_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('cost'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('R4', lang('payment_status'));
                $row = 5; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $cost = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->customer_qty);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, ($this->pos_settings->pos_type =='pos') ? $data_row->iname : $data_row->suspend);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->sale_costing);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->order_discount);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('R' . $row, lang($data_row->payment_status));
                    $cus_qty     += $data_row->customer_qty;
                    $cost        += $data_row->sale_costing;
                    $total       += $data_row->total;
                    $discount    += $data_row->order_discount;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('N' . $row . ':P' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $cus_qty);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $cost);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $discount);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $balance);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($excel_deatail) {
            $cositng = " ( SELECT COALESCE(IF({$this->db->dbprefix('products')}.type = 'service', {$this->db->dbprefix('costing')}.service_cost, {$this->db->dbprefix('costing')}.purchase_unit_cost), 0) FROM {$this->db->dbprefix('costing')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('costing')}.product_id = {$this->db->dbprefix('products')}.id WHERE {$this->db->dbprefix('costing')}.sale_id = {$this->db->dbprefix('sale_items')}.sale_id AND {$this->db->dbprefix('costing')}.product_id = {$this->db->dbprefix('sale_items')}.product_id LIMIT 1 ) ";
            $this->db->select($this->db->dbprefix('sales') . '.date,
                    project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    reference_no, 
                    biller, customer,c.phone, c.address, 
                    '. $this->db->dbprefix('sales').'.customer_qty,
                    '.$this->db->dbprefix('sale_items') . ".product_code,
                    " . $this->db->dbprefix('sale_items') .".product_name,
                    " . $this->db->dbprefix('sale_items') .".product_name,
                    GROUP_CONCAT(CONCAT(')'," . $this->db->dbprefix('sale_addon_items') .".product_code ,')'," . $this->db->dbprefix('sale_addon_items') .".product_name ) SEPARATOR '+') as addon_product_name,
                    " . $this->db->dbprefix('sale_items') . ".quantity,
                    " . $this->db->dbprefix('sale_items') . ".unit_quantity,  
                    " . $this->db->dbprefix('sale_items') . ".expiry, 
                    " . $this->db->dbprefix('sale_items') . ".product_unit_code, 
                    " . $this->db->dbprefix('warehouses') . ".name as warehouse_name,
                    " . $this->db->dbprefix('sale_items') . ".subtotal,
                    COALESCE(" . $cositng . ", 0) AS unit_cost,
                    " . $this->db->dbprefix('sale_items') . ".unit_price,
                    " . $this->db->dbprefix('sale_items') . ".item_discount,
                    " . $this->db->dbprefix('sale_items') . ".item_tax,
                    " . $this->db->dbprefix('categories') . ".name as category_name,
                    grand_total,
                    total,
                    order_discount,
                    paid,
                    payment_status", false)
                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('sale_addon_items', 'sale_addon_items.sale_item_id=sale_items.id', 'left')
                ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('categories', 'categories.id = products.category_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->group_by('sales.id')
                ->order_by('sales.date desc');
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($sale_status != null) {
                if ($sale_status == "consignment") {
                     $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($sale_type == 1) { 
                $this->db->where('sales.pos', 1);
            } elseif ($sale_type == 2) {
                $this->db->where('sales.pos', 0);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if (($category && empty($cat_ids))) {
                $this->db->where('categories.id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->db->where("categories.id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->db->where('products.brand', $brand);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($saleman_by) {
                $this->db->where('sales.saleman_by', $saleman_by);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->db->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if ($start_date) {
                $report_date = 'From '.$start_date.' To '.$end_date ;
            } else {
               $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array('font'  => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 25, 'name'  => 'Verdana'));
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('K4', lang('category'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('expiry'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('product_addon'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('product_combo'));
                $this->excel->getActiveSheet()->SetCellValue('O4', ($this->pos_settings->pos_type =='pos') ? lang('product_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('cost'));
                $this->excel->getActiveSheet()->SetCellValue('R4', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('S4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('T4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('U4', lang('vat'));
                $this->excel->getActiveSheet()->SetCellValue('V4', lang('subtotal'));
                $row = 5; $sub_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->category_name);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->expiry);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->addon_product_name);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->product_unit_code);
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $data_row->unit_cost);
                    $this->excel->getActiveSheet()->SetCellValue('R' . $row, $data_row->unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('S' . $row, $data_row->unit_quantity * $data_row->unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('T' . $row, $data_row->item_discount);
                    $this->excel->getActiveSheet()->SetCellValue('U' . $row, $data_row->item_tax);
                    $this->excel->getActiveSheet()->SetCellValue('V' . $row, lang($data_row->subtotal));
                    $sub_qty     += $data_row->quantity;
                    $total       += $data_row->total;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('N' . $row . ':P' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $sub_qty);
                /*$this->excel->getActiveSheet()->SetCellValue('L' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $balance);*/
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report_detail';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($xls2) {
            $this->db->select(
                    $this->db->dbprefix('sales').'.date,
                    ' . $this->db->dbprefix('sales').'.id as id, project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    ' . $this->db->dbprefix('users').'.last_name) as created_by,
                    ' . $this->db->dbprefix('suspended_note').'.name as suspend,
                    reference_no, biller, customer, c.phone, c.address, '. $this->db->dbprefix('sales').'.customer_qty, 
                    GROUP_CONCAT(CONCAT('.$this->db->dbprefix('sale_items') . ".product_code, '_', " . $this->db->dbprefix('sale_items') .".product_name,' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')',' (', " . $this->db->dbprefix('sale_items') . ".expiry, ')') SEPARATOR '\n') as iname,
                    COALESCE(( SELECT COALESCE(SUM({$this->db->dbprefix('costing')}.purchase_unit_cost * {$this->db->dbprefix('costing')}.quantity), 0) FROM {$this->db->dbprefix('costing')} WHERE {$this->db->dbprefix('costing')}.sale_id = {$this->db->dbprefix('sales')}.id GROUP BY {$this->db->dbprefix('costing')}.sale_id ), 0) AS sale_costing,
                    grand_total, total, order_discount, order_tax, COALESCE(shipping, 0) as shipping, paid, payment_status", false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('suspended_note', 'suspended_note.note_id=sales.suspend_note', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->join('products', 'products.id = sale_items.product_id', 'left')
                ->join('categories', 'categories.id = products.category_id', 'left')
                ->where('sales.store_sale !=', 1)
                ->group_by('sales.id')
                ->order_by('sales.date desc');
            if ($sale_status != null) {
                if ($sale_status == "consignment"){
                    $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if (($category && empty($cat_ids))) {
                $this->db->where('categories.id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->db->where("categories.id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->db->where('products.brand', $brand);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($saleman_by) {
                $this->db->where('sales.saleman_by', $saleman_by);
            }
            if ($sale_type == 1) { 
                $this->db->where('sales.pos', 1);
            } elseif ($sale_type == 2) {
                $this->db->where('sales.pos', 0);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($sale_status != null) {
                if ($sale_status == "consignment") {
                    $this->db->where('consignment_status', 1);
                } else {
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->db->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if ($start_date) {
                $report_date = 'From '.$start_date.' To '.$end_date ;
            } else {
                $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array('font'  => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 25, 'name'  => 'Verdana'));
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('expiry'));
                $this->excel->getActiveSheet()->SetCellValue('K4', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('tax'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('shipping'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('R4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('S4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('T4', lang('payment_status'));
                $row = 5; $count_row = 0; $cus_qty = 0; $total = 0; $shipping = 0; $grand_total = 0; $tax = 0; $discount = 0; $paid = 0; $balance = 0; $cost = 0; $n = 1;
                foreach ($data as $data_row) {
                    $inv_items = $this->sales_model->getAllInvoiceItems($data_row->id);
                    $count_row = ($row + count($inv_items) -1);
                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':A' . $count_row)->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->mergeCells('B' . $row . ':B' . $count_row)->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->mergeCells('C' . $row . ':C' . $count_row)->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->mergeCells('D' . $row . ':D' . $count_row)->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->mergeCells('E' . $row . ':E' . $count_row)->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->mergeCells('F' . $row . ':F' . $count_row)->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->mergeCells('G' . $row . ':G' . $count_row)->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->mergeCells('H' . $row . ':H' . $count_row)->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->mergeCells('M' . $row . ':M' . $count_row)->SetCellValue('M' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->mergeCells('N' . $row . ':N' . $count_row)->SetCellValue('N' . $row, $data_row->order_discount);
                    $this->excel->getActiveSheet()->mergeCells('O' . $row . ':O' . $count_row)->SetCellValue('O' . $row, $data_row->order_tax);
                    $this->excel->getActiveSheet()->mergeCells('P' . $row . ':P' . $count_row)->SetCellValue('P' . $row, $data_row->shipping);
                    $this->excel->getActiveSheet()->mergeCells('Q' . $row . ':Q' . $count_row)->SetCellValue('Q' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->mergeCells('R' . $row . ':R' . $count_row)->SetCellValue('R' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->mergeCells('S' . $row . ':S' . $count_row)->SetCellValue('S' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->mergeCells('T' . $row . ':T' . $count_row)->SetCellValue('T' . $row, lang($data_row->payment_status));
                    foreach ($inv_items as $item) {
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $item->product_name);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $item->expiry);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $item->quantity);
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $item->unit_price);
                        $row++;
                    }
                    $total       += $data_row->total;
                    $shipping    += $data_row->shipping;
                    $discount    += $data_row->order_discount;
                    $tax         += $data_row->order_tax;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('L' . $row . ':S' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $discount);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $tax);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $shipping);
                $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('R' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('S' . $row, $balance);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $si = "( 
                    SELECT 
                        sale_id, product_id, {$this->db->dbprefix('products')}.brand, {$this->db->dbprefix('sale_items')}.serial_no, 
                        {$this->db->dbprefix('categories')}.id AS category_id, GROUP_CONCAT(CONCAT({$this->db->dbprefix('sale_items')}.product_name, '__', 
                        {$this->db->dbprefix('sale_items')}.quantity) SEPARATOR '___') as item_nane, SUM({$this->db->dbprefix('sale_items')}.quantity) as item_qty, 
                        SUM(COALESCE({$this->db->dbprefix('sale_items')}.cost, 0) * {$this->db->dbprefix('sale_items')}.quantity) as item_cost 
                    FROM {$this->db->dbprefix('sale_items')} 
                    LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id = {$this->db->dbprefix('sale_items')}.product_id 
                    LEFT JOIN {$this->db->dbprefix('categories')} ON {$this->db->dbprefix('categories')}.id = {$this->db->dbprefix('products')}.category_id WHERE 1 ";
            $sj = "( SELECT sale_id, product_id, {$this->db->dbprefix('products')}.brand, {$this->db->dbprefix('sale_items')}.serial_no, {$this->db->dbprefix('categories')}.id AS category_id, SUM({$this->db->dbprefix('sale_items')}.original_price * {$this->db->dbprefix('sale_items')}.unit_quantity) as item_real_price FROM {$this->db->dbprefix('sale_items')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id = {$this->db->dbprefix('sale_items')}.product_id LEFT JOIN {$this->db->dbprefix('categories')} ON {$this->db->dbprefix('categories')}.id = {$this->db->dbprefix('products')}.category_id WHERE 1 ";
            $ci = "( SELECT sale_id, product_id, {$this->db->dbprefix('products')}.brand, {$this->db->dbprefix('products')}.serial_no, {$this->db->dbprefix('categories')}.id AS category_id, SUM(IF({$this->db->dbprefix('products')}.type = 'service', {$this->db->dbprefix('costing')}.service_cost, {$this->db->dbprefix('costing')}.purchase_unit_cost) * {$this->db->dbprefix('costing')}.quantity) as sale_costing FROM {$this->db->dbprefix('costing')} LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id = {$this->db->dbprefix('costing')}.product_id LEFT JOIN {$this->db->dbprefix('categories')} ON {$this->db->dbprefix('categories')}.id = {$this->db->dbprefix('products')}.category_id WHERE 1 ";
            if ($product) {
                $si .= " AND {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
                $sj .= " AND {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
                $ci .= " AND {$this->db->dbprefix('costing')}.product_id = {$product} ";
            }
            if ($serial) {
                $si .= " AND {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
                $sj .= " AND {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
                $ci .= " AND {$this->db->dbprefix('products')}.serial_no   LIKe '%{$serial}%' ";
            }
            if (($category && empty($cat_ids))) {
                $si .= " AND {$this->db->dbprefix('categories')}.id = {$category} ";
                $sj .= " AND {$this->db->dbprefix('categories')}.id = {$category} ";
                $ci .= " AND {$this->db->dbprefix('categories')}.id = {$category} ";
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $si .= " AND {$this->db->dbprefix('categories')}.id IN ($cat_ids) ";
                $sj .= " AND {$this->db->dbprefix('categories')}.id IN ($cat_ids) ";
                $ci .= " AND {$this->db->dbprefix('categories')}.id IN ($cat_ids) ";
            }
            if ($brand) {
                $si .= " AND {$this->db->dbprefix('products')}.brand = {$brand} ";
                $sj .= " AND {$this->db->dbprefix('products')}.brand = {$brand} ";
                $ci .= " AND {$this->db->dbprefix('products')}.brand = {$brand} ";
            }
            $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            $sj .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSJ";
            $ci .= " GROUP BY {$this->db->dbprefix('costing')}.sale_id )    FCI";
            $this->load->library('datatables');
            $this->datatables->select("
                    DATE_FORMAT({$this->db->dbprefix('sales')}.date, '%Y-%m-%d %T') as date,
                    project_name,
                    reference_no,
                    biller,
                    c.name as customer_id,
                    c.phone,
                    c.address,
                    FSI.item_qty as iqty,
                    FSI.item_nane as iname,
                    sale_status,
                    FSI.item_cost as costing,
                    grand_total, paid,
                    (grand_total-paid) as balance,
                    payment_status,
                    {$this->db->dbprefix('sales')}.id as id", false)
                ->from('sales')
                ->join($si, 'FSI.sale_id=sales.id', 'left')
                ->join($sj, 'FSJ.sale_id=sales.id', 'left')
                ->join($ci, 'FCI.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale !=', 1);
                // ->order_by("sales.reference_no");
            // ->group_by('sales.id');
            if ($sale_status != null) {
                if ($sale_status == "consignment") {
                    $this->datatables->where('consignment_status', 1);
                } else {
                    $this->datatables->where('sales.sale_status', $sale_status);
                }
            }
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FSI.product_id', $product);
                $this->datatables->where('FCI.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('FSI.serial_no', $serial);
                $this->datatables->like('FCI.serial_no', $serial);
            }
            if ($category && empty($cat_ids)) {
                $this->datatables->where('FSI.category_id', $category);
                $this->datatables->where('FCI.category_id', $category);
            }
            if (isset($cat_ids) && !empty($cat_ids)) {
                $this->datatables->where("FSI.category_id IN ({$cat_ids})");
                $this->datatables->where("FCI.category_id IN ({$cat_ids})");
            }
            if ($brand) {
                $this->datatables->where('FSI.brand', $brand);
                $this->datatables->where('FCI.brand', $brand);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->datatables->where('c.phone', $phone);
            }
            if ($address) {
                $this->datatables->where('c.address', $address);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($saleman_by) {
                $this->datatables->where('sales.saleman_by', $saleman_by);
            }
            if ($project) {
                $this->datatables->where('sales.project_id', $project);
            }
            if ($sale_type == 1) { 
                $this->datatables->where('sales.pos', 1);
            } elseif ($sale_type == 2) {
                $this->datatables->where('sales.pos', 0);
            }
            if ($payment_status) {
                if ($payment_status == 'paid') {
                    $this->datatables->where('sales.payment_status', 'paid');
                } elseif ($payment_status == 'unpaid') {
                    $this->datatables->where('sales.payment_status !=', 'paid');
                }
            }
            echo $this->datatables->generate();
        }
    }

    public function getCostingReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('sales', true);
        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $customer     = $this->input->get('customer') ? $this->input->get('customer') : null;
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project      = $this->input->get('project') ? $this->input->get('project') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {
            $this->db
                ->select('date,project_name,
                reference_no, biller, customer, GROUP_CONCAT(CONCAT(' . $this->db->dbprefix('sale_items') . ".product_name, ' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')') SEPARATOR '\n') as iname, grand_total, paid, payment_status", false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->group_by('sales.id')
                ->order_by('sales.date desc');

            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('payment_status'));
                $row     = 2;
                $total   = 0;
                $paid    = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, lang($data_row->payment_status));
                    $total   += $data_row->grand_total;
                    $paid    += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('G' . $row . ':I' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $balance);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $product = "( SELECT p.id as id,p.name from {$this->db->dbprefix('products')} p) PR";
            $sale    = "( SELECT s.id as id,s.reference_no from {$this->db->dbprefix('sales')} s) SA";
            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date,
                    PR.name as product,
                    sale_item_id,
                    SA.reference_no as reference_no,
                    purchase_item_id,
                    quantity,
                    purchase_net_unit_cost, 
                    purchase_unit_cost,
                    sale_net_unit_price,
                    sale_unit_price,
                    {$this->db->dbprefix('costing')}.id as id", false)
                ->join($product, 'PR.id=costing.product_id', 'left')
                ->join($sale, 'SA.id=costing.sale_id', 'left')
                ->from('costing');
            // ->group_by('sales.id');
            /* if ($product) {
                $this->datatables->where('FSI.product_id', $product);
            }
            if ($biller) {
                $this->datatables->where('costing.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('costing.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('costing.warehouse_id', $warehouse);
            } */
            if ($reference_no) {
                $this->datatables->like('SA.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('costing') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }

    public function getSuppliers($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('suppliers', true);
        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count({$this->db->dbprefix('purchases')}.id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", false)
                ->from('companies')
                ->join('purchases', 'purchases.supplier_id=companies.id')
                ->where('companies.group_name', 'supplier')
                ->order_by('companies.company asc')
                ->group_by('companies.id');
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('suppliers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_purchases'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->balance));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'suppliers_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $p = '( SELECT supplier_id, count(' . $this->db->dbprefix('purchases') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance from {$this->db->dbprefix('purchases')} GROUP BY {$this->db->dbprefix('purchases')}.supplier_id ) FP";
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . '.id as id, company, name, phone, email, FP.total, FP.total_amount, FP.paid, FP.balance', false)
                ->from('companies')
                ->join($p, 'FP.supplier_id=companies.id')
                ->where('companies.group_name', 'supplier')
                ->group_by('companies.id')
                ->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_report') . "' href='" . admin_url('reports/supplier_report/$1') . "'><span class='label label-primary'>" . lang('view_report') . '</span></a></div>', 'id')
                ->unset_column('id');
            echo $this->datatables->generate();
        }
    }

    public function getTransfersReport($pdf = null, $xls = null,$xls2 = null)
    {
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = null;
        }
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $from_warehouse = $this->input->get('from_warehouse') ? $this->input->get('from_warehouse') : null;
        $to_warehouse = $this->input->get('to_warehouse') ? $this->input->get('to_warehouse') : null;
        $serial = $this->input->get('serial') ? $this->input->get('serial') : null;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('transfers') . '.date, transfer_no, (CASE WHEN ' . $this->db->dbprefix('transfers') . ".status = 'completed' THEN  GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('purchase_items') . ".product_name, ' (', " . $this->db->dbprefix('purchase_items') . ".quantity, ')') SEPARATOR '<br>') ELSE GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('transfer_items') . ".product_name, ' (', " . $this->db->dbprefix('transfer_items') . ".quantity, ')') SEPARATOR '<br>') END) as iname, from_warehouse_name as fname, from_warehouse_code as fcode, to_warehouse_name as tname,to_warehouse_code as tcode, grand_total, " . $this->db->dbprefix('transfers') . '.status')
                ->from('transfers')
                ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'left')
                ->join('purchase_items', 'purchase_items.transfer_id=transfers.id', 'left')
                ->group_by('transfers.id')->order_by('transfers.date desc');
         
            if ($product) {
                $this->db->where($this->db->dbprefix('purchase_items') . '.product_id', $product);
                $this->db->or_where($this->db->dbprefix('transfer_items') . '.product_id', $product);
            }
            if($reference_no){
                $this->db->where("bpas_transfers.transfer_no", $reference_no);
            }   
            if($from_warehouse){
                $this->db->where("bpas_transfers.from_warehouse_id", $from_warehouse);
            }
            if($to_warehouse){
                $this->db->where("bpas_transfers.to_warehouse_id", $to_warehouse);
            }
            if($start_date){
                $this->db->where("date_format(bpas_transfers.date,'%Y-%m-%d') BETWEEN '$start_date' AND '$end_date'");
            }   
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('transfers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('transfer_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse') . ' (' . lang('from') . ')');
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse') . ' (' . lang('to') . ')');
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->transfer_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->fname . ' (' . $data_row->fcode . ')');
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->tname . ' (' . $data_row->tcode . ')');
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:C' . $row)->getAlignment()->setWrapText(true);
                $filename = 'transfers_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($xls2) {
            $this->db
                ->select($this->db->dbprefix('transfers') . '.date, bpas_transfers.id AS transfer_id, bpas_transfers.status AS transfer_status, transfer_no, (CASE WHEN ' . $this->db->dbprefix('transfers') . ".status = 'completed' THEN  GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('purchase_items') . ".product_name, ' (', " . $this->db->dbprefix('purchase_items') . ".quantity, ')') SEPARATOR '<br>') ELSE GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('transfer_items') . ".product_name, ' (', " . $this->db->dbprefix('transfer_items') . ".quantity, ')') SEPARATOR '<br>') END) as iname, from_warehouse_name as fname, from_warehouse_code as fcode, to_warehouse_name as tname,to_warehouse_code as tcode, grand_total, " . $this->db->dbprefix('transfers') . '.status')
                ->from('transfers')
                ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'left')
                ->join('purchase_items', 'purchase_items.transfer_id=transfers.id', 'left')
                ->group_by('transfers.id')->order_by('transfers.date desc');
            if ($product) {
                $this->db->where($this->db->dbprefix('purchase_items') . '.product_id', $product);
                $this->db->or_where($this->db->dbprefix('transfer_items') . '.product_id', $product);
            }
            if ($reference_no) {
                $this->db->where("bpas_transfers.transfer_no", $reference_no);
            }   
            if ($from_warehouse) {
                $this->db->where("bpas_transfers.from_warehouse_id", $from_warehouse);
            }
            if ($to_warehouse) {
                $this->db->where("bpas_transfers.to_warehouse_id", $to_warehouse);
            }
            if ($start_date) {
                // $this->db->where("date_format(bpas_transfers.date,'%Y-%m-%d %T') BETWEEN '$start_date' AND '$end_date'");
                $this->db->where("date_format(bpas_transfers.date,'%Y-%m-%d') BETWEEN '$start_date' AND '$end_date'");
            }   
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                // $this->excel->getActiveSheet()->setTitle(lang('transfers_report'));
                $this->excel->getActiveSheet()->getStyle("B3")->getFont()->setSize(23);
                $this->excel->getActiveSheet()->SetCellValue('B3', lang('transfers_report'));
                if ($this->input->get('start_date') || $this->input->get('end_date')) {
                    $this->excel->getActiveSheet()->SetCellValue('A4', lang('Start_Date'));
                    $this->excel->getActiveSheet()->SetCellValue('B4', lang('End_Date'));
                    $this->excel->getActiveSheet()->SetCellValue('A5', $start_date);
                    $this->excel->getActiveSheet()->SetCellValue('B5', $end_date);
                }
                $this->excel->getActiveSheet()->SetCellValue('A7', lang('reference'));
                $this->excel->getActiveSheet()->SetCellValue('B7', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('C7', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('D7', lang('expiry'));
                $this->excel->getActiveSheet()->SetCellValue('E7', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('F7', lang('quantity'));
                $row = 8;
                $grand_total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':F'.$row)->SetCellValue('A' . $row, ($data_row->transfer_no . ' >> ' . $this->bpas->hrld($data_row->date) . ' >> From : ' . $data_row->fname . ' (' . $data_row->fcode . ') >> To : ' . $data_row->tname . ' (' . $data_row->tcode . ') >> Status : ' . lang($data_row->transfer_status)));
                    $items = $this->reports_model->getAllTransferItems_new($data_row->transfer_id, $data_row->transfer_status);
                    $row++;
                    $total = 0;
                    if (!empty($items)) {
                        foreach ($items as $item) {
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $item->product_code);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $item->product_name);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, !empty($item->expiry) ? date('d/m/Y', strtotime($item->expiry)) : 'N/A');
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $item->product_unit_code);
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $item->quantity);
                            $total += $item->quantity;
                            $row++;
                        }
                    }
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang('total'));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);
                    $grand_total += $total;
                    $row++;
                }
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $grand_total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:C' . $row)->getAlignment()->setWrapText(true);
                $filename = 'transfers_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("{$this->db->dbprefix('transfers')}.date, transfer_no, (CASE WHEN {$this->db->dbprefix('transfers')}.status = 'completed' THEN  GROUP_CONCAT(CONCAT({$this->db->dbprefix('purchase_items')}.product_name, '__', {$this->db->dbprefix('purchase_items')}.quantity) SEPARATOR '___') ELSE GROUP_CONCAT(CONCAT({$this->db->dbprefix('transfer_items')}.product_name, '__', {$this->db->dbprefix('transfer_items')}.quantity) SEPARATOR '___') END) as iname, from_warehouse_name as fname, from_warehouse_code as fcode, to_warehouse_name as tname,to_warehouse_code as tcode, grand_total, {$this->db->dbprefix('transfers')}.status, {$this->db->dbprefix('transfers')}.id as id", false)
                ->from('transfers')
                ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'left')
                ->join('purchase_items', 'purchase_items.transfer_id=transfers.id', 'left')
                ->group_by('transfers.id');
            if ($product) {
                $this->datatables->where(" (({$this->db->dbprefix('purchase_items')}.product_id = {$product}) OR ({$this->db->dbprefix('transfer_items')}.product_id = {$product})) ", null, false);
            }
            $this->datatables->edit_column('fname', '$1 ($2)', 'fname, fcode')
                ->edit_column('tname', '$1 ($2)', 'tname, tcode')
                ->unset_column('fcode')
                ->unset_column('tcode');
            echo $this->datatables->generate();
        }
    }

    public function getUserLogins($id = null, $pdf = null, $xls = null)
    {
        if ($this->input->get('start_date')) {
            $login_start_date = $this->input->get('start_date');
        } else {
            $login_start_date = null;
        }
        if ($this->input->get('end_date')) {
            $login_end_date = $this->input->get('end_date');
        } else {
            $login_end_date = null;
        }
        if ($login_start_date) {
            $login_start_date = $this->bpas->fld($login_start_date);
            $login_end_date   = $login_end_date ? $this->bpas->fld($login_end_date) : date('Y-m-d H:i:s');
        }
        if ($pdf || $xls) {
            $this->db
                ->select('login, ip_address, time')
                ->from('user_logins')
                ->where('user_id', $id)
                ->order_by('time desc');
            if ($login_start_date) {
                $this->db->where("time BETWEEN '{$login_start_date}' and '{$login_end_date}'", null, false);
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('staff_login_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('ip_address'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('time'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->login);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->ip_address);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->hrld($data_row->time));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:C' . $row)->getAlignment()->setWrapText(true);
                $filename = 'staff_login_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("login, ip_address, DATE_FORMAT(time, '%Y-%m-%d %T') as time")
                ->from('user_logins')
                ->where('user_id', $id);
            if ($login_start_date) {
                $this->datatables->where("time BETWEEN '{$login_start_date}' and '{$login_end_date}'", null, false);
            }
            echo $this->datatables->generate();
        }
    }

    public function getUsers()
    {
        $this->load->library('datatables');
        $this->datatables
            ->select($this->db->dbprefix('users') . '.id as id, first_name, last_name, email, company, ' . $this->db->dbprefix('groups') . '.name, active')
            ->from('users')
            ->join('groups', 'users.group_id=groups.id', 'left')
            ->group_by('users.id')
            ->where('company_id', null);
        if (!$this->Owner) {
            $this->datatables->where('group_id !=', 1);
        }
        $this->datatables
            ->edit_column('active', '$1__$2', 'active, id')
            ->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_report') . "' href='" . admin_url('reports/staff_report/$1') . "'><span class='label label-primary'>" . lang('view_report') . '</span></a></div>', 'id')
            ->unset_column('id');
        echo $this->datatables->generate();
    }

    public function index()
    {
        $this->bpas->checkPermissions();
        $data['error']               = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['monthly_sales'] = $this->reports_model->getChartData();
        $this->data['stock']         = $this->reports_model->getStockValue();
        $bc                          = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('reports')]];
        $meta                        = ['page_title' => lang('reports'), 'bc' => $bc];
        $this->page_construct('reports/index', $meta, $this->data);
    }

    public function monthly_profit($year, $month, $warehouse_id = null, $re = null)
    {
        if (!$this->Owner) {
            $this->session->set_flashdata('error', lang('access_denied'));
            $this->bpas->md();
        }

        $this->data['costing']    = $this->reports_model->getCosting(null, $warehouse_id, $year, $month);
        $this->data['discount']   = $this->reports_model->getOrderDiscount(null, $warehouse_id, $year, $month);
        $this->data['expenses']   = $this->reports_model->getExpenses(null, $warehouse_id, $year, $month);
        $this->data['returns']    = $this->reports_model->getReturns(null, $warehouse_id, $year, $month);
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['swh']        = $warehouse_id;
        $this->data['year']       = $year;
        $this->data['month']      = $month;
        $this->data['date']       = date('F Y', strtotime($year . '-' . $month . '-' . '01'));
        if ($re) {
            echo $this->load->view($this->theme . 'reports/monthly_profit', $this->data, true);
            exit();
        }
        $this->load->view($this->theme . 'reports/monthly_profit', $this->data);
    }

    public function monthly_purchases($biller_id = null, $year = null, $pdf = null, $user_id = null)
    {
        $this->bpas->checkPermissions();
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_id = $this->session->userdata('warehouse_id');
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
            $biller_id = $this->session->userdata('biller_id');
        }
        if (!$year) {
            $year = date('Y');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->load->language('calendar');
        $this->data['error']     = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['year']      = $year;
        $this->data['purchases'] = $user_id ? $this->reports_model->getStaffMonthlyPurchases($user_id, $year, null, str_replace("_", ",", $biller_id)) : $this->reports_model->getMonthlyPurchases($year, null, str_replace("_", ",", $biller_id));
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/monthly', $this->data, true);
            $name = lang('monthly_purchases') . '_' . $year . '.pdf';
            $html = str_replace('<p class="introtext">' . lang('reports_calendar_text') . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $this->data['warehouses']    = $this->site->getAllWarehouses();
        $this->data['warehouse_id']  = isset($warehouse_id) ? $warehouse_id : null;
        $this->data['sel_warehouse'] = (isset($warehouse_id) && $warehouse_id) ? $this->site->getMultiWarehouseByID($warehouse_id) : null;

        $this->data['billers']       = $this->site->getAllCompanies('biller');
        $this->data['biller_id']     = isset($biller_id) ? $biller_id : null;
        $this->data['sel_biller']    = (isset($biller_id) && $biller_id) ? $this->reports_model->getMultiBillerByID($biller_id) : null;
        $bc                          = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('monthly_purchases_report')]];
        $meta                        = ['page_title' => lang('monthly_purchases_report'), 'bc' => $bc];
        $this->page_construct('reports/monthly_purchases', $meta, $this->data);
    }

    public function monthly_sales($biller_id = null, $year = null, $pdf = null, $user_id = null)
    {
        $this->bpas->checkPermissions();
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_id = $this->session->userdata('warehouse_id');
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
            $biller_id = $this->session->userdata('biller_id');
        }
        if (!$year) {
            $year = date('Y');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user_id = $this->session->userdata('user_id');
        }
        $this->load->language('calendar');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['year']  = $year;
        $this->data['sales'] = $user_id ? $this->reports_model->getStaffMonthlySales($user_id, $year, null, str_replace("_", ",", $biller_id)) : $this->reports_model->getMonthlySales($year, null, str_replace("_", ",", $biller_id));
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/monthly', $this->data, true);
            $name = lang('monthly_sales') . '_' . $year . '.pdf';
            $html = str_replace('<p class="introtext">' . lang('reports_calendar_text') . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        $this->data['warehouse_id']  = isset($warehouse_id) ? $warehouse_id : null;
        $this->data['warehouses']    = $this->site->getAllWarehouses();
        $this->data['sel_warehouse'] = (isset($warehouse_id) && $warehouse_id) ? $this->site->getMultiWarehouseByID($warehouse_id) : null;

        $this->data['biller_id']     = isset($biller_id) ? $biller_id : null;
        $this->data['billers']       = $this->site->getAllCompanies('biller');
        $this->data['sel_biller']    = (isset($biller_id) && $biller_id) ? $this->reports_model->getMultiBillerByID($biller_id) : null;
        
        $bc                          = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('monthly_sales_report')]];
        $meta                        = ['page_title' => lang('monthly_sales_report'), 'bc' => $bc];
        $this->page_construct('reports/monthly', $meta, $this->data);
    }
    
    public function payments()
    {
        $this->bpas->checkPermissions('payments');
        $this->data['error']        = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']        = $this->reports_model->getStaff();
        $this->data['billers']      = $this->site->getAllCompanies('biller');
        $this->data['pos_settings'] = POS ? $this->reports_model->getPOSSetting('biller') : false;
        $bc                         = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('payments_report')]];
        $meta                       = ['page_title' => lang('payments_report'), 'bc' => $bc];
        $this->page_construct('reports/payments', $meta, $this->data);
    }

    public function getPaymentsReport($pdf = null, $xls = null, $preview = null, $transfer=null)
    {
        $this->bpas->checkPermissions('payments', true);
        $user           = $this->input->get('user') ? $this->input->get('user') : null;
        $supplier       = $this->input->get('supplier') ? $this->input->get('supplier') : null;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $payment_ref    = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : null;
        $paid_by        = $this->input->get('paid_by') ? $this->input->get('paid_by') : null;
        $sale_ref       = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : null;
        $purchase_ref   = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : null;
        $card           = $this->input->get('card') ? $this->input->get('card') : null;
        $cheque         = $this->input->get('cheque') ? $this->input->get('cheque') : null;
        $transaction_id = $this->input->get('tid') ? $this->input->get('tid') : null;
        $type           = $this->input->get('type') ? $this->input->get('type') : null;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date . ' 00:00:00');
            $end_date   = $this->bpas->fld($end_date . ' 23:59:59');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if($preview) {
            $this->db
                ->select("
                    {$this->db->dbprefix('payments')}.id, 
                    {$this->db->dbprefix('payments')}.reference_no, 
                    {$this->db->dbprefix('payments')}.date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('sales')}.reference_no as sale_ref,
                    {$this->db->dbprefix('sales')}.customer,
                    {$this->db->dbprefix('purchases')}.reference_no as purchase_ref, 
                    {$this->db->dbprefix('payments')}.paid_by, 
                    (COALESCE({$this->db->dbprefix('payments')}.amount, 0) + COALESCE({$this->db->dbprefix('payments')}.penalty_paid, 0)) as amount,
                    {$this->db->dbprefix('payments')}.penalty, 
                    {$this->db->dbprefix('payments')}.type ")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date desc');
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_report')]];
                $meta = ['page_title' => lang('products_report'), 'bc' => $bc];
                $this->page_construct('reports/payment_preview', $meta, $this->data);
            }
        } elseif ($transfer) {
            $this->db
                ->select('' . $this->db->dbprefix('payments') . '.id')
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date desc');
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                foreach ($data as $data_row) {
                    $this->db->update('payments', ['transfer' => 0], ['id' => $data_row->id]);
                }
            }
            $this->session->set_flashdata('message', lang('tansfer_restore_successful'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($pdf || $xls) {
            $this->db->select("
                    {$this->db->dbprefix('payments')}.date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('sales')}.reference_no as sale_ref, 
                    {$this->db->dbprefix('purchases')}.reference_no as purchase_ref, 
                    {$this->db->dbprefix('payments')}.paid_by, 
                    (COALESCE({$this->db->dbprefix('payments')}.amount, 0) + COALESCE({$this->db->dbprefix('payments')}.penalty_paid, 0)) as amount,
                    {$this->db->dbprefix('payments')}.penalty, 
                    {$this->db->dbprefix('payments')}.type ")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date desc');
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_reference'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('type'));
                $row   = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->penalty);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->type);
                    if ($data_row->type == 'returned' || $data_row->type == 'sent') {
                        $total -= $data_row->amount;
                    } else {
                        $total += $data_row->amount;
                    }
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('F' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, '');
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'payments_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
             $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    " . $this->db->dbprefix('payments') . '.reference_no as payment_ref, 
                    ' . $this->db->dbprefix('sales') . '.reference_no as sale_ref, 
                    ' . $this->db->dbprefix('sales') . '.customer as customer, 
                    ' . $this->db->dbprefix('purchases') . ".reference_no as purchase_ref,
                     paid_by, (COALESCE({$this->db->dbprefix('payments')}.amount, 0) + COALESCE({$this->db->dbprefix('payments')}.penalty_paid, 0)) as amount, 
                     
                     {$this->db->dbprefix('payments')}.type,
                      {$this->db->dbprefix('payments')}.id as id")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id'); 
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($card) {
                $this->datatables->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->datatables->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->datatables->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($type) {
                $this->datatables->where('payments.type', $type);
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }

    public function getPaymentsReport_12_04_2023($pdf = null, $xls = null, $preview = null, $transfer=null)
    {
        $this->bpas->checkPermissions('payments', true);
        $user           = $this->input->get('user') ? $this->input->get('user') : null;
        $supplier       = $this->input->get('supplier') ? $this->input->get('supplier') : null;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $payment_ref    = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : null;
        $paid_by        = $this->input->get('paid_by') ? $this->input->get('paid_by') : null;
        $sale_ref       = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : null;
        $purchase_ref   = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : null;
        $card           = $this->input->get('card') ? $this->input->get('card') : null;
        $cheque         = $this->input->get('cheque') ? $this->input->get('cheque') : null;
        $transaction_id = $this->input->get('tid') ? $this->input->get('tid') : null;
        $type           = $this->input->get('type') ? $this->input->get('type') : null;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date . ' 00:00:00');
            $end_date   = $this->bpas->fld($end_date . ' 23:59:59');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if($preview) {
            $this->db
                ->select('
                    
                    ' . $this->db->dbprefix('payments') . '.id, 
                    ' . $this->db->dbprefix('payments') . '.reference_no, 
                    ' . $this->db->dbprefix('payments') . '.date, 
                    ' . $this->db->dbprefix('payments') . '.reference_no as payment_ref, 
                    ' . $this->db->dbprefix('sales') . '.reference_no as sale_ref,
                    ' . $this->db->dbprefix('sales') . '.customer,
                    ' . $this->db->dbprefix('purchases') . '.reference_no as purchase_ref, ' . $this->db->dbprefix('payments') . '.paid_by, ' . $this->db->dbprefix('payments') . '.amount,' . $this->db->dbprefix('payments') . '.penalty, ' . $this->db->dbprefix('payments') . '.type')
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date desc');
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_report')]];
                $meta = ['page_title' => lang('products_report'), 'bc' => $bc];
                $this->page_construct('reports/payment_preview', $meta, $this->data);
            }
        } elseif ($transfer) {
            $this->db
                ->select('' . $this->db->dbprefix('payments') . '.id')
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date desc');
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                foreach ($data as $data_row) {
                    $this->db->update('payments', ['transfer' => 0], ['id' => $data_row->id]);
                }
            }
            $this->session->set_flashdata('message', lang('tansfer_restore_successful'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($pdf || $xls) {
            $this->db
                ->select('' . $this->db->dbprefix('payments') . '.date, 
                    ' . $this->db->dbprefix('payments') . '.reference_no as payment_ref, 
                    ' . $this->db->dbprefix('sales') . '.reference_no as sale_ref, 
                    ' . $this->db->dbprefix('purchases') . '.reference_no as purchase_ref, ' . $this->db->dbprefix('payments') . '.paid_by, ' . $this->db->dbprefix('payments') . '.amount, ' . $this->db->dbprefix('payments') . '.penalty, ' . $this->db->dbprefix('payments') . '.type')
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date desc');
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_reference'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('type'));
                $row   = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->penalty);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->type);
                    if ($data_row->type == 'returned' || $data_row->type == 'sent') {
                        $total -= $data_row->amount;
                    } else {
                        $total += $data_row->amount;
                    }
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('F' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, '');
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'payments_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
             $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    " . $this->db->dbprefix('payments') . '.reference_no as payment_ref, 
                    ' . $this->db->dbprefix('sales') . '.reference_no as sale_ref, 
                    ' . $this->db->dbprefix('sales') . '.customer as customer, 
                    ' . $this->db->dbprefix('purchases') . ".reference_no as purchase_ref,
                     paid_by, amount, penalty, {$this->db->dbprefix('payments')}.type, {$this->db->dbprefix('payments')}.id as id")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id'); 
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($card) {
                $this->datatables->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->datatables->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->datatables->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($type) {
                $this->datatables->where('payments.type', $type);
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }

    public function products()
    {
        $this->bpas->checkPermissions();
        $this->data['error']      = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['product_variants'] = $this->site->getAllProductVariants();
        $products   = $this->site->getAllProducts();
        $warehouses = $this->site->getAllWarehouses();
        if ($this->input->post('start_date')) {
            $dt = 'From ' . $this->input->post('start_date') . ' to ' . $this->input->post('end_date');
        } else {
            $dt = 'Till ' . $this->input->post('end_date');
        }
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_report')]];
        $meta = ['page_title' => lang('products_report'), 'bc' => $bc];
        //$this->page_construct('reports/products_beginning', $meta, $this->data);
        $this->page_construct('reports/products', $meta, $this->data);
    }
    function getProductsReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('products', TRUE);

        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $cf1 = $this->input->get('cf1') ? $this->input->get('cf1') : NULL;
        $cf2 = $this->input->get('cf2') ? $this->input->get('cf2') : NULL;
        $cf3 = $this->input->get('cf3') ? $this->input->get('cf3') : NULL;
        $cf4 = $this->input->get('cf4') ? $this->input->get('cf4') : NULL;
        $cf5 = $this->input->get('cf5') ? $this->input->get('cf5') : NULL;
        $cf6 = $this->input->get('cf6') ? $this->input->get('cf6') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $allow_category = $this->site->getCategoryByProject();

        $pp = "( SELECT product_id, 
            SUM(CASE WHEN pi.purchase_id IS NOT NULL THEN quantity ELSE 0 END) as purchasedQty, 
            SUM(quantity_balance) as balacneQty, 
            SUM( unit_cost * quantity_balance ) balacneValue, 
            SUM( (CASE WHEN pi.purchase_id IS NOT NULL THEN (pi.subtotal) ELSE 0 END) ) totalPurchase,p.created_by from {$this->db->dbprefix('purchase_items')} pi LEFT JOIN {$this->db->dbprefix('purchases')} p on p.id = pi.purchase_id ";
        $sp = "( SELECT si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale,s.created_by from " . $this->db->dbprefix('sales') . " s JOIN " . $this->db->dbprefix('sale_items') . " si on s.id = si.sale_id ";
        
        $pp .= " WHERE 1=1";
        $sp .= " WHERE 1=1 ";
        if($start_date){
            $start_date = $this->bpas->fld($start_date);
            $end_date = $end_date ? $this->bpas->fld($end_date, false, 1) : date('Y-m-d');
            
            $pp .= " AND p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
            $sp .= " AND s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
        }
        
        if ($warehouse) {
            $pp .= " AND p.warehouse_id = '{$warehouse}' ";
            $sp .= " AND s.warehouse_id = '{$warehouse}' ";
            $balance_qty = "COALESCE( ".$this->db->dbprefix('warehouses_products') . ".quantity, 0 )";
        }else{
            $balance_qty = "COALESCE( ".$this->db->dbprefix('products') . ".quantity, 0 )";
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $pp .= " AND p.created_by = '{$this->session->userdata('user_id')}' ";
            $sp .= " AND s.created_by = '{$this->session->userdata('user_id')}' ";
            
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
            $pp .= " AND p.biller_id = '{$this->session->userdata('biller_id')}' ";
            $sp .= " AND s.biller_id = '{$this->session->userdata('biller_id')}' ";
            
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
            $warehouse_ids = str_replace(']',')','('.$warehouse_ids.')');
            $pp .= " AND p.warehouse_id IN ".$warehouse_ids;
            $sp .= " AND s.warehouse_id IN ".$warehouse_ids;
            
        }
        $pp .= " GROUP BY pi.product_id ) PCosts";
        $sp .= " GROUP BY si.product_id ) PSales";
        if ($xls) {

            $this->db
                ->select($this->db->dbprefix('products') . ".code, " . $this->db->dbprefix('products') . ".name,
                convert_qty(".$this->db->dbprefix('products') . ".id,COALESCE( PCosts.purchasedQty, 0 )) as PurchasedQty,
                convert_qty(".$this->db->dbprefix('products') . ".id,COALESCE( PSales.soldQty, 0 )) as SoldQty,
                convert_qty(".$this->db->dbprefix('products') . ".id,".$balance_qty.") as BalacneQty,
                COALESCE( PCosts.totalPurchase, 0 ) as TotalPurchase,
                COALESCE( ".$balance_qty." * ".$this->db->dbprefix('products') . ".cost, 0 ) as TotalBalance,
                COALESCE( PSales.totalSale, 0 ) as TotalSales,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit", FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->order_by('products.name');
            if ($warehouse) {
                $this->db->join('warehouses_products', 'warehouses_products.product_id = products.id AND warehouses_products.warehouse_id = '.$warehouse.'', 'inner');
            }               
            if ($product) {
                $this->db->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($cf1) {
                $this->db->where($this->db->dbprefix('products') . ".cf1", $cf1);
            }
            if ($cf2) {
                $this->db->where($this->db->dbprefix('products') . ".cf2", $cf2);
            }
            if ($cf3) {
                $this->db->where($this->db->dbprefix('products') . ".cf3", $cf3);
            }
            if ($cf4) {
                $this->db->where($this->db->dbprefix('products') . ".cf4", $cf4);
            }
            if ($cf5) {
                $this->db->where($this->db->dbprefix('products') . ".cf5", $cf5);
            }
            if ($cf6) {
                $this->db->where($this->db->dbprefix('products') . ".cf6", $cf6);
            }
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . ".category_id", $category);
            }
            if ($subcategory) {
                $this->db->where($this->db->dbprefix('products') . ".subcategory_id", $subcategory);
            }
            if ($brand) {
                $this->db->where($this->db->dbprefix('products') . ".brand", $brand);
            }
            if ($allow_category) {
                $this->db->where_in($this->db->dbprefix('products') . ".category_id", $allow_category);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('stock_in_hand'));

                $row = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $bQty = 0;
                $bAmt = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, strip_tags(html_entity_decode($data_row->PurchasedQty)));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, strip_tags(html_entity_decode($data_row->SoldQty)));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, strip_tags(html_entity_decode($data_row->BalacneQty)));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->TotalBalance);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $bQty += $data_row->BalacneQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $bAmt += $data_row->TotalBalance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("C" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $bQty);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $bAmt);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);


                $filename = 'products_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('products') . ".code, " . $this->db->dbprefix('products') . ".name,
                CONCAT(convert_qty(".$this->db->dbprefix('products') . ".id,COALESCE( PCosts.purchasedQty, 0 )), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
                CONCAT(convert_qty(".$this->db->dbprefix('products') . ".id,COALESCE( PSales.soldQty, 0 )), '__', COALESCE( PSales.totalSale, 0 )) as sold,
                CONCAT(convert_qty(".$this->db->dbprefix('products') . ".id,".$balance_qty."), '__', COALESCE( ".$balance_qty." * ".$this->db->dbprefix('products') . ".cost, 0 )) as balance, {$this->db->dbprefix('products')}.id as id", FALSE)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->group_by('products.code, PSales.soldQty, PSales.totalSale, PCosts.purchasedQty, PCosts.totalPurchase, PCosts.balacneQty, PCosts.balacneValue');
            if ($warehouse) {
                $this->datatables->join('warehouses_products', 'warehouses_products.product_id = products.id AND warehouses_products.warehouse_id = '.$warehouse.'', 'inner');
            }
            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . ".id", $product);
            }
            if ($cf1) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf1", $cf1);
            }
            
            if ($cf2) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf2", $cf2);
            }
            if ($cf3) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf3", $cf3);
            }
            if ($cf4) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf4", $cf4);
            }
            if ($cf5) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf5", $cf5);
            }
            if ($cf6) {
                $this->datatables->where($this->db->dbprefix('products') . ".cf6", $cf6);
            }
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . ".category_id", $category);
            }
            if ($subcategory) {
                $this->datatables->where($this->db->dbprefix('products') . ".subcategory_id", $subcategory);
            }
            if ($brand) {
                $this->datatables->where($this->db->dbprefix('products') . ".brand", $brand);
            }
            if ($allow_category) {
                $this->datatables->where_in($this->db->dbprefix('products') . ".category_id", $allow_category);
            }
            echo $this->datatables->generate();

        }

    }
    public function stock_movement()
    {
        $this->bpas->checkPermissions('products'); 
        $category = $this->input->post("category");
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('stock_movement')));
        $meta = array('page_title' => lang('stock_movement'), 'bc' => $bc);   
        $this->page_construct('reports/stock_movement',$meta,$this->data);
    }
    
    public function getStock_movement($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('products');
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fsd($start_date);
        }else{
            $start_date = date('Y-m-d');
        }
        if($end_date){
            $end_date = $this->bpas->fsd($end_date);
        }else{
            $end_date = date('Y-m-d');
        }       
        $allow_category = $this->site->getCategoryByProject();
        $where = "";
        $where_begin = "";
        $where_balance = "";
        if($warehouse){
            $where .= " AND warehouse_id='".$warehouse."'";
            $where_begin .= " AND warehouse_id='".$warehouse."'";
            $where_balance .= " AND warehouse_id='".$warehouse."'";
        }
        
        if(!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')){
            $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
            $warehouse_ids = str_replace(']',')','('.$warehouse_ids.')');

            $where .= " AND warehouse_id IN ".$warehouse_ids;
            $where_begin .= " AND warehouse_id IN ".$warehouse_ids;
            $where_balance .= " AND warehouse_id IN ".$warehouse_ids;

        }
        
        if ($start_date) {
            $where .= " AND DATE(date) >= '".$start_date."'";
            $where_begin .= " AND DATE(date) < '".$start_date."'";
        }
        if ($end_date) {
            $where .= " AND DATE(date) <= '".$end_date."'";
            $where_balance .= " AND DATE(date) <= '".$end_date."'";
        }
        
        $modal_view_begin = "<span transaction=begin class=transaction_link>";
        $modal_view_balance = "<span transaction=balance class=transaction_link>";
        
        $select_begin = " , CONCAT('".$modal_view_begin."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE product_id = ".$this->db->dbprefix('products').".id ".$where_begin." ),0)),'</span>') AS begin_qty";
        $select_begin .= ", (SELECT sum(IFNULL(quantity,0) * IFNULL(".$this->db->dbprefix('products').".cost,0)) AS amount FROM ".$this->db->dbprefix('stock_movement')." WHERE product_id = ".$this->db->dbprefix('products').".id ".$where_begin.") as begin_amount";
        $select_balance = " , CONCAT('".$modal_view_balance."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE product_id = ".$this->db->dbprefix('products').".id ".$where_balance." ),0)),'</span>') AS balance_qty";
        $select_balance .= ", (SELECT sum(IFNULL(quantity,0) * IFNULL(".$this->db->dbprefix('products').".cost,0)) AS amount FROM ".$this->db->dbprefix('stock_movement')." WHERE product_id = ".$this->db->dbprefix('products').".id ".$where_balance.") as end_amount";
        $transactions = array('OpeningBalance','Purchases','Sale','QuantityAdjustment','Transfer','Delivery','UsingStock','Convert','Consignment','CDelivery','Pawns');
        $select_in = '';
        $select_out = '';
        foreach($transactions as $transaction){
            $modal_view_out = "<span opt=minus transaction=".$transaction." class=transaction_link>";
            $modal_view_in = "<span opt=add transaction=".$transaction." class=transaction_link>";
            if($transaction=='CDelivery'){
                $select_in .=" , CONCAT('".$modal_view_in."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'CFuel' || `transaction` = 'CError' || `transaction` = 'CAdjustment') AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
                $select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'CFuel' || `transaction` = 'CError' || `transaction` = 'CAdjustment') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
            }else if($transaction=='Purchases'){
                $select_in .=" , CONCAT('".$modal_view_in."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'Receives') AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
                $select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'Receives') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
            }else if($transaction=='UsingStock'){
                $select_in .=" , CONCAT('".$modal_view_in."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'FuelSale') AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
                $select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'FuelSale') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
            }else{
                if($transaction != 'Delivery'){
                    $select_in .=" , CONCAT('".$modal_view_in."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(quantity,0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE `transaction` = '".$transaction."' AND  quantity > 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_in";
                }
                if($transaction=='Sale'){
                    $select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE (`transaction` = '".$transaction."' || `transaction` = 'FuelCustomer') AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
                }else if($transaction != 'Pawns' && $transaction != 'OpeningBalance'){
                    $select_out .=" , CONCAT('".$modal_view_out."',convert_qty(".$this->db->dbprefix('products').".id,IFNULL(( SELECT sum( IFNULL(abs(quantity),0) ) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE `transaction` = '".$transaction."' AND  quantity < 0 AND product_id = ".$this->db->dbprefix('products').".id ".$where."),0)),'</span>') AS ".$transaction."_out";
                }
            }
        }
        
        if ($xls) {
            $this->db->select("categories.name as category,products.code,products.name ".$select_begin.$select_in.$select_out.$select_balance)
                            ->from("products")
                            ->join("categories","categories.id = products.category_id","inner");
            $this->db->where("products.type NOT IN ('combo','bom','service')");
            $this->db->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE 1=1 ".$where_begin." GROUP BY product_id) as stock_begin", "stock_begin.product_id = products.id","left");
            $this->db->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE 1=1 ".$where_balance." GROUP BY product_id) as stock_ending", "stock_ending.product_id = products.id","left");
            $this->db->join("(SELECT product_id, count(id) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE transaction != 'CostAdjustment' ".$where." GROUP BY product_id) as stock_processing", "stock_processing.product_id = products.id","left");
            $this->db->where("(IFNULL(stock_processing.quantity,0) <> 0 OR IFNULL(stock_begin.quantity,0) <> 0 OR IFNULL(stock_ending.quantity,0) <> 0)");
            if($product){
                $this->db->where('products.id',$product);
            }
            if($category){
                $this->db->where('categories.id',$category);
            }
            if ($allow_category) {
                $this->db->where_in("categories.id", $allow_category);
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                
                $this->excel->getActiveSheet()->mergeCells('A1:A2');
                $this->excel->getActiveSheet()->mergeCells('B1:B2');
                $this->excel->getActiveSheet()->mergeCells('C1:C2');
                $this->excel->getActiveSheet()->mergeCells('D1:D2');
                $this->excel->getActiveSheet()->mergeCells('E1:N1');
                $this->excel->getActiveSheet()->mergeCells('O1:W1');
                $this->excel->getActiveSheet()->mergeCells('X1:X2');
                
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('category'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('code'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('begin'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('in'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('out'));
                
                $this->excel->getActiveSheet()->SetCellValue('E2', lang('opening'));
                $this->excel->getActiveSheet()->SetCellValue('F2', lang('purchase'));
                $this->excel->getActiveSheet()->SetCellValue('G2', lang('sale'));
                $this->excel->getActiveSheet()->SetCellValue('H2', lang('adjustment'));
                $this->excel->getActiveSheet()->SetCellValue('I2', lang('transfer'));
                $this->excel->getActiveSheet()->SetCellValue('J2', lang('using'));
                $this->excel->getActiveSheet()->SetCellValue('K2', lang('convert'));
                $this->excel->getActiveSheet()->SetCellValue('L2', lang('consignment'));
                $this->excel->getActiveSheet()->SetCellValue('M2', lang('concrete'));
                $this->excel->getActiveSheet()->SetCellValue('N2', lang('pawn'));
                
                $this->excel->getActiveSheet()->SetCellValue('O2', lang('purchase'));
                $this->excel->getActiveSheet()->SetCellValue('P2', lang('sale'));
                $this->excel->getActiveSheet()->SetCellValue('Q2', lang('adjustment'));
                $this->excel->getActiveSheet()->SetCellValue('R2', lang('transfer'));
                $this->excel->getActiveSheet()->SetCellValue('S2', lang('delivery'));
                $this->excel->getActiveSheet()->SetCellValue('T2', lang('using'));
                $this->excel->getActiveSheet()->SetCellValue('U2', lang('convert'));
                $this->excel->getActiveSheet()->SetCellValue('V2', lang('consignment'));
                $this->excel->getActiveSheet()->SetCellValue('W2', lang('concrete'));
                
                $this->excel->getActiveSheet()->SetCellValue('X1', lang('balance'));
                
                $this->excel->getActiveSheet()->getStyle('E1:N1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('O1:W1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

                $row = 3;
                $total_sale = 0;
                $total_qty = 0;
                $total_grand = 0;
                $total_cost = 0;
                $total_margin = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->category);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->remove_tag($data_row->begin_qty));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->remove_tag($data_row->OpeningBalance_in));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->remove_tag($data_row->Purchases_in));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->remove_tag($data_row->Sale_in));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->remove_tag($data_row->QuantityAdjustment_in));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->remove_tag($data_row->Transfer_in));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->remove_tag($data_row->UsingStock_in));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->remove_tag($data_row->Convert_in));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->remove_tag($data_row->Consignment_in));
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->remove_tag($data_row->CDelivery_in));
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->remove_tag($data_row->Pawns_in));
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->bpas->remove_tag($data_row->Purchases_out));
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $this->bpas->remove_tag($data_row->Sale_out));
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $this->bpas->remove_tag($data_row->QuantityAdjustment_out));
                    $this->excel->getActiveSheet()->SetCellValue('R' . $row, $this->bpas->remove_tag($data_row->Transfer_out));
                    $this->excel->getActiveSheet()->SetCellValue('S' . $row, $this->bpas->remove_tag($data_row->Delivery_out));
                    $this->excel->getActiveSheet()->SetCellValue('T' . $row, $this->bpas->remove_tag($data_row->UsingStock_out));
                    $this->excel->getActiveSheet()->SetCellValue('U' . $row, $this->bpas->remove_tag($data_row->Convert_out));
                    $this->excel->getActiveSheet()->SetCellValue('V' . $row, $this->bpas->remove_tag($data_row->Consignment_out));
                    $this->excel->getActiveSheet()->SetCellValue('W' . $row, $this->bpas->remove_tag($data_row->CDelivery_out));
                    $this->excel->getActiveSheet()->SetCellValue('X' . $row, $this->bpas->remove_tag($data_row->balance_qty));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);

                $filename = 'stock_movement_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {

            $this->load->library('datatables');
            $this->datatables->select("products.id, categories.name as category,products.code,products.name ".$select_begin.$select_in.$select_out.$select_balance)
                            ->from("products")
                            ->join("categories","categories.id = products.category_id","inner");
            $this->datatables->where("products.type NOT IN ('combo','bom','service')");
            $this->datatables->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE 1=1 ".$where_begin." GROUP BY product_id) as stock_begin", "stock_begin.product_id = products.id","left");
            $this->datatables->join("(SELECT product_id, sum(IFNULL(quantity,0)) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE 1=1 ".$where_balance." GROUP BY product_id) as stock_ending", "stock_ending.product_id = products.id","left");
            $this->datatables->join("(SELECT product_id, count(id) AS quantity FROM ".$this->db->dbprefix('stock_movement')." WHERE transaction != 'CostAdjustment' ".$where." GROUP BY product_id) as stock_processing", "stock_processing.product_id = products.id","left");
            $this->datatables->where("(IFNULL(stock_processing.quantity,0) <> 0 OR IFNULL(stock_begin.quantity,0) <> 0 OR IFNULL(stock_ending.quantity,0) <> 0)");
            if($product){
                $this->datatables->where('products.id',$product);
            }
            if($category){
                $this->datatables->where('categories.id',$category);
            }           
            if ($allow_category) {
                $this->datatables->where_in("categories.id", $allow_category);
            }
            echo $this->datatables->generate();
        }
    }
    public function stock_in_out()
    {
        $this->bpas->checkPermissions();

        $this->data['error']      = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $warehouse = $this->site->getAllWarehouses();
        //  $this->data['decimal_qty'] = $this->site->getExchange_rate('KHM');
        //  $this->data['decimal'] = $this->site->getExchange_rate('KHM');
        $this->data['product_variants'] = $this->site->getAllProductVariants();
        $category    = $this->input->post('category') ? $this->input->post('category') : null;
        $warehouse   = $this->input->post('warehouse') ? $this->input->post('warehouse') : null;
        $start_date  = $this->input->post('start_date') ?$this->input->post('start_date') : null;
        $end_date    =  $this->input->post('end_date') ?  $this->input->post('end_date') : null;

        if ($this->input->post('start_date')) {
            $dt = 'From ' . $this->input->post('start_date') . ' to ' . $this->input->post('end_date');
            $start_date = $this->bpas->fld($start_date.' 00');
            $end_date   = $this->bpas->fld($end_date.' 59');
        } else {
            $dt = 'Till ' . $this->input->post('end_date');
        }
        $this->data['getcategoryInOut'] = $this->reports_model->getCategoryInOut($category, $warehouse, $start_date, $end_date);
    //    $this->data['category'] = $category;
        $this->data['get_warehouse'] = $warehouse;
        $this->data['start_date'] = $start_date;
        $this->data['end_date'] = $end_date;
        $this->data['settings'] = $this->site->getSettings();
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_report')]];
        $meta = ['page_title' => lang('products_report'), 'bc' => $bc];
        $this->page_construct('reports/products_inout_by_category', $meta, $this->data);
        
    }
    public function getProductsInOutCategoryReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);

        $product     = $this->input->get('product') ? $this->input->get('product') : null;
        $category    = $this->input->get('category') ? $this->input->get('category') : null;
        $brand       = $this->input->get('brand') ? $this->input->get('brand') : null;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : null;
        $warehouse   = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $cf1         = $this->input->get('cf1') ? $this->input->get('cf1') : null;
        $cf2         = $this->input->get('cf2') ? $this->input->get('cf2') : null;
        $cf3         = $this->input->get('cf3') ? $this->input->get('cf3') : null;
        $cf4         = $this->input->get('cf4') ? $this->input->get('cf4') : null;
        $cf5         = $this->input->get('cf5') ? $this->input->get('cf5') : null;
        $cf6         = $this->input->get('cf6') ? $this->input->get('cf6') : null;
        $start_date  = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date    = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        $pp = "( SELECT product_id, SUM(CASE WHEN pi.purchase_id IS NOT NULL THEN quantity ELSE 0 END) as purchasedQty, SUM(quantity_balance) as balacneQty, SUM( unit_cost * quantity_balance ) balacneValue, SUM( (CASE WHEN pi.purchase_id IS NOT NULL THEN (pi.subtotal) ELSE 0 END) ) totalPurchase from {$this->db->dbprefix('purchase_items')} pi LEFT JOIN {$this->db->dbprefix('purchases')} p on p.id = pi.purchase_id WHERE pi.status = 'received' ";
        // WHERE p.status != 'pending' AND p.status != 'ordered'
        $sp = '( SELECT si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale from ' . $this->db->dbprefix('sales') . ' s JOIN ' . $this->db->dbprefix('sale_items') . ' si on s.id = si.sale_id ';
        if ($start_date || $warehouse) {
            $sp .= ' WHERE ';
            if ($start_date) {
                $start_date = $this->bpas->fld($start_date);
                $end_date   = $end_date ? $this->bpas->fld($end_date) : date('Y-m-d');
                $pp .= " AND p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
                $sp .= " s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
                if ($warehouse) {
                    $sp .= ' AND ';
                }
            }
            if ($warehouse) {
                $pp .= " AND pi.warehouse_id = '{$warehouse}' ";
                $sp .= " si.warehouse_id = '{$warehouse}' ";
            }
        }
        $pp .= ' GROUP BY pi.product_id ) PCosts';
        $sp .= ' GROUP BY si.product_id ) PSales';

        $vrn = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="New" GROUP BY product_id) NVariant';
        $vro = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="Old" GROUP BY product_id) OVariant';
        $vrb = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="Broken" GROUP BY product_id) BVariant';

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . ".name,
                CONCAT(COALESCE( PCosts.purchasedQty, 0 ), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
                CONCAT(COALESCE( PSales.soldQty, 0 ), '__', COALESCE( PSales.totalSale, 0 )) as sold,
                CONCAT(COALESCE( PCosts.balacneQty, 0 ), '__', COALESCE( PCosts.balacneValue, 0 )) as balance,
                CONCAT(COALESCE(NVariant.sQty, 0), '__',COALESCE(NVariant.name, '' ), '__', COALESCE(OVariant.sQty, 0), '__', COALESCE(OVariant.name, ''), '__', COALESCE(BVariant.sQty, 0), '__', COALESCE(BVariant.name, '')) as variant, {$this->db->dbprefix('products')}.id as id", false)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->join($vrn, 'products.id = NVariant.product_id', 'left')
                ->join($vro, 'products.id = OVariant.product_id', 'left')
                ->join($vrb, 'products.id = BVariant.product_id', 'left')
                ->where('PSales.soldQty >',0)
                ->group_by('products.code');

            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . '.category_id', $category);
            }
            echo $this->datatables->generate();
        
    }
    public function profit($date = null, $warehouse_id = null, $re = null)
    {
        if (!$this->Owner) {
            $this->session->set_flashdata('error', lang('access_denied'));
            $this->bpas->md();
        }
        if (!$date) {
            $date = date('Y-m-d');
        }
        $this->data['net_sale']   = $this->reports_model->getDailySale($date, $warehouse_id);
        $this->data['vat']        = $this->reports_model->getSaleVat($date, $warehouse_id);
        // $this->data['paid_by']    = $this->bpas->paid_by();
        $this->data['paid_by']          = $this->site->getCashAccounts();
        $this->data['total_discount']   = $this->reports_model->total_discount($date, $warehouse_id);

        $this->data['costing']    = $this->reports_model->getCosting($date, $warehouse_id);
        $this->data['discount']   = $this->reports_model->getOrderDiscount($date, $warehouse_id);
        $this->data['expenses']   = $this->reports_model->getExpenses($date, $warehouse_id);
        $this->data['returns']    = $this->reports_model->getReturns($date, $warehouse_id);
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['swh']        = $warehouse_id;
        $this->data['date']       = $date;
        if ($re) {
            echo $this->load->view($this->theme . 'reports/profit', $this->data, true);
            // exit();
        }
        $this->load->view($this->theme . 'reports/profit', $this->data);
    }
    public function profit_loss($start_date = null, $end_date = null)
    {
        $this->bpas->checkPermissions('profit_loss');
        if (!$start_date) {
            $start      = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end      = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $sales = $this->reports_model->getAllSales($start, $end);

        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $this->data['total_purchases']       = $this->reports_model->getTotalPurchases($start, $end);

        $this->data['total_sales']           = $this->reports_model->getTotalSales($start, $end);

        
        $this->data['total_return_sales']    = $this->reports_model->getTotalReturnSales($start, $end);
        
         $this->data['total_discounts'] = $this->reports_model->getTotaldiscounts($start, $end);
        $this->data['total_expenses']        = $this->reports_model->getTotalExpenses($start, $end);
        $this->data['total_paid']            = $this->reports_model->getTotalPaidAmount($start, $end);
        $this->data['total_received']        = $this->reports_model->getTotalReceivedAmount($start, $end);
        $this->data['total_received_cash']   = $this->reports_model->getTotalReceivedCashAmount($start, $end);
        $this->data['total_received_cc']     = $this->reports_model->getTotalReceivedCCAmount($start, $end);
        $this->data['total_received_cheque'] = $this->reports_model->getTotalReceivedChequeAmount($start, $end);
        $this->data['total_received_ppp']    = $this->reports_model->getTotalReceivedPPPAmount($start, $end);
        $this->data['total_received_stripe'] = $this->reports_model->getTotalReceivedStripeAmount($start, $end);
        $this->data['total_returned']        = $this->reports_model->getTotalReturnedAmount($start, $end);
        $this->data['start']                 = urldecode($start_date);
        $this->data['end']                   = urldecode($end_date);

        $pro_cost = 0;
        if (!empty($sales)) {
            foreach ($sales as $sale) {
                $pro = $this->site->getProductByID($sale->product_id);
                $pro_cost += $this->bpas->formatMoney($pro->cost*$sale->quantity);
            }
        }
        $this->data['product_cost'] = $pro_cost;

        $warehouses = $this->site->getAllWarehouses();
        if (!empty($warehouses)) {
            foreach ($warehouses as $warehouse) {
                $total_purchases     = $this->reports_model->getTotalPurchases($start, $end, $warehouse->id);
                $total_sales         = $this->reports_model->getTotalSales($start, $end, $warehouse->id);
                $total_returns       = $this->reports_model->getTotalReturnSales($start, $end, $warehouse->id);
                $total_expenses      = $this->reports_model->getTotalExpenses($start, $end, $warehouse->id);


                $total_cost = $this->reports_model->getTotalCost($start, $end, $warehouse->id);
                $total_return_warehouse =$this->reports_model->getTotalReturnedwarehouse($start, $end,$warehouse->id);
                $total_discounts = $this->reports_model->getTotaldiscounts($start, $end,$warehouse->id);

                $warehouses_report[] = [
                    'warehouse'       => $warehouse,
                    'total_purchases' => $total_purchases,
                    'total_sales'     => $total_sales,
                    'total_returns'   => $total_returns,
                    'total_expenses'  => $total_expenses,
                    'total_discounts'  => $total_discounts->total_amount,
                    'total_returned' => $total_return_warehouse->total_return,   
                    'total_cost' => $total_cost->cost
                ];
            }
        }
        if (!empty($warehouses_report)) {
            $this->data['warehouses_report'] = $warehouses_report;
        }


        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('profit_loss')]];
        $meta = ['page_title' => lang('profit_loss'), 'bc' => $bc];
        $this->page_construct('reports/profit_loss', $meta, $this->data);
    }
    public function loan_profit_loss($start_date = null, $end_date = null)
    {
        $this->bpas->checkPermissions('profit_loss');
        if (!$start_date) {
            $start      = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end      = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $sales = $this->reports_model->getAllSales($start, $end);

        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $this->data['total_purchases']       = $this->reports_model->getTotalPurchases($start, $end);

        $this->data['total_sales']           = $this->reports_model->getTotalSales($start, $end);

        
        $this->data['total_return_sales']    = $this->reports_model->getTotalReturnSales($start, $end);
        
         $this->data['total_discounts'] = $this->reports_model->getTotaldiscounts($start, $end);
        $this->data['total_expenses']        = $this->reports_model->getTotalExpenses($start, $end);
        $this->data['total_paid']            = $this->reports_model->getTotalPaidAmount($start, $end);
        $this->data['total_received']        = $this->reports_model->getTotalReceivedAmount($start, $end);
        $this->data['total_received_cash']   = $this->reports_model->getTotalReceivedCashAmount($start, $end);
        $this->data['total_received_cc']     = $this->reports_model->getTotalReceivedCCAmount($start, $end);
        $this->data['total_received_cheque'] = $this->reports_model->getTotalReceivedChequeAmount($start, $end);
        $this->data['total_received_ppp']    = $this->reports_model->getTotalReceivedPPPAmount($start, $end);
        $this->data['total_received_stripe'] = $this->reports_model->getTotalReceivedStripeAmount($start, $end);
        $this->data['total_returned']        = $this->reports_model->getTotalReturnedAmount($start, $end);
        $this->data['start']                 = urldecode($start_date);
        $this->data['end']                   = urldecode($end_date);

        $pro_cost = 0;
        if (!empty($sales)) {
            foreach ($sales as $sale) {
                $pro = $this->site->getProductByID($sale->product_id);
                $pro_cost += $this->bpas->formatMoney($pro->cost*$sale->quantity);
            }
        }
        $this->data['product_cost'] = $pro_cost;

        $warehouses = $this->site->getAllWarehouses();
        if (!empty($warehouses)) {
            foreach ($warehouses as $warehouse) {
                $total_purchases     = $this->reports_model->getTotalPurchases($start, $end, $warehouse->id);
                $total_sales         = $this->reports_model->getTotalSales($start, $end, $warehouse->id);
                $total_returns       = $this->reports_model->getTotalReturnSales($start, $end, $warehouse->id);
                $total_expenses      = $this->reports_model->getTotalExpenses($start, $end, $warehouse->id);


                $total_cost = $this->reports_model->getTotalCost($start, $end, $warehouse->id);
                $total_return_warehouse =$this->reports_model->getTotalReturnedwarehouse($start, $end,$warehouse->id);
                $total_discounts = $this->reports_model->getTotaldiscounts($start, $end,$warehouse->id);

                $warehouses_report[] = [
                    'warehouse'       => $warehouse,
                    'total_purchases' => $total_purchases,
                    'total_sales'     => $total_sales,
                    'total_returns'   => $total_returns,
                    'total_expenses'  => $total_expenses,
                    'total_discounts'  => $total_discounts->total_amount,
                    'total_returned' => $total_return_warehouse->total_return,   
                    'total_cost' => $total_cost->cost
                ];
            }
        }
        if (!empty($warehouses_report)) {
            $this->data['warehouses_report'] = $warehouses_report;
        }


        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('profit_loss')]];
        $meta = ['page_title' => lang('profit_loss'), 'bc' => $bc];
        $this->page_construct('reports/loan_profit_loss', $meta, $this->data);
    }

    public function profit_loss_table($start_date = null, $end_date = null, $biller_id = null)
    {
        $this->bpas->checkPermissions('profit_loss');
        if (!$start_date) {
            $start      = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end      = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        if(!$this->Owner && !$this->Admin) {
            $biller_id = $this->session->userdata('biller_id');
        }
        
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $sales = $this->reports_model->getAllSales($start, $end, $biller_id);

        //--------begining of period-------
        $time = new DateTime('1990-01-01 00:01');
        $bstart = '"'.$time->format('Y-m-d H:i').'"';

        $this->data['btotal_sales']            = $this->reports_model->getTotalSales($bstart, $start, null, $biller_id);

        $this->data['btotal_payment_received'] = $this->reports_model->getTotalPaymentReceived($bstart, $start, $biller_id);
        $this->data['bgetReturnOnSales']       = $this->reports_model->getReturnOnSales($bstart, $start, null, $biller_id);
        $this->data['btotal_sales_costing']    = $this->reports_model->getTotalCost($bstart, $start, null, $biller_id);
        $this->data['btotal_purchases']        = $this->reports_model->getTotalPurchases($bstart, $start, null, $biller_id);
        $this->data['btotal_return_sales']     = $this->reports_model->getTotalReturnSales($bstart, $start, null, $biller_id);
        $this->data['btotal_discounts']        = $this->reports_model->getTotaldiscounts($bstart, $start, null, $biller_id);
        $this->data['btotal_expenses']         = $this->reports_model->getTotalExpenses($bstart, $start, null, null, $biller_id);
        $this->data['btotal_expenses_budget']  = $this->reports_model->getTotalExpensesBudget($bstart, $start, null, null, $biller_id);
        $this->data['btotal_payroll']          = $this->reports_model->getTotalPayroll($bstart, $start, $biller_id);//$this->reports_model->getTotalExpenses($start, $end,'salary');
        $this->data['btotal_paid']             = $this->reports_model->getTotalPaidAmount($bstart, $start, $biller_id);
        $this->data['btotal_received']         = $this->reports_model->getTotalReceivedAmount($bstart, $start, $biller_id);
        $this->data['btotal_received_cash']    = $this->reports_model->getTotalReceivedCashAmount($bstart, $start, $biller_id);
        $this->data['btotal_received_cc']      = $this->reports_model->getTotalReceivedCCAmount($bstart, $start, $biller_id);
        $this->data['btotal_received_cheque']  = $this->reports_model->getTotalReceivedChequeAmount($bstart, $start, $biller_id);
        $this->data['btotal_received_ppp']     = $this->reports_model->getTotalReceivedPPPAmount($bstart, $start, $biller_id);
        $this->data['total_received_stripe']   = $this->reports_model->getTotalReceivedStripeAmount($bstart, $start, $biller_id);
        $this->data['btotal_returned']         = $this->reports_model->getTotalReturnedAmount($bstart, $start, $biller_id);
        $this->data['btotal_store_sales']      = $this->reports_model->getTotalStore_Sales($bstart, $start, null, $biller_id);
        $this->data['btotal_store_purchases']  = $this->reports_model->getTotalStore_Purchases($bstart, $start, null, $biller_id);
        $this->data['btotalexbycategories']    = $this->reports_model->getExpensesBycategories($bstart, $start, $biller_id);

        //--------close----------

        $this->data['total_sales']            = $this->reports_model->getTotalSales($start, $end, null, $biller_id);
        $this->data['total_payment_received'] = $this->reports_model->getTotalPaymentReceived($start, $end, $biller_id);
        $this->data['getReturnOnSales']       = $this->reports_model->getReturnOnSales($start, $end, null, $biller_id);
        $this->data['total_sales_costing']    = $this->reports_model->getTotalCost($start, $end, null, $biller_id);
        $this->data['total_purchases']        = $this->reports_model->getTotalPurchases($start, $end, null, $biller_id);
        $this->data['total_return_sales']     = $this->reports_model->getTotalReturnSales($start, $end, null, $biller_id);
        $this->data['total_discounts']        = $this->reports_model->getTotaldiscounts($start, $end, null, $biller_id);
        $this->data['total_expenses']         = $this->reports_model->getTotalExpenses($start, $end, null, null, $biller_id);
        $this->data['total_expenses_budget']  = $this->reports_model->getTotalExpensesBudget($start, $end, null, null, $biller_id);
        $this->data['total_payroll']          = $this->reports_model->getTotalPayroll($start, $end, $biller_id);//$this->reports_model->getTotalExpenses($start, $end,'salary');
        $this->data['total_paid']             = $this->reports_model->getTotalPaidAmount($start, $end, $biller_id);
        $this->data['total_received']         = $this->reports_model->getTotalReceivedAmount($start, $end, $biller_id);
        $this->data['total_received_cash']    = $this->reports_model->getTotalReceivedCashAmount($start, $end, $biller_id);
        $this->data['total_received_cc']      = $this->reports_model->getTotalReceivedCCAmount($start, $end, $biller_id);
        $this->data['total_received_cheque']  = $this->reports_model->getTotalReceivedChequeAmount($start, $end, $biller_id);
        $this->data['total_received_ppp']     = $this->reports_model->getTotalReceivedPPPAmount($start, $end, $biller_id);
        $this->data['total_received_stripe']  = $this->reports_model->getTotalReceivedStripeAmount($start, $end, $biller_id);
        $this->data['total_returned']         = $this->reports_model->getTotalReturnedAmount($start, $end, $biller_id);
        $this->data['total_store_sales']      = $this->reports_model->getTotalStore_Sales($start, $end, null, $biller_id);
        $this->data['total_store_purchases']  = $this->reports_model->getTotalStore_Purchases($start, $end, null, $biller_id);
        $this->data['totalexbycategories']    = $this->reports_model->getExpensesBycategories($start, $end, $biller_id);

        $this->data['start']                  = urldecode($start_date);
        $this->data['end']                    = urldecode($end_date);
        $this->data['settings']               = $this->site->getSettings();

        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('profit_loss')]];
        $meta = ['page_title' => lang('profit_loss'), 'bc' => $bc];
        $this->page_construct('reports/profit_loss_table', $meta, $this->data);
    }

    public function yearly_profit_loss($start_date = null, $end_date = null) {

        $this->bpas->checkPermissions('profit_loss');
        if (!$start_date) {
            $start      = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end      = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $this->data['total_purchases']       = $this->reports_model->getTotalPurchases($start, $end);
        $this->data['total_sales']           = $this->reports_model->getTotalSales($start, $end);
        $this->data['total_return_sales']    = $this->reports_model->getTotalReturnSales($start, $end);
        $this->data['total_expenses']        = $this->reports_model->getTotalExpenses($start, $end);
        $this->data['total_paid']            = $this->reports_model->getTotalPaidAmount($start, $end);
        $this->data['total_received']        = $this->reports_model->getTotalReceivedAmount($start, $end);
        $this->data['total_received_cash']   = $this->reports_model->getTotalReceivedCashAmount($start, $end);
        $this->data['total_received_cc']     = $this->reports_model->getTotalReceivedCCAmount($start, $end);
        $this->data['total_received_cheque'] = $this->reports_model->getTotalReceivedChequeAmount($start, $end);
        $this->data['total_received_ppp']    = $this->reports_model->getTotalReceivedPPPAmount($start, $end);
        $this->data['total_received_stripe'] = $this->reports_model->getTotalReceivedStripeAmount($start, $end);
        $this->data['total_returned']        = $this->reports_model->getTotalReturnedAmount($start, $end);
        $this->data['start']                 = urldecode($start_date);
        $this->data['end']                   = urldecode($end_date);

        $warehouses = $this->site->getAllWarehouses();
        if (!empty($warehouses)) {

            foreach ($warehouses as $warehouse) {
                $total_purchases     = $this->reports_model->getTotalPurchases($start, $end, $warehouse->id);
                $total_sales         = $this->reports_model->getTotalSales($start, $end, $warehouse->id);
                $total_returns       = $this->reports_model->getTotalReturnSales($start, $end, $warehouse->id);
                $total_expenses      = $this->reports_model->getTotalExpenses($start, $end, $warehouse->id);
                $warehouses_report[] = [
                    'warehouse'       => $warehouse,
                    'total_purchases' => $total_purchases,
                    'total_sales'     => $total_sales,
                    'total_returns'   => $total_returns,
                    'total_expenses'  => $total_expenses,
                ];
            }
        }
        if (!empty($warehouses_report)) {
            $this->data['warehouses_report'] = $warehouses_report;
        }

        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('profit_loss')]];
        $meta = ['page_title' => lang('profit_loss'), 'bc' => $bc];
        $this->page_construct('reports/yearly_profit_loss', $meta, $this->data);

    }

    public function profit_loss_pdf($start_date = null, $end_date = null)
    {
        $this->bpas->checkPermissions('profit_loss');
        if (!$start_date) {
            $start      = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end      = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }

        $this->data['total_purchases']       = $this->reports_model->getTotalPurchases($start, $end);
        $this->data['total_sales']           = $this->reports_model->getTotalSales($start, $end);
        $this->data['total_expenses']        = $this->reports_model->getTotalExpenses($start, $end);
        $this->data['total_paid']            = $this->reports_model->getTotalPaidAmount($start, $end);
        $this->data['total_received']        = $this->reports_model->getTotalReceivedAmount($start, $end);
        $this->data['total_received_cash']   = $this->reports_model->getTotalReceivedCashAmount($start, $end);
        $this->data['total_received_cc']     = $this->reports_model->getTotalReceivedCCAmount($start, $end);
        $this->data['total_received_cheque'] = $this->reports_model->getTotalReceivedChequeAmount($start, $end);
        $this->data['total_received_ppp']    = $this->reports_model->getTotalReceivedPPPAmount($start, $end);
        $this->data['total_received_stripe'] = $this->reports_model->getTotalReceivedStripeAmount($start, $end);
        $this->data['total_returned']        = $this->reports_model->getTotalReturnedAmount($start, $end);
        $this->data['start']                 = urldecode($start_date);
        $this->data['end']                   = urldecode($end_date);

        $warehouses = $this->site->getAllWarehouses();
        if (!empty($warehouses)) {
            foreach ($warehouses as $warehouse) {
                $total_purchases     = $this->reports_model->getTotalPurchases($start, $end, $warehouse->id);
                $total_sales         = $this->reports_model->getTotalSales($start, $end, $warehouse->id);
                $warehouses_report[] = [
                    'warehouse'       => $warehouse,
                    'total_purchases' => $total_purchases,
                    'total_sales'     => $total_sales,
                ];
            }
        }
        $this->data['warehouses_report'] = $warehouses_report;

        $html = $this->load->view($this->theme . 'reports/profit_loss_pdf', $this->data, true);
        $name = lang('profit_loss') . '-' . str_replace(['-', ' ', ':'], '_', $this->data['start']) . '-' . str_replace(['-', ' ', ':'], '_', $this->data['end']) . '.pdf';
        $this->bpas->generate_pdf($html, $name, false, false, false, false, false, 'L');
    }

    public function purchases()
    {
        $this->bpas->checkPermissions('purchases');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['projects']         = $this->site->getAllProject();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('purchases_report')]];
        $meta                     = ['page_title' => lang('purchases_report'), 'bc' => $bc];
        $this->page_construct('reports/purchases', $meta, $this->data);
    }

    public function quantity_alerts($warehouse_id = null)
    {
        $this->bpas->checkPermissions('quantity_alerts');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses']   = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            // $this->data['warehouse']    = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : null;
            $this->data['warehouse']    = $warehouse_id ? $this->site->getMultiWarehouseByID($warehouse_id) : null;
        } else {
            $user                       = $this->site->getUser();
            $this->data['warehouses']   = null;
            $this->data['warehouse_id'] = $user->warehouse_id;
            // $this->data['warehouse'] = $user->warehouse_id ? $this->site->getWarehouseByID($user->warehouse_id) : null;
            $this->data['warehouse']    = $user->warehouse_id ? $this->site->getMultiWarehouseByID($user->warehouse_id) : null;
        }

        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('product_quantity_alerts')]];
        $meta = ['page_title' => lang('product_quantity_alerts'), 'bc' => $bc];
        $this->page_construct('reports/quantity_alerts', $meta, $this->data);
    }

    public function getQuantityAlerts($warehouse_id = null, $pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('quantity_alerts', true);
        $warehouse_id = $this->input->get('warehouse_id') ? $this->input->get('warehouse_id') : $warehouse_id;

        if (!$this->Owner && !$warehouse_id) {
            $user         = $this->site->getUser();
            $warehouse_id = $user->warehouse_id;
        }

        if ($pdf || $xls) {
            if ($warehouse_id) {
                $this->db
                    ->select('image, code, name, SUM(wp.quantity) as quantity, COALESCE(wp.qty_alert, 0) AS alert_quantity')
                    ->from('products')
                    ->join("( SELECT * from {$this->db->dbprefix('warehouses_products')} WHERE warehouse_id IN (REPLACE('{$warehouse_id}', '-', ','))) wp", 'products.id=wp.product_id', 'left')
                    // ->where('alert_quantity > wp.quantity', null)
                    ->where('COALESCE(wp.qty_alert, 0) > wp.quantity', null)
                    ->or_where('wp.quantity', null)
                    ->where('track_quantity', 1)
                    ->group_by('products.id');
            } else {
                $this->db
                    ->select('image, code, name, quantity, alert_quantity')
                    ->from('products')
                    ->where('alert_quantity > quantity', null)
                    ->where('track_quantity', 1)
                    ->order_by('code desc');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_quantity_alerts'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('alert_quantity'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->alert_quantity);
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'product_quantity_alerts';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            if ($warehouse_id) {
                $this->datatables
                    ->select('image, code, name, SUM(wp.quantity), COALESCE(wp.qty_alert, 0)')
                    ->from('products')
                    ->join("( SELECT * from {$this->db->dbprefix('warehouses_products')} WHERE warehouse_id IN ({$warehouse_id})) wp", 'products.id=wp.product_id', 'left')
                    // ->where('alert_quantity > wp.quantity', null)
                    ->where('COALESCE(wp.qty_alert, 0) > wp.quantity', null)
                    ->or_where('wp.quantity', null)
                    ->where('track_quantity', 1)
                    ->group_by('products.id');
            } else {
                $this->datatables
                    ->select('image, code, name, quantity, alert_quantity')
                    ->from('products')
                    ->where('alert_quantity >= quantity', null)
                    ->where('track_quantity', 1);
            }

            echo $this->datatables->generate();
        }
    }
   
    public function register()
    {
        $this->bpas->checkPermissions('register');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $bc                  = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('register_report')]];
        $meta                = ['page_title' => lang('register_report'), 'bc' => $bc];
        $this->page_construct('reports/register', $meta, $this->data);
    }

    public function sale_edit_request()
    {
        $this->bpas->checkPermissions('sales');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $bc                  = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('sale_edit_request_report')]];
        $meta                = ['page_title' => lang('sale_edit_request_report'), 'bc' => $bc];
        $this->page_construct('reports/sale_edit_request', $meta, $this->data);
    }

    public function sales()
    {
        $this->bpas->checkPermissions('sales');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']   = $this->site->getAllProject();
        $this->data['zones']      = $this->site->getAllZones_Order_Group();
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $this->data['salemans']   = $this->site->getAllSalemans($this->Settings->group_saleman_id);
        $this->data['nest_categories'] = $this->site->getNestedCategories();
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('sales_report')]];
        $meta = ['page_title' => lang('sales_report'), 'bc' => $bc];
        if ($this->Owner || $this->Admin) {
            $this->page_construct('reports/sales_costing', $meta, $this->data);
        } else {
            $this->page_construct('reports/sales', $meta, $this->data);
        }
    }

    public function tickets()
    {
        $this->bpas->checkPermissions('ticket');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']   = $this->site->getAllProject();
        $this->data['zones']      = $this->site->getAllZones_Order_Group();

        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('ticket_report')]];
        $meta                     = ['page_title' => lang('ticket_report'), 'bc' => $bc];

        $this->page_construct('reports/ticket_report', $meta, $this->data);
       
    }

    public function consignment()
    {
        $this->bpas->checkPermissions();
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']         = $this->site->getAllProject();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('sales_report')]];
        $meta                     = ['page_title' => lang('sales_report'), 'bc' => $bc];
        $this->page_construct('reports/consignment', $meta, $this->data);
    }
    public function costing()
    {
        $this->bpas->checkPermissions('sales');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']         = $this->site->getAllProject();

        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('sales_report')]];
        $meta                     = ['page_title' => lang('sales_report'), 'bc' => $bc];
        $this->page_construct('reports/costing', $meta, $this->data);
    }
    public function staff_report($user_id = null, $year = null, $month = null, $pdf = null, $cal = 0)
    {
        if (!$user_id) {
            $this->session->set_flashdata('error', lang('no_user_selected'));
            admin_redirect('reports/users');
        }
        $this->data['error']      = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['purchases']  = $this->reports_model->getStaffPurchases($user_id);
        $this->data['sales']      = $this->reports_model->getStaffSales($user_id);
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getAllWarehouses();

        if (!$year) {
            $year = date('Y');
        }
        if (!$month || $month == '#monthly-con') {
            $month = date('m');
        }
        if ($pdf) {
            if ($cal) {
                $this->monthly_sales($year, $pdf, $user_id);
            } else {
                $this->daily_sales($year, $month, $pdf, $user_id);
            }
        }
        $config = [
            'show_next_prev' => true,
            'next_prev_url'  => admin_url('reports/staff_report/' . $user_id),
            'month_type'     => 'long',
            'day_type'       => 'long',
        ];

        $config['template'] = '{table_open}<div class="table-responsive"><table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable reports-table">{/table_open}
        {heading_row_start}<tr>{/heading_row_start}
        {heading_previous_cell}<th class="text-center"><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
        {heading_title_cell}<th class="text-center" colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
        {heading_next_cell}<th class="text-center"><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
        {heading_row_end}</tr>{/heading_row_end}
        {week_row_start}<tr>{/week_row_start}
        {week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
        {week_row_end}</tr>{/week_row_end}
        {cal_row_start}<tr class="days">{/cal_row_start}
        {cal_cell_start}<td class="day">{/cal_cell_start}
        {cal_cell_content}
        <div class="day_num">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content}
        {cal_cell_content_today}
        <div class="day_num highlight">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content_today}
        {cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
        {cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
        {cal_cell_blank}&nbsp;{/cal_cell_blank}
        {cal_cell_end}</td>{/cal_cell_end}
        {cal_row_end}</tr>{/cal_row_end}
        {table_close}</table></div>{/table_close}';

        $this->load->library('calendar', $config);
        $sales = $this->reports_model->getStaffDailySales($user_id, $year, $month);

        if (!empty($sales)) {
            foreach ($sales as $sale) {
                $daily_sale[$sale->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang('discount') . '</td><td>' . $this->bpas->formatMoney($sale->discount) . '</td></tr><tr><td>' . lang('product_tax') . '</td><td>' . $this->bpas->formatMoney($sale->tax1) . '</td></tr><tr><td>' . lang('order_tax') . '</td><td>' . $this->bpas->formatMoney($sale->tax2) . '</td></tr><tr><td>' . lang('total') . '</td><td>' . $this->bpas->formatMoney($sale->total) . '</td></tr></table>';
            }
        } else {
            $daily_sale = [];
        }
        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
        if ($this->input->get('pdf')) {
        }
        $this->data['year']    = $year;
        $this->data['month']   = $month;
        $this->data['msales']  = $this->reports_model->getStaffMonthlySales($user_id, $year);
        $this->data['user_id'] = $user_id;
        $bc                    = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('staff_report')]];
        $meta                  = ['page_title' => lang('staff_report'), 'bc' => $bc];
        $this->page_construct('reports/staff_report', $meta, $this->data);
    }

    public function suggestions()
    {
        $term = $this->input->get('term', true);
        if (strlen($term) < 1) {
            die();
        }

        $rows = $this->reports_model->getProductNames($term);
        if ($rows) {
            foreach ($rows as $row) {
                $pr[] = ['id' => $row->id, 'label' => $row->name . ' (' . $row->code . ')'];
            }
            $this->bpas->send_json($pr);
        } else {
            echo false;
        }
    }

    public function supplier_report($user_id = null)
    {
        $this->bpas->checkPermissions('suppliers', true);
        if (!$user_id) {
            $this->session->set_flashdata('error', lang('no_supplier_selected'));
            admin_redirect('reports/suppliers');
        }

        $this->data['purchases']       = $this->reports_model->getPurchasesTotals($user_id);
        $this->data['total_purchases'] = $this->reports_model->getSupplierPurchases($user_id);
        $this->data['users']           = $this->reports_model->getStaff();
        $this->data['warehouses']      = $this->site->getAllWarehouses();

        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');

        $this->data['user_id'] = $user_id;
        $bc                    = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('suppliers_report')]];
        $meta                  = ['page_title' => lang('suppliers_report'), 'bc' => $bc];
        $this->page_construct('reports/supplier_report', $meta, $this->data);
    }

    public function suppliers()
    {
        $this->bpas->checkPermissions('suppliers');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('suppliers_report')]];
        $meta = ['page_title' => lang('suppliers_report'), 'bc' => $bc];
        $this->page_construct('reports/suppliers', $meta, $this->data);
    }

    public function tax()
    {
        $this->bpas->checkPermissions();
        $start_date = $this->input->post('start_date') ? $this->input->post('start_date') : null;
        $end_date   = $this->input->post('end_date') ? $this->input->post('end_date') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        $this->data['error']        = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['warehouses']   = $this->site->getAllWarehouses();
        $this->data['billers']      = $this->site->getAllCompanies('biller');
        $this->data['sale_tax']     = $this->reports_model->getSalesTax($start_date, $end_date);
        $this->data['purchase_tax'] = $this->reports_model->getPurchasesTax($start_date, $end_date);
        $bc                         = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('tax_report')]];
        $meta                       = ['page_title' => lang('tax_report'), 'bc' => $bc];
        $this->page_construct('reports/tax', $meta, $this->data);
    }

    public function users()
    {
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc                  = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('staff_report')]];
        $meta                = ['page_title' => lang('staff_report'), 'bc' => $bc];
        $this->page_construct('reports/users', $meta, $this->data);
    }

    public function warehouse_stock($warehouse = null)
    {
        $this->bpas->checkPermissions('index', true);
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }

        $this->data['stock']        = $warehouse ? $this->reports_model->getWarehouseStockValue($warehouse) : $this->reports_model->getStockValue();
        $this->data['warehouses']   = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse']    = $warehouse ? $this->site->getWarehouseByID($warehouse) : null;
        $this->data['totals']       = $this->reports_model->getWarehouseTotals($warehouse);
        $bc                         = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('reports')]];
        $meta                       = ['page_title' => lang('reports'), 'bc' => $bc];
        $this->page_construct('reports/warehouse_stock', $meta, $this->data);
    }

    function products_project()
    {
        $this->bpas->checkPermissions('purchases');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']         = $this->site->getAllProject();

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('purchases_report')));
        $meta = array('page_title' => lang('purchases_report'), 'bc' => $bc);
        $this->page_construct('reports/products_project', $meta, $this->data);
    }
    function getproducts_project($pdf = NULL, $xls = NULL) {
        $this->bpas->checkPermissions('sales', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $serial = $this->input->get('serial') ? $this->input->get('serial') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if ($pdf || $xls) {

            $this->db
                ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date,
                    project_name,
                    biller,
                    customer,
                    {$this->db->dbprefix('sale_items')}.product_name,
                    {$this->db->dbprefix('sale_items')}.product_code,
                    {$this->db->dbprefix('sale_items')}.serial_no,
                    {$this->db->dbprefix('sale_items')}.quantity,
                    grand_total,
                    paid,
                    sale_status", FALSE)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->where('sales.pos !=',2)
                ->group_by('sales.id')
                ->order_by('sales.date desc');

            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if($project){
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }

            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('serial_no'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->product_code);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->serial_no);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, ($data_row->quantity));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->sale_status));
                    $total += $data_row->quantity;
                //    $paid += $data_row->paid;
                //    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
            //    $this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()
           //         ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $total);
            //    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $paid);
            //    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'Product By Project Report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $si = "( SELECT sale_id, product_id, serial_no,
             {$this->db->dbprefix('sale_items')}.product_name,
             {$this->db->dbprefix('sale_items')}.product_code,
             {$this->db->dbprefix('sale_items')}.quantity
             from {$this->db->dbprefix('sale_items')} ";

            if ($product || $serial) { $si .= " WHERE "; }
            if ($product) {
                $si .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            }
            if ($product && $serial) { $si .= " AND "; }
            if ($serial) {
                $si .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
            }
            $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('sales')}.date, '%Y-%m-%d %T') as date,
                    project_name,
                    FSI.product_name,
                    FSI.product_code,
                    FSI.serial_no,
                    FSI.quantity,
                    biller,
                    customer,
                    sale_status,
                    {$this->db->dbprefix('sales')}.id as id", FALSE)
                ->from('sales')
                ->join($si, 'FSI.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->where('pos !=',2);
                // ->group_by('sales.id');

            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if($project){
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->datatables->where('FSI.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('FSI.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $payments_link = anchor('admin/sales/payments/$1', '<i class="fa fa-money"></i> ' . lang('view_payments'), 'data-toggle="modal" data-backdrop="static" data-target="#myModal"');
            $payments_loan_link = anchor('admin/sales/view_loan_payments/$1', '<i class="fa fa-money"></i> ' . lang('view_payments_loan'), '');
            $action = '<div class="text-center"><div class="btn-group text-left">'
                    . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
                    . lang('actions') . ' <span class="caret"></span></button>
                    <ul class="dropdown-menu pull-right" role="menu">
                        <li>' . $payments_link . '</li>
                        <li>' . $payments_loan_link . '</li>
                    </ul>
                    </div>
                </div>';

            $this->datatables->add_column("Actions",  $action, "id")
                ->unset_column('id');
            echo $this->datatables->generate();

        }
    }

    public function cost_report(){
        $this->bpas->checkPermissions();
        $this->data['error']      = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['product_variants'] = $this->site->getAllProductVariants();
        if ($this->input->post('start_date')) {
            $dt = 'From ' . $this->input->post('start_date') . ' to ' . $this->input->post('end_date');
        } else {
            $dt = 'Till ' . $this->input->post('end_date');
        }
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('cost')]];
        $meta = ['page_title' => lang('cost_report'), 'bc' => $bc];
        $this->page_construct('reports/cost_report', $meta, $this->data);
    }
    public function getCostsReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);

        $product     = $this->input->get('product') ? $this->input->get('product') : null;
        $category    = $this->input->get('category') ? $this->input->get('category') : null;
        $brand       = $this->input->get('brand') ? $this->input->get('brand') : null;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : null;
        $warehouse   = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $cf1         = $this->input->get('cf1') ? $this->input->get('cf1') : null;
        $cf2         = $this->input->get('cf2') ? $this->input->get('cf2') : null;
        $cf3         = $this->input->get('cf3') ? $this->input->get('cf3') : null;
        $cf4         = $this->input->get('cf4') ? $this->input->get('cf4') : null;
        $cf5         = $this->input->get('cf5') ? $this->input->get('cf5') : null;
        $cf6         = $this->input->get('cf6') ? $this->input->get('cf6') : null;
        $start_date  = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date    = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        $pp = "( SELECT product_id, return_id, SUM(CASE WHEN pi.purchase_id IS NOT NULL THEN quantity ELSE 0 END) as purchasedQty, SUM(quantity_balance) as balacneQty, SUM( unit_cost * quantity_balance ) balacneValue, SUM( (CASE WHEN pi.purchase_id IS NOT NULL THEN (pi.subtotal) ELSE 0 END) ) totalPurchase, pi.product_unit_code, pi.real_unit_cost as real_cost from {$this->db->dbprefix('purchase_items')} pi LEFT JOIN {$this->db->dbprefix('purchases')} p on p.id = pi.purchase_id WHERE pi.status = 'received' ";
        // WHERE p.status != 'pending' AND p.status != 'ordered'

       $sp = '( SELECT si.product_id, s.return_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale from ' . $this->db->dbprefix('sales') . ' s JOIN ' . $this->db->dbprefix('sale_items') . ' si on s.id = si.sale_id WHERE s.sale_status != "returned" ';

       /*
        $pr = "( SELECT product_id, SUM(CASE WHEN sr.id IS NOT NULL THEN sri.quantity ELSE 0 END) as returnQty, SUM( CASE WHEN sr.id IS NOT NULL THEN sri.subtotal ELSE 0 END ) returnTotalSale from {$this->db->dbprefix('sales')} sr LEFT JOIN {$this->db->dbprefix('sale_items')} sri on sr.id = sri.sale_id WHERE sr.sale_status = 'returned' ";
        */
        $pr = "( SELECT product_id, SUM(sri.quantity) as returnQty,
            SUM(sri.subtotal) returnTotalSale from {$this->db->dbprefix('returns')} sr LEFT JOIN {$this->db->dbprefix('return_items')} sri on sr.id = sri.return_id";


        $op = "( SELECT product_id, return_id, SUM(CASE WHEN opi.purchase_id IS NOT NULL THEN quantity ELSE 0 END) as openBalanceQty, SUM( (CASE WHEN opi.purchase_id IS NOT NULL THEN (opi.subtotal) ELSE 0 END) ) as openTotal from {$this->db->dbprefix('purchase_items')} opi LEFT JOIN {$this->db->dbprefix('purchases')} op on op.id = opi.purchase_id WHERE opi.status = 'received' ";

        $detail_link = anchor('admin/reports/view_cost/$1', '<label class="label label-primary">' . lang('view').' '.lang('details') . '</label>', 'class="tip" title="' . lang('show') . '" data-toggle="modal" data-backdrop="static" data-target="#myModal"');

        if ($start_date || $warehouse) {
            // $sp .= ' WHERE ';
            if ($start_date) {
                $start_date = $this->bpas->fld($start_date);
                $end_date   = $end_date ? $this->bpas->fld($end_date) : date('Y-m-d');

                $pp .= " AND p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
                $sp .= " AND s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
                $pr .= " AND sr.date >= '{$start_date}' AND sr.date < '{$end_date}' ";
                $op .= " AND op.date < '{$start_date}' ";
                // if ($warehouse) {
                //     $sp .= ' AND ';
                // }
            }
            if ($warehouse) {
                $pp .= " AND pi.warehouse_id = '{$warehouse}' ";
                $sp .= " AND si.warehouse_id = '{$warehouse}' ";
                $pr .= " AND sr.warehouse_id = '{$warehouse}' ";
                $op .= " AND opi.warehouse_id = '{$warehouse}' ";
            }
            $op .= ' GROUP BY opi.product_id ) POpening';
        }
        $pp .= ' GROUP BY pi.product_id ) PCosts';
        $sp .= ' GROUP BY si.product_id ) PSales';
        $pr .= ' GROUP BY sri.product_id ) PReturn';

        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('products') . '.id as product_id, ' . $this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . '.name,
                    ' . $this->db->dbprefix('products') . '.serial_no,
                    ' . $this->db->dbprefix('products') . '.category_id,
                COALESCE('.($start_date?"POpening.openBalanceQty":"0").', 0) as open_balance,
                COALESCE( PCosts.purchasedQty, 0 ) as PurchasedQty,
                COALESCE( PSales.soldQty, 0 ) as SoldQty,
                COALESCE( PCosts.balacneQty, 0 ) as BalacneQty,
                COALESCE( PCosts.totalPurchase, 0 ) as TotalPurchase,
                COALESCE( PCosts.balacneValue, 0 ) as TotalBalance,
                COALESCE( PSales.totalSale, 0 ) as TotalSales,
                (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit,
                COALESCE(PCosts.product_unit_code, "") as unit_code, COALESCE(PCosts.real_cost, 0) as real_cost,
                COALESCE(PReturn.returnQty, 0 ) as returnQty,
                (COALESCE(PCosts.purchasedQty, 0) - COALESCE(PSales.soldQty, 0) - COALESCE(PReturn.returnQty, 0) + COALESCE('.($start_date?"POpening.openBalanceQty":"0").', 0)) as ending_qty,
                (COALESCE(PCosts.real_cost, 0) * (COALESCE(PCosts.purchasedQty, 0) - COALESCE(PSales.soldQty, 0) - COALESCE(PReturn.returnQty, 0) + COALESCE('.($start_date?"POpening.openBalanceQty":"0").', 0))) as ending_cost', false)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->join($pr, 'products.id = PReturn.product_id', 'left');
            if ($start_date) {
                $this->db->join($op, 'products.id = POpening.product_id', 'left');
            }
            $this->db->order_by('products.name');

            if ($product) {
                $this->db->where($this->db->dbprefix('products') . '.id', $product);
            }
            if ($cf1) {
                $this->db->where($this->db->dbprefix('products') . '.cf1', $cf1);
            }
            if ($cf2) {
                $this->db->where($this->db->dbprefix('products') . '.cf2', $cf2);
            }
            if ($cf3) {
                $this->db->where($this->db->dbprefix('products') . '.cf3', $cf3);
            }
            if ($cf4) {
                $this->db->where($this->db->dbprefix('products') . '.cf4', $cf4);
            }
            if ($cf5) {
                $this->db->where($this->db->dbprefix('products') . '.cf5', $cf5);
            }
            if ($cf6) {
                $this->db->where($this->db->dbprefix('products') . '.cf6', $cf6);
            }
            if ($category) {
                $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
            }
            if ($subcategory) {
                $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
            }
            if ($brand) {
                $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('cost_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('opening_balance'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('cost'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('total_cost'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('stock_request'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('return_stock'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('balance_quantity'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('balance_cost'));

                $row  = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $bQty = 0;
                $bAmt = 0;
                $pl   = 0;
                $rCost = 0;
                $reQty = 0;
                $openQty = 0;
                foreach ($data as $data_row) {
                    $get_categories= $this->site->getCategoryByID($data_row->category_id);

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->unit_code);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->open_balance);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->PurchasedQty);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->real_cost);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->TotalPurchase);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->SoldQty);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->returnQty);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->ending_qty);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->ending_cost);

                    $row++;

                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $bQty += $data_row->ending_qty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $bAmt += $data_row->ending_cost;
                    $pl   += $data_row->Profit;
                    $rCost+= $data_row->real_cost;
                    $reQty+= $data_row->returnQty;
                    $openQty += $data_row->open_balance;
                }
                $this->excel->getActiveSheet()->getStyle('D' . $row . ':L' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);

                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $openQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $rCost);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $reQty);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $bQty);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $bAmt);


                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                $filename = 'cost_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('products') . '.id as id, ' .$this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . ".name,
                COALESCE(PCosts.product_unit_code, 0) as unit_code,
                COALESCE(".($start_date?'POpening.openBalanceQty':'0').", 0) as open_balance,
                COALESCE(PCosts.purchasedQty, 0) as qty,
                COALESCE(PCosts.real_cost, 0) as cost,
                COALESCE(PCosts.totalPurchase, 0) as purchased,
                COALESCE(PSales.soldQty, 0) as sold,
                COALESCE(PReturn.returnQty, 0 ) as returnQty,
                (COALESCE(PCosts.purchasedQty, 0) - COALESCE(PSales.soldQty, 0) - COALESCE(PReturn.returnQty, 0) + COALESCE(".($start_date?"POpening.openBalanceQty":"0").", 0)) as ending_qty,
                (COALESCE(PCosts.real_cost, 0) * (COALESCE(PCosts.purchasedQty, 0) - COALESCE(PSales.soldQty, 0) - COALESCE(PReturn.returnQty, 0) + COALESCE(".($start_date?"POpening.openBalanceQty":"0").", 0))) as ending_cost", false)
                ->from('products')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->join($pr, 'products.id = PReturn.product_id', 'left');
            if ($start_date) {
                $this->datatables->join($op, 'products.id = POpening.product_id', 'left');
            }
            $this->datatables->group_by('products.id')
                ->add_column('Actions', '<div class="text-center">'.$detail_link.'</div>', 'id')
                ->unset_column('id');

            if ($product) {
                $this->datatables->where($this->db->dbprefix('products') . '.id', $product);
            }
            if ($cf1) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf1', $cf1);
            }
            if ($cf2) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf2', $cf2);
            }
            if ($cf3) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf3', $cf3);
            }
            if ($cf4) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf4', $cf4);
            }
            if ($cf5) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf5', $cf5);
            }
            if ($cf6) {
                $this->datatables->where($this->db->dbprefix('products') . '.cf6', $cf6);
            }
            if ($category) {
                $this->datatables->where($this->db->dbprefix('products') . '.category_id', $category);
            }
            if ($subcategory) {
                $this->datatables->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
            }
            if ($brand) {
                $this->datatables->where($this->db->dbprefix('products') . '.brand', $brand);
            }

            echo $this->datatables->generate();
        }
    }

    public function view_cost($id=null)
    {
        $this->bpas->checkPermissions();
        $this->data['error']      = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));

        $this->data['result'] = $this->site->getPurchaseByProductId($id);

        $this->load->view($this->theme . 'reports/view_cost', $this->data);
    }
    //------------accounting------------
    function ledger($pdf = NULL, $xls = null, $biller_id = NULL, $start_date = null, $end_date = null)
    {
        $this->bpas->checkPermissions('ledger',NULL,'account_report');      
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();                
        $user = $this->site->getUser();

        $start_date = $this->input->get('start_date');
        $end_date = $this->input->get('end_date');
   
        $biller_id = $biller_id ? $biller_id : $this->input->get('biller');
        //$this->data['v_account'] = $this->input->post('account') ? $this->input->post('account') : $this->input->get('account');
        
        $this->data['v_account'] = $this->input->post('account') ? $this->input->post('account[]') : $this->input->get('account'); 

        $get_account_code = $this->input->get('account');
        $acc_code = $this->input->post('account') ? $this->input->post('account[]') : $this->input->get('account'); 
        

        if (isset($acc_code)) {
            $this->data['multi_account'] = $get_account_code ? $get_account_code : implode(',', $this->input->post('account[]'));
            $this->data['v_multi_account'] =  $get_account_code ? $get_account_code : implode('_', $this->input->post('account[]'));
        }else{
            $this->data['multi_account'] = '';
            $this->data['v_multi_account'] = '';
        }

        $this->data['start_date'] = $this->input->post('start_date')? $this->input->post('start_date') : $this->input->get('start_date');
        $this->data['end_date'] = $this->input->post('end_date') ? $this->input->post('end_date') : $this->input->get('end_date');
        $this->data['v_form'] = $v_form = "0/0/".$biller_id;
        
        $this->data['have_filter'] = $this->uri->segment(4);

        if($biller_id != NULL){
            $this->data['biller_id'] = $biller_id;
        }else{
            if($user->biller_id){
                //$this->data['biller_id'] = $user->biller_id;
                //$biller_id = $user->biller_id;

                $this->data['biller_id'] = '';
                $biller_id = '';
            }else{
                $this->data['biller_id'] = "";
            }
        }       
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        
        if ($this->input->get('start_date')) {
            $dt = "From " . $this->input->get('start_date') . " to " . $this->input->get('end_date');
        } else {
            $dt = "Till " . $this->input->get('end_date');
        }
        
        if ($pdf) {
            
            $ac = $_GET['ac'];
            $account_code= str_replace('_', ',', $ac);
            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                )

            );

            
            if($pdf){
                $styleArray1 = array(
                'font' => array(
                'bold' => true,
                'size' => 15),
                );
            }
           
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);

            $styleArray10 = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                ),
                'borders' => array(
                    'allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)
                ),
            );

            $this->excel->getActiveSheet()->setTitle(lang('ledger'));
            $this->excel->getActiveSheet()->getStyle('A1:J1')->applyFromArray($styleArray1);
            $this->excel->getActiveSheet()->getStyle('A2:J2')->applyFromArray($styleArray1);
            $this->excel->getActiveSheet()->getStyle('A4:J4')->applyFromArray($styleArray10);
            $this->excel->getActiveSheet()->mergeCells('A1:J1')->setCellValue('A1', lang('general_ledger'));
            $this->excel->getActiveSheet()->mergeCells('A2:J2')->setCellValue('A2', 'From '.$start_date . ' To '. $end_date);
            $this->excel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('A2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->mergeCells('A3:J3')->setCellValue('A3', '');
            $this->excel->getActiveSheet()->SetCellValue('A4', lang('Project'));
            $this->excel->getActiveSheet()->SetCellValue('B4', lang('Type'));
            $this->excel->getActiveSheet()->SetCellValue('C4', lang('Date'));
            $this->excel->getActiveSheet()->SetCellValue('D4', lang('Reference'));
            $this->excel->getActiveSheet()->SetCellValue('E4', lang('Name'));
            $this->excel->getActiveSheet()->SetCellValue('F4', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('G4', lang('created_by'));
            $this->excel->getActiveSheet()->SetCellValue('H4', lang('Debit'));
            $this->excel->getActiveSheet()->SetCellValue('I4', lang('Credit'));
            $this->excel->getActiveSheet()->SetCellValue('J4', lang('Balacne'));
            $BoStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );
    
           /* $row1=75;
            $row2=76;
            $row3=77;*/
            $accounntCode = $this->db;
            $accounntCode->select('*')->from('gl_charts');
            if ($_GET['ac']) {
                $accounntCode->where('gl_charts.accountcode', $ac);
            }
            if ($this->input->get('account') ) {
                $accounntCode->where('accountcode', $this->input->get('account'));
            }
            $acc = $accounntCode->get()->result();
            $row = 5;
            $rows = 6;
            foreach($acc as $val){
                $gl_tranStart = $this->db->select('sum(amount) as startAmount')->from('gl_trans');
                $gl_tranStart->where('account_code', $val->accountcode);
                if ($start_date) {
                    $gl_tranStart->where('bpas_gl_trans.tran_date <', $this->bpas->fld($start_date).'00:00:00');
                }
                $startAmount = $gl_tranStart->get()->row();
                
                $endAccountBalance = 0;
                $endAccountCreditBalance = 0;
                $endAccountDebitBalance = 0;
                $getListGLTran = $this->db->select("gl_trans.*, companies.company as project, companies.name as cname, users.username as created_by,
                    (CASE WHEN bpas_gl_trans.amount>0 THEN bpas_gl_trans.amount END ) as am1,
                    (CASE WHEN bpas_gl_trans.amount<0 THEN bpas_gl_trans.amount END ) as am2")
                    ->from('gl_trans')
                    ->join('companies', 'gl_trans.biller_id = companies.id', 'left')
                    ->join('users', 'gl_trans.created_by = users.id', 'left')
                    ->where('account_code =', $val->accountcode)
                    ->order_by('gl_trans.tran_id', 'asc');

                    if ($start_date) {
                        $getListGLTran->where('bpas_gl_trans.tran_date >=', $this->bpas->fld($start_date).'00:00:00');
                    }
                    if ($end_date) {
                        $getListGLTran->where('bpas_gl_trans.tran_date <=', $this->bpas->fld($end_date).'23:59:00');
                    }
                    
                if ($this->data['start_date']) {
                    $getListGLTran->where('date(tran_date) >=', $this->data['start_date']);
                }
                if ($this->data['end_date']) {
                    $getListGLTran->where('date(tran_date) <=', $this->data['end_date']);
                }
                
                if($biller_id != ""){
                     $getListGLTran->where('biller_id' ,$biller_id);
                }
                $gltran_list = $getListGLTran->get()->result();
                if($gltran_list) {
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':C'.$row)->setCellValue('A'. $row , 'Account: '.$val->accountcode . ' ' .$val->accountname);
                    $this->excel->getActiveSheet()->mergeCells('D'.$row.':G'.$row);
                    $this->excel->getActiveSheet()->setCellValue('D'. $row , 'Begining Account Balance: ')->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle);
                    if($startAmount->startAmount > 0) {
                        $this->excel->getActiveSheet()->setCellValue('H'. $row , $this->bpas->formatDecimal(abs($startAmount->startAmount)));
                        $this->excel->getActiveSheet()->setCellValue('I'. $row , '');
                    }else {
                        $this->excel->getActiveSheet()->setCellValue('H'. $row , '');
                        $this->excel->getActiveSheet()->setCellValue('I'. $row , $this->bpas->formatDecimal(abs($startAmount->startAmount)));
                    }
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':C'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('D'.$row.':E'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('H'.$row.':I'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $endAmount = $startAmount->startAmount;
                    foreach($gltran_list as $rw)
                    {
                        $this->excel->getActiveSheet()->getStyle('E'.$rows.':G'.$rows)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);      
                        $endAccountBalance += $rw->amount;
                        $endAmount += $rw->amount;
                        //$endAccountCreditBalance += $rw->am2;
                        //$endAccountDebitBalance += $rw->am1;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $rows, $rw->project);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $rows, $rw->reference_no . ' ');
                        $this->excel->getActiveSheet()->SetCellValue('E' . $rows, $rw->cname);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $rows, $this->bpas->decode_html(strip_tags($rw->description)));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $rows, $rw->created_by);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $rows, date("d-m-Y", strtotime($rw->tran_date)));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $rows, $rw->tran_type);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $rows, ($rw->am1 > 0 ? $this->bpas->formatDecimal($rw->am1) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $rows, ($rw->am2 < 1 ? $this->bpas->formatDecimal(abs($rw->am2)) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $rows,  $this->bpas->formatDecimal($endAccountBalance));
                        $this->excel->getActiveSheet()->getStyle('A'.$rows.':J'.$rows)->applyFromArray($BoStyle); 
                        if($row>70){
                            $row1++;
                            $row2++;
                            $row3++;
                        }
                        $rows++;
                    }
                    $test = $rows;
                    $this->excel->getActiveSheet()->mergeCells('A'.$test.':C'.$test);
                    $this->excel->getActiveSheet()->mergeCells('D'.$test.':G'.$test)->setCellValue('D'. $test , 'Ending Account Balance: ');
                    if($endAmount > 0) {
                        $this->excel->getActiveSheet()->setCellValue('H'. $test , $this->bpas->formatMoney($endAmount));
                        $this->excel->getActiveSheet()->setCellValue('I'. $test , '');
                        $this->excel->getActiveSheet()->setCellValue('J'. $test , '');
                    }else {
                        $this->excel->getActiveSheet()->setCellValue('H'. $test , '');
                        $this->excel->getActiveSheet()->setCellValue('I'. $test , $this->bpas->formatMoney(abs($endAmount)));
                        $this->excel->getActiveSheet()->setCellValue('J'. $test , '');
                    }
                    $this->excel->getActiveSheet()->getStyle('H'.$test.':J'.$test)->applyFromArray($styleArray10);

                    $this->excel->getActiveSheet()->getStyle('D'.$test.':E'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $row = $rows;
                    $rows = $rows + 2 ;
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle); 
                    $row++;
                }       
                
            }
            $BorStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );

            $this->excel->getActiveSheet()->getStyle("F".$row1)->getFont()->setSize(14);
            $this->excel->getActiveSheet()->getStyle('F'.$row1)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('B'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row2.':G'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row3)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'ledger_' . date('Y_m_d_H_i_s');
            if ($pdf) {             
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                return $objWriter->save('php://output');
            }
            redirect($_SERVER["HTTP_REFERER"]); 
        }

        // ***********************************************
        if ($xls) {
            $ac = $_GET['ac'];

            $account_code= str_replace('_', ',', $ac);
     
            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                ),
            );
            $styleArray10 = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                ),
            );
            if($xls){
                $styleArray1 = array(
                'font' => array(
                'bold' => true,
                'size' => 15),
                );
            }
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('ledger'));
            $this->excel->getActiveSheet()->getStyle('A4:J4')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('F1')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('F2:H2')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('A3:D3')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray1);
            $this->excel->getActiveSheet()->getStyle('D2')->applyFromArray($styleArray1);
            $this->excel->getActiveSheet()->SetCellValue('F1', lang('  '));
            $this->excel->getActiveSheet()->SetCellValue('F2', lang(''));
            $this->excel->getActiveSheet()->SetCellValue('A3', lang(''));
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('general_ledger'));
            $this->excel->getActiveSheet()->getStyle('D1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->SetCellValue('D2', 'From '.$start_date . ' To '. $end_date);
            $this->excel->getActiveSheet()->getStyle('D2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->SetCellValue('D4', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('A4', lang('Project'));
            $this->excel->getActiveSheet()->SetCellValue('B4', lang('Type'));
            $this->excel->getActiveSheet()->SetCellValue('C4', lang('Date'));
            $this->excel->getActiveSheet()->SetCellValue('D4', lang('Reference'));
            $this->excel->getActiveSheet()->SetCellValue('E4', lang('Name'));
            $this->excel->getActiveSheet()->SetCellValue('F4', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('G4', lang('created_by'));
            $this->excel->getActiveSheet()->SetCellValue('H4', lang('Debit'));
            $this->excel->getActiveSheet()->SetCellValue('I4', lang('Credit'));
            $this->excel->getActiveSheet()->SetCellValue('J4', lang('Balacne'));
            $BoStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );
    
            $row1=75;
            $row2=76;
            $row3=77;
            

            $this->db->select('*')->from('gl_charts');
            if ($_GET['ac']) {
               // $this->db->where('gl_charts.accountcode', $ac);
                $this->db->where('gl_charts.accountcode IN ('.$account_code.')');
            }
            if ($this->input->get('account') ) {
                $this->db->where('accountcode', $this->input->get('account'));
            }
            $q = $this->db->get();
            $acc = $q->result();

            $row = 5;
            $rows = 6;
            foreach($acc as $val){
                $gl_tranStart = $this->db->select('sum(amount) as startAmount')->from('gl_trans');
                $gl_tranStart->where('account_code', $val->accountcode);
                if ($start_date) {
                    $gl_tranStart->where('bpas_gl_trans.tran_date <', $this->bpas->fld($start_date).'00:00:00');
                }
                $startAmount = $gl_tranStart->get()->row();
                
                $endAccountBalance = 0;
                $endAccountCreditBalance = 0;
                $endAccountDebitBalance = 0;
                $getListGLTran = $this->db->select("gl_trans.*, companies.company as project, companies.name as cname, users.username as created_by,
                    (CASE WHEN bpas_gl_trans.amount>0 THEN bpas_gl_trans.amount END ) as am1,
                    (CASE WHEN bpas_gl_trans.amount<0 THEN bpas_gl_trans.amount END ) as am2")
                    ->from('gl_trans')
                    ->join('companies', 'gl_trans.biller_id = companies.id', 'left')
                    ->join('users', 'gl_trans.created_by = users.id', 'left')
                    ->where('account_code =', $val->accountcode)
                    ->order_by('gl_trans.tran_id', 'asc');

                    if ($start_date) {
                        $getListGLTran->where('bpas_gl_trans.tran_date >=', $this->bpas->fld($start_date).'00:00:00');
                    }
                    if ($end_date) {
                        $getListGLTran->where('bpas_gl_trans.tran_date <=', $this->bpas->fld($end_date).'23:59:00');
                    }
                    
                if ($this->data['start_date']) {
                    $getListGLTran->where('tran_date >=', $this->data['start_date']);
                }
                if ($this->data['end_date']) {
                    $getListGLTran->where('tran_date <=', $this->data['end_date']);
                }
                
                if($biller_id != ""){
                     $getListGLTran->where('bpas_gl_trans.biller_id' ,$biller_id);
                }
                $gltran_list = $getListGLTran->get()->result();
                if($gltran_list) {
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':C'.$row)->setCellValue('A'. $row , 'Account: '.$val->accountcode . ' ' .$val->accountname);
                    $this->excel->getActiveSheet()->mergeCells('D'.$row.':G'.$row);
                    $this->excel->getActiveSheet()->setCellValue('D'. $row , 'Begining Account Balance: ')->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle);
                    if($startAmount->startAmount > 0) {
                        $this->excel->getActiveSheet()->setCellValue('H'. $row , $this->bpas->formatMoney(abs($startAmount->startAmount)));
                        $this->excel->getActiveSheet()->setCellValue('I'. $row , '');
                    } else {
                        $this->excel->getActiveSheet()->setCellValue('H'. $row , '');
                        $this->excel->getActiveSheet()->setCellValue('I'. $row , $this->bpas->formatMoney(abs($startAmount->startAmount)));
                    }
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':C'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('D'.$row.':E'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('H'.$row.':I'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $endAmount = $startAmount->startAmount;
                    foreach($gltran_list as $rw)
                    {
                        $this->excel->getActiveSheet()->getStyle('E'.$rows.':G'.$rows)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);      
                        $endAccountBalance += $rw->amount;
                        $endAmount += $rw->amount;
                        //$endAccountCreditBalance += $rw->am2;
                        //$endAccountDebitBalance += $rw->am1;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $rows, $rw->project);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $rows, $rw->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $rows, $rw->cname);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $rows, $this->bpas->decode_html(strip_tags($rw->note)));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $rows, $rw->created_by);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $rows, date("d-m-Y", strtotime($rw->tran_date)));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $rows, $rw->tran_type);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $rows, ($rw->am1 > 0 ? $this->bpas->formatMoney($rw->am1) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $rows, ($rw->am2 < 1 ? $this->bpas->formatMoney(abs($rw->am2)) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $rows,  $this->bpas->formatMoney($endAccountBalance));
                        $this->excel->getActiveSheet()->getStyle('A'.$rows.':J'.$rows)->applyFromArray($BoStyle); 
                        if($row>70){
                            $row1++;
                            $row2++;
                            $row3++;
                        }
                        $rows++;
                    }
                    $test = $rows;
                    $this->excel->getActiveSheet()->mergeCells('A'.$test.':C'.$test);
                    $this->excel->getActiveSheet()->mergeCells('D'.$test.':G'.$test)->setCellValue('D'. $test , 'Ending Account Balance: ');
                    if($endAmount > 0) {
                        $this->excel->getActiveSheet()->setCellValue('H'. $test , $this->bpas->formatMoney(abs($endAmount)));
                        $this->excel->getActiveSheet()->setCellValue('I'. $test , '');
                        $this->excel->getActiveSheet()->setCellValue('J'. $test , '');
                    } else {
                        $this->excel->getActiveSheet()->setCellValue('H'. $test , '');
                        $this->excel->getActiveSheet()->setCellValue('I'. $test , $this->bpas->formatMoney(abs($endAmount)));
                        $this->excel->getActiveSheet()->setCellValue('J'. $test , '');
                    }
                    $this->excel->getActiveSheet()->getStyle('H'.$test.':J'.$test)->applyFromArray($styleArray10);

                    $this->excel->getActiveSheet()->getStyle('D'.$test.':E'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $row = $rows;
                    $rows = $rows + 2 ;
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle); 
                    $row++;
                }       
                
            }
            $BorStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );
            $this->excel->getActiveSheet()->getStyle('A4:J71')->applyFromArray($BorStyle); 
            $this->excel->getActiveSheet()->mergeCells('F75:G75');
            $this->excel->getActiveSheet()->mergeCells('F77:G77');
            $this->excel->getActiveSheet()->getStyle("F".$row1)->getFont()->setSize(14);
            $this->excel->getActiveSheet()->getStyle('F'.$row1)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('B'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row2.':G'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row3)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'ledger_' . date('Y_m_d_H_i_s');
            if ($xls) {
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }
            redirect($_SERVER["HTTP_REFERER"]); 
        }

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('ledger')));
        $meta = array('page_title' => lang('ledger'), 'bc' => $bc);
        $this->page_construct('reports/ledger', $meta, $this->data);
    }
    
    function ledger_by_customer($pdf = NULL, $xls = null, $customer_id = NULL)
    {
      
        $this->bpas->checkPermissions('ledger',NULL,'account_report');      
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();                
        $user = $this->site->getUser();
        
        $customer_id = $customer_id ? $customer_id : $this->input->get('customer');
        $this->data['v_account'] = $this->input->post('account') ? $this->input->post('account') : $this->input->get('account');        
        $this->data['start_date'] = $this->input->post('start_date')? $this->input->post('start_date') : $this->input->get('start_date');
        $this->data['end_date'] = $this->input->post('end_date') ? $this->input->post('end_date') : $this->input->get('end_date');
        $this->data['v_form'] = $v_form = "0/0/".$customer_id;
        
        if($customer_id != NULL){
            $this->data['customer_id'] = $customer_id;
        }else{
            $this->data['customer_id'] = "";
        }
        $this->data['customers'] = $this->site->getAllCompanies('customer');
        
        if ($this->input->get('start_date')) {
            $dt = "From " . $this->input->get('start_date') . " to " . $this->input->get('end_date');
        } else {
            $dt = "Till " . $this->input->get('end_date');
        }
        
        if ($pdf) {
            
            $ac = $_GET['ac'];

            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                )

            );

            

            $styleArray10 = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                ),
            );
            if($pdf){
                $styleArray1 = array(
                'font' => array(
                'bold' => true,
                'size' => 15),
                );


            }
            
           
            $this->load->library('excel');
             $this->excel->getActiveSheet()->getDefaultStyle()->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            $this->excel->getActiveSheet()->getDefaultStyle()->getBorders()->getBottom()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            $this->excel->getActiveSheet()->getDefaultStyle()->getBorders()->getLeft()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
            $this->excel->getActiveSheet()->getDefaultStyle()->getBorders()->getRight()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);

            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('ledger'));
           
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('Project'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('Type'));
            $this->excel->getActiveSheet()->SetCellValue('C1', lang('Date'));
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('Reference'));
            $this->excel->getActiveSheet()->SetCellValue('E1', lang('Name'));
            $this->excel->getActiveSheet()->SetCellValue('F1', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('G1', lang('created_by'));
            $this->excel->getActiveSheet()->SetCellValue('H1', lang('Debit'));
            $this->excel->getActiveSheet()->SetCellValue('I1', lang('Credit'));
            $this->excel->getActiveSheet()->SetCellValue('J1', lang('Balacne'));
            $BoStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );
    
           /* $row1=75;
            $row2=76;
            $row3=77;*/
            $accounntCode = $this->db;
            $accounntCode->select('*')->from('gl_charts');
            if ($_GET['ac']) {
                $accounntCode->where('gl_charts.accountcode', $ac);
            }
            if ($this->input->get('account') ) {
                $accounntCode->where('accountcode', $this->input->get('account'));
            }
            $acc = $accounntCode->get()->result();
            $row = 2;
            $rows = 3;
            foreach($acc as $val){
                $gl_tranStart = $this->db->select('sum(amount) as startAmount')->from('gl_trans');
                $gl_tranStart->where(array('tran_date < '=> $this->bpas->fld($this->data['start_date']), 'account_code'=> $val->accountcode));
                $startAmount = $gl_tranStart->get()->row();
                
                $endAccountBalance = 0;
                $endAccountCreditBalance = 0;
                $endAccountDebitBalance = 0;
                $getListGLTran = $this->db->select("gl_trans.*, companies.company as project, companies.name as cname, users.username as created_by,
                    (CASE WHEN bpas_gl_trans.amount>0 THEN bpas_gl_trans.amount END ) as am1,
                    (CASE WHEN bpas_gl_trans.amount<0 THEN bpas_gl_trans.amount END ) as am2")
                    ->from('gl_trans')
                    ->join('companies', 'gl_trans.customer_id = companies.id', 'left')
                    ->join('users', 'gl_trans.created_by = users.id', 'left')
                    ->where('account_code =', $val->accountcode)
                    ->order_by('gl_trans.tran_id', 'asc');
                    
                if ($this->data['start_date']) {
                    $getListGLTran->where('date(tran_date) >=', $this->data['start_date']);
                }
                if ($this->data['end_date']) {
                    $getListGLTran->where('date(tran_date) <=', $this->data['end_date']);
                }
                
                if($customer_id != ""){
                     $getListGLTran->where('customer_id' , $customer_id);
                }
                $gltran_list = $getListGLTran->get()->result();
                
                if($gltran_list) {
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':C'.$row)->setCellValue('A'. $row , 'Account: '.$val->accountcode . ' ' .$val->accountname);
                    $this->excel->getActiveSheet()->mergeCells('D'.$row.':G'.$row);
                    $this->excel->getActiveSheet()->setCellValue('D'. $row , 'Begining Account Balance: ')->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle);
                    $this->excel->getActiveSheet()->mergeCells('H'.$row.':I'.$row)->setCellValue('H'. $row , $this->bpas->formatMoney(abs($startAmount->startAmount)));
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':C'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('D'.$row.':E'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    foreach($gltran_list as $rw)
                    {
                        $this->excel->getActiveSheet()->getStyle('E'.$rows.':G'.$rows)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);      
                        $endAccountBalance += $rw->amount;
                        $endAccountCreditBalance += $rw->am2;
                        $endAccountDebitBalance += $rw->am1;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $rows, $rw->project);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $rows, $rw->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $rows, $rw->cname);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $rows, $this->bpas->decode_html(strip_tags($rw->description)));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $rows, $rw->created_by);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $rows, date("d-m-Y", strtotime($rw->tran_date)));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $rows, $rw->tran_type);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $rows, ($rw->am1 > 0 ? $this->bpas->formatMoney($rw->am1) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $rows, ($rw->am2 < 1 ? $this->bpas->formatMoney(abs($rw->am2)) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $rows,  $this->bpas->formatMoney($rw->amount));
                        $this->excel->getActiveSheet()->getStyle('A'.$rows.':J'.$rows)->applyFromArray($BoStyle); 
                       /* if($row>70){
                            $row1++;
                            $row2++;
                            $row3++;
                        }*/
                        $rows++;
                    }
                    $test = $rows;
                    $this->excel->getActiveSheet()->mergeCells('A'.$test.':C'.$test);
                    $this->excel->getActiveSheet()->mergeCells('D'.$test.':G'.$test)->setCellValue('D'. $test , 'Ending Account Balance: ');

                    $this->excel->getActiveSheet()->setCellValue('H'. $test , $this->bpas->formatMoney($endAccountDebitBalance));
                    $this->excel->getActiveSheet()->setCellValue('I'. $test , $this->bpas->formatMoney($endAccountCreditBalance));
                    $this->excel->getActiveSheet()->setCellValue('J'. $test , $this->bpas->formatMoney($endAccountBalance));

                    $this->excel->getActiveSheet()->getStyle('D'.$test.':E'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    // $row = $rows;
                    $rows = $rows + 2 ;
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle); 
                    $this->excel->getActiveSheet()->getStyle('A'.$test.':J'.$test)->applyFromArray($BoStyle); 
                    $row++;
                }       
                
            }
            $BorStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );

            $this->excel->getActiveSheet()->getStyle("F".$row1)->getFont()->setSize(14);
            $this->excel->getActiveSheet()->getStyle('F'.$row1)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('B'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row2.':G'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row3)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'ledger_' . date('Y_m_d_H_i_s');
            if ($pdf) {             
                $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                $rendererLibrary = 'MPDF';
                $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                    die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                }

                header('Content-Type: application/pdf');
                header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                return $objWriter->save('php://output');
            }
            redirect($_SERVER["HTTP_REFERER"]); 
        }

        // ***********************************************
        if ($xls) {
            $ac = $_GET['ac'];

            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                ),
            );
            $styleArray10 = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '#000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                ),
            );
            if($xls){
                $styleArray1 = array(
                'font' => array(
                'bold' => true,
                'size' => 15),
                );
            }
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('ledger'));
            $this->excel->getActiveSheet()->getStyle('A4:H4')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('F1')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('F2:H2')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('A3:D3')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->getStyle('D2')->applyFromArray($styleArray1);
            $this->excel->getActiveSheet()->SetCellValue('F1', lang('  '));
            $this->excel->getActiveSheet()->SetCellValue('F2', lang(''));
            $this->excel->getActiveSheet()->SetCellValue('A3', lang(''));
            $this->excel->getActiveSheet()->SetCellValue('D2', lang('general_ledger'));
            $this->excel->getActiveSheet()->getStyle('D2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->SetCellValue('D4', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('A4', lang('Project'));
            $this->excel->getActiveSheet()->SetCellValue('B4', lang('Type'));
            $this->excel->getActiveSheet()->SetCellValue('C4', lang('Date'));
            $this->excel->getActiveSheet()->SetCellValue('D4', lang('Reference'));
            $this->excel->getActiveSheet()->SetCellValue('E4', lang('Name'));
            $this->excel->getActiveSheet()->SetCellValue('F4', lang('Description'));
            $this->excel->getActiveSheet()->SetCellValue('G4', lang('created_by'));
            $this->excel->getActiveSheet()->SetCellValue('H4', lang('Debit'));
            $this->excel->getActiveSheet()->SetCellValue('I4', lang('Credit'));
            $this->excel->getActiveSheet()->SetCellValue('J4', lang('Balacne'));
            $BoStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );
    
            $row1=75;
            $row2=76;
            $row3=77;
            $accounntCode = $this->db;
            $accounntCode->select('*')->from('gl_charts');
            if ($_GET['ac']) {
                $accounntCode->where('gl_charts.accountcode', $ac);
            }
            if ($this->input->get('account') ) {
                $accounntCode->where('accountcode', $this->input->get('account'));
            }
            $acc = $accounntCode->get()->result();
            $row = 5;
            $rows = 6;
            foreach($acc as $val){
                $gl_tranStart = $this->db->select('sum(amount) as startAmount')->from('gl_trans');
                $gl_tranStart->where(array('tran_date < '=> $this->bpas->fld($this->data['start_date']), 'account_code'=> $val->accountcode));
                $startAmount = $gl_tranStart->get()->row();
                
                $endAccountBalance = 0;
                $endAccountDebitBalance = 0;
                $getListGLTran = $this->db->select("gl_trans.*, companies.company as project, companies.name as cname, users.username as created_by,
                    (CASE WHEN bpas_gl_trans.amount>0 THEN bpas_gl_trans.amount END ) as am1,
                    (CASE WHEN bpas_gl_trans.amount<0 THEN bpas_gl_trans.amount END ) as am2")
                    ->from('gl_trans')
                    ->join('companies', 'gl_trans.customer_id = companies.id', 'left')
                    ->join('users', 'gl_trans.created_by = users.id', 'left')
                    ->where('account_code =', $val->accountcode)
                    ->order_by('gl_trans.tran_id', 'asc');
                    
                if ($this->data['start_date']) {
                    $getListGLTran->where('date(tran_date) >=', $this->data['start_date']);
                }
                if ($this->data['end_date']) {
                    $getListGLTran->where('date(tran_date) <=', $this->data['end_date']);
                }
                
                if($customer_id != ""){
                     $getListGLTran->where('customer_id' ,$customer_id);
                }
                $gltran_list = $getListGLTran->get()->result();
                if($gltran_list) {
                    $this->excel->getActiveSheet()->mergeCells('A'.$row.':C'.$row)->setCellValue('A'. $row , 'Account: '.$val->accountcode . ' ' .$val->accountname);
                    $this->excel->getActiveSheet()->mergeCells('D'.$row.':G'.$row);
                    $this->excel->getActiveSheet()->setCellValue('D'. $row , 'Begining Account Balance: ')->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle);
                    $this->excel->getActiveSheet()->mergeCells('H'.$row.':I'.$row)->setCellValue('H'. $row , $this->bpas->formatMoney(abs($startAmount->startAmount)));
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':C'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('D'.$row.':E'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    foreach($gltran_list as $rw)
                    {
                        $this->excel->getActiveSheet()->getStyle('E'.$rows.':G'.$rows)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);      
                        $endAccountBalance += $rw->amount;
                        $endAccountDebitBalance += $rw->am1;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $rows, $rw->project);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $rows, $rw->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $rows, $rw->cname);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $rows, $this->bpas->decode_html(strip_tags($rw->description)));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $rows, $rw->created_by);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $rows, date("d-m-Y", strtotime($rw->tran_date)));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $rows, $rw->tran_type);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $rows, ($rw->am1 > 0 ? $this->bpas->formatMoney($rw->am1) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $rows, ($rw->am2 < 1 ? $this->bpas->formatMoney(abs($rw->am2)) : '0.00'));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $rows,  $this->bpas->formatMoney($rw->amount));
                        $this->excel->getActiveSheet()->getStyle('A'.$rows.':J'.$rows)->applyFromArray($BoStyle); 
                        if($row>70){
                            $row1++;
                            $row2++;
                            $row3++;
                        }
                        $rows++;
                    }
                    $test = $rows;
                    $this->excel->getActiveSheet()->mergeCells('A'.$test.':C'.$test);
                    $this->excel->getActiveSheet()->mergeCells('D'.$test.':G'.$test)->setCellValue('D'. $test , 'Ending Account Balance: ');

                    $this->excel->getActiveSheet()->setCellValue('H'. $test , $this->bpas->formatMoney($endAccountDebitBalance));
                    $this->excel->getActiveSheet()->setCellValue('I'. $test , $this->bpas->formatMoney($endAccountBalance));
                    $this->excel->getActiveSheet()->setCellValue('J'. $test , $this->bpas->formatMoney($endAccountBalance));

                    $this->excel->getActiveSheet()->getStyle('D'.$test.':E'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->applyFromArray($styleArray10);
                    $this->excel->getActiveSheet()->getStyle('F'.$test.':G'.$test)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $row = $rows;
                    $rows = $rows + 2 ;
                    $this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row)->applyFromArray($BoStyle); 
                    $row++;
                }       
                
            }
            $BorStyle = array(
                      'borders' => array(
                        'allborders' => array(
                          'style' => PHPExcel_Style_Border::BORDER_THIN 
                        )
                      )
                    );
            $this->excel->getActiveSheet()->getStyle('A4:J71')->applyFromArray($BorStyle); 
            $this->excel->getActiveSheet()->mergeCells('F75:G75');
            $this->excel->getActiveSheet()->mergeCells('F77:G77');
            $this->excel->getActiveSheet()->getStyle("F".$row1)->getFont()->setSize(14);
            $this->excel->getActiveSheet()->getStyle('F'.$row1)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('B'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row2.':G'.$row2)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('F'.$row3)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'ledger_' . date('Y_m_d_H_i_s');
            if ($xls) {
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');
                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }
            redirect($_SERVER["HTTP_REFERER"]); 
        }

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('ledger_by_customer')));
        $meta = array('page_title' => lang('ledger_by_customer'), 'bc' => $bc);
        $this->page_construct('reports/ledger_by_customer', $meta, $this->data);
    }

    function getLedger()
    {
        $this->bpas->checkPermissions('register', TRUE);
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date);
        }
    }

    function cash_books($pdf = NULL,$biller_id = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('cash_book',NULL,'account_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['users'] = $this->reports_model->getStaff();

        $biller = $this->input->post('biller')? $this->input->post('biller'):'';

        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
            $this->data['start_date2'] = $this->bpas->fsd($this->input->post('start_date'));
            
        } else {
            $dt = "Till " . $this->input->post('end_date');
            $this->data['start_date2'] = date('Y-m-01');
            
        }
        if($this->input->post('end_date')){
            $this->data['end_date2'] = $this->bpas->fsd($this->input->post('end_date'));
        }else{
            $this->data['end_date2'] =  date('Y-m-t');
        }
        if($this->input->post('user')){         
            $this->data['cashier'] = $this->input->post('user');
        }else{
            $this->data['cashier'] = '';
        }
        $user = $this->site->getUser();

        if($biller){
            $this->data['biller_id'] = $biller;
        }else{
            $this->data['biller_id'] = '';
        }

        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        
        if ($pdf != NULL && $biller_id == NULL) {
            $html = $this->load->view($this->theme . 'reports/cash_books', $this->data, true);
            $name = lang("cash_books") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_cash_books_text") . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('Cash_Books_Report')));
        $meta = array('page_title' => lang('Cash_Books_Report'), 'bc' => $bc);
        $this->page_construct('reports/cash_books', $meta, $this->data);
    }
    function bank_reconcile($pdf = NULL, $xls = null, $biller_id = NULL, $start_date = null, $end_date = null)
    {
        $this->bpas->checkPermissions('ledger',NULL,'account_report');      
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();                
        $user = $this->site->getUser();

        $start_date = $this->input->get('sd');
        $end_date = $this->input->get('ed');

        $biller_id = $biller_id ? $biller_id : $this->input->get('biller');
        //$this->data['v_account'] = $this->input->post('account') ? $this->input->post('account') : $this->input->get('account');
        
        $this->data['v_account'] = $this->input->post('account') ? $this->input->post('account[]') : $this->input->get('account'); 

        $get_account_code = $this->input->get('account');
      //  $acc_code = $this->input->post('account') ? $this->input->post('account[]') : $this->input->get('account'); 
        $acc_code = $this->input->post('account') ? $this->input->post('account') : $this->input->get('account'); 

        if (isset($acc_code)) {
            $this->data['multi_account'] = $acc_code;//$get_account_code ? $get_account_code : implode(',', $this->input->post('account[]'));
            $this->data['v_multi_account'] =  $acc_code;//$get_account_code ? $get_account_code : implode('_', $this->input->post('account[]'));
        }else{
            $this->data['multi_account'] = '';
            $this->data['v_multi_account'] = '';
        }

        $this->data['start_date'] = $this->input->post('start_date')? $this->input->post('start_date') : $this->input->get('start_date');
        $this->data['end_date'] = $this->input->post('end_date') ? $this->input->post('end_date') : $this->input->get('end_date');
        $this->data['v_form'] = $v_form = "0/0/".$biller_id;
        
        $this->data['have_filter'] = $this->uri->segment(4);

        if($biller_id != NULL){
            $this->data['biller_id'] = $biller_id;
        }else{
            if($user->biller_id){
                //$this->data['biller_id'] = $user->biller_id;
                //$biller_id = $user->biller_id;

                $this->data['biller_id'] = '';
                $biller_id = '';
            }else{
                $this->data['biller_id'] = "";
            }
        }       
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        
        if ($this->input->get('start_date')) {
            $dt = "From " . $this->input->get('start_date') . " to " . $this->input->get('end_date');
        } else {
            $dt = "Till " . $this->input->get('end_date');
        }

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('bank_reconciliation')));
        $meta = array('page_title' => lang('bank_reconciliation'), 'bc' => $bc);
        $this->page_construct('reports/bank_resonsult', $meta, $this->data);
    }
    function suspends($warehouse_id = NULL){ 
        $this->load->model('reports_model');
        $this->data['warehouse_id'] = $warehouse_id;
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('report'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('Room_Reports')));
        $meta = array('page_title' => lang('sale_suspend'), 'bc' => $bc);
        $this->page_construct('reports/room_report', $meta, $this->data);
    }

    function getRoom()
    {
        
        $this->load->library('datatables');
        $this->datatables
            ->select("note_id,floor,name,ppl_number,description, CASE WHEN status = 0 THEN 'Active' ELSE 'Close' END AS status")
            ->from("suspended_note")
            ->add_column("Actions", "<center><a class=\"tip\" title='" . lang("view_report") . "' href='" . admin_url('reports/view_room_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></center>", "id");
        echo $this->datatables->generate();
    }
    function view_room_report($room_id = NULL, $year = NULL, $month = NULL, $pdf = NULL, $cal = 0)
    {

        if (!$room_id) {
            $this->session->set_flashdata('error', lang("no_room_selected"));
            redirect('reports/suspends');
        }
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['purchases'] = $this->reports_model->getRoomPurchases($room_id);
        $this->data['sales'] = $this->reports_model->getRoomSales($room_id);
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getAllWarehouses();

        if (!$year) {
            $year = date('Y');
        }
        if (!$month || $month == '#monthly-con') {
            $month = date('m');
        }
        if ($pdf) {
            if ($cal) {
                $this->monthly_sales($year, $pdf, $room_id);
            } else {
                $this->daily_sales($year, $month, $pdf, $room_id);
            }
        }
        $config = array(
            'show_next_prev' => TRUE,
            'next_prev_url' => admin_url('reports/view_room_report/'.$room_id),
            'month_type' => 'long',
            'day_type' => 'long'
        );

        $config['template'] = '{table_open}<table border="0" cellpadding="0" cellspacing="0" class="table table-bordered dfTable">{/table_open}
        {heading_row_start}<tr>{/heading_row_start}
        {heading_previous_cell}<th class="text-center"><a href="{previous_url}">&lt;&lt;</a></th>{/heading_previous_cell}
        {heading_title_cell}<th class="text-center" colspan="{colspan}" id="month_year">{heading}</th>{/heading_title_cell}
        {heading_next_cell}<th class="text-center"><a href="{next_url}">&gt;&gt;</a></th>{/heading_next_cell}
        {heading_row_end}</tr>{/heading_row_end}
        {week_row_start}<tr>{/week_row_start}
        {week_day_cell}<td class="cl_wday">{week_day}</td>{/week_day_cell}
        {week_row_end}</tr>{/week_row_end}
        {cal_row_start}<tr class="days">{/cal_row_start}
        {cal_cell_start}<td class="day">{/cal_cell_start}
        {cal_cell_content}
        <div class="day_num">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content}
        {cal_cell_content_today}
        <div class="day_num highlight">{day}</div>
        <div class="content">{content}</div>
        {/cal_cell_content_today}
        {cal_cell_no_content}<div class="day_num">{day}</div>{/cal_cell_no_content}
        {cal_cell_no_content_today}<div class="day_num highlight">{day}</div>{/cal_cell_no_content_today}
        {cal_cell_blank}&nbsp;{/cal_cell_blank}
        {cal_cell_end}</td>{/cal_cell_end}
        {cal_row_end}</tr>{/cal_row_end}
        {table_close}</table>{/table_close}';

        $this->load->library('calendar', $config);
        $sales = $this->reports_model->getRoomDailySales($room_id, $year, $month);

        if (!empty($sales)) {
            foreach ($sales as $sale) {
                $daily_sale[$sale->date] = "<table class='table table-bordered table-hover table-striped table-condensed data' style='margin:0;'><tr><td>" . lang("discount") . "</td><td>" . $this->bpas->formatMoney($sale->discount) . "</td></tr><tr><td>" . lang("product_tax") . "</td><td>" . $this->bpas->formatMoney($sale->tax1) . "</td></tr><tr><td>" . lang("order_tax") . "</td><td>" . $this->bpas->formatMoney($sale->tax2) . "</td></tr><tr><td>" . lang("total") . "</td><td>" . $this->bpas->formatMoney($sale->total) . "</td></tr></table>";
            }
        } else {
            $daily_sale = array();
        }
        $this->data['calender'] = $this->calendar->generate($year, $month, $daily_sale);
        if ($this->input->get('pdf')) {

        }
        $this->data['year'] = $year;
        $this->data['month'] = $month;
        $this->data['msales'] = $this->reports_model->getRoomMonthlySales($room_id, $year);
        $this->data['user_id'] = $room_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('View_Room_report')));
        $meta = array('page_title' => lang('View_Room_report'), 'bc' => $bc);
        $this->page_construct('reports/view_room_report', $meta, $this->data);

    }
    function income_statement_old($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $biller_id = NULL,$project_id = NULL)
    {
        $no_search_date = true;
        if($start_date && $end_date){
            $no_search_date = false;
        }
        $this->bpas->checkPermissions('income_statement',NULL,'account_report');
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $user = $this->site->getUser();

        if($biller_id != NULL){
            $this->data['biller_id_no_sep'] = $biller_id;
            $biller_sep = explode('-', $biller_id);
            
            $bills = '';
            for($i=0; $i < count($biller_sep); $i++){
                $bills .= $biller_sep[$i] . ',';
            }
            $biller_id =  rtrim($bills, ',');
            $this->data['biller_id'] = $biller_id;
        }else{
            if($user->biller_id){
            //    $this->data['biller_id'] = $user->biller_id;
             //   $biller_id = $user->biller_id;

                $this->data['biller_id'] = '';
                $biller_id = '';
            }else{
                $this->data['biller_id'] = "";
            }
        }
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $billers = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $billers = $this->site->getAllCompanies('biller');
            }
        }else{
            $billers = $this->site->getAllCompanies('biller');
        }
        $this->data['billers'] = $billers;
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
        $totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('income_statement')));
        $meta = array('page_title' => lang('income_statement'), 'bc' => $bc);
        $from_date = date('Y-m-d H:i',strtotime(urldecode($start_date)));//'2014-08-01';
        $to_date = date('Y-m-d H:i',strtotime(urldecode($end_date)));//'2015-09-01';
        $this->data['from_date'] = $from_date;
        $this->data['to_date'] = $to_date;
        
        $dataIncome = $this->accounts_model->getStatementByBalaneSheetDateRange('40,70',$from_date,$to_date,$biller_id);
    
        $dataCost = $this->accounts_model->getStatementByBalaneSheetDateRange('50',$from_date,$to_date,$biller_id);
        $dataExpense = $this->accounts_model->getStatementByBalaneSheetDateRange('60,80,90',$from_date,$to_date,$biller_id);
        $IncomeData = $this->accounts_model->getStatementByBalaneSheetDateRange('40,70',$from_date,$to_date,$biller_id);

        $dataEbitda = $this->accounts_model->getStatementByBalaneSheetDateRange('81',$from_date,$to_date,$biller_id);
        $dataEbit = $this->accounts_model->getStatementByBalaneSheetDateRange('82',$from_date,$to_date,$biller_id);
        
        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
        $this->data['dataIncome'] = $dataIncome;        
        $this->data['dataCost'] = $dataCost;
        $this->data['dataExpense'] = $dataExpense;

        $this->data['dataEbitda'] = $dataEbitda;
        $this->data['dataEbit'] = $dataEbit;

        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/income_statement', $this->data, true);
            $name = lang("income_statement") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_income_text") . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        
        if($xls){
            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                )
            );
            $bold = array(
                'font' => array(
                    'bold' => true
                )
            );
            
            $new_billers = array();
            $nch = 'B';
            foreach($billers as $biller) {
                if($this->uri->segment(7)){
                    $biller_sep = explode('-', $this->uri->segment(7));
                    for($i=0; $i < count($biller_sep); $i++){
                        if($biller_sep[$i] == $biller->id){
                            $new_billers[] = array('id' => $biller->id, 'company' => $biller->company);
                        }
                        $nch++;
                    }
                }else{
                    $new_billers[] = array('id' => $biller->id, 'company' => $biller->company);
                    $nch++;
                }
            }
            
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->getStyle('A1:'. $nch .'1')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->setTitle(lang('Income Statement'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('account_name'));
            $ch = 'B';
            foreach($new_billers as $bl) {
                $this->excel->getActiveSheet()->SetCellValue($ch . '1', $bl->company);
                $ch++;
            }
            $this->excel->getActiveSheet()->SetCellValue($ch . '1', lang('total'));         
            $this->excel->getActiveSheet()->getStyle('A2:'. $nch .'2')->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A2:'. $nch .'2')->setCellValue('A2' , lang('income'));
            $total_income = 0;
            $totalBeforeAyear_income = 0;
            $income = 3;
            foreach($dataIncome->result() as $row){
                //$this->bpas->print_arrays($dataIncome->result());
                $total_income += $row->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $row->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_income += $totalBeforeAyearRows->amount;
                $this->excel->getActiveSheet()->SetCellValue('A' . $income, $row->account_code.' - '.$row->accountname);
                $inc_ch = 'B';
                $total_per_income = 0;
                foreach($new_billers as $bl) {
                    $query = $this->db->query("SELECT
                                                    SUM(COALESCE(bpas_gl_trans.amount, 0)) AS amount
                                                FROM
                                                    bpas_gl_trans
                                                WHERE
                                                    account_code = '" . $row->account_code . "'
                                                    AND bpas_gl_trans.biller_id = '" . $bl['id'] . "'
                                                    AND bpas_gl_trans.tran_date BETWEEN '$from_date' AND '$to_date';");
                    
                    $totalBeforeAyearRows = $query->row();
                    $total_income = (-1)*$totalBeforeAyearRows->amount;
                    $total_per_income += $total_income;
                    if($total_income < 0){
                        $total_income = '('.$this->bpas->formatDecimal(abs($totalBeforeAyearRows->amount)).')';
                    }else{
                        $total_income = $this->bpas->formatDecimal(abs($totalBeforeAyearRows->amount));
                    }
                    $this->excel->getActiveSheet()->SetCellValue($inc_ch . $income, $total_income);
                    $inc_ch++;
                }
                if($total_per_income < 0) {
                    $tper_income = '('.$this->bpas->formatDecimal(abs($total_per_income)).')';
                }else {
                    $tper_income = $this->bpas->formatDecimal(abs($total_per_income));
                }
                $this->excel->getActiveSheet()->SetCellValue($inc_ch . $income, $tper_income);
                $income++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A3:A'.($income-1))->getAlignment()->setIndent(2); 
            $this->excel->getActiveSheet()->mergeCells('A'.$income.':B'.$income)->setCellValue('A'.$income , lang('total_income'));
            $this->excel->getActiveSheet()->SetCellValue('C' . $income, number_format((-1)*($total_income),2));
            $this->excel->getActiveSheet()->getStyle('A'. $income.':'. $nch . $income)->applyFromArray($bold);
            $this->excel->getActiveSheet()->getStyle('A'.($income + 1).':B'.($income +1))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($income + 1).':B'.($income +1))->setCellValue('A'. ($income + 1) , lang('cost'));
            $total_cost = 0;
            $totalBeforeAyear_cost = 0;
            $cost = $income + 2;
            foreach($dataCost->result() as $rowcost){
                $total_cost += $rowcost->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $rowcost->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_cost += $totalBeforeAyearRows->amount;
                $this->excel->getActiveSheet()->SetCellValue('A' . $cost, $rowcost->account_code.' - '.$rowcost->accountname);
                $this->excel->getActiveSheet()->SetCellValue('B' . $cost, number_format(abs($rowcost->amount),2));
                $this->excel->getActiveSheet()->SetCellValue('C' . $cost, '');
                $cost++;
            }

            $this->excel->getActiveSheet()->getStyle('A'.($income+2).':A'.($cost-1))->getAlignment()->setIndent(2); 
            $this->excel->getActiveSheet()->mergeCells('A'.$cost.':B'.$cost)->setCellValue('A'.$cost , lang('total_cost'));
            $this->excel->getActiveSheet()->SetCellValue('C' . $cost, number_format((-1)*$total_cost,2));
            
            $this->excel->getActiveSheet()->getStyle('C'.($cost + 1).':D'.($cost + 1))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($cost + 1).':B'.($cost + 1))->setCellValue('A'.($cost + 1) , lang('gross_margin'));
            $this->excel->getActiveSheet()->SetCellValue('C' . ($cost +1), number_format((-1)*($total_cost+$total_income),2));
            
            $this->excel->getActiveSheet()->getStyle('A'.($cost + 2).':B'.($cost + 2))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($cost + 2).':B'.($cost + 2))->setCellValue('A'. ($cost + 2) , lang('operating_expense'));
            
            $total_expense = 0;
            $totalBeforeAyear_expense = 0;
            $expene = $cost + 3;
            foreach($dataExpense->result() as $row){
                $total_expense += $row->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $row->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_expense += $totalBeforeAyearRows->amount;
                $this->excel->getActiveSheet()->SetCellValue('A' . $expene, $row->account_code.' - '.$row->accountname);
                $this->excel->getActiveSheet()->SetCellValue('B' . $expene, number_format(abs($row->amount),2));
                $this->excel->getActiveSheet()->SetCellValue('C' . $expene, '');
            }
            $this->excel->getActiveSheet()->mergeCells('A'.$expene.':B'.$expene)->setCellValue('A'.$expene , lang('total_expense'));
            $this->excel->getActiveSheet()->SetCellValue('C' . $expene, number_format((-1)*$total_expense,2));
            $this->excel->getActiveSheet()->getStyle('A'.($expene + 1).':C'.($expene + 1))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($expene + 1).':B'.($expene + 1))->setCellValue('A'. ($expene + 1) , lang('profits'));
            $this->excel->getActiveSheet()->SetCellValue('C' . ($expene + 1), number_format((-1)*$total_income-($total_cost+$total_expense),2));
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'Income_Statement' . date('Y_m_d_H_i_s');
            if ($xls) {
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }

            redirect($_SERVER["HTTP_REFERER"]); 
        }
        $this->data['projects']         = $this->site->getAllProject();
        $this->page_construct('reports/income_statement', $meta, $this->data);
    }
    function income_statement()
    {
        $this->bpas->checkPermissions('income_statement');
        
        if($this->input->post("pdf_report")){
            $this->combine_income_statement_pdf();
        }
        
        $this->data['income_statements'] = array('RE','CO','EX','OI','OX');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['pdf'] = false;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('accountings'), 'page' => lang('accounting')), array('link' => '#', 'page' => lang('income_statement')));
        $meta = array('page_title' => lang('income_statement'), 'bc' => $bc);
        $this->page_construct('accounts/income_statement', $meta, $this->data);
    }
    function income_statement_by_month()
    {
        $this->bpas->checkPermissions('income_statement');
        $this->data['income_statements'] = array('RE','CO','EX','OI','OX');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        if($this->input->post("pdf_report")){
            $this->data['pdf'] = true;
            $inv_html = $this->load->view($this->theme . 'accountings/income_statement_by_month', $this->data, true);
            $name = lang("income_statement_by_month").time() . ".pdf";
            $html[] = array(
                    'content' => $inv_html,
                    'footer' => '',
                );
            $file = $this->bpas->generate_pdf($html, $name, "S");
            if($file){
                redirect(base_url($file));
            }
        }else{
            $this->data['pdf'] = false;
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('accountings'), 'page' => lang('accounting')), array('link' => '#', 'page' => lang('income_statement_by_month')));
            $meta = array('page_title' => lang('income_statement_by_month'), 'bc' => $bc);
            $this->page_construct('reports/income_statement_by_month', $meta, $this->data);
        }
    }
    function income_statement_by_project($start_date=null, $end_date=null, $pdf = NULL, $xls = NULL, $biller_id = NULL, $year=NULL){
        $this->bpas->checkPermissions('income_statement',NULL,'account_report');
        if (!$start_date) {
            $start = $this->db->escape(date('Y-01') . '-1');
            $start_date = date('Y-01') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-12-t 23:59'));
            $end_date = date('Y-12-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        
        $acc_setting = $this->site->get_Acc_setting();
        $user = $this->site->getUser();
        if($biller_id != NULL){
            $this->data['biller_id_no_sep'] = $biller_id;
            $biller_sep = explode('-', $biller_id);
            
            $bills = '';
            for($i=0; $i < count($biller_sep); $i++){
                $bills .= $biller_sep[$i] . ',';
            }
            $biller_id =  rtrim($bills, ',');
            $this->data['biller_id'] = $biller_id;
        }else{
            if($user->biller_id){
                $this->data['biller_id'] = $user->biller_id;
                $biller_id = $user->biller_id;
            }else{
                $this->data['biller_id'] = "";
            }
        }
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        if($this->input->post('biller')){
            $biller_id = $this->input->post('biller');
        }
        $year = date('Y');
        
        $this->data['year'] = $year;
        $this->data['biller_id'] = $biller_id;
        
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);

        $from_date = date('Y-m-d H:m',strtotime(urldecode($start_date)));
        $to_date = date('Y-m-d H:m',strtotime(urldecode($end_date)));
        
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('income_by_project')));
        $meta = array('page_title' => lang('income_by_project'), 'bc' => $bc);
        
        $monthlyIncomes = $this->accounts_model->getMonthlyIncomes($acc_setting->default_sale_discount,'40',$from_date,$to_date,$biller_id, $year);
        
        //$this->erp->print_arrays($year);
        $this->data['monthlyIncomes'] = $monthlyIncomes;
        $this->data['acc_setting'] = $acc_setting;

        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/income_statement_by_project', $this->data, true);
            $name = lang("income_statement_by_project") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_income_text") . '</p>', '', $html);
            $this->erp->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        
        $m_year = $year;
        $m_start = date('Y', strtotime(urldecode($start_date)));
        $m_end = date('Y', strtotime(urldecode($end_date)));
        if($m_start != $m_end){
            $m_year = $m_start . ' - ' . $m_end;
        }else{
            $m_year = $m_start;
        }
        
        if($xls){
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('Income Statement_by_project'));
            //$this->excel->getActiveSheet()->SetCellValue('A4','');
            $this->excel->getActiveSheet()->SetCellValue('G1',lang($m_year));
            $this->excel->getActiveSheet()->SetCellValue('A2',lang('Code'));
            $this->excel->getActiveSheet()->SetCellValue('B2', lang('Project'));
            $this->excel->getActiveSheet()->SetCellValue('C2', lang('Amount'));
            $this->excel->getActiveSheet()->SetCellValue('D2', lang('Period'));
            $this->excel->getActiveSheet()->SetCellValue('E2', lang('Start Date'));
            $this->excel->getActiveSheet()->SetCellValue('F2', lang('End Date'));
            $this->excel->getActiveSheet()->SetCellValue('G2', lang('Jan'));
            $this->excel->getActiveSheet()->SetCellValue('H2', lang('Feb'));
            $this->excel->getActiveSheet()->SetCellValue('I2', lang('Mar'));
            $this->excel->getActiveSheet()->SetCellValue('J2', lang('Apr'));
            $this->excel->getActiveSheet()->SetCellValue('K2', lang('May'));
            $this->excel->getActiveSheet()->SetCellValue('L2', lang('Jun'));
            $this->excel->getActiveSheet()->SetCellValue('M2', lang('Jul'));
            $this->excel->getActiveSheet()->SetCellValue('N2', lang('Aug'));
            $this->excel->getActiveSheet()->SetCellValue('O2', lang('Sep'));
            $this->excel->getActiveSheet()->SetCellValue('P2', lang('Oct'));
            $this->excel->getActiveSheet()->SetCellValue('Q2', lang('Nov'));
            $this->excel->getActiveSheet()->SetCellValue('R2', lang('Dec'));
            $this->excel->getActiveSheet()->SetCellValue('S2', lang('Total'));
            $this->excel->getActiveSheet()->SetCellValue('T2', lang('Balance'));
            $this->excel->getActiveSheet()->mergeCells('G1:T1');    
            $this->excel->getActiveSheet()->mergeCells('A1:F1');
            $sum_jan = 0;
            $sum_feb = 0;
            $sum_mar = 0;
            $sum_apr = 0;
            $sum_may = 0;
            $sum_jun = 0;
            $sum_jul = 0;
            $sum_aug = 0;
            $sum_sep = 0;
            $sum_oct = 0;
            $sum_nov = 0;
            $sum_dec = 0;
            $sum_total = 0;
            $sum_balance = 0;
            $sum_amount = 0;
            $rows=3;
            $row=3;
            $row1=4;
            $income = 3;
            
            $BOStyle = array(
               'borders' => array(
                    'allborders' => array(
                      'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                )
            );
            $bold = array(
                'font' => array(
                    'bold' => true
                )
            );
            foreach($monthlyIncomes->result() as $project){
            $this->excel->getActiveSheet()->SetCellValue('A' . $income, $project->code);
            $this->excel->getActiveSheet()->SetCellValue('B' . $income, $project->company);
            $this->excel->getActiveSheet()->SetCellValue('C' . $income, $this->erp->formatMoney($project->total_amount));
            $this->excel->getActiveSheet()->SetCellValue('D' . $income, $project->period);
            $this->excel->getActiveSheet()->SetCellValue('E' . $income, $project->start_date);
            $this->excel->getActiveSheet()->SetCellValue('F' . $income, $project->end_date);
            $this->excel->getActiveSheet()->SetCellValue('G' . $income, number_format(abs($project->jan), 2));
            $this->excel->getActiveSheet()->SetCellValue('H' . $income, number_format(abs($project->feb), 2));
            $this->excel->getActiveSheet()->SetCellValue('I' . $income, number_format(abs($project->mar), 2));
            $this->excel->getActiveSheet()->SetCellValue('J' . $income, number_format(abs($project->apr), 2));
            $this->excel->getActiveSheet()->SetCellValue('K' . $income, number_format(abs($project->may), 2));
            $this->excel->getActiveSheet()->SetCellValue('L' . $income, number_format(abs($project->jun), 2));
            $this->excel->getActiveSheet()->SetCellValue('M' . $income, number_format(abs($project->jul), 2));
            $this->excel->getActiveSheet()->SetCellValue('N' . $income, number_format(abs($project->aug), 2));
            $this->excel->getActiveSheet()->SetCellValue('O' . $income, number_format(abs($project->sep), 2));
            $this->excel->getActiveSheet()->SetCellValue('P' . $income, number_format(abs($project->oct), 2));
            $this->excel->getActiveSheet()->SetCellValue('Q' . $income, number_format(abs($project->nov), 2));
            $this->excel->getActiveSheet()->SetCellValue('R' . $income, number_format(abs($project->dece), 2));
            $this->excel->getActiveSheet()->SetCellValue('S' . $income, number_format(abs($project->total), 2));
            $this->excel->getActiveSheet()->SetCellValue('T' . $income, number_format($project->total_amount - abs($project->total), 2));
            $this->excel->getActiveSheet()->getStyle('A'.$row.':T'.$row)->applyFromArray($BOStyle);
            $this->excel->getActiveSheet()->getStyle('A1:T4')->applyFromArray($BOStyle);
            
            $income++;
            //$this->excel->getActiveSheet()->getStyle('A'.$row1.':T'.$row1)->applyFromArray($bold);
            //$row++;
            //$row1++;
                if($income>3){
                    $rows++;
                    $row++;
                    $row1++;
                    
                }
                $sum_amount += abs($project->total_amount);
                $sum_jan += abs($project->jan);
                $sum_feb += abs($project->feb);
                $sum_mar += abs($project->mar);
                $sum_apr += abs($project->apr);
                $sum_may += abs($project->may);
                $sum_jun += abs($project->jun);
                $sum_jul += abs($project->jul);
                $sum_aug += abs($project->aug);
                $sum_sep += abs($project->sep);
                $sum_oct += abs($project->oct);
                $sum_nov += abs($project->nov);
                $sum_dec += abs($project->dece);
                $sum_total += abs($project->total);
                $sum_balance += $project->total_amount - abs($project->total);
                
            }
            
            $this->excel->getActiveSheet()->SetCellValue('C' . $rows,number_format($sum_amount, 2));
            $this->excel->getActiveSheet()->SetCellValue('G' . $rows,number_format($sum_jan, 2));
            $this->excel->getActiveSheet()->SetCellValue('H' . $rows,number_format($sum_feb, 2));
            $this->excel->getActiveSheet()->SetCellValue('I' . $rows,number_format($sum_mar, 2));
            $this->excel->getActiveSheet()->SetCellValue('J' . $rows,number_format($sum_apr, 2));
            $this->excel->getActiveSheet()->SetCellValue('K' . $rows,number_format($sum_may, 2));
            $this->excel->getActiveSheet()->SetCellValue('L' . $rows,number_format($sum_jun, 2));
            $this->excel->getActiveSheet()->SetCellValue('M' . $rows,number_format($sum_jul, 2));
            $this->excel->getActiveSheet()->SetCellValue('N' . $rows,number_format($sum_aug, 2));
            $this->excel->getActiveSheet()->SetCellValue('O' . $rows,number_format($sum_sep, 2));
            $this->excel->getActiveSheet()->SetCellValue('P' . $rows,number_format($sum_oct, 2));
            $this->excel->getActiveSheet()->SetCellValue('Q' . $rows,number_format($sum_nov, 2));
            $this->excel->getActiveSheet()->SetCellValue('R' . $rows,number_format($sum_dec, 2));
            $this->excel->getActiveSheet()->SetCellValue('S' . $rows,number_format($sum_total, 2));
            $this->excel->getActiveSheet()->SetCellValue('T' . $rows,number_format($sum_balance, 2));
            $this->excel->getActiveSheet()->getStyle('A1:F1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getStyle('G1:T1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            //$this->excel->getActiveSheet()->getStyle('I1:J3')->applyFromArray($bold);
            $this->excel->getActiveSheet()->getStyle('A1:T2')->applyFromArray($bold);
            
            $filename = 'income_statement_by_project_'. date('Y-m-d');
            if ($xls) {
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }
        }
        $this->page_construct('reports/income_statement_by_project', $meta, $this->data);
    }
    function income_actions()
    {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');

        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('quantity_alerts_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('quantity'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('alert_quantity'));

                    $row = 2;
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getQuantityByID($id);
                        //$this->bpas->print_arrays($sc);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->quantity);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->alert_quantity);
                        $row++;
                    }

                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'quantity_alerts_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array('borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN)));
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            } else {
                $this->session->set_flashdata('error', lang("no_tax_rate_selected"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }
    function income_statement_by_customer($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $customer_id = NULL)
    {
        $no_search_date = true;
        if($start_date && $end_date){
            $no_search_date = false;
        }
        $this->bpas->checkPermissions('income_statement_by_customer',NULL,'account_report');
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $user = $this->site->getUser();
        if($customer_id != NULL){           
            $customer_sep = explode('-', $customer_id);
            
            $customers = '';
            for($i=0; $i < count($customer_sep); $i++){
                $customers .= $customer_sep[$i] . ',';
            }
            $customer_id =  rtrim($customers, ',');
            $this->data['customer_id'] = $customer_id;
        }else{
            $this->data['customer_id'] = "";
        }
        
        $this->data['customers'] = $this->site->getAllCompanies('customer');
        
        
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
        $totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('income_statement_by_customer')));
        $meta = array('page_title' => lang('income_statement_by_customer'), 'bc' => $bc);
        $from_date = date('Y-m-d',strtotime(urldecode($start_date)));//'2014-08-01';
        $to_date = date('Y-m-d',strtotime(urldecode($end_date. ' +1 day')));//'2015-09-01';
        $this->data['from_date'] = $from_date;
        $this->data['to_date'] = $to_date;
        
        $dataIncome = $this->accounts_model->getStatementByBalaneSheetDateByCustomer('40,70',$from_date,$to_date,$customer_id);
    
        $dataCost = $this->accounts_model->getStatementByBalaneSheetDateByCustomer('50',$from_date,$to_date,$customer_id);
        $dataExpense = $this->accounts_model->getStatementByBalaneSheetDateByCustomer('60,80,90',$from_date,$to_date,$customer_id);
        $IncomeData = $this->accounts_model->getStatementByBalaneSheetDateByCustomer('40,70',$from_date,$to_date,$customer_id);
        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
        $this->data['dataIncome'] = $dataIncome;        
        $this->data['dataCost'] = $dataCost;
        $this->data['dataExpense'] = $dataExpense;
        
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/income_statement_by_customer', $this->data, true);
            $name = lang("income_statement_by_customer") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_income_text") . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        
        if($xls){
            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                )
            );
            $bold = array(
                'font' => array(
                    'bold' => true
                )
            );
            $header_title = array(
                'font'  => array(
                    'bold'  => true,
                    'size'  => 12,
                    'name'  => 'Verdana'
                )
            );
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->setTitle(lang('Income Statement'));
            $this->excel->getActiveSheet()->setTitle(lang('Balance Sheet'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('income_statement'));
            $this->excel->getActiveSheet()->getStyle('B1')->applyFromArray($header_title);
            $this->excel->getActiveSheet()->getStyle('B1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->SetCellValue('A3', lang('account_name'));                           
            $this->excel->getActiveSheet()->SetCellValue('B3', lang('amount'));
            $this->excel->getActiveSheet()->SetCellValue('C3', lang('total'));          
            $this->excel->getActiveSheet()->getStyle('A4:B4')->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A4:B4')->setCellValue('A4' , lang('income'));
            $this->excel->getActiveSheet()->mergeCells('C4:D4');
            $total_income = 0;
            $totalBeforeAyear_income = 0;
            $income = 5;
            foreach($dataIncome->result() as $row){
                $total_income += $row->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $row->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_income += $totalBeforeAyearRows->amount;
                $this->excel->getActiveSheet()->SetCellValue('A' . $income, $row->account_code.' - '.$row->accountname);
                $this->excel->getActiveSheet()->SetCellValue('B' . $income, number_format(abs($row->amount),2));
                $this->excel->getActiveSheet()->SetCellValue('C' . $income, '');
                $income++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A3:A'.($income-1))->getAlignment()->setIndent(2); 
            $this->excel->getActiveSheet()->mergeCells('A'.$income.':B'.$income)->setCellValue('A'.$income , lang('total_income'));
            $this->excel->getActiveSheet()->SetCellValue('C' . $income, number_format((-1)*($total_income),2));
            $this->excel->getActiveSheet()->getStyle('A'.($income + 1).':B'.($income +1))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($income + 1).':B'.($income +1))->setCellValue('A'. ($income + 1) , lang('cost'));
            $total_cost = 0;
            $totalBeforeAyear_cost = 0;
            $cost = $income + 2;
            foreach($dataCost->result() as $rowcost){
                $total_cost += $rowcost->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $rowcost->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_cost += $totalBeforeAyearRows->amount;
                $this->excel->getActiveSheet()->SetCellValue('A' . $cost, $rowcost->account_code.' - '.$rowcost->accountname);
                $this->excel->getActiveSheet()->SetCellValue('B' . $cost, number_format(abs($rowcost->amount),2));
                $this->excel->getActiveSheet()->SetCellValue('C' . $cost, '');
                $cost++;
            }

            $this->excel->getActiveSheet()->getStyle('A'.($income+2).':A'.($cost-1))->getAlignment()->setIndent(2); 
            $this->excel->getActiveSheet()->mergeCells('A'.$cost.':B'.$cost)->setCellValue('A'.$cost , lang('total_cost'));
            $this->excel->getActiveSheet()->SetCellValue('C' . $cost, number_format((-1)*$total_cost,2));
            
            $this->excel->getActiveSheet()->getStyle('C'.($cost + 1).':D'.($cost + 1))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($cost + 1).':B'.($cost + 1))->setCellValue('A'.($cost + 1) , lang('gross_margin'));
            $this->excel->getActiveSheet()->SetCellValue('C' . ($cost +1), number_format((-1)*($total_cost+$total_income),2));
            
            $this->excel->getActiveSheet()->getStyle('A'.($cost + 2).':B'.($cost + 2))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($cost + 2).':B'.($cost + 2))->setCellValue('A'. ($cost + 2) , lang('operating_expense'));
            
            $total_expense = 0;
            $totalBeforeAyear_expense = 0;
            $expene = $cost + 3;
            foreach($dataExpense->result() as $row){
                $total_expense += $row->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $row->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_expense += $totalBeforeAyearRows->amount;
                $this->excel->getActiveSheet()->SetCellValue('A' . $expene, $row->account_code.' - '.$row->accountname);
                $this->excel->getActiveSheet()->SetCellValue('B' . $expene, number_format(abs($row->amount),2));
                $this->excel->getActiveSheet()->SetCellValue('C' . $expene, '');
            }
            $this->excel->getActiveSheet()->mergeCells('A'.$expene.':B'.$expene)->setCellValue('A'.$expene , lang('total_expense'));
            $this->excel->getActiveSheet()->SetCellValue('C' . $expene, number_format((-1)*$total_expense,2));
            $this->excel->getActiveSheet()->getStyle('A'.($expene + 1).':C'.($expene + 1))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($expene + 1).':B'.($expene + 1))->setCellValue('A'. ($expene + 1) , lang('profits'));
            $this->excel->getActiveSheet()->SetCellValue('C' . ($expene + 1), number_format((-1)*$total_income-($total_cost+$total_expense),2));
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'income_statement_by_customer' . date('Y_m_d_H_i_s');
            if ($xls) {
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }

            redirect($_SERVER["HTTP_REFERER"]); 
        }
        
        $this->page_construct('reports/income_statement_by_customer', $meta, $this->data);
    }
    
    function income_statement_detail($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $biller_id = NULL)
    {
        $this->bpas->checkPermissions('income_statement_detail',NULL,'account_report');

        $no_search_date = true;
        if($start_date && $end_date){
            $no_search_date = false;
        }
        
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $user = $this->site->getUser();
        if($biller_id != NULL){
            $this->data['biller_id_no_sep'] = $biller_id;
            $biller_sep = explode('-', $biller_id);
            
            $bills = '';
            for($i=0; $i < count($biller_sep); $i++){
                $bills .= $biller_sep[$i] . ',';
            }
            $biller_id =  rtrim($bills, ',');
            $this->data['biller_id'] = $biller_id;
        }else{
            if($user->biller_id){
                $this->data['biller_id'] = $user->biller_id;
                $biller_id = $user->biller_id;
            }else{
                $this->data['biller_id'] = "";
            }
        }
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
        
        $totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;
        
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
      
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('income_statement_detail')));
        $meta = array('page_title' => lang('income_statement_detail'), 'bc' => $bc);
        
        $from_date = date('Y-m-d H:m',strtotime(urldecode($start_date)));//'2014-08-01';
        $to_date = date('Y-m-d H:m',strtotime(urldecode($end_date. ' +1 day')));//'2015-09-01';
        
        $this->data['from_date'] = $from_date;
        $this->data['to_date'] = $to_date;
        
        $acc_setting = $this->site->get_Acc_setting();
        $this->data['acc_setting'] = $acc_setting;

        $dataIncome = $this->accounts_model->getStatementByDate('40,70',$from_date,$to_date,$biller_id);
        $IncomeData = $this->accounts_model->getStatementByDate('40,70',$from_date,$to_date,$biller_id);
        $dataCost = $this->accounts_model->getStatementByDate('50',$from_date,$to_date,$biller_id);
        
        $income_couple = $this->accounts_model->getStatementDetailByAccCode($acc_setting->default_receivable, '40,70,10',$from_date,$to_date,$biller_id);
        
        $cost_couple = $this->accounts_model->getStatementDetailByAccCode($acc_setting->default_stock, '50',$from_date,$to_date,$biller_id);
        $dataExpense = $this->accounts_model->getStatementByDate('60,80,90',$from_date,$to_date,$biller_id);

        $this->data['from_date'] = $from_date;
        $this->data['to_date'] = $to_date;
        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
        
        
        $this->data['dataIncome'] = $dataIncome;
        $this->data['idetails'] = $income_couple->result();
        
        $this->data['dataCost'] = $dataCost;
        $this->data['cdetail'] = $cost_couple->result();
        //$this->bpas->print_arrays($cost_couple->resutt());
        
        $this->data['dataExpense'] = $dataExpense;
        
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/income_statement', $this->data, true);
            $name = lang("income_statement") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_income_text") . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        
        if($xls){
            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                )
            );
            $bold = array(
                'font' => array(
                    'bold' => true
                )
            );
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->setTitle(lang('Income Statement'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('account_name'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('amount'));
            $this->excel->getActiveSheet()->SetCellValue('C1', lang('total'));
            //$this->excel->getActiveSheet()->SetCellValue('D1', lang("total") . ' ('.$totalBeforeAyear.')');
            
            $this->excel->getActiveSheet()->getStyle('A2:B2')->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A2:B2')->setCellValue('A2' , lang('income'));
            $this->excel->getActiveSheet()->mergeCells('C2:D2');
            $total_income = 0;
            $totalBeforeAyear_income = 0;
            $income = 3;
            foreach($dataIncome->result() as $row){
                $total_income += $row->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $row->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_income += $totalBeforeAyearRows->amount;
                $this->excel->getActiveSheet()->SetCellValue('A' . $income, $row->account_code.' - '.$row->accountname);
                $this->excel->getActiveSheet()->SetCellValue('B' . $income, number_format(abs($row->amount),2));
                $this->excel->getActiveSheet()->SetCellValue('C' . $income, '');
                //$this->excel->getActiveSheet()->SetCellValue('D' . $income, number_format(abs($totalBeforeAyearRows->amount),2));
                $income++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A3:A'.($income-1))->getAlignment()->setIndent(2); 
            $this->excel->getActiveSheet()->mergeCells('A'.$income.':B'.$income)->setCellValue('A'.$income , lang('total_income'));
            $this->excel->getActiveSheet()->SetCellValue('C' . $income, number_format((-1)*($total_income),2));
            //$this->excel->getActiveSheet()->SetCellValue('D' . $income, number_format((-1)*($totalBeforeAyear_income),2));
            
            $this->excel->getActiveSheet()->getStyle('A'.($income + 1).':B'.($income +1))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($income + 1).':B'.($income +1))->setCellValue('A'. ($income + 1) , lang('cost'));
            //$this->excel->getActiveSheet()->mergeCells('C'.($income + 1).':D'.($income +1));
            
            $total_cost = 0;
            $totalBeforeAyear_cost = 0;
            $cost = $income + 2;
            foreach($dataCost->result() as $rowcost){
                $total_cost += $rowcost->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $rowcost->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_cost += $totalBeforeAyearRows->amount;
                $this->excel->getActiveSheet()->SetCellValue('A' . $cost, $rowcost->account_code.' - '.$rowcost->accountname);
                $this->excel->getActiveSheet()->SetCellValue('B' . $cost, number_format(abs($rowcost->amount),2));
                $this->excel->getActiveSheet()->SetCellValue('C' . $cost, '');
                //$this->excel->getActiveSheet()->SetCellValue('D' . $cost, number_format(abs($totalBeforeAyearRows->amount),2));
                $cost++;
            }

            $this->excel->getActiveSheet()->getStyle('A'.($income+2).':A'.($cost-1))->getAlignment()->setIndent(2); 
            $this->excel->getActiveSheet()->mergeCells('A'.$cost.':B'.$cost)->setCellValue('A'.$cost , lang('total_cost'));
            $this->excel->getActiveSheet()->SetCellValue('C' . $cost, number_format((-1)*$total_cost,2));
            //$this->excel->getActiveSheet()->SetCellValue('D' . $cost, number_format((-1)*$totalBeforeAyear_cost,2));

            $this->excel->getActiveSheet()->getStyle('C'.($cost + 1).':D'.($cost + 1))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($cost + 1).':B'.($cost + 1))->setCellValue('A'.($cost + 1) , lang('gross_margin'));
            $this->excel->getActiveSheet()->SetCellValue('C' . ($cost +1), number_format((-1)*($total_cost+$total_income),2));
            //$this->excel->getActiveSheet()->SetCellValue('D' . ($cost +1), number_format((-1)*($totalBeforeAyear_income+$totalBeforeAyear_cost),2));
            
            $this->excel->getActiveSheet()->getStyle('A'.($cost + 2).':B'.($cost + 2))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($cost + 2).':B'.($cost + 2))->setCellValue('A'. ($cost + 2) , lang('operating_expense'));
            //$this->excel->getActiveSheet()->mergeCells('C'.($cost + 2).':D'.($cost + 2));
            
            $total_expense = 0;
            $totalBeforeAyear_expense = 0;
            $expene = $cost + 3;
            foreach($dataExpense->result() as $row){
                $total_expense += $row->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    DATE(tran_date) = '$totalBeforeAyear' AND account_code = '" . $row->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_expense += $totalBeforeAyearRows->amount;
                $this->excel->getActiveSheet()->SetCellValue('A' . $expene, $row->account_code.' - '.$row->accountname);
                $this->excel->getActiveSheet()->SetCellValue('B' . $expene, number_format(abs($row->amount),2));
                $this->excel->getActiveSheet()->SetCellValue('C' . $expene, '');
                //$this->excel->getActiveSheet()->SetCellValue('D' . $expene, number_format(abs($totalBeforeAyearRows->amount),2));
            }
            $this->excel->getActiveSheet()->mergeCells('A'.$expene.':B'.$expene)->setCellValue('A'.$expene , lang('total_expense'));
            $this->excel->getActiveSheet()->SetCellValue('C' . $expene, number_format((-1)*$total_expense,2));
            //$this->excel->getActiveSheet()->SetCellValue('D' . $expene, number_format((-1)*$totalBeforeAyear_expense,2));
            
            $this->excel->getActiveSheet()->getStyle('A'.($expene + 1).':C'.($expene + 1))->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.($expene + 1).':B'.($expene + 1))->setCellValue('A'. ($expene + 1) , lang('profits'));
            $this->excel->getActiveSheet()->SetCellValue('C' . ($expene + 1), number_format((-1)*$total_income-($total_cost+$total_expense),2));
            //$this->excel->getActiveSheet()->SetCellValue('D' . ($expene + 1), number_format((-1)*$totalBeforeAyear_income-($totalBeforeAyear_cost+$totalBeforeAyear_expense),2));
            
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            //$this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'Income_Statement' . date('Y_m_d_H_i_s');
            if ($xls) {
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }

            redirect($_SERVER["HTTP_REFERER"]); 
        }
        
        $this->page_construct('reports/income_statement_detail', $meta, $this->data);
    }
    function balance_sheet()
    {
        $this->bpas->checkPermissions('balance_sheet');
        $this->data['balance_sheets'] = array('AS','LI','EQ');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('accountings'), 'page' => lang('accounting')), array('link' => '#', 'page' => lang('balance_sheet')));
        $meta = array('page_title' => lang('balance_sheet'), 'bc' => $bc);
        $this->page_construct('accounts/balance_sheet', $meta, $this->data);
    }
    function balance_sheet_by_period()
    {
        $this->bpas->checkPermissions('balance_sheet');
        $this->data['balance_sheets'] = array('AS','LI','EQ');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('accountings'), 'page' => lang('accounting')), array('link' => '#', 'page' => lang('balance_sheet')));
        $meta = array('page_title' => lang('balance_sheet'), 'bc' => $bc);
        $this->page_construct('accounts/balance_sheet_by_period', $meta, $this->data);
    }
    function balance_sheet_old($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $biller_id = NULL)
    {
        $this->bpas->checkPermissions('balance_sheet',NULL,'account_report');
        
        $user = $this->site->getUser();
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-01-01 00:00:00');//date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        if($this->input->post('submit')){
            $date1 = date_create($this->bpas->fld($this->input->post('end_date')));
            $year = date_format($date1, 'Y');
            
            $getyear = $year ? $year : date('Y');
            $start_date = $getyear.'-01-01 00:00:00';
            $end_date = date_format($date1, 'Y-m-d H:i:s');

            admin_redirect('reports/balance_sheet/'.$start_date.'/'.$end_date.'');
            
        }

        
        if($biller_id != NULL){
            
            $this->data['biller_id_no_sep'] = $biller_id;
            $biller_sep = explode('-', $biller_id);
            $this->data['excel_biller_id'] = $biller_id;
            $bills = '';
            for($i=0; $i < count($biller_sep); $i++){
                $bills .= $biller_sep[$i] . ',';
            }
            $biller_id =  rtrim($bills, ',');   
            $this->data['biller_id'] = $biller_id;
        }else{
           
                $biller_id = array();
                $billers =  $this->site->getAllCompanies('biller');
                foreach($billers as $biller){
                    $biller_id[] = $biller->id;
                }
                $biller_id = implode(',', $biller_id);
                $this->data['biller_id'] = "";
            
            $this->data['excel_biller_id'] = '';
        }
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
        
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $from_date = date('Y-m-d H:i',strtotime(urldecode($start_date)));//'2014-08-01';
        $to_date = date('Y-m-d H:i',strtotime(urldecode($end_date)));//'2015-09-01'; before, it use in select query.
        
        $this->data['from_date'] = $from_date;
        $this->data['to_date'] = $to_date;
        
        $rep_space_end=str_replace(' ','_',urldecode($end_date));
        $end_dates=str_replace(':','-',$rep_space_end);//replace  $to_date.
        
        $totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;

        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
        
        $dataAsset = $this->accounts_model->getStatementByBalaneSheetDate('10,11',$from_date,$to_date,$biller_id);
        $this->data['dataAsset'] = $dataAsset;
        
        $dataLiability = $this->accounts_model->getStatementByBalaneSheetDate('20,21',$from_date,$to_date,$biller_id);
      //  var_dump($dataLiability);
        $this->data['dataLiability'] = $dataLiability;
        $dataEquity = $this->accounts_model->getStatementByBalaneSheetDate('30',$from_date,$to_date,$biller_id);
        $this->data['dataEquity'] = $dataEquity;

        $dataIncome = $this->accounts_model->getStatementByBalaneSheetDate('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataIncome'] = $dataIncome;

        $dataAllIncome = $this->accounts_model->getStatementBalaneSheetByDateBill('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataAllIncome'] = $dataAllIncome;
  
        
        $dataAllExpense = $this->accounts_model->getStatementBalaneSheetByDateBill('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataAllExpense'] = $dataAllExpense;

        $dataExpense = $this->accounts_model->getStatementByBalaneSheetDate('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataExpense'] = $dataExpense;

        //---------------
        $dataIncome_current = $this->accounts_model->getStatementByBalaneSheetDate_current_year('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataIncome_current'] = $dataIncome_current;

        $dataExpense_current = $this->accounts_model->getStatementByBalaneSheetDate_current_year('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataExpense_current'] = $dataExpense_current;
        

        $dataIncome_retain = $this->accounts_model->getStatementByBalaneSheetDate_retain('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataIncome_retain'] = $dataIncome_retain;

        $dataAllIncome_retain = $this->accounts_model->getStatementBalaneSheetByDateBill_retain('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataAllIncome_retain'] = $dataAllIncome_retain;

        $dataAllExpense_retain = $this->accounts_model->getStatementBalaneSheetByDateBill_retain('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataAllExpense_retain'] = $dataAllExpense_retain;
        $dataExpense_retain = $this->accounts_model->getStatementByBalaneSheetDate_retain('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataExpense_retain'] = $dataExpense_retain;
        
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/balance_sheet', $this->data, true);
            $name = lang("balance_sheet") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_balance_text") . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        
        
         if($xls){
            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                )
            );
            $bold = array(
                'font' => array(
                    'bold' => true
                )
            );
            $header_title = array(
                'font'  => array(
                    'bold'  => true,
                    'size'  => 12,
                    'name'  => 'Verdana'
                )
            );
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->setTitle(lang('Balance Sheet'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('balance_sheet'));
            $this->excel->getActiveSheet()->getStyle('B1')->applyFromArray($header_title);
            $this->excel->getActiveSheet()->getStyle('B1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->SetCellValue('A3', lang('account_name'));
            $billers = $this->site->getBillerByID(explode(',', $biller_id));
            $col = 1;
            $row = 3;
            foreach($billers as $biller){
                $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, $biller->name);
                $col++;
            } 
            $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('total_amount'));
            $this->excel->getActiveSheet()->SetCellValue('A4', lang('asset'));
            
            $cl = 5;
            $rw = 5;
            $total_asset = 0;
            $totalBeforeAyear_asset = 0;
            $Asset = 5;
            foreach($dataAsset->result() as $row){
                $total_asset += $row->amount;
                $query = $this->db->query("SELECT
                SUM(CASE WHEN bpas_gl_trans.amount < 0 THEN bpas_gl_trans.amount ELSE 0 END) as NegativeTotal,
                SUM(CASE WHEN bpas_gl_trans.amount >= 0 THEN bpas_gl_trans.amount ELSE 0 END) as PostiveTotal
                FROM
                    bpas_gl_trans
                WHERE
                    biller_id IN($biller_id) AND tran_date BETWEEN '$from_date' AND '$to_date' AND account_code = '" . $row->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_asset += ($totalBeforeAyearRows->NegativeTotal + $totalBeforeAyearRows->PostiveTotal);
                
                if ($row->amount>0){
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, $row->account_code.' - '.$row->accountname);
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, number_format(abs($row->amount),2));
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, '');
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, number_format(abs($totalBeforeAyearRows->PostiveTotal),2));
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, '');
                }else{
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, $row->account_code.' - '.$row->accountname);
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, '');
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, number_format(abs($row->amount),2));
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, '');
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, number_format(abs($totalBeforeAyearRows->NegativeTotal),2));
                }
                $cl++;
                $rw++;
            }
            /*
            $this->excel->getActiveSheet()->getStyle('A3:A'.($Asset-1))->getAlignment()->setIndent(2);
            $this->excel->getActiveSheet()->getStyle('B'.$Asset.':E'.$Asset)->applyFromArray($bold);
            $this->excel->getActiveSheet()->SetCellValue('A' . $Asset, lang('total_asset'));
            $this->excel->getActiveSheet()->SetCellValue('B' . $Asset, number_format(abs($total_asset),2));
            $this->excel->getActiveSheet()->SetCellValue('C' . $Asset, '');
            $this->excel->getActiveSheet()->SetCellValue('D' . $Asset,  number_format(abs($totalBeforeAyear_asset),2));
            $this->excel->getActiveSheet()->SetCellValue('E' . $Asset, '');
            $eq = $Asset + 1;
            $this->excel->getActiveSheet()->getStyle('A'.$eq.':B'.$eq)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$eq.':B'.$eq)->setCellValue('A' . $eq , lang('liabilities'));
            $this->excel->getActiveSheet()->mergeCells('C'.$eq.':E'.$eq);
            $total_liability = 0;
            $totalBeforeAyear_liability = 0;
            $Liability = $Asset + 2;
            foreach($dataLiability->result() as $rowlia){
                $total_liability += $rowlia->amount;

                $query = $this->db->query("SELECT
                    SUM(CASE WHEN bpas_gl_trans.amount < 0 THEN bpas_gl_trans.amount ELSE 0 END) as NegativeTotal,
                    SUM(CASE WHEN bpas_gl_trans.amount >= 0 THEN bpas_gl_trans.amount ELSE 0 END) as PostiveTotal
                    FROM
                        bpas_gl_trans
                    WHERE
                        biller_id IN($biller_id) AND DATE(tran_date) BETWEEN '$from_date' AND '$to_date' AND account_code = '" . $rowlia->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_liability += ($totalBeforeAyearRows->NegativeTotal + $totalBeforeAyearRows->PostiveTotal);
                if ($rowlia->amount>0){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $Liability, $rowlia->account_code.' - '.$rowlia->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $Liability, number_format(abs($rowlia->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $Liability, '');
                    $this->excel->getActiveSheet()->SetCellValue('D' . $Liability, number_format(abs($totalBeforeAyearRows->PostiveTotal),2));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $Liability, '');
                }else{
                    $this->excel->getActiveSheet()->SetCellValue('A' . $Liability, $rowlia->account_code.' - '.$rowlia->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $Liability, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $Liability, number_format(abs($rowlia->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $Liability, '');
                    $this->excel->getActiveSheet()->SetCellValue('E' . $Liability, number_format(abs($totalBeforeAyearRows->NegativeTotal),2));
                }
                $Liability++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A'.($Asset+2).':A'.($Liability-1))->getAlignment()->setIndent(2);
            $this->excel->getActiveSheet()->getStyle('B'.$Liability.':E'.$Liability)->applyFromArray($bold);
            $this->excel->getActiveSheet()->SetCellValue('A' . $Liability, lang('total_liabilities'));
            $this->excel->getActiveSheet()->SetCellValue('B' . $Liability, '');
            $this->excel->getActiveSheet()->SetCellValue('C' . $Liability, number_format(abs($total_liability),2));
            $this->excel->getActiveSheet()->SetCellValue('D' . $Liability, '');
            $this->excel->getActiveSheet()->SetCellValue('E' . $Liability, number_format(abs($totalBeforeAyear_liability),2));
            
            $equ = $Liability + 1;
            $this->excel->getActiveSheet()->getStyle('A'.$equ.':B'.$equ)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$equ.':B'.$equ)->setCellValue('A' . $equ , lang('equities'));
            $this->excel->getActiveSheet()->mergeCells('C'.$equ.':E'.$equ);
            $total_income = 0;
            $total_expense = 0;
            $total_returned = 0;
            $equities = $Liability + 2;
            $total_income_beforeAyear = 0;
            $total_expense_beforeAyear = 0;
            $total_returned_beforeAyear = 0;
            $queryIncom = $this->db->query("SELECT sum(bpas_gl_trans.amount) AS amount FROM
                                        bpas_gl_trans
                                    INNER JOIN bpas_gl_charts ON bpas_gl_charts.accountcode = bpas_gl_trans.account_code
                                    WHERE biller_id IN($biller_id) AND DATE(tran_date) BETWEEN '$from_date' AND '$to_date' AND  bpas_gl_trans.sectionid IN ('40,70') GROUP BY bpas_gl_trans.account_code;");
            $total_income_beforeAyear = $queryIncom->amount;

            $queryExpense = $this->db->query("SELECT sum(bpas_gl_trans.amount) AS amount FROM
                                        bpas_gl_trans
                                    INNER JOIN bpas_gl_charts ON bpas_gl_charts.accountcode = bpas_gl_trans.account_code
                                    WHERE biller_id IN($biller_id) AND DATE(tran_date) BETWEEN '$from_date' AND '$to_date' AND  bpas_gl_trans.sectionid IN ('50,60,80,90') GROUP BY bpas_gl_trans.account_code;");
            $total_expense_beforeAyear = $queryExpense->amount;

            $total_returned_beforeAyear = abs($total_income_beforeAyear)-abs($total_expense_beforeAyear);

            foreach($dataIncome->result() as $rowincome){
                $total_income += $rowincome->amount;
            }
            foreach($dataExpense->result() as $rowexpense){
                $total_expense += $rowexpense->amount;
            }
            $total_returned = abs($total_income)-abs($total_expense);
            $this->excel->getActiveSheet()->SetCellValue('A' . $equities, '300000 - Retained Earnings');
            if($total_returned<0) {
                $this->excel->getActiveSheet()->SetCellValue('B' . $equities, number_format(abs($total_returned),2));
                $this->excel->getActiveSheet()->SetCellValue('C' . $equities, '');
                $this->excel->getActiveSheet()->SetCellValue('D' . $equities, number_format($total_returned_beforeAyear,2));
                $this->excel->getActiveSheet()->SetCellValue('E' . $equities, '');
            }else{
                $this->excel->getActiveSheet()->SetCellValue('B' . $equities, '');
                $this->excel->getActiveSheet()->SetCellValue('C' . $equities, number_format(abs($total_returned),2));
                $this->excel->getActiveSheet()->SetCellValue('D' . $equities, '');
                $this->excel->getActiveSheet()->SetCellValue('E' . $equities, number_format($total_returned_beforeAyear,2));
            }
            
            $total_equity = 0;
            $totalBeforeAyear_equity = 0;
            $equity = $equities + 1;
            foreach($dataEquity->result() as $rowequity){
                $total_equity += $rowequity->amount;

                $query = $this->db->query("SELECT
                    sum(bpas_gl_trans.amount) AS amount
                FROM
                    bpas_gl_trans
                WHERE
                    biller_id IN($biller_id) AND DATE(tran_date) BETWEEN '$from_date' AND '$to_date' AND account_code = '" . $rowequity->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_equity += $totalBeforeAyearRows->amount;
                if($rowequity->amount<0) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $equity, $rowequity->account_code.' - '.$rowequity->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $equity, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $equity, number_format(abs($rowequity->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $equity, number_format(abs($totalBeforeAyearRows->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $equity, '');
                }else{
                    $this->excel->getActiveSheet()->SetCellValue('A' . $equity, $rowequity->account_code.' - '.$rowequity->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $equity, number_format(abs($rowequity->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $equity, '');
                    $this->excel->getActiveSheet()->SetCellValue('D' . $equity, number_format(abs($totalBeforeAyearRows->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $equity, '');
                }
                $equity++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A'.($Liability+2).':A'.($equity-1))->getAlignment()->setIndent(2);
            
            $this->excel->getActiveSheet()->getStyle('B'.$equity.':E'.$equity)->applyFromArray($bold);
            $this->excel->getActiveSheet()->SetCellValue('A' . $equity, lang('total_equities'));
            $this->excel->getActiveSheet()->SetCellValue('B' . $equity, '');
            $this->excel->getActiveSheet()->SetCellValue('C' . $equity, number_format(abs($total_equity-$total_returned),2));
            $this->excel->getActiveSheet()->SetCellValue('D' . $equity,  '');
            $this->excel->getActiveSheet()->SetCellValue('E' . $equity, number_format(abs($totalBeforeAyear_equity-$total_returned_beforeAyear),2));
            
            $totalL = $equity + 1;
            $this->excel->getActiveSheet()->getStyle('B'.$totalL.':E'.$totalL)->applyFromArray($bold);
            $this->excel->getActiveSheet()->SetCellValue('A' . $totalL, lang('total_liabilities_equities'));
            $this->excel->getActiveSheet()->SetCellValue('B' . $totalL, '');
            $this->excel->getActiveSheet()->SetCellValue('C' . $totalL, number_format(abs($total_equity+$total_liability-$total_returned),2));
            $this->excel->getActiveSheet()->SetCellValue('D' . $totalL,  '');
            $this->excel->getActiveSheet()->SetCellValue('E' . $totalL, number_format(abs($totalBeforeAyear_equity+$totalBeforeAyear_liability-$total_returned_beforeAyear),2));
            
            $totalA = $totalL + 1;
            $this->excel->getActiveSheet()->getStyle('A'.$totalA.':E'.$totalA)->applyFromArray($bold);
            $this->excel->getActiveSheet()->SetCellValue('A' . $totalA, lang('Total ASSET = LIABILITIES + EQUITY'));
            $this->excel->getActiveSheet()->SetCellValue('B' . $totalA, '');
            $this->excel->getActiveSheet()->SetCellValue('C' . $totalA, number_format(abs($total_equity+$total_liability-$total_returned)-abs($total_asset),2));
            $this->excel->getActiveSheet()->SetCellValue('D' . $totalA,  '');
            $this->excel->getActiveSheet()->SetCellValue('E' . $totalA, number_format(abs($totalBeforeAyear_equity+$totalBeforeAyear_liability+$total_returned_beforeAyear)-abs($totalBeforeAyear_asset),2));
            
            
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);*/
            $filename = 'Balance_Sheet' . date('Y_m_d_H_i_s');
            if ($xls) {
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }

            redirect($_SERVER["HTTP_REFERER"]); 
        }
        $bc  = [
                ['link' => base_url(), 'page' => lang('home')], 
                ['link' => admin_url('reports'), 'page' => lang('reports')], 
                ['link' => admin_url('reports/balance_sheet'), 'page' => lang('balance_sheet')]
        ];
        $meta   = ['page_title' => lang('balance_sheet'), 'bc' => $bc];
        $this->page_construct('reports/balance_sheet', $meta, $this->data);
    }
    function balance_sheet_by_month_($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $biller_id = NULL)
    {
        $this->bpas->checkPermissions('balance_sheet',NULL,'account_report');
        
        $user = $this->site->getUser();
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m-01 00:00');
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        // if($this->input->post('submit')){
        //     $date1 = date_create($this->bpas->fld($this->input->post('end_date')));
        //     $year = date_format($date1, 'Y');
            
        //     $getyear = $year ? $year : date('Y');
        //     $start_date = $getyear.'-01-01 00:00:00';
        //     $end_date = date_format($date1, 'Y-m-d H:i:s');

        //     admin_redirect('reports/balance_sheet_by_month/'.$start_date.'/'.$end_date.'');
            
        // }

        
        if($biller_id != NULL){
            
            $this->data['biller_id_no_sep'] = $biller_id;
            $biller_sep = explode('-', $biller_id);
            $this->data['excel_biller_id'] = $biller_id;
            $bills = '';
            for($i=0; $i < count($biller_sep); $i++){
                $bills .= $biller_sep[$i] . ',';
            }
            $biller_id =  rtrim($bills, ',');   
            $this->data['biller_id'] = $biller_id;
        }else{
           
                $biller_id = array();
                $billers =  $this->site->getAllCompanies('biller');
                foreach($billers as $biller){
                    $biller_id[] = $biller->id;
                }
                $biller_id = implode(',', $biller_id);
                $this->data['biller_id'] = "";
            
            $this->data['excel_biller_id'] = '';
        }
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
        
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        
        
        $from_date = date('Y-m-d H:i',strtotime(urldecode($start_date)));//'2014-08-01';
        $to_date = date('Y-m-d H:i',strtotime(urldecode($end_date)));//'2015-09-01'; before, it use in select query.
        
        $this->data['from_date'] = $from_date;
        $this->data['to_date'] = $to_date;
        
        $rep_space_end=str_replace(' ','_',urldecode($end_date));
        $end_dates=str_replace(':','-',$rep_space_end);//replace  $to_date.
        
        $totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;

        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
        
        $dataAsset = $this->accounts_model->getStatementByBalaneSheetDateRange('10,11',$from_date,$to_date,$biller_id);
        $this->data['dataAsset'] = $dataAsset;
        
        $dataLiability = $this->accounts_model->getStatementByBalaneSheetDateRange('20,21',$from_date,$to_date,$biller_id);
      //  var_dump($dataLiability);
        $this->data['dataLiability'] = $dataLiability;
        $dataEquity = $this->accounts_model->getStatementByBalaneSheetDateRange('30',$from_date,$to_date,$biller_id);
        $this->data['dataEquity'] = $dataEquity;

        $dataIncome = $this->accounts_model->getStatementByBalaneSheetDateRange('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataIncome'] = $dataIncome;

        $dataAllIncome = $this->accounts_model->getStatementByBalaneSheetDateRange('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataAllIncome'] = $dataAllIncome;
  
        
        $dataAllExpense = $this->accounts_model->getStatementByBalaneSheetDateRange('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataAllExpense'] = $dataAllExpense;

        $dataExpense = $this->accounts_model->getStatementByBalaneSheetDateRange('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataExpense'] = $dataExpense;

        //---------------
        $dataIncome_current = $this->accounts_model->getStatementByBalaneSheetDateRange('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataIncome_current'] = $dataIncome_current;

        $dataExpense_current = $this->accounts_model->getStatementByBalaneSheetDateRange('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataExpense_current'] = $dataExpense_current;
        

        $dataIncome_retain = $this->accounts_model->getStatementByBalaneSheetDateRange('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataIncome_retain'] = $dataIncome_retain;

        $dataAllIncome_retain = $this->accounts_model->getStatementByBalaneSheetDateRange('40,70',$from_date,$to_date,$biller_id);
        $this->data['dataAllIncome_retain'] = $dataAllIncome_retain;

        $dataAllExpense_retain = $this->accounts_model->getStatementByBalaneSheetDateRange('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataAllExpense_retain'] = $dataAllExpense_retain;
        $dataExpense_retain = $this->accounts_model->getStatementByBalaneSheetDateRange('50,60,80,90',$from_date,$to_date,$biller_id);
        $this->data['dataExpense_retain'] = $dataExpense_retain;
        
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/balance_sheet_by_month', $this->data, true);
            $name = lang("balance_sheet") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_balance_text") . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
         if($xls){
            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                )
            );
            $bold = array(
                'font' => array(
                    'bold' => true
                )
            );
            $header_title = array(
                'font'  => array(
                    'bold'  => true,
                    'size'  => 12,
                    'name'  => 'Verdana'
                )
            );
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->getStyle('A3:E3')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->setTitle(lang('Balance Sheet'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('balance_sheet'));
            $this->excel->getActiveSheet()->getStyle('B1')->applyFromArray($header_title);
            $this->excel->getActiveSheet()->getStyle('B1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            $this->excel->getActiveSheet()->SetCellValue('A3', lang('account_name'));
            $billers = $this->site->getBillerByID(explode(',', $biller_id));
            $col = 1;
            $row = 3;
            foreach($billers as $biller){
                $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, $biller->name);
                $col++;
            } 
            $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('total_amount'));
            $this->excel->getActiveSheet()->SetCellValue('A4', lang('asset'));
            
            $cl = 5;
            $rw = 5;
            $total_asset = 0;
            $totalBeforeAyear_asset = 0;
            $Asset = 5;
            foreach($dataAsset->result() as $row){
                $total_asset += $row->amount;
                $query = $this->db->query("SELECT
                SUM(CASE WHEN bpas_gl_trans.amount < 0 THEN bpas_gl_trans.amount ELSE 0 END) as NegativeTotal,
                SUM(CASE WHEN bpas_gl_trans.amount >= 0 THEN bpas_gl_trans.amount ELSE 0 END) as PostiveTotal
                FROM
                    bpas_gl_trans
                WHERE
                    biller_id IN($biller_id) AND tran_date BETWEEN '$from_date' AND '$to_date' AND account_code = '" . $row->account_code . "';");
                $totalBeforeAyearRows = $query->row();
                $totalBeforeAyear_asset += ($totalBeforeAyearRows->NegativeTotal + $totalBeforeAyearRows->PostiveTotal);
                
                if ($row->amount>0){
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, $row->account_code.' - '.$row->accountname);
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, number_format(abs($row->amount),2));
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, '');
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, number_format(abs($totalBeforeAyearRows->PostiveTotal),2));
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, '');
                }else{
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, $row->account_code.' - '.$row->accountname);
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, '');
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, number_format(abs($row->amount),2));
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, '');
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($cl, $rw, number_format(abs($totalBeforeAyearRows->NegativeTotal),2));
                }
                $cl++;
                $rw++;
            }
            $filename = 'Balance_Sheet' . date('Y_m_d_H_i_s');
            if ($xls) {
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }

            redirect($_SERVER["HTTP_REFERER"]); 
        }
        $bc  = [
                ['link' => base_url(), 'page' => lang('home')], 
                ['link' => admin_url('reports'), 'page' => lang('reports')], 
                ['link' => admin_url('reports/balance_sheet_by_month'), 'page' => lang('balance_sheet_by_month')]
        ];
        $meta   = ['page_title' => lang('balance_sheet_by_month'), 'bc' => $bc];
        $this->page_construct('reports/balance_sheet_by_month', $meta, $this->data);
    }
    function trial_balance($start_date = NULL, $end_date = NULL, $pdf= NULL, $xls = NULL, $biller_id = NULL)
    {
        $this->bpas->checkPermissions('trail_balance',NULL,'account_report');
        
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $user = $this->site->getUser();
        if($biller_id != NULL){
            $this->data['biller_id'] = $biller_id;
        }else{
            $this->data['biller_id'] = "";
        }
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
        
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        
        
        $from_date = date('Y-m-d H:m',strtotime(urldecode($start_date)));//'2014-08-01';
        $to_date = date('Y-m-d H:m',strtotime(urldecode($end_date)));//'2015-09-01';
        
        
        $this->data['from_date'] = $from_date;

        $data10 = $this->accounts_model->getStatementByDate('10',$from_date,$to_date,$biller_id);
        $this->data['data10'] = $data10;
        
        $data11 = $this->accounts_model->getStatementByDate('11',$from_date,$to_date,$biller_id);
        $this->data['data11'] = $data11;
        
        $data20 = $this->accounts_model->getStatementByDate('20',$from_date,$to_date,$biller_id);
        $this->data['data20'] = $data20;
        
        $data21 = $this->accounts_model->getStatementByDate('21',$from_date,$to_date,$biller_id);
        $this->data['data21'] = $data21;
        
        $data30 = $this->accounts_model->getStatementByDate('30',$from_date,$to_date,$biller_id);
        $this->data['data30'] = $data30;
        
        $data40 = $this->accounts_model->getStatementByDate('40',$from_date,$to_date,$biller_id);
        $this->data['data40'] = $data40;
        
        $data50 = $this->accounts_model->getStatementByDate('50',$from_date,$to_date,$biller_id);
        $this->data['data50'] = $data50;
        
        $data60 = $this->accounts_model->getStatementByDate('60',$from_date,$to_date,$biller_id);
        $this->data['data60'] = $data60;
        
        $data70 = $this->accounts_model->getStatementByDate('70',$from_date,$to_date,$biller_id);
        $this->data['data70'] = $data70;
        
        $data80 = $this->accounts_model->getStatementByDate('80',$from_date,$to_date,$biller_id);
        $this->data['data80'] = $data80;        
        
        if ($pdf) {
            $html = $this->load->view($this->theme . 'reports/trial_balance', $this->data, true);
            $name = lang("trial_balance") . "_" . date('Y_m_d_H_i_s') . ".pdf";
            $html = str_replace('<p class="introtext">' . lang("reports_trial_text") . '</p>', '', $html);
            $this->bpas->generate_pdf($html, $name, null, null, null, null, null, 'L');
        }
        
        if($xls){
            $styleArray = array(
                'font'  => array(
                    'bold'  => true,
                    'color' => array('rgb' => '000000'),
                    'size'  => 10,
                    'name'  => 'Verdana'
                ),
            );
            $bold = array(
                'font' => array(
                    'bold' => true
                )
            );
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->getStyle('A1:C1')->applyFromArray($styleArray);
            $this->excel->getActiveSheet()->setTitle(lang('Trial Balance'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('account_name'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('debit'));
            $this->excel->getActiveSheet()->SetCellValue('C1', lang('credit'));
            $this->excel->getActiveSheet()->getStyle('A2:B2')->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A2:B2')->setCellValue('A2' , lang('current_assets'));
            $total_10 = 0;
            $total_C = 0;
            $total_D = 0;
            $r10 = 3;
            foreach($data10->result() as $row10){
                if ($row10->amount>0){
                    $this->excel->getActiveSheet()->mergeCells('C2:C'. $r10);
                    $total_C += $row10->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r10, $row10->account_code.' - '.$row10->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r10, number_format(abs($row10->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r10, '');
                }else{
                    $total_D += $row10->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r10, $row10->account_code.' - '.$row10->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r10, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r10, number_format(abs($row10->amount),2));
                }
                $r10++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A'.$r10.':B'.$r10)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$r10.':B'.$r10)->setCellValue('A' . $r10 , lang('fixed_assets'));
            $total_11 = 0;
            $r11 = $r10 + 1;
            foreach($data11->result() as $row11){
                if ($row11->amount>0){
                    $this->excel->getActiveSheet()->mergeCells('C'.$r10.':C'. $r11);
                    $total_C += $row11->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r11, $row11->account_code.' - '.$row11->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r11, number_format(abs($row11->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r11, '');
                }else{
                    $total_D += $row11->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r11, $row11->account_code.' - '.$row11->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r11, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r11, number_format(abs($row11->amount),2));
                }
                $r11++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A'.$r11.':B'.$r11)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$r11.':B'.$r11)->setCellValue('A' . $r11 , lang('current_liabilities'));
            $total_20 = 0;
            $r20 = $r11 + 1;
            foreach($data20->result() as $row20){
                if ($row20->amount>0){
                    //$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
                    $total_C += $row20->amount;
                    if($row20->account_code == 201100){
                        $this->excel->getActiveSheet()->SetCellValue('A' . $r20, $row20->account_code.' - '.$row20->accountname);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $r20, '');
                        $this->excel->getActiveSheet()->SetCellValue('C' . $r20, number_format(abs($row20->amount),2));
                    }else{
                        $this->excel->getActiveSheet()->SetCellValue('A' . $r20, $row20->account_code.' - '.$row20->accountname);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $r20, number_format(abs($row20->amount),2));
                        $this->excel->getActiveSheet()->SetCellValue('C' . $r20, '');
                    }
                }else{
                    $total_D += $row20->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r20, $row20->account_code.' - '.$row20->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r20, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r20, number_format(abs($row20->amount),2));
                }
                $r20++;
            }           
            
            $this->excel->getActiveSheet()->getStyle('A'.$r20.':B'.$r20)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$r20.':B'.$r20)->setCellValue('A' . $r20 , lang('non_liabilities'));
            $total_21 = 0;
            $r21 = $r20 + 1;
            foreach($data21->result() as $row21){
                if ($row21->amount>0){
                    //$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
                    $total_C += $row21->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r21, $row21->account_code.' - '.$row21->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r21, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r21, number_format(abs($row21->amount),2));
                }else{
                    $total_D += $row21->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r21, $row21->account_code.' - '.$row21->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r21, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r21, number_format(abs($row21->amount),2));
                }
                $r21++;
            }   

            $this->excel->getActiveSheet()->getStyle('A'.$r21.':B'.$r21)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$r21.':B'.$r21)->setCellValue('A' . $r21 , lang('equity_retained_erning'));
            $total_30 = 0;
            $r30 = $r21 + 1;
            foreach($data30->result() as $row30){
                if ($row30->amount>0){
                    //$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
                    $total_C += $row30->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r30, $row30->account_code.' - '.$row30->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r30, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r30, number_format(abs($row30->amount),2));
                }else{
                    $total_D += $row30->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r30, $row30->account_code.' - '.$row30->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r30, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r30, number_format(abs($row30->amount),2));
                }
                $r30++;
            }

            $this->excel->getActiveSheet()->getStyle('A'.$r30.':B'.$r30)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$r30.':B'.$r30)->setCellValue('A' . $r30 , lang('income'));
            $total_40 = 0;
            $r40 = $r30 + 1;
            foreach($data40->result() as $row40){
                if ($row40->amount>0){
                    //$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
                    $total_C += $row40->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r40, $row40->account_code.' - '.$row40->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r40, number_format(abs($row40->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r40, '');
                }else{
                    $total_D += $row40->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r40, $row40->account_code.' - '.$row40->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r40, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r40, number_format(abs($row40->amount),2));
                }
                $r40++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A'.$r40.':B'.$r40)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$r40.':B'.$r40)->setCellValue('A' . $r40 , lang('cost'));
            $total_50 = 0;
            $r50 = $r40 + 1;
            foreach($data50->result() as $row50){
                if ($row50->amount>0){
                    //$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
                    $total_C += $row50->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r50, $row50->account_code.' - '.$row50->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r50, number_format(abs($row50->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r50, '');
                }else{
                    $total_D += $row50->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r50, $row50->account_code.' - '.$row50->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r50, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r50, number_format(abs($row50->amount),2));
                }
                $r50++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A'.$r50.':B'.$r50)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$r50.':B'.$r50)->setCellValue('A' . $r50 , lang('operating_expense'));
            $total_60 = 0;
            $r60 = $r50 + 1;
            foreach($data60->result() as $row60){
                if ($row60->amount>0){
                    //$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
                    $total_C += $row60->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r60, $row60->account_code.' - '.$row60->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r60, number_format(abs($row60->amount),2));
                    $this->excel->getActiveSheet()->SetCCellValue('C' . $r60, '');
                }else{
                    $total_D += $row60->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r60, $row60->account_code.' - '.$row60->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r60, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r60, number_format(abs($row60->amount),2));
                }
                $r60++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A'.$r60.':B'.$r60)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$r60.':B'.$r60)->setCellValue('A' . $r60 , lang('other_income'));
            $total_70 = 0;
            $r70 = $r60 + 1;
            foreach($data70->result() as $row70){
                if ($row70->amount>0){
                    //$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
                    $total_C += $row70->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r70, $row70->account_code.' - '.$row70->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r70, number_format(abs($row70->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r70, '');
                }else{
                    $total_D += $row70->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r70, $row70->account_code.' - '.$row70->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r70, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r70, number_format(abs($row70->amount),2));
                }
                $r70++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A'.$r70.':B'.$r70)->applyFromArray($bold);
            $this->excel->getActiveSheet()->mergeCells('A'.$r70.':B'.$r70)->setCellValue('A' . $r70 , lang('other_expense'));
            $total_80 = 0;
            $r80 = $r70 + 1;
            foreach($data80->result() as $row80){
                if ($row80->amount>0){
                    //$this->excel->getActiveSheet()->mergeCells('C'.$r11.':C'. $r20);
                    $total_C += $row80->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r80, $row80->account_code.' - '.$row80->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r80, number_format(abs($row80->amount),2));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r80, '');
                }else{
                    $total_D += $row80->amount;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $r80, $row80->account_code.' - '.$row80->accountname);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $r80, '');
                    $this->excel->getActiveSheet()->SetCellValue('C' . $r80, number_format(abs($row80->amount),2));
                }
                $r80++;
            }
            
            $this->excel->getActiveSheet()->getStyle('A'.$r80.':C'.$r80)->applyFromArray($bold);
            $this->excel->getActiveSheet()->SetCellValue('A' . $r80, lang('total'));
            $this->excel->getActiveSheet()->SetCellValue('B' . $r80, number_format(abs($total_D),2));
            $this->excel->getActiveSheet()->SetCellValue('C' . $r80, number_format(abs($total_C),2));
            
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $filename = 'Trial_Balance' . date('Y_m_d_H_i_s');
            if ($xls) {
                header('Content-Type: application/vnd.ms-excel');
                header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                header('Cache-Control: max-age=0');

                $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                return $objWriter->save('php://output');
            }

            redirect($_SERVER["HTTP_REFERER"]); 
        }
        $bc  = [
                ['link' => base_url(), 'page' => lang('home')], 
                ['link' => admin_url('reports'), 'page' => lang('reports')], 
                ['link' => admin_url('reports/trial_balance'), 'page' => lang('trial_balance')]
        ];
        $meta   = ['page_title' => lang('trial_balance'), 'bc' => $bc];
        $this->page_construct('reports/trial_balance', $meta, $this->data);
    }
    //  property
    //----------leasing------
    function leasing()
    {
        $this->bpas->checkPermissions('loans');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_report')));
        $meta = array('page_title' => lang('sales_report'), 'bc' => $bc);
        $this->page_construct('reports/leasing_report', $meta, $this->data);
    }
    function getLeasingReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('loans', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {
            $this->db->select("{$this->db->dbprefix('loan_payment')}.sale_id as sale_id, register_date as date,
                        name,
                        {$this->db->dbprefix('loan_payment')}.reference as refer,
                        {$this->db->dbprefix('sales')}.reference_no as reference_no,
                        SUM({$this->db->dbprefix('loan_payment')}.paid) as paid,
                        SUM(monthly_payment) as loan_payment,
                        monthly_payment,
                        SUM(interest) as total_interest,
                        {$this->db->dbprefix('loan_payment')}.pay_date as pay_date,
                        IF(SUM({$this->db->dbprefix('loan_payment')}.paid) >= SUM(monthly_payment), 'completed', 'due') as status
                        ")
                ->from('loan_payment')
                ->join('companies', 'companies.id=loan_payment.customer_id', 'left')
                ->join('sales', 'sales.id=loan_payment.sale_id', 'left')
                ->group_by('loan_payment.sale_id');
                

            if ($user) {
                $this->db->where('sales.created_by', $user);
            }

            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('loan_payment.reference', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('loan_payment').'.register_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('loans_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sale_refer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('loan_payment'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('monthly_payment'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('interest'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->refer);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->loan_payment);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->monthly_payment);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, ($data_row->total_interest));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, ($data_row->status));


                    $row++;
                }
                //$this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()
                //    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);

                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'loans_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                        register_date as date,
                        name,
                        {$this->db->dbprefix('loan_payment')}.reference,
                        {$this->db->dbprefix('sales')}.reference_no as reference_no,
                        SUM({$this->db->dbprefix('loan_payment')}.paid) as paid,
                        SUM(monthly_payment) as loan_payment,
                        monthly_payment,
                        SUM(interest) as total_interest,
                        IF(SUM({$this->db->dbprefix('loan_payment')}.paid) >= SUM(monthly_payment), 'completed', 'due') as status
                        ")
                ->from('loan_payment')
                ->join('companies', 'companies.id=loan_payment.customer_id', 'left')
                ->join('sales', 'sales.id=loan_payment.sale_id', 'left')
                ->group_by('loan_payment.sale_id');

            if ($user) {
                $this->datatables->where('loan_payment.user_id', $user);
            }
            if ($customer) {
                $this->datatables->where('loan_payment.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('loan_payment').'.register_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }           

            echo $this->datatables->generate();
        }
    }
    function commission()
    {
        $this->bpas->checkPermissions('commission');


        $this->data['error']        = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']        = $this->reports_model->getStaff();
        $this->data['billers']      = $this->site->getAllCompanies('biller');
        $this->data['salemans']     = $this->site->getAllSalemans($this->Settings->group_saleman_id);
        $this->data['pos_settings'] = POS ? $this->reports_model->getPOSSetting('biller') : FALSE;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('commissions_report')));
        $meta = array('page_title' => lang('commissions_report'), 'bc' => $bc);
        $this->page_construct('reports/commission', $meta, $this->data);
    }

    function get_commission_Report($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('commission', TRUE);
        $biller_id= $this->session->userdata('biller_id');
        $get_sub_biller = $this->site->get_Sub_Biller($biller_id);
        $elements = array();
        foreach ($get_sub_biller as $sub_biller){
            $elements[] =  $sub_biller->bill_id;
        }
        $sub_bill = implode(' OR '.$this->db->dbprefix('sales').'.biller_id =', $elements);

        $user           = $this->input->get('user') ? $this->input->get('user') : NULL;
        $supplier       = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $saleman_by     = $this->input->get('saleman_by') ? $this->input->get('saleman_by') : NULL;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $payment_ref    = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : NULL;
        $paid_by        = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
        $sale_ref       = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : NULL;
        $purchase_ref   = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : NULL;
        $card           = $this->input->get('card') ? $this->input->get('card') : NULL;
        $cheque         = $this->input->get('cheque') ? $this->input->get('cheque') : NULL;
        $transaction_id = $this->input->get('tid') ? $this->input->get('tid') : NULL;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->bpas->fsd($start_date);
            $end_date = $this->bpas->fsd($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {
            $s_cost = "
                ( SELECT 
                        SUM(COALESCE({$this->db->dbprefix('sale_items')}.purchase_unit_cost, 0) * {$this->db->dbprefix('sale_items')}.quantity)
                    FROM {$this->db->dbprefix('sale_items')} 
                    WHERE {$this->db->dbprefix('sale_items')}.sale_id = {$this->db->dbprefix('sales')}.id
                ) ";

            $s_cost_before = " 
                ( SELECT 
                        SUM(COALESCE({$this->db->dbprefix('sale_items')}.purchase_unit_cost, 0) * {$this->db->dbprefix('sale_items')}.quantity)
                    FROM {$this->db->dbprefix('sale_items')}
                    WHERE {$this->db->dbprefix('sale_items')}.sale_id = (
                        SELECT
                            (SELECT x.id FROM {$this->db->dbprefix('sales')} AS x WHERE x.sale_status != 'returned' AND x.reference_no = s.reference_no) 
                        FROM {$this->db->dbprefix('sales')} AS s
                        WHERE s.id = {$this->db->dbprefix('sales')}.id) 
                ) ";

            $s_comm            = " ( SELECT COALESCE({$this->db->dbprefix('users')}.commission, 0) FROM {$this->db->dbprefix('users')} WHERE {$this->db->dbprefix('users')}.id = {$this->db->dbprefix('sales')}.saleman_by ) ";
            $s_saleman         = " ( SELECT CONCAT_WS(' ', {$this->db->dbprefix('users')}.first_name, {$this->db->dbprefix('users')}.last_name) FROM {$this->db->dbprefix('users')} WHERE {$this->db->dbprefix('users')}.id = {$this->db->dbprefix('sales')}.saleman_by ) ";
            $s_payment_before  = " ( SELECT COALESCE(SUM(pmt.amount), 0) FROM {$this->db->dbprefix('payments')} AS pmt WHERE pmt.reference_no < {$this->db->dbprefix('payments')}.reference_no AND pmt.sale_id = {$this->db->dbprefix('sales')}.id GROUP BY {$this->db->dbprefix('sales')}.id ) ";
            $s_payment_before_ = " ( 
                SELECT 
                    COALESCE(SUM(pmt_.amount), 0) FROM {$this->db->dbprefix('payments')} AS pmt_ 
                LEFT JOIN {$this->db->dbprefix('sales')} AS ss_ ON pmt_.sale_id = ss_.id
                WHERE 
                    pmt_.sale_id < {$this->db->dbprefix('payments')}.sale_id AND 
                    ss_.reference_no = (
                        SELECT ss.reference_no
                        FROM {$this->db->dbprefix('payments')} pp
                        LEFT JOIN {$this->db->dbprefix('sales')} AS ss ON pp.sale_id = ss.id
                        WHERE pp.id = {$this->db->dbprefix('payments')}.id
                ) ) ";

            if($this->site->getSettings()->cost_sale_commission){
                $sale_agent_comm = "
                        IF(
                            {$this->db->dbprefix('payments')}.type != 'returned',
                            IF(
                                " . $s_payment_before . " > 0,
                                IF(
                                    " . $s_payment_before  . " - " . $s_cost . " < 0, 
                                    IF((amount + " . $s_payment_before . " - " . $s_cost . ") < 0, 0, (amount + " . $s_payment_before . " - " . $s_cost . ") * " . $s_comm . " / 100),
                                    amount * " . $s_comm . " / 100
                                ),
                                IF(amount - " . $s_cost . " < 0, 0, (amount - " . $s_cost . ") * " . $s_comm . " / 100)
                            ),
                            IF(
                                " . $s_payment_before_  . " - " . $s_cost_before . " > 0, 
                                -1 * ((Abs(amount) - Abs(" . $s_cost . ")) * " . $s_comm . " / 100),
                                0
                            )
                        )
                    ";
            } else {
                $sale_agent_comm = " amount * " . $s_comm . " / 100 ";
            }

            // $this->db
            //     ->select("" . $this->db->dbprefix('payments') . ".date, 
            //             " . $this->db->dbprefix('payments') . ".reference_no as payment_ref, 
            //             " . $this->db->dbprefix('sales') . ".reference_no as sale_ref,
            //             " . $this->db->dbprefix('sales') . ".biller, 
            //             paid_by, 
            //             amount, 
            //             " . $s_cost . " AS cost,
            //             STL,
            //             " . $sale_agent_comm . " AS sale_agent,
            //             type
            //         ")
            //     ->from('payments')
            //     ->join('sales', 'payments.sale_id=sales.id', 'left')
            //     ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
            //     ->group_by('payments.id')
            //     ->order_by('payments.date desc');

            $this->db
                ->select("
                        GROUP_CONCAT(" . $this->db->dbprefix('payments') . ".date SEPARATOR '___') AS date, 
                        GROUP_CONCAT(" . $this->db->dbprefix('payments') . ".reference_no SEPARATOR '\n') as payment_ref, 
                        " . $this->db->dbprefix('sales') . ".reference_no as sale_ref,
                        " . $s_saleman . " AS saleman,
                        " . $this->db->dbprefix('sales') . ".biller, 
                        GROUP_CONCAT(paid_by SEPARATOR '\n') AS paid_by, 
                        SUM(amount) AS amount, 
                        " . $s_cost . " AS cost,
                        SUM(" . $sale_agent_comm . ") AS sale_agent,
                        GROUP_CONCAT(type SEPARATOR '\n') AS type
                    ")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('sales.id');

            $this->db->like('sales.reference_no', 'SALE', 'both');

            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if($this->SaleLeader){
                $this->db->where('sales.biller_id = '.$sub_bill.'');
            }elseif($this->SaleAgent){
                $this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
            }else{
                if ($biller) {
                    $this->db->where('sales.biller_id', $biller);
                }
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($saleman_by) {
                $this->db->where('sales.saleman_by', $saleman_by);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . ' 00:00:00" and "' . $end_date . ' 23:59:59 "');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('commissions_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('saleman'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('cost'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('sale_agent'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('type'));

                $row = 2;
                $total = 0; $total_sa = 0; $total_cost = 0;
                foreach ($data as $data_row) {
                    $str = "";
                    $mtd = explode("___", $data_row->date);
                    foreach ($mtd as $key => $value) {
                        $str .= $this->bpas->hrld($value);
                        $str .= "\n";
                    }

                    // $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $str);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->saleman);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->cost);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->sale_agent);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->type);
                    if ($data_row->type == 'returned' || $data_row->type == 'sent') {
                        $total -= $data_row->amount;
                    } else {
                        $total += $data_row->amount;
                    }
                    $total_cost += $data_row->cost;
                    $total_sa += $data_row->sale_agent;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("G" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle("H" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle("I" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                    
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $total_cost);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $total_sa);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'commission_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $s_cost = "
                ( SELECT 
                        SUM(COALESCE({$this->db->dbprefix('sale_items')}.purchase_unit_cost, 0) * {$this->db->dbprefix('sale_items')}.quantity)
                    FROM {$this->db->dbprefix('sale_items')} 
                    WHERE {$this->db->dbprefix('sale_items')}.sale_id = {$this->db->dbprefix('sales')}.id
                ) ";

            $s_cost_before = " 
                ( SELECT 
                        SUM(COALESCE({$this->db->dbprefix('sale_items')}.purchase_unit_cost, 0) * {$this->db->dbprefix('sale_items')}.quantity)
                    FROM {$this->db->dbprefix('sale_items')}
                    WHERE {$this->db->dbprefix('sale_items')}.sale_id = (
                        SELECT
                            (SELECT x.id FROM {$this->db->dbprefix('sales')} AS x WHERE x.sale_status != 'returned' AND x.reference_no = s.reference_no) 
                        FROM {$this->db->dbprefix('sales')} AS s
                        WHERE s.id = {$this->db->dbprefix('sales')}.id) 
                ) ";

            $s_comm            = " ( SELECT COALESCE({$this->db->dbprefix('users')}.commission, 0) FROM {$this->db->dbprefix('users')} WHERE {$this->db->dbprefix('users')}.id = {$this->db->dbprefix('sales')}.saleman_by ) ";
            $s_saleman         = " ( SELECT CONCAT_WS(' ', {$this->db->dbprefix('users')}.first_name, {$this->db->dbprefix('users')}.last_name) FROM {$this->db->dbprefix('users')} WHERE {$this->db->dbprefix('users')}.id = {$this->db->dbprefix('sales')}.saleman_by ) ";
            $s_payment_before  = " ( SELECT COALESCE(SUM(pmt.amount), 0) FROM {$this->db->dbprefix('payments')} AS pmt WHERE pmt.reference_no < {$this->db->dbprefix('payments')}.reference_no AND pmt.sale_id = {$this->db->dbprefix('sales')}.id GROUP BY {$this->db->dbprefix('sales')}.id ) ";
            $s_payment_before_ = " ( 
                    SELECT 
                        COALESCE(SUM(pmt_.amount), 0) FROM {$this->db->dbprefix('payments')} AS pmt_ 
                    LEFT JOIN {$this->db->dbprefix('sales')} AS ss_ ON pmt_.sale_id = ss_.id
                    WHERE 
                        pmt_.sale_id < {$this->db->dbprefix('payments')}.sale_id AND 
                        ss_.reference_no = (
                            SELECT ss.reference_no
                            FROM {$this->db->dbprefix('payments')} pp
                            LEFT JOIN {$this->db->dbprefix('sales')} AS ss ON pp.sale_id = ss.id
                            WHERE pp.id = {$this->db->dbprefix('payments')}.id
                    ) ) ";

            if($this->site->getSettings()->cost_sale_commission){
                $sale_agent_comm = "
                        IF(
                            {$this->db->dbprefix('payments')}.type != 'returned',
                            IF(
                                " . $s_payment_before . " > 0,
                                IF(
                                    " . $s_payment_before  . " - " . $s_cost . " < 0, 
                                    IF((amount + " . $s_payment_before . " - " . $s_cost . ") < 0, 0, (amount + " . $s_payment_before . " - " . $s_cost . ") * " . $s_comm . " / 100),
                                    amount * " . $s_comm . " / 100
                                ),
                                IF(amount - " . $s_cost . " < 0, 0, (amount - " . $s_cost . ") * " . $s_comm . " / 100)
                            ),
                            IF(
                                " . $s_payment_before_  . " - " . $s_cost_before . " > 0, 
                                -1 * ((Abs(amount) - Abs(" . $s_cost . ")) * " . $s_comm . " / 100),
                                0
                            )
                        )
                    ";
            } else {
                $sale_agent_comm = " amount * " . $s_comm . " / 100 ";
            }

            $this->load->library('datatables');
            $this->datatables
                ->select("
                    GROUP_CONCAT(DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') SEPARATOR '___') AS date, 
                    GROUP_CONCAT(" . $this->db->dbprefix('payments') . ".reference_no SEPARATOR '___') AS payment_ref, 
                    " . $this->db->dbprefix('sales') . ".reference_no AS sale_ref, 
                    " . $s_saleman . " AS saleman,
                    " . $this->db->dbprefix('sales') . ".biller,
                    GROUP_CONCAT(" . $this->db->dbprefix('payments') . ".paid_by SEPARATOR '___') AS paid_by, 
                    SUM(" . $this->db->dbprefix('payments') . ".amount) AS amount, 
                    " . $s_cost . " AS cost,
                    SUM(" . $sale_agent_comm . ") AS sale_agent,
                    GROUP_CONCAT(" . $this->db->dbprefix('payments') . ".type SEPARATOR '___') AS type,
                    GROUP_CONCAT(" . $this->db->dbprefix('payments') . ".id SEPARATOR '___') AS id")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                // ->join('purchases', 'payments.purchase_id=purchases.id', 'left');
                // ->group_by('payments.id');
                // ->group_by('sales.id');
                ->group_by('payments.sale_id');

            $this->datatables->like('sales.reference_no', 'SALE');

            if ($user) {
               // $this->datatables->where('payments.created_by', $user);
                $this->datatables->where('sales.created_by', $user);
                
            }
            if ($card) {
                $this->datatables->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->datatables->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->datatables->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($saleman_by) {
                $this->datatables->where('sales.saleman_by', $saleman_by);
            }
            if($this->SaleLeader){
                $this->datatables->where('sales.biller_id = '.$sub_bill.'');
            }elseif($this->SaleAgent){
                $this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
            }else{
                if ($biller) {
                    $this->datatables->where('sales.biller_id', $biller);
                }
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . ' 00:00:00" and "' . $end_date . ' 23:59:59 "');
            }

            echo $this->datatables->generate();
        }
    }
    function convert_reports(){  
        $datt =$this->reports_model->getLastDate("bpas_transfers","date");
        //$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        //$this->data['convert'] = $this->reports_model->getconvert($product,$warehouse,$start_date,$end_date,$config["per_page"],$config["ob_set"]);   
        if($this->input->post('start_date')){
            $this->data['start_date']= $this->bpas->fsd($this->input->post('start_date'));
        }else{
            $this->data['start_date']= $datt;
        }
        if($this->input->post('end_date')){
            $this->data['end_date'] =$this->bpas->fsd($this->input->post('end_date'));
        }else{
            $this->data['end_date']= $datt;
        }
        $this->data['products'] = $this->site->getAllProducts();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->reports_model->getBillers();
        $this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
        $this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('report_list_using_stock')));
        $meta = array('page_title' => lang('convert_reports'), 'bc' => $bc);
        $this->page_construct('reports/convert_reports', $meta, $this->data);
    }
    function getConvertReports(){
        $wid = $this->reports_model->getWareByUserID();
        $start_date = "";
        $end_date = "";
        $datt =$this->reports_model->getLastDate("boms","date");
        /*if($this->input->get('start_date')){
            $start_date= $this->bpas->fsd($this->input->get('start_date'));
        }else{
            $start_date= $datt;
        }
        if($this->input->get('end_date')){
            $end_date =$this->bpas->fsd($this->input->get('end_date'));
        }else{
            $end_date= $datt;
        }*/
        
        $detail_link = anchor('admin/reports/convert_report_detail?id_id=$1', '<i class="fa fa-file-text-o"></i> ' . lang('view-detail'));
        $action = '<div class="text-center"><div class="btn-group text-left">'
            . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
            . lang('actions') . ' <span class="caret"></span></button>
        <ul class="dropdown-menu pull-right" role="menu">
            <li>' . $detail_link . '</li>
            <li><a href="' . admin_url('products/add/$1') . '"><i class="fa fa-plus-square"></i> ' . lang('duplicate_product') . '</a></li>';
       $action = '<div class="text-center"><div class="btn-group text-left">'
        . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
                . lang('actions') . ' <span class="caret"></span></button>
        <ul class="dropdown-menu pull-right" role="menu">
            <li>' . $detail_link . '</li>  
        </ul>
        </div></div>';
         $this->load->library('datatables');     
        $this->datatables
            ->select("boms.id,name")
            ->join("converts","converts.bom_id=boms.id","LEFT")
            ->from("boms");
        $this->datatables->where("converts.bom_id!=",null);
        $this->datatables->group_by("converts.bom_id");
        //$this->datatables->where("date_format(date,'%Y-%m-%d') BETWEEN '$start_date' AND '$end_date'");
        $this->datatables->add_column("Actions", $action, "boms.id");
        echo $this->datatables->generate();
    }
    function workorder_reports(){  
        $datt =$this->reports_model->getLastDate("bpas_transfers","date");
        //$this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        //$this->data['convert'] = $this->reports_model->getconvert($product,$warehouse,$start_date,$end_date,$config["per_page"],$config["ob_set"]);   
        if($this->input->post('start_date')){
            $this->data['start_date']= $this->bpas->fsd($this->input->post('start_date'));
        }else{
            $this->data['start_date']= $datt;
        }
        if($this->input->post('end_date')){
            $this->data['end_date'] =$this->bpas->fsd($this->input->post('end_date'));
        }else{
            $this->data['end_date']= $datt;
        }
        $this->data['products'] = $this->site->getAllProducts();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->reports_model->getBillers();
        $this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
        $this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('report_list_using_stock')));
        $meta = array('page_title' => lang('convert_reports'), 'bc' => $bc);
        $this->page_construct('reports/convert_reports', $meta, $this->data);
    }
    
    function convert_report_detail()
    {
        $datt =$this->reports_model->getLastDate("bpas_converts","date");
        $this->load->library("pagination");
        $start  = "";
        $end = "";
         $str ="";
        if($this->input->get('product')){
            $p = $this->input->get('product');
        }else{
            $p = null;
        }
        if($this->input->get('id_id')){
            $id = $this->input->get('id_id');
            $str.="&id_id=".$id;
        }
        
        if($this->input->get('start_date')){
            $start = $this->input->get('start_date');
            $str.="&start_date=".$start;
            
        }else{
            $start = $this->bpas->hrsd($datt);
            $this->data['start_date'] = $start;
        }
        if($this->input->get('end_date')){
            $end = $this->input->get('end_date');
            $str.="&end_date=".$end;
            
        }else{
            $end = $this->bpas->hrsd($datt);
            $this->data['end_date'] = $end;
        }
        
       
        $reference_no = "";
        $warehouse_id = "";
        $created_by = "";
        $wid = $this->reports_model->getWareByUserID();
        if($this->input->get('reference_no')){
            $reference_no =$this->input->get('reference_no');
            $str.="&reference_no=".$reference_no;
            $this->data['reference_no']= $reference_no;
        }
        if($this->input->get('warehouse')){
            $warehouse_id =$this->input->get('warehouse');
            $str.="&warehouse=".$warehouse_id;
            $this->data['warehouse2']= $warehouse_id;
        }
        if($this->input->get('created_by')){
            $created_by =$this->input->get('created_by');
            $str.="&created_by=".$created_by;
            $this->data['created_by2']= $created_by;
        }
        
        $this->db->select("*") 
        ->join('bpas_warehouses','bpas_warehouses.id=converts.warehouse_id','LEFT')
        ->join('bpas_users','bpas_users.id=converts.created_by','LEFT')
        ->where('converts.bom_id',$id);
        if($reference_no){
            $this->db->where('converts.reference_no',$reference_no);
        }
        if($warehouse_id){
            $this->db->where('converts.warehouse_id',$warehouse_id);
        }else{
            if($wid){
                $this->db->where("converts.warehouse_id IN ($wid) ");
            }
        }
        if($start){
            $this->db->where("date_format({$this->db->dbprefix('converts')}.date,'%Y-%m-%d') BETWEEN '".$this->bpas->fsd($start)."' AND '".$this->bpas->fsd($end)."'");
        }
        if($created_by){
            $this->db->where('converts.created_by',$created_by);
        }
        $sales_nums = $this->db->get("converts")
        ->num_rows();
        
        $config = array();
        $config['suffix'] = "?v=1".$str;
        $config["base_url"] = admin_url("reports/convert_report_detail");
        $config["total_rows"] = $sales_nums;
        $config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] = 20; 
        $config["uri_segment"] = 3;
        $config['full_tag_open'] = '<ul class="pagination pagination-sm">';
        $config['full_tag_close'] = '</ul>';
        $config['next_tag_open'] = '<li class="next">';
        $config['next_tag_close'] = '<li>';
        $config['prev_tag_open'] = '<li class="prev">';
        $config['prev_tag_close'] = '<li>';
        $config['cur_tag_open'] = '<li class="active"><a href="#">';
        $config['cur_tag_close'] = '</a><li>';
        $config['first_tag_open'] = '<li>';
        $config['first_tag_close'] = '<li>';
        $config['last_tag_open'] = '<li>';
        $config['last_tag_close'] = '<li>';
        $config['num_tag_open'] = '<li>';
        $config['num_tag_close'] = '</li>';
        
        $this->pagination->initialize($config);
        $this->data["pagination"] = $this->pagination->create_links();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['convert'] = $this->reports_model->getConvertDetailByID($id,$start,$end);
        
        $this->data['id'] = $id;
        $this->data['convert_detail'] = $this->reports_model->getconvertDetail($id,$start,$end,$config["ob_set"],$config["per_page"],$reference_no,$warehouse_id,$created_by,$wid);
        $this->data['biller_idd'] = $this->reports_model->getBiilerByUserID();
        //$this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);
        $this->data['created_by'] =$this->site->getAllUsers();
        $this->data['products'] =$this->site->getAllProducts();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('report_convert_detail')));
        $meta = array('page_title' => lang('report_convert_detail'), 'bc' => $bc);
        $this->page_construct('reports/report_convert_detail', $meta, $this->data);         
    }
    function convertReport_action()
    {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('convert_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('quantity'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('unit'));
            

                    $row = 2;
                    
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getConvertExportByID($id);
                        
                        //$qty += $sc->quantity;
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->product_code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->product_name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->con_qty);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->unit);
    
                        $row++;
                    }

                  /*   $this->excel->getActiveSheet()->getStyle("C" . $row . ":D" . $row)->getBorders()
                        ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                
                    $this->excel->getActiveSheet()->getStyle('C'. $row.':D'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
 */
                //set font bold,font color,font size,font name and background color to excel  by dara
                    $styleArrays = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 10,
                            'name'  => 'Verdana'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428BCA')
                        )
                    );
                    
                    $this->excel->getActiveSheet()->getStyle('A1:D1')->applyFromArray($styleArrays);
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                    // $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                    // $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                    // $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                
                
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'sales_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array(
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )
                        );
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                         array(
                             'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
                         ));
                        
                        $this->excel->getActiveSheet()->getStyle('G2:G' . $row)->getAlignment()->applyFromArray(
                         array(
                             'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT
                         ));
                        
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                        $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                         array(
                             'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                             'wrap'       => true
                         ));
                         $this->excel->getActiveSheet()->getStyle('G2:G' . $row)->getAlignment()->applyFromArray(
                         array(
                             'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                             'wrap'       => true
                         ));
                        ob_clean();
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            }else {
                $this->session->set_flashdata('error', lang("No_sales_report_selected. Please select at least one."));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }
    
    function convertReportDetails_action()
    {
        if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf'){
            
            if (!empty($_POST['val'])) 
            {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('convert_detail'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang("type"));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang("item_code"));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang("item_name"));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang("quantity"));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang("unit"));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang("cost"));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang("total_costs"));
                $this->excel->getActiveSheet()->getStyle('A1:G1')->getFont()->setBold(true);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);

                //set font bold,font color,font size,font name and background color to excel  by dara
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => 'FFFFFF'),
                        'size'  => 11,
                        'name'  => 'Verdana'
                    ),
                    'fill' => array(
                        'type' => PHPExcel_Style_Fill::FILL_SOLID,
                        'color' => array('rgb' => '428BCA')
                    )
                );
            
                $this->excel->getActiveSheet()->getStyle('A1:G1')->applyFromArray($styleArray);
                $row = 2;
                foreach ($_POST['val'] as $id) {

                    // $this->bpas->print_arrays($id);
                    $convert_detail = $this->reports_model->getConvertExportDetails($id,$config["ob_set"],$config["per_page"]);
                    foreach($convert_detail as $convert){
                        // $this->bpas->print_arrays($stock);
                        $query = $this->db->query("
                            SELECT      bpas_convert_items.status,bpas_convert_items.product_code,bpas_convert_items.product_name,bpas_convert_items.quantity,bpas_units.name as unit,bpas_convert_items.cost 
                            From 
                                bpas_convert_items LEFT JOIN bpas_products ON bpas_products.id=bpas_convert_items.product_id LEFT JOIN bpas_units ON bpas_units.id =bpas_products.unit 
                            where 
                                bpas_convert_items.convert_id ='{$convert->id}' 
                                ")->result();

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $convert->date .' >> '.$convert->reference_no .' >> '.$convert->warehouse .' >> '.$convert->username);
                        
                        $this->excel->getActiveSheet()->getStyle('A'. $row)->getFont()->setSize(12)->setBold(true);
                        $this->excel->getActiveSheet()->mergeCells('A'.$row.':G'.$row);
                        $row++;
                        foreach($query as $q){
                            // $this->bpas->print_arrays($q);
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang($q->status));
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $q->product_code);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $q->product_name);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->formatQuantity($q->quantity));
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $q->unit);
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $q->cost);
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $q->cost*$q->quantity);
                            
                            $this->excel->getActiveSheet()->getStyle('F'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $this->excel->getActiveSheet()->getStyle('E'. $row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                            $row++;
                        } 
                    
                        $styleArray1 = array(
                            'borders' => array(
                              'allborders' => array(
                                  'style' => PHPExcel_Style_Border::BORDER_THIN
                              )
                            )
                        );
                        $this->excel->getActiveSheet()->getStyle('A1:G'.$row)->applyFromArray($styleArray1);
                    }
                }
                

                $filename = lang('Report List Using Stock'). date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($this->input->post('form_action') == 'export_pdf') 
                {
                    $styleArray = array(
                        'borders' => array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_THIN))
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                        PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($this->input->post('form_action') == 'export_excel') 
                {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            } else {
                $this->session->set_flashdata('error', $this->lang->line("no_selected. Please select at least one"));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        }
    }
    function audit_bill($warehouse_id = NULL){
        $this->bpas->checkPermissions('suspended_note');

        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
        } else {
            $this->data['warehouses'] = NULL;
            $this->data['warehouse_id'] = $this->session->userdata('warehouse_id');
            $this->data['warehouse'] = $this->session->userdata('warehouse_id') ? $this->site->getWarehouseByID($this->session->userdata('warehouse_id')) : NULL;
        }
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('products'), 'page' => lang('products')), array('link' => '#', 'page' => lang('stock_counts')));
        $meta = array('page_title' => lang('Audit Trail'), 'bc' => $bc);
        $this->page_construct('audit_trail/consumption_list', $meta, $this->data);
    }
    function getCounts($index=null,$warehouse_id = NULL){
        $this->bpas->checkPermissions('suspended_note', TRUE);

        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $customer     = $this->input->get('customer') ? $this->input->get('customer') : null;
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;

       if ((! $this->Owner || ! $this->Admin)) {
            $user = $this->site->getUser();
            $warehouse_id = $user->warehouse_id;
        }
        $delete_link = "<a href='#' class='tip po' title='<b>" . $this->lang->line("delete_adjustment") . "</b>' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('reports/delete/$1') . "'>"
            . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i>Delete</a>";
        $detail="<a href='" . admin_url('reports/modal_view/$1')."'  data-toggle='modal' data-target='#myModal'><i class='fa fa-file-text-o'></i> Detail</a>";
        $edit_link="<a href='" . admin_url('reports/edit/$1')."' class='tip' title='" . lang("edit_room") . "' data-toggle='modal' data-target='#myModal'><i class=\"fa fa-edit\"></i>Edit</a>";
         $action = '<div class="text-center"><div class="btn-group text-left">'
        . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
        . lang('actions') . ' <span class="caret"></span></button>
        <ul class="dropdown-menu pull-right" role="menu">
            <li>' . $detail . '</li>
        </ul>
        </div></div>';
        $this->load->library('datatables');

        $this->datatables->select("audit_bill.audit_id as id, audit_bill.reference, users.first_name,audit_bill.tran_date,warehouses.name,
                IF(change_status =1,'Changed','') AS change_status")
            ->from('audit_bill')
            ->join('users', 'users.id = audit_bill.user_id','left')
            ->join('warehouses', 'warehouses.id = audit_bill.warehouse_id','left');

        if ($warehouse) {
            $this->datatables->where('audit_bill.warehouse_id', $warehouse);
        }
        if ($start_date) {
            $this->datatables->where($this->db->dbprefix('audit_bill') . '.tran_date 
                BETWEEN "' . $start_date . '" and "' . $end_date . '"');
        }
        if ($reference_no) {
            $this->datatables->like('audit_bill.reference', $reference_no, 'both');
        }

        /*
        if ($user) {
            $this->datatables->where('audit_bill.created_by', $user);
        }
        if ($biller) {
            $this->datatables->where('audit_bill.biller_id', $biller);
        }
        if ($customer) {
            $this->datatables->where('audit_bill.customer_id', $customer);
        }
        */

        $this->datatables->add_column('Actions',$action , "id");
        echo $this->datatables->generate();
    }
    public function modal_view($id = null)
    {
        $this->bpas->checkPermissions('index', true);

        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }
   //     $this->data['row_data'] = $this->reports_model->get_consumption($id);
        $this->data['rows'] = $this->reports_model->get_detail($id);
        // var_dump($this->data['rows']);
        // exit();
        $this->load->view($this->theme . 'audit_trail/modal_view', $this->data);
    }
    function inventory_inout()
    {
        $datt =$this->reports_model->getLastDate("purchase_items","date");
        if ($this->input->post('product')) {
            $product = $this->input->post('product');
        }else{
            $product = 0;
        }    
        if ($this->input->post('category')) {
            $category = $this->input->post('category');
        }else{
            $category = 0;
        } 
        if ($this->input->post('biller')) {
            $biller = $this->input->post('biller');
        }else{
            $biller = 0;
        } 
        if ($this->input->post('from_date')) {
            $from_date = $this->bpas->fsd($this->input->post('from_date'));
        }else{
            $from_date = $datt;
        } 
        if($this->input->post('to_date')) {
            $to_date = $this->bpas->fsd($this->input->post('to_date'));
        }else{
            $to_date = $datt;
        } 
        $wid = $this->reports_model->getWareByUserID();
        if ($this->input->post('warehouse')) {
            $warehouse = $this->input->post('warehouse');
        }else{
                $warehouse = 0;
        } 
        
        //$this->bpas->print_arrays($wid);
        $this->data['ware']         = $this->reports_model->getWarePur($wid,$warehouse,$product,$category,$biller);
        $this->data['warefull']     = $this->reports_model->getWareFullByUSER($wid);
        $this->data['biller2']      = $biller;
        $this->data['category2']    = $category;
        $this->data['product2']     = $product;
        $this->data['from_date2']   = trim($from_date);
        $this->data['to_date2']     = trim($to_date);
        $this->data['warehouse2']   = $warehouse;
        $this->data['categories']   = $this->site->getAllCategories();
        $this->data['products']     = $this->site->getAllProducts();
        $this->data['billers']      = $this->site->getAllBiller();
        //Store value in filter pass to export excel & pdf
        $this->data['product1']     = $product;
        $this->data['category1']    = $category;    
        $this->data['biller1']      = $biller;
        $this->data['warehouse1']   = $warehouse;
        $this->data['biller_idd']   = $this->reports_model->getBiilerByUserID();
         
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('inventory_inout'), 'bc' => $bc);
        $this->page_construct('reports/inventory_inout', $meta, $this->data);
    }
    function shops()
    {
        $this->bpas->checkPermissions('project',NULL,'sale_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('shops_report')));
        $meta = array('page_title' => lang('billers_report'), 'bc' => $bc);
        $this->page_construct('reports/shops', $meta, $this->data);
    }
    
    function getShops($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('customers', TRUE);

        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id=companies.id')
                ->where('companies.group_name', 'customer')
                ->order_by('companies.company asc')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatNumber($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatMoney($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatMoney($data_row->balance));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'customers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(grand_total), 0) as total_amount, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.customer_id=companies.id')
                ->where('companies.group_name', 'customer')
                ->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . admin_url('reports/customer_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "id")
                ->unset_column('id');
            echo $this->datatables->generate();

        }

    }
    function getBillers($pdf = NULL, $xls = NULL)
    {
        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('companies') . ".id as id, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(" . $this->db->dbprefix('sales') . ".grand_total), 0) as total_amount, (COALESCE(sum(" . $this->db->dbprefix('sales') . ".grand_total), 0) * (" . $this->db->dbprefix('companies') . ".cf6/100)) as total_earned, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.biller_id=companies.id')
                ->where('companies.group_name', 'biller')
                ->order_by('companies.company asc')
                ->group_by('companies.id');

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('billers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('company'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('email'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('total_earned'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('balance'));

                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatNumber($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatMoney($data_row->total_amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatMoney($data_row->total_earned));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatMoney($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($data_row->balance));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $filename = 'billers_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('companies') . ".id as idd, company, name, phone, email, count(" . $this->db->dbprefix('sales') . ".id) as total, COALESCE(sum(" . $this->db->dbprefix('sales') . ".grand_total), 0) as total_amount, (COALESCE(sum(" . $this->db->dbprefix('sales') . ".grand_total), 0) * (" . $this->db->dbprefix('companies') . ".cf6/100)) as total_earned, COALESCE(sum(paid), 0) as paid, ( COALESCE(sum(grand_total), 0) - COALESCE(sum(paid), 0)) as balance", FALSE)
                ->from("companies")
                ->join('sales', 'sales.biller_id=companies.id')
                ->where('companies.group_name', 'biller')
                ->group_by('companies.id')
                ->add_column("Actions", "<div class='text-center'><a class=\"tip\" title='" . lang("view_report") . "' href='" . admin_url('reports/biller_report/$1') . "'><span class='label label-primary'>" . lang("view_report") . "</span></a></div>", "idd")
                ->unset_column('id');
            echo $this->datatables->generate();

        }

    }
    function biller_report($user_id = NULL, $warehouse_id = NULL)
    {   
        // $this->bpas->print_arrays($warehouse_id);
        $this->bpas->checkPermissions('project', false, 'sale_report');
        if (!$user_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_customer_selected"));
            redirect('reports/customer_report');
        }
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['sales'] = $this->reports_model->getSalesTotals($user_id);
        $this->data['total_sales'] = $this->reports_model->getCustomerSales($user_id);
        $this->data['total_quotes'] = $this->reports_model->getCustomerQuotes($user_id);
        $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        // $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
            
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
            
        } else {
            
            $this->data['warehouses'] = $this->products_model->getUserWarehouses();
            if($warehouse_id){
                $this->data['warehouse_id'] = $warehouse_id;
                $this->data['warehouse'] = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : NULL;
            }else{
                //$this->bpas->print_arrays(str_replace(',', '-',$this->session->userdata('warehouse_id')));
                $this->data['warehouse_id'] = str_replace(',', '-',$this->session->userdata('warehouse_id'));
                $this->data['warehouse'] = $this->session->userdata('warehouse_id') ?$this->products_model->getUserWarehouses() : NULL;
            }
        }
        
        $this->data['date'] = isset($date);
        
        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('project_report')));
        $meta = array('page_title' => lang('customers_report'), 'bc' => $bc);
        $this->page_construct('reports/biller_report', $meta, $this->data);

    }
    function getSellReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('project', NULL, 'sale_report');

        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = NULL;
        }
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        } else {
            $warehouse = NULL;
        }
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if($this->input->get("customer_group")){
            $customer_group = $this->input->get("customer_group");
        } else {
            $customer_group = NULL;
        }        
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($this->input->get('serial')){
            $serial = $this->input->get('serial');
        } else {
            $serial = NULL;
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date);
        }

       
        if ($pdf || $xls) {

            $this->db
                ->select("date, reference_no,customer,biller, GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('sale_items') . ".product_name, ' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')') SEPARATOR '\n') as iname, grand_total, paid, payment_status", FALSE)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies', 'sales.biller_id=companies.id','left')
                ->group_by('sales.id')
                ->order_by('sales.date desc');
            
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user) {
                    $this->db->where('sales.created_by', $user);
                }
            }
            if ($product) {
                $this->db->like('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if($customer_group){
               $this->db->where('companies.customer_group_id', $customer_group);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('payment_status'));

                $row = 2;
                $total = 0;
                $paid = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->payment_status);
                    $total += $data_row->grand_total;
                    $paid += $data_row->paid;
                    $balance += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $filename = 'sales_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            $this->load->library('datatables');

                $this->datatables
                    ->select("date, reference_no, biller, customer,GROUP_CONCAT(CONCAT(" . $this->db->dbprefix('sale_items') . ".product_name, '__', " . $this->db->dbprefix('sale_items') . ".quantity) SEPARATOR '___') as iname, grand_total, paid, (grand_total-paid) as balance, payment_status", FALSE)
                    ->from('sales')
                    ->join('sale_items', 'sale_items.sale_id=sales.id')
                    ->join('warehouses', 'warehouses.id=sales.warehouse_id')
                    ->join('companies', 'companies.id=sales.biller_id')
                    ->where('sales.biller_id', $biller)
                    //->join('customer_groups','customer_groups.id=companies.customer_group_id','inner')
                    ->group_by('sales.id');
            
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user) {
                    $this->datatables->where('sales.created_by', $user);
                }
            }
            if ($user) {
                    $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->like('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if($customer_group){
               $this->datatables->where('companies.customer_group_id', $customer_group);                
            }            
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();

        }

    }
    function shop_report($user_id = NULL)
    {
        $this->bpas->checkPermissions('customers', TRUE);
        if (!$user_id && $_GET['d'] == null) {
            $this->session->set_flashdata('error', lang("no_customer_selected"));
            redirect('reports/shops');
        }

        $this->data['sales'] = $this->reports_model->getSalesTotals($user_id);
        $this->data['total_sales'] = $this->reports_model->getCustomerSales($user_id);
        $this->data['total_quotes'] = $this->reports_model->getCustomerQuotes($user_id);
        $this->data['total_returns'] = $this->reports_model->getCustomerReturns($user_id);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
            
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        
        $this->data['date'] = $date;
        
        $this->data['user_id'] = $user_id;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('billers_report')));
        $meta = array('page_title' => lang('billers_report'), 'bc' => $bc);
        $this->page_construct('reports/shop_report', $meta, $this->data);
    }
    function category_stock($warehouse = NULL)
    {
        $this->bpas->checkPermissions('category_stock',NULL,'chart_report');
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['customers'] = $this->site->getCustomers();
        $this->form_validation->set_rules('user_post', lang("user_post"), 'required');
        
        if ($this->form_validation->run() == true) {
            $biller = $this->input->post('biller');
            $customer = $this->input->post('customer');
            $start_date = $this->input->post('start_date');
            $end_date = $this->input->post('end_date');
            $this->data['stocks'] = $warehouse ? $this->reports_model->getCategoryStockValueById($warehouse,$biller,$customer,$start_date,$end_date) : $this->reports_model->getCategoryStockValue($biller,$customer,$start_date,$end_date);
        }else{
            $this->data['stocks'] = $warehouse ? $this->reports_model->getCategoryStockValueById($warehouse) : $this->reports_model->getCategoryStockValue();
        }
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse'] = $warehouse ? $this->site->getWarehouseByID($warehouse) : NULL;
        $this->data['totals'] = $this->reports_model->getWarehouseTotals($warehouse);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
        $this->page_construct('reports/category_stock', $meta, $this->data);

    }
    
    function cash_chart($accountcode = NULL)
    { 
        $this->bpas->checkPermissions('cash_analysis',NULL,'chart_report');
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('accountcode')) {
            $accountcode = $this->input->get('accountcode');
        }
        $this->data['charts'] = $accountcode ? $this->reports_model->getChartValueById($accountcode) : $this->reports_model->getChartValue();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $accountcode;
        $this->data['chart'] = $accountcode ? $this->site->getChartByID($accountcode) : NULL;
        //$this->data['totals'] = $this->reports_model->getWarehouseTotals($accountcode);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('reports'), 'bc' => $bc);
        $this->page_construct('reports/cash_chart', $meta, $this->data);

    }
    
    function warehouse_products___()
    {
        $this->load->library("pagination");
        $str = "";
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
            $str .="&product=".$product;
        }else{
            $product = null;
        }    
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
            $str .="&category=".$category;
        }else{
            $category = null;
        } 
        
        if ($this->input->get('start_date')) {
            $start_date =$this->bpas->fsd($this->input->get('start_date'));
            $str .="&start_date=".$start_date;
        }else{
            $start_date = NULL;
        } 
        if ($this->input->get('end_date')) {
            $end_date = $this->bpas->fsd($this->input->get('end_date'));
            $str .="&end_date=".$end_date;
        }else{
            $end_date = NULL;
        } 
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
            $str .= "&biller=".$biller ;
        }else{
            $biller = null;
        }

        $row_nums = $this->reports_model->getAllProductsDetailsNUM($product,$category);
        
        $config                             = array();
        $config['suffix']                   = "?v=1".$str;
        $uri                                = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["base_url"]                 = admin_url("reports/warehouse_products/") ;
        $config["total_rows"]               = $row_nums;
        $config["ob_set"]                   = $uri;
        $config["per_page"]                 = 20; 
        $config["uri_segment"]              = 3;
        $config['full_tag_open']            = '<ul class="pagination pagination-sm">';
        $config['full_tag_close']           = '</ul>';
        $config['next_tag_open']            = '<li class="next">';
        $config['next_tag_close']           = '</li>';
        $config['prev_tag_open']            = '<li class="prev">';
        $config['prev_tag_close']           = '</li>';
        $config['cur_tag_open']             = '<li class="active"><a>';
        $config['cur_tag_close']            = '</a></li>';
        $config['first_tag_open']           = '<li>';
        $config['first_tag_close']          = '</li>';
        $config['last_tag_open']            = '<li>';
        $config['last_tag_close']           = '</li>';
        $config['num_tag_open']             = '<li>';
        $config['num_tag_close']            = '</li>';
        $this->pagination->initialize($config);
        $this->data["pagination"]           = $this->pagination->create_links();
        // $this->bpas->print_arrays($start_date.' ########## '.$end_date);
        $this->data['products_details']     = $this->reports_model->getAllProductsDetails($product,$category,$config['per_page'],$config["ob_set"], $start_date, $end_date);
        $wid                                = $this->reports_model->getWareByUserID();
        $this->data['warefull']             = $this->reports_model->getWareFullByUSER($wid);
        $this->data['category2']            = $category;
        $this->data['product2']             = $product;
        $this->data['biller2']              = $biller;
        $this->data['from_date2']           = $start_date;
        $this->data['to_date2']             = $end_date;
        
        $this->data['categories']           = $this->site->getAllCategories();
        $this->data['products']             = $this->site->getAllProducts();
        if($product == null){
            $this->data['product1']         = 0;
        }else{
            $this->data['product1']         = $product;
        }
        if($biller == null){
            $this->data['biller1']          = 0;
        }else{
            $this->data['biller1']          = $biller;
        }
        if($category == null){
            $this->data['category1']        = 0;
        }else{
            $this->data['category1']        = $category;
        }
        if($start_date == null){
            $this->data['start_date1']      = 0;
        }else{
            $this->data['start_date1']      = $start_date;
        }
        if($end_date == null){
            $this->data['end_date1']         = 0;
        }else{
            $this->data['end_date1']         = $end_date;
        }
        if($wid == null){
            $this->data['wid1']             = NULL;
        }else{
            $this->data['wid1']              = $wid;
        }

        $this->data['billers']              = $this->site->getAllBiller();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('warehouse_products'), 'bc' => $bc);
        $this->page_construct('reports/warehouse_products_report', $meta, $this->data);
    }

    function warehouseProductReport___($pdf = null, $xls = null)
    {
        $product    = $this->input->get('product') ? $this->input->get('product') : null;
        $category   = $this->input->get('category') ? $this->input->get('category') : null;
        $biller     = $this->input->get('biller') ? $this->input->get('biller') : null;
        $start_date = $this->input->get('start_date') ? $this->bpas->fsd($this->input->get('start_date')) : null;
        $end_date   = $this->input->get('end_date') ? $this->bpas->fsd($this->input->get('end_date')) : null;

        $wid              = $this->reports_model->getWareByUserID();
        $warefull         = $this->reports_model->getWareFullByUSER($wid);
        $products_details = $this->reports_model->getAllProductsDetails($product, $category, null, null, $start_date, $end_date, true);
        if($xls) {
            if (!empty($products_details)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('warehouse_product_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));

                $col = 'C';
                if ($this->Settings->product_expiry == 1) {
                    $this->excel->getActiveSheet()->SetCellValue($col . '1', lang('expiry_date'));
                    $col++;
                }
                if(is_array($warefull)){
                    foreach($warefull as $w){
                        $this->excel->getActiveSheet()->SetCellValue($col . '1', $w->name);
                        $col++;
                    }
                }
                $this->excel->getActiveSheet()->SetCellValue($col . '1', lang('total'));

                $row = 2; $tt_qty = 0; $arr = array();
                foreach($products_details as $product){
                    if(is_array($warefull)){
                        foreach($warefull as $w){
                            $arr[$w->id] = 0;
                        }
                    }
                }
                foreach($products_details as $product){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $product->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $product->name);
                    $col = 'C';
                    if ($this->Settings->product_expiry == 1) {
                        $this->excel->getActiveSheet()->SetCellValue($col . $row, ($product->expiry != null && $product->expiry != '' ? $this->bpas->hrsd($product->expiry) : 'N/A'));
                        $col++;
                    }
                    if(is_array($warefull)){
                        $tt = 0;
                        foreach($warefull as $w){
                            $qty = $this->reports_model->getQtyByWare($product->id, $w->id, null, $category, $biller, $product->expiry, $wid, $start_date, $end_date);
                            if(isset($qty->wqty)){
                                $this->excel->getActiveSheet()->SetCellValue($col . $row, $this->bpas->formatQuantity($qty->wqty) . PHP_EOL . strip_tags($this->bpas->convert_unit_2_string($product->id, $qty->wqty)));
                                $tt += $qty->wqty;
                            } else {
                                $this->excel->getActiveSheet()->SetCellValue($col . $row, '0.00');
                                $tt += 0;
                            }

                            $arr[$w->id] += (isset($qty->wqty) ? $qty->wqty : 0);
                            $col++;
                        }
                        $tt_qty += $tt;
                    }
                    $this->excel->getActiveSheet()->SetCellValue($col . $row, $this->bpas->formatQuantity($tt) . PHP_EOL . strip_tags($this->bpas->convert_unit_2_string($product->id, $tt)));
                    $row++;   
                }

                $col = 'B';
                if ($this->Settings->product_expiry == 1) $col = 'C';
                $this->excel->getActiveSheet()->SetCellValue($col . $row, lang('total'));
                if(is_array($warefull)){
                    foreach($warefull as $w){
                        $col++;
                        $this->excel->getActiveSheet()->SetCellValue($col . $row, (isset($arr[$w->id]) && count($arr) > 0 ? $arr[$w->id] : '0.00'));
                    }
                }
                $col++;
                $this->excel->getActiveSheet()->SetCellValue($col . $row, $this->bpas->formatDecimal($tt_qty));

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $col = 'C';
                if ($this->Settings->product_expiry == 1) {
                    $this->excel->getActiveSheet()->getColumnDimension($col)->setWidth(20);
                    $col++;
                }
                if(is_array($warefull)){
                    foreach($warefull as $w){
                        $this->excel->getActiveSheet()->getColumnDimension($col)->setWidth(20);
                        $col++;
                    }
                }
                $this->excel->getActiveSheet()->getColumnDimension($col)->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'warehouse_products_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }

            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        }
    }

    function warehouse_products()
    {
        $products   = $this->site->getAllProducts();
        $warehouses = $this->site->getAllWarehouses();
        // if (!empty($products)) {
        //     foreach ($products as $product) {
        //         foreach ($warehouses as $warehouse) {
        //             if($this->site->checkSyncStock($product->id, $warehouse->id)) {
        //                 $this->site->syncQuantity_13_05_21($product->id);
        //             }   
        //         }
        //     }
        // }
        $this->load->library("pagination");
        $str = "";
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
            $str .="&product=".$product;
        }else{
            $product = null;
        }    
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
            $str .="&category=".$category;
        }else{
            $category = null;
        } 
        
        if ($this->input->get('start_date')) {
            $start_date =$this->bpas->fsd($this->input->get('start_date'));
            $str .="&start_date=".$start_date;
        }else{
            $start_date = NULL;
        } 
        if ($this->input->get('end_date')) {
            $end_date = $this->bpas->fsd($this->input->get('end_date'));
            $str .="&end_date=".$end_date;
        }else{
            $end_date = NULL;
        } 
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
            $str .= "&biller=".$biller ;
        }else{
            $biller = null;
        }

        $row_nums = $this->reports_model->getAllProductsDetailsNUM($product,$category);
        
        $config                             = array();
        $config['suffix']                   = "?v=1".$str;
        $uri                                = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;
        $config["base_url"]                 = admin_url("reports/warehouse_products/") ;
        $config["total_rows"]               = $row_nums;
        $config["ob_set"]                   = $uri;
        $config["per_page"]                 = 100; 
        $config["uri_segment"]              = 4;
        $config['full_tag_open']            = '<ul class="pagination pagination-sm">';
        $config['full_tag_close']           = '</ul>';
        $config['next_tag_open']            = '<li class="next">';
        $config['next_tag_close']           = '</li>';
        $config['prev_tag_open']            = '<li class="prev">';
        $config['prev_tag_close']           = '</li>';
        $config['cur_tag_open']             = '<li class="active"><a>';
        $config['cur_tag_close']            = '</a></li>';
        $config['first_tag_open']           = '<li>';
        $config['first_tag_close']          = '</li>';
        $config['last_tag_open']            = '<li>';
        $config['last_tag_close']           = '</li>';
        $config['num_tag_open']             = '<li>';
        $config['num_tag_close']            = '</li>';
        $this->pagination->initialize($config);
        $this->data["pagination"]           = $this->pagination->create_links();
        // $this->bpas->print_arrays($start_date.' ########## '.$end_date);
        $this->data['products_details']     = $this->reports_model->getAllProductsDetails($product, $category, $config['per_page'], $config["ob_set"], $start_date, $end_date);
        $wid                                = $this->reports_model->getWareByUserID();
        $this->data['warefull']             = $this->reports_model->getWareFullByUSER($wid) != false ? $this->reports_model->getWareFullByUSER($wid) : $this->reports_model->getAllWarehouses();
        $this->data['category2']            = $category;
        $this->data['product2']             = $product;
        $this->data['biller2']              = $biller;
        $this->data['from_date2']           = $start_date;
        $this->data['to_date2']             = $end_date;
        
        $this->data['categories']           = $this->site->getAllCategories();
        $this->data['products']             = $this->site->getAllProducts();
        if($product == null){
            $this->data['product1']         = 0;
        }else{
            $this->data['product1']         = $product;
        }
        if($biller == null){
            $this->data['biller1']          = 0;
        }else{
            $this->data['biller1']          = $biller;
        }
        if($category == null){
            $this->data['category1']        = 0;
        }else{
            $this->data['category1']        = $category;
        }
        if($start_date == null){
            $this->data['start_date1']      = 0;
        }else{
            $this->data['start_date1']      = $start_date;
        }
        if($end_date == null){
            $this->data['end_date1']         = 0;
        }else{
            $this->data['end_date1']         = $end_date;
        }
        if($wid == null){
            $this->data['wid1']             = NULL;
        }else{
            $this->data['wid1']              = $wid;
        }

        $this->data['billers']              = $this->site->getAllBiller();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('reports')));
        $meta = array('page_title' => lang('warehouse_products'), 'bc' => $bc);
        $this->page_construct('reports/warehouse_products_report', $meta, $this->data);
    }

    function warehouseProductReport($pdf = null, $xls = null)
    {
        $product    = $this->input->get('product') ? $this->input->get('product') : null;
        $category   = $this->input->get('category') ? $this->input->get('category') : null;
        $biller     = $this->input->get('biller') ? $this->input->get('biller') : null;
        $start_date = $this->input->get('start_date') ? $this->bpas->fsd($this->input->get('start_date')) : null;
        $end_date   = $this->input->get('end_date') ? $this->bpas->fsd($this->input->get('end_date')) : null;

        $wid              = $this->reports_model->getWareByUserID();
        $warefull         = $this->reports_model->getWareFullByUSER($wid) != false ? $this->reports_model->getWareFullByUSER($wid) : $this->reports_model->getAllWarehouses();
        $products_details = $this->reports_model->getAllProductsDetails($product, $category, null, null, $start_date, $end_date, true);
        if($xls) {
            if (!empty($products_details)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('warehouse_product_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));

                $col = 'C';
                if ($this->Settings->product_expiry == 1) {
                    $this->excel->getActiveSheet()->SetCellValue($col . '1', lang('expiry_date'));
                    $col++;
                }
                if(is_array($warefull)){
                    foreach($warefull as $w){
                        $this->excel->getActiveSheet()->SetCellValue($col . '1', $w->name);
                        $col++;
                    }
                }
                $this->excel->getActiveSheet()->SetCellValue($col . '1', lang('total'));

                $row = 2; $tt_qty = 0; $arr = array();
                foreach($products_details as $product){
                    if(is_array($warefull)){
                        foreach($warefull as $w){
                            $arr[$w->id] = 0;
                        }
                    }
                }
                foreach($products_details as $product){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $product->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $product->name);
                    $col = 'C';
                    if ($this->Settings->product_expiry == 1) {
                        $this->excel->getActiveSheet()->SetCellValue($col . $row, ($product->expiry != null && $product->expiry != '' ? $this->bpas->hrsd($product->expiry) : 'N/A'));
                        $col++;
                    }
                    if(is_array($warefull)){
                        $tt = 0;
                        foreach($warefull as $w){
                            $qty = $this->reports_model->getQtyByWare($product->id, $w->id, null, $category, $biller, $product->expiry, $wid, $start_date, $end_date);
                            if(isset($qty->wqty)){
                                $this->excel->getActiveSheet()->SetCellValue($col . $row, $this->bpas->formatQuantity($qty->wqty) . PHP_EOL . strip_tags($this->bpas->convert_unit_2_string($product->id, $qty->wqty)));
                                $tt += $qty->wqty;
                            } else {
                                $this->excel->getActiveSheet()->SetCellValue($col . $row, '0.00');
                                $tt += 0;
                            }

                            $arr[$w->id] += (isset($qty->wqty) ? $qty->wqty : 0);
                            $col++;
                        }
                        $tt_qty += $tt;
                    }
                    $this->excel->getActiveSheet()->SetCellValue($col . $row, $this->bpas->formatQuantity($tt) . PHP_EOL . strip_tags($this->bpas->convert_unit_2_string($product->id, $tt)));
                    $row++;   
                }

                $col = 'B';
                if ($this->Settings->product_expiry == 1) $col = 'C';
                $this->excel->getActiveSheet()->SetCellValue($col . $row, lang('total'));
                if(is_array($warefull)){
                    foreach($warefull as $w){
                        $col++;
                        $this->excel->getActiveSheet()->SetCellValue($col . $row, (isset($arr[$w->id]) && count($arr) > 0 ? $arr[$w->id] : '0.00'));
                    }
                }
                $col++;
                $this->excel->getActiveSheet()->SetCellValue($col . $row, $this->bpas->formatDecimal($tt_qty));

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $col = 'C';
                if ($this->Settings->product_expiry == 1) {
                    $this->excel->getActiveSheet()->getColumnDimension($col)->setWidth(20);
                    $col++;
                }
                if(is_array($warefull)){
                    foreach($warefull as $w){
                        $this->excel->getActiveSheet()->getColumnDimension($col)->setWidth(20);
                        $col++;
                    }
                }
                $this->excel->getActiveSheet()->getColumnDimension($col)->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'warehouse_products_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }

            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        }
    }

    function report_sale_top($biller_id = NULL)
    {
        $this->bpas->checkPermissions('report_sale',NULL,'sale_report');
        
        $user = $this->site->getUser();
        if($biller_id != NULL){
            $this->data['biller_id'] = $biller_id;
        }else{
            if($user->biller_id){
                $this->data['biller_id'] = $user->biller_id;
            }else{
                $this->data['biller_id'] = "";
            }
        }
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
        $this->data['products'] = $this->site->getProducts();
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
        $this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_report')));
        $meta = array('page_title' => lang('sales_report'), 'bc' => $bc);
        $this->page_construct('reports/report_sale_top', $meta, $this->data);
    }
    
    function getSaleTop()
    {    
        if ($this->input->get('product')) {
            $product = $this->input->get('product');
        } else {
            $product = null;
        }
        if ($this->input->get('category')) {
            $category = $this->input->get('category');
        } else {
            $category = null;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->bpas->fld($this->input->get('start_date')) . ' 00:00:00';
        } else {
            $start_date = null;
        }   
        if ($this->input->get('end_date')) {
            $end_date = $this->bpas->fld($this->input->get('end_date')) . ' 23:59:59';
        } else {
            $end_date = null;
        }  
        $sq = " ( SELECT 
                    {$this->db->dbprefix('costing')}.sale_item_id, 
                    {$this->db->dbprefix('costing')}.product_id, 
                    SUM(IF({$this->db->dbprefix('products')}.type = 'service', {$this->db->dbprefix('costing')}.service_cost, {$this->db->dbprefix('costing')}.purchase_unit_cost) * {$this->db->dbprefix('costing')}.quantity) AS cost_amount
                FROM {$this->db->dbprefix('costing')} 
                LEFT JOIN {$this->db->dbprefix('products')} ON {$this->db->dbprefix('products')}.id = {$this->db->dbprefix('costing')}.product_id
                GROUP BY {$this->db->dbprefix('costing')}.sale_item_id ) bpas_COST ";

        $this->load->library('datatables');

        // --- Old ---
        // $this->datatables
        //     ->select("
        //     bpas_sale_items.product_id, 
        //     bpas_sales.date,
        //     sale_items.product_code, 
        //     sale_items.product_name, 
        //     bpas_categories.name as category,  
        //     if(bpas_sale_items.option_id, bpas_product_variants.name,bpas_units.name) AS NAME,
        //     SUM(COALESCE(bpas_sale_items.quantity,0)) as quantity,
        //     IF (bpas_sale_items.option_id,( (bpas_sale_items.unit_price * bpas_product_variants.qty_unit) * SUM(COALESCE (bpas_sale_items.quantity, 0)) ), (bpas_sale_items.unit_price * SUM(COALESCE (bpas_sale_items.quantity, 0)))) AS cost_amount,
        //     SUM(bpas_sale_items.unit_price * (COALESCE(bpas_sale_items.quantity,0))) as price_amount,
        //     (SUM(bpas_sale_items.unit_price * (COALESCE(bpas_sale_items.quantity,0)))) - (IF (bpas_sale_items.option_id,((bpas_sale_items.unit_price * bpas_product_variants.qty_unit) * SUM(COALESCE (bpas_sale_items.quantity, 0))),(bpas_sale_items.unit_price * SUM(COALESCE (bpas_sale_items.quantity, 0)))))", FALSE )
        //     ->from('bpas_sale_items') 
        //     ->join('bpas_sales','bpas_sales.id=bpas_sale_items.sale_id','left')
        //     ->join('bpas_products','bpas_products.id=bpas_sale_items.product_id','left')
        //     ->join('bpas_categories','bpas_categories.id=bpas_products.category_id','left')
        //     ->join('bpas_units','bpas_units.id=bpas_products.unit','left')
        //     ->join('bpas_product_variants','bpas_sale_items.option_id = bpas_product_variants.id','left')
        //     ->group_by('bpas_sale_items.product_id')
        //     ->order_by('quantity','DESC'); 

        $this->datatables
        ->select("
                bpas_sale_items.product_id, 
                bpas_sales.date,
                sale_items.product_code, 
                sale_items.product_name, 
                bpas_categories.name as category,  
                if(bpas_sale_items.option_id, bpas_product_variants.name,bpas_units.name) AS NAME,
                SUM(COALESCE(bpas_sale_items.quantity,0)) as quantity,
                SUM(COALESCE(bpas_COST.cost_amount, 0)) AS cost_amount,
                SUM(COALESCE(bpas_sale_items.subtotal, 0)) as price_amount,
                (
                    SUM(COALESCE(bpas_sale_items.subtotal, 0)) - 
                    SUM(COALESCE(bpas_COST.cost_amount, 0))
                )
                ", FALSE )
            ->from('bpas_sale_items') 
            ->join('bpas_sales','bpas_sales.id=bpas_sale_items.sale_id','left')
            ->join($sq,'COST.sale_item_id=bpas_sale_items.id','left')
            ->join('bpas_products','bpas_products.id=bpas_sale_items.product_id','left')
            ->join('bpas_categories','bpas_categories.id=bpas_products.category_id','left')
            ->join('bpas_units','bpas_units.id=bpas_products.unit','left')
            ->join('bpas_product_variants','bpas_sale_items.option_id = bpas_product_variants.id','left')
            ->group_by('bpas_sale_items.product_id')
            ->order_by('quantity','DESC'); 

        if ($product) {
           $this->datatables->where('bpas_sale_items.product_id', $product);                
        }           
        if ($category) { 
           $this->datatables->where('bpas_products.category_id', $category); 
        }
        if ($start_date) {
            $this->datatables->where($this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            // $this->datatables->where("DATE_FORMAT(bpas_sales.date,'%Y-%m-%d') >='{$start_date}' AND DATE_FORMAT(bpas_sales.date,'%Y-%m-%d') <= '{$end_date}'");
        }
        echo $this->datatables->generate();         
    }
    
    function sale_top_action()
    {
        $this->form_validation->set_rules('form_action', lang("form_action"), 'required');
        if ($this->form_validation->run() == true) {

            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->settings_model->deleteCurrency($id);
                    }
                    $this->session->set_flashdata('message', lang("currencies_deleted"));
                    redirect($_SERVER["HTTP_REFERER"]);
                }

                if ($this->input->post('form_action') == 'export_excel' || $this->input->post('form_action') == 'export_pdf') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('report_top_sale'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('category'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('quantity')); 
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('unit'));

                    $row = 2;
                    $total_qty = 0;
                    $total = 0;
                    $paid = 0;
                    $balance = 0;
                    $total_cost = 0;
                    if($this->input->post('start_date')){
                        $start_date = $this->bpas->fld($this->input->post('start_date'));
                    }else{
                        $start_date = null;
                    }   
                    if($this->input->post('end_date')){
                        $end_date = $this->bpas->fld($this->input->post('end_date'));
                    }else{
                        $end_date = null;
                    }  
                    foreach ($_POST['val'] as $id) {
                        $sc = $this->reports_model->getsale_top_export($id, $start_date, $end_date);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $sc->product_code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $sc->product_name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $sc->category);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sc->quantity); 
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $sc->name); 
                        $row++;
                        $total_qty+=$sc->quantity;
                    }
                    $this->excel->getActiveSheet()->getStyle('A')->getAlignment()->applyFromArray(
                        array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,)
                    );
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, lang('grand_total'));
                    $this->excel->getActiveSheet()->mergeCells("A".($row).":C".($row)); 
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row,$total_qty);
                     
                    //$this->excel->getActiveSheet()->getStyle("E" . $row . ":G" . $row)->getBorders()
                        //->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                    // $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total_qty);
                    // $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total_cost);
                    //$this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatMoney($total));
                    //$this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatMoney($paid));
                    //$this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatMoney($balance));
                    //$this->excel->getActiveSheet()->getStyle('E'. $row.':G'.$row)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                //set font bold,font color,font size,font name and background color to excel  by dara
                    $styleArrays = array(
                        'font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 10,
                            'name'  => 'Verdana'
                        ),
                        'fill' => array(
                            'type' => PHPExcel_Style_Fill::FILL_SOLID,
                            'color' => array('rgb' => '428BCA')
                        )
                    );
                    
                    $this->excel->getActiveSheet()->getStyle('A1:E1')->applyFromArray($styleArrays);
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15); 
                    // $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                    // $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                    // $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                
                
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'sales_report_' . date('Y_m_d_H_i_s');
                    if ($this->input->post('form_action') == 'export_pdf') {
                        $styleArray = array(
                            'borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )
                        );
                        $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                           
                        $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                        require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                        $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                        $rendererLibrary = 'MPDF';
                        $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                        if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                            die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                                PHP_EOL . ' as appropriate for your directory structure');
                        }

                        header('Content-Type: application/pdf');
                        header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                        return $objWriter->save('php://output');
                    }
                    if ($this->input->post('form_action') == 'export_excel') {
                        $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                        $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->applyFromArray(
                         array(
                             'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                             'wrap'       => true
                         ));
                         $this->excel->getActiveSheet()->getStyle('G2:G' . $row)->getAlignment()->applyFromArray(
                         array(
                             'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
                             'wrap'       => true
                         ));
                        ob_clean();
                        header('Content-Type: application/vnd.ms-excel');
                        header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                        header('Cache-Control: max-age=0');

                        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                        return $objWriter->save('php://output');
                    }

                    redirect($_SERVER["HTTP_REFERER"]);
                }
            }else {
                $this->session->set_flashdata('error', lang("No_sales_report_selected. Please select at least one."));
                redirect($_SERVER["HTTP_REFERER"]);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER["HTTP_REFERER"]);
        }
    }
    function transfers_report()
    {
        $this->load->library("pagination");
         $datt =$this->reports_model->getLastDate("bpas_transfers","date");
        /*if($this->input->post('to_warehouse')){
             $to_warehouse =$this->input->post('to_warehouse');
        }else{
            $to_warehouse =null;
        } 
        if($this->input->post('from_warehouse')){
             $from_warehouse =$this->input->post('from_warehouse');
        }else{
            $from_warehouse =null;
        } */
        $wid = $this->reports_model->getWareByUserID();
        $str="";
        $to_warehouse = "";
        $from_warehouse = "";
        $product = "";
        $reference_no  = "";
        $start_date = "";
        $end_date = "";
        $start_ = "";
        $end = "";
        $start = "";
        $end_ = "";
        if($this->input->get('to_warehouse')){
            $to_warehouse =$this->input->get('to_warehouse');
            $str.="&to_warehouse=".$to_warehouse;
            $this->data['to_warehouse']= $to_warehouse;
        }
        if($this->input->get('from_warehouse')){
            $from_warehouse =$this->input->get('from_warehouse');
            $str.="&from_warehouse=".$from_warehouse;
            $this->data['from_warehouse']= $from_warehouse;
        }
        if($this->input->get('reference_no')){
            $reference_no =$this->input->get('reference_no');
            $str.="&reference_no=".$reference_no;
            $this->data['reference_no']= $reference_no;
        }
        if($this->input->get('product')){
            $product =$this->input->get('product');
            $str.="&product=".$product;
            $this->data['product']= $product;
        }
        if($this->input->get('start_date')){
            $start_date =$this->bpas->fsd($this->input->get('start_date'));
            $str.="&start_date=".$start_date;
            $this->data['start_date']= $start_date;
        }else{
            $start_date = $datt;
            $this->data['start_date']=$datt;
        }
        if($this->input->get('end_date')){
            $end_date =$this->bpas->fsd($this->input->get('end_date'));
            $str.="&end_date=".$end_date;
            $this->data['end_date']= $end_date;
        }else{
            $end_date = $datt;
            $this->data['end_date']=$datt;
        }       
        
        $this->db->select("transfers.*");
        if($reference_no){
            $this->db->where("bpas_transfers.transfer_no",$reference_no);
        }   
        if($to_warehouse){
            $this->db->where("transfers.from_warehouse_id",$from_warehouse) 
                ->where("transfers.to_warehouse_id",$to_warehouse);
        }
        if($start_date){
            $this->db->where("date_format(bpas_transfers.date,'%Y-%m-%d') BETWEEN '$start_date' AND '$end_date'");
        }       
        $this->db->group_by('transfer_no');
        $transfer_num = $this->db->get('bpas_transfers')->num_rows();
        

        $config = array();
        $config['suffix'] = "?v=1".$str;
        $config["base_url"] = admin_url() . "reports/transfers_report/";
        $config["total_rows"] = $transfer_num;
        $config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] = 50; 
        $config["uri_segment"] = 3; 
        $config['full_tag_open'] = '<ul class="pagination pagination-sm">';
        $config['full_tag_close'] = '</ul>';
        $config['next_tag_open'] = '<li class="next">';
        $config['next_tag_close'] = '<li>';
        $config['prev_tag_open'] = '<li class="prev">';
        $config['prev_tag_close'] = '<li>';
        $config['cur_tag_open'] = '<li class="active"><a>';
        $config['cur_tag_close'] = '</a><li>';
        $config['first_tag_open'] = '<li>';
        $config['first_tag_close'] = '<li>';
        $config['last_tag_open'] = '<li>';
        $config['last_tag_close'] = '<li>';
        $config['num_tag_open'] = '<li>';
        $config['num_tag_close'] = '</li>';

        $this->pagination->initialize($config);
        $this->data["pagination"] = $this->pagination->create_links();  
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['transfers'] = $this->reports_model->getTransfersReport($reference_no,$start_date,$end_date,$from_warehouse,$to_warehouse,$product,$config["ob_set"],$config["per_page"],$wid);

        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);
        $this->data['warehousesa'] = $this->site->getAllWarehouses();
        $this->data['driver'] = $this->site->getDriverByGroupId();
        $this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
        $this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('transfers_report')));
        $meta = array('page_title' => lang('transfers_report'), 'bc' => $bc);
        $this->page_construct('reports/transfers_report', $meta, $this->data);
    }
    public function transfer_details()
    {
        $this->bpas->checkPermissions('transfers', TRUE);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('transfer_details_report')));
        $meta = array('page_title' => lang('transfer_details_report'), 'bc' => $bc);
        $this->page_construct('reports/transfer_details', $meta, $this->data);
    }
    
    public function getTransferDetailReport($pdf = null , $xls = null)
    {
        $this->bpas->checkPermissions('transfers', TRUE);
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $to_warehouse = $this->input->get('to_warehouse') ? $this->input->get('to_warehouse') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date,false,1);
        }   
        if ($xls) {
            $this->db
                            ->select("
                            transfers.date,
                            transfer_no,
                            companies.company,
                            from_warehouse_name,
                            to_warehouse_name,
                            CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
                            transfer_items.product_name,
                            convert_qty(".$this->db->dbprefix('transfer_items').".product_id,".$this->db->dbprefix('transfer_items').".quantity) as qty,
                            transfers.status,
                            transfers.id", FALSE)
                            ->from('transfers')
                            ->join('companies', 'companies.id=transfers.from_biller', 'left')
                            ->join('users','users.id = transfers.created_by','left')
                            ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'inner')
                            ->group_by('transfer_items.id');
            if ($user) {
                $this->db->where('transfers.created_by', $user);
            }
            if ($product) {
                $this->db->where('transfer_items.product_id', $product);
            }
            if ($warehouse) {
                $this->db->where('transfers.from_warehouse_id', $warehouse);
            }
            if ($to_warehouse) {
                $this->db->where('transfers.to_warehouse_id', $to_warehouse);
            }
            if ($reference_no) {
                $this->db->where('transfers.transfer_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('transfers').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
                $warehouse_ids = str_replace(']',')','('.$warehouse_ids.')');
                $this->db->where('(transfers.from_warehouse_id IN '.$warehouse_ids.' OR transfers.to_warehouse_id IN '.$warehouse_ids.')');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
                $this->db->where("(".$this->db->dbprefix("transfers").".from_biller = ".$this->session->userdata('biller_id')." OR ".$this->db->dbprefix("transfers").".to_biller_id = ".$this->session->userdata('biller_id').")");
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('transfer_deatails_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse').' ('.lang('from').')');
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse').' ('.lang('to').')');
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
                
                $row = 2;
                
                foreach ($data as $data_row){

                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->transfer_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->from_warehouse_name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->to_warehouse_name);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->remove_tag($data_row->qty));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
                    
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
            
                $filename = 'transfer_details_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
            
        } else{  
            $this->load->library('datatables');
            $this->datatables
                            ->select("
                            transfers.date,
                            transfer_no,
                            companies.company,
                            from_warehouse_name,
                            to_warehouse_name,
                            CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by,
                            transfer_items.product_name,
                            convert_qty(".$this->db->dbprefix('transfer_items').".product_id,".$this->db->dbprefix('transfer_items').".quantity) as qty,
                            transfers.status,
                            transfers.id", FALSE)
                            ->from('transfers')
                            ->join('companies', 'companies.id=transfers.from_biller', 'left')
                            ->join('users','users.id = transfers.created_by','left')
                            ->join('transfer_items', 'transfer_items.transfer_id=transfers.id', 'inner')
                            ->group_by('transfer_items.id');
            if ($user) {
                $this->datatables->where('transfers.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('transfer_items.product_id', $product);
            }
            if ($warehouse) {
                $this->datatables->where('transfers.from_warehouse_id', $warehouse);
            }
            if ($to_warehouse) {
                $this->datatables->where('transfers.to_warehouse_id', $to_warehouse);
            }
            if ($reference_no) {
                $this->datatables->where('transfers.transfer_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('transfers').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
                $warehouse_ids = str_replace(']',')','('.$warehouse_ids.')');
                $this->datatables->where('(transfers.from_warehouse_id IN '.$warehouse_ids.' OR transfers.to_warehouse_id IN '.$warehouse_ids.')');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) { 
                $this->datatables->where("(".$this->db->dbprefix("transfers").".biller_id = ".$this->session->userdata('biller_id')." OR ".$this->db->dbprefix("transfers").".to_biller = ".$this->session->userdata('biller_id').")");
            }
            
            echo $this->datatables->generate();
            
        }
    }
    function list_using_stock_report($pdf = null, $xls = null)
    {
        $this->load->library("pagination");
        $str="";
        if(!$this->Admin && !$this->Owner) {
            $wid = $this->reports_model->getWareByUserID();
        } else {
            $wid = null;
        }
        $start = "";
        $end = "";
        $datt =$this->reports_model->getLastDate("bpas_enter_using_stock","date");
        if($this->input->get('reference_no')){
             $reference_no = $this->input->get('reference_no');
             $str.="&reference_no=".$reference_no;
             $this->data['reference_no'] =$reference_no;
        }else{
             $reference_no =null;
        } 
        if($this->input->get('employee')){
             $employee = $this->input->get('employee');
             $str.="&employee=".$employee;
             $this->data['employee'] =$employee;
        }else{
             $employee =null;
        }
        if($this->input->get('biller')){
             $biller = $this->input->get('biller');
             $str.="&biller=".$biller;
             $this->data['biller'] =$biller;
        }else{
             $biller =null;
        }
        if($this->input->get('warehouse')){
             $warehouse =$this->input->get('warehouse');
             $str.="&warehouse=".$warehouse;
             $this->data['warehouse']=$warehouse;
        }else{
            $warehouse =null;
        }
        if($this->input->get('start_date')){
             $start_date =$this->bpas->fsd($this->input->get('start_date'));
             $str.="&start_date=".$start_date;
             $this->data['start_date'] =$start_date;
        }else{
            $start_date =$datt;
            $this->data['start_date'] =$datt;
        }
        if($this->input->get('end_date')){
             $end_date =$this->bpas->fsd($this->input->get('end_date'));
             $str.="&end_date=".$end_date;
             $this->data['end_date'] =$end_date;
        }else{
            $end_date =$datt;
             $this->data['end_date'] =$end_date;
        }
        
        $this->db->select("enter_using_stock.*");
        if($employee){
            $this->db->where('bpas_enter_using_stock.employee_id',$employee);
        }
        if($warehouse){
            $this->db->where('bpas_enter_using_stock.warehouse_id',$warehouse);
        }else{
            if($wid){
                $this->db->where("bpas_enter_using_stock.warehouse_id IN ($wid)");
            }
        }
        if($reference_no){
            $this->db->where('bpas_enter_using_stock.reference_no',$reference_no);
        }
        if($biller){
            $this->db->where('bpas_enter_using_stock.shop',$biller);
        }
        if($start_date){
            $this->db->where("date_format(bpas_enter_using_stock.date,'%Y-%m-%d') BETWEEN '{$start_date}' AND '{$end_date}'");
        }
        $this->db->group_by('reference_no');
        $sales_nums = $this->db->get('enter_using_stock')->num_rows();
        
        $config = array();
        $config['suffix'] = "?v=1".$str;
        $config["base_url"] = admin_url() . "reports/list_using_stock_report/";
        $config["total_rows"] = $sales_nums;
        $config["ob_set"] = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $config["per_page"] = 50; 
        $config["uri_segment"] = 3;
        $config['full_tag_open'] = '<ul class="pagination pagination-sm">';
        $config['full_tag_close'] = '</ul>';
        $config['next_tag_open'] = '<li class="next">';
        $config['next_tag_close'] = '<li>';
        $config['prev_tag_open'] = '<li class="prev">';
        $config['prev_tag_close'] = '<li>';
        $config['cur_tag_open'] = '<li class="active"><a href="#">';
        $config['cur_tag_close'] = '</a><li>';
        $config['first_tag_open'] = '<li>';
        $config['first_tag_close'] = '<li>';
        $config['last_tag_open'] = '<li>';
        $config['last_tag_close'] = '<li>';
        $config['num_tag_open'] = '<li>';
        $config['num_tag_close'] = '</li>';
        
        $this->pagination->initialize($config);
        $this->data["pagination"] = $this->pagination->create_links();  
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['using_stock'] = $this->reports_model->getUsingStock($reference_no,$employee,$biller,$warehouse,$wid,$start_date,$end_date,$config["ob_set"],$config["per_page"]);
        $this->data['employee'] = $this->reports_model->getStaff();
        if(!$this->Admin && !$this->Owner) {
            $this->data['warehouses'] = $this->reports_model->getWareFullByUSER($wid);
        } else {
            $this->data['warehouses'] = $this->site->getAllWarehouses();
        }
        $this->data['billers'] = $this->reports_model->getBillers();
        $this->data['biller_idd'] = $this->reports_model->getBiilerByUserID();
        $this->data['customer_groups'] = $this->companies_model->getAllCustomerGroups();
        $this->data['customers'] = $this->site->getCustomers();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' =>admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' =>lang('report_list_using_stock')));
        $meta = array('page_title' => lang('report_list_using_stock'), 'bc' => $bc);
        $this->page_construct('reports/enter_using_stock_report', $meta, $this->data);  
    }

    function export_using_stock_report($pdf = null, $xls = null)
    {
        if($xls || $pdf) {
            $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
            $employee     = $this->input->get('employee') ? $this->input->get('employee') : null;
            $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
            $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
            $start_date   = $this->input->get('start_date') ? $this->bpas->fsd($this->input->get('start_date')) : null;
            $end_date     = $this->input->get('end_date') ? $this->bpas->fsd($this->input->get('end_date')) : null;

            $using_stock = $this->reports_model->getUsingStock($reference_no, $employee, $biller, $warehouse, null, $start_date, $end_date, null, null);
            if(!empty($using_stock)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('using_stock_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('item'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('category_expense'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('description'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total'));
                
                $row     = 2;
                $balance = 0;
                $total_balance = 0;
                foreach ($using_stock as $stock) {
                    $query = $this->db->query("
                        SELECT
                            bpas_enter_using_stock_items.*, bpas_products.NAME AS product_name,
                            bpas_expense_categories.NAME AS exp_cate_name,
                            bpas_enter_using_stock_items.unit AS unit_name,
                            bpas_products.cost,
                            bpas_position.NAME AS pname,
                            bpas_reasons.description AS rdescription,
                            bpas_product_variants.qty_unit AS variant_qty,
                            bpas_product_variants.name as var_name,
                            bpas_enter_using_stock.type
                        FROM
                            bpas_enter_using_stock_items
                        LEFT JOIN bpas_enter_using_stock ON bpas_enter_using_stock.reference_no = bpas_enter_using_stock_items.reference_no
                        LEFT JOIN bpas_products ON bpas_products.CODE = bpas_enter_using_stock_items.CODE
                        LEFT JOIN bpas_position ON bpas_enter_using_stock_items.description = bpas_position.id 
                        LEFT JOIN bpas_reasons ON bpas_enter_using_stock_items.reason = bpas_reasons.id
                        LEFT JOIN bpas_product_variants ON bpas_enter_using_stock_items.option_id = bpas_product_variants.id
                        LEFT JOIN bpas_expense_categories ON bpas_enter_using_stock_items.exp_cate_id = bpas_expense_categories.id where bpas_enter_using_stock_items.reference_no='{$stock->refno}' 
                    ")->result();

                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':G' . $row)->SetCellValue('A' . $row, $stock->refno ." >> ".$this->bpas->hrld($stock->date) ." >> ".$stock->company ." >> ".$stock->warehouse_name ." >> ".$stock->username);
                    $row++; 
                    foreach($query as $q) { 
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, ($q->product_name ."(".$q->code .")"));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $q->exp_cate_name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $q->rdescription);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, ($q->type == 'use' ? $this->bpas->formatQuantity($q->qty_use) : $this->bpas->formatQuantity(-1*$q->qty_use)));
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, (!empty($q->var_name)?$q->var_name :$q->unit_name));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, ($q->type == 'use' ? $this->bpas->formatMoney($q->cost*$q->qty_use) : $this->bpas->formatMoney($q->cost*(-1*$q->qty_use))));
                        $row++; 
                    }
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'using_stock_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
        }
    }

    function saleman()
    {
        $this->bpas->checkPermissions('saleman',NULL,'sale_report');
        $this->load->model('reports_model');
        $datt =$this->reports_model->getLastDate("sales","date");
        if(isset($_GET['d']) != ""){
            $date = $_GET['d'];
            $this->data['date'] = $date;
        }
            if (!$this->input->POST('start_date')) {
                $this->data['start_date'] = $datt;
            } 
            if (!$this->input->POST('end_date')) {
                $this->data['end_date'] = $datt;
            }
        if($this->Owner || $this->Admin){
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }else{
            $this->data['billers'] = $this->site->getBillerByID($this->session->userdata('biller_id'));
        }
        $settings = $this->site->getSettings();
        $this->data['saleman']       = $this->site->getAllSalemans($this->Settings->group_saleman_id);
        $this->data['users']         = $this->reports_model->getStaff();
        $this->data['warehouses']    = $this->site->getAllWarehouses();
        $this->data['billers']       = $this->site->getAllCompanies('biller');
        $this->data['group_saleman_id']     = $this->site->getSettings()->group_saleman_id;
        $this->data['cost_sale_commission'] = $this->site->getSettings()->cost_sale_commission;
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => 'reports', 'page' => lang('reports')), array('link' => 'reports/saleman', 'page' => lang('saleman_report')));
        $meta = array('page_title' => lang('saleman_report'), 'bc' => $bc);
        $this->page_construct('reports/saleman', $meta, $this->data);
    }

    public function  getsale_rank_commisstion($pdf = null, $xls = null, $excel_deatail = null)
    {   
        $month   =  $this->input->get('month') ? $this->input->get('month') : date('m');
        $year    =  $this->input->get('year') ? $this->input->get('year') : date('Y');
        $saleman = $this->input->get('saleman') ? $this->input->get('saleman') : null;

        if ($pdf || $xls) {
            $sub_q  = " ( SELECT COALESCE((SUM({$this->db->dbprefix('sales')}.grand_total)), 0) FROM bpas_sales WHERE MONTH({$this->db->dbprefix("sales")}.date) = {$month} AND YEAR({$this->db->dbprefix("sales")}.date) = {$year} AND {$this->db->dbprefix("sales")}.saleman_by = {$this->db->dbprefix('users')}.id GROUP BY {$this->db->dbprefix('users')}.id LIMIT 1 ) ";
            $sub_q2 = " ( SELECT COALESCE(MAX(src.end_rank), 0) FROM {$this->db->dbprefix('sales_rank_commission')} AS src LIMIT 1 ) ";
            $sub_q3 = " ( SELECT COALESCE(src2.commission, 0) FROM {$this->db->dbprefix('sales_rank_commission')} AS src2 ORDER BY src2.end_rank DESC LIMIT 1 ) ";
            $this->db
                ->select("{$this->db->dbprefix('users')}.id, CONCAT({$this->db->dbprefix('users')}.first_name,' ', {$this->db->dbprefix('users')}.last_name) as saleman, {$this->db->dbprefix('users')}.email, {$this->db->dbprefix('users')}.phone,
                    COALESCE({$sub_q}, 0) as amount, 
                    COALESCE(IF(
                        COALESCE({$sub_q2}) < COALESCE({$sub_q}, 0), 
                        COALESCE({$sub_q3}),
                        COALESCE( 
                            (SELECT COALESCE({$this->db->dbprefix('sales_rank_commission')}.commission, 0) 
                            FROM {$this->db->dbprefix('sales_rank_commission')} 
                            WHERE {$this->db->dbprefix('sales_rank_commission')}.start_rank <= (COALESCE({$sub_q}, 0)) AND {$this->db->dbprefix('sales_rank_commission')}.end_rank > (COALESCE({$sub_q}, 0)) LIMIT 1) 
                        , 0)
                    ), 0) AS commission,
                    CONCAT_WS(',', MONTHNAME(STR_TO_DATE({$month}, '%m')) , {$year}) as commission_month")
                ->from('users')
                ->where('users.group_id', $this->Settings->group_saleman_id)
                ->group_by('users.id')
                ->order_by('users.id' , 'DESC');

                if($saleman){
                    $this->db->where("{$this->db->dbprefix('users')}.id", $saleman);
                }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            }else {
                $data = null;
            }
         
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('Saleman_commission_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('username'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('emial'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('commission_sales'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('commission_month'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->saleman);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->email);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->commission);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->commission_month);
                    $row++;
                }
       
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:C' . $row)->getAlignment()->setWrapText(true);
                $filename = 'saleman_commission_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }

            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $dateObj   = DateTime::createFromFormat('!m', $month);
            $monthName = $dateObj->format('F');
            $sub_q  = " ( SELECT COALESCE((SUM({$this->db->dbprefix('sales')}.grand_total)), 0) FROM bpas_sales WHERE MONTH({$this->db->dbprefix("sales")}.date) = {$month} AND YEAR({$this->db->dbprefix("sales")}.date) = {$year} AND {$this->db->dbprefix("sales")}.saleman_by = {$this->db->dbprefix('users')}.id GROUP BY {$this->db->dbprefix('users')}.id LIMIT 1 ) ";
            $sub_q2 = " ( SELECT COALESCE(MAX(src.end_rank), 0) FROM {$this->db->dbprefix('sales_rank_commission')} AS src LIMIT 1 ) ";
            $sub_q3 = " ( SELECT COALESCE(src2.commission, 0) FROM {$this->db->dbprefix('sales_rank_commission')} AS src2 ORDER BY src2.end_rank DESC LIMIT 1 ) ";
            $this->load->library('datatables');
            $this->datatables
                ->select("{$this->db->dbprefix('users')}.id, CONCAT({$this->db->dbprefix('users')}.first_name,' ', {$this->db->dbprefix('users')}.last_name) as saleman, {$this->db->dbprefix('users')}.email, {$this->db->dbprefix('users')}.phone,
                    COALESCE({$sub_q}, 0) as amount, 
                    COALESCE(IF(
                        COALESCE({$sub_q2}) < COALESCE({$sub_q}, 0), 
                        COALESCE({$sub_q3}),
                        COALESCE( 
                            (SELECT COALESCE({$this->db->dbprefix('sales_rank_commission')}.commission, 0) 
                            FROM {$this->db->dbprefix('sales_rank_commission')} 
                            WHERE {$this->db->dbprefix('sales_rank_commission')}.start_rank <= (COALESCE({$sub_q}, 0)) AND {$this->db->dbprefix('sales_rank_commission')}.end_rank > (COALESCE({$sub_q}, 0)) LIMIT 1) 
                        , 0)
                    ), 0) AS commission,
                    CONCAT_WS(',', '{$monthName}', '{$year}'),
                    CONCAT({$this->db->dbprefix('users')}.id, '__', '" . $month . "', '__' , '" . $year . "')")
                ->from('users')
                ->where('users.group_id', $this->Settings->group_saleman_id)
                ->group_by('users.id');
            if($saleman){
                $this->datatables->where("{$this->db->dbprefix('users')}.id", $saleman);
            }
            echo $this->datatables->generate();
        }
    }
    
    function getSalemans($warehouse_id = NULL)
    {
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date);
        }

        if ((! $this->Owner || ! $this->Admin) && ! $warehouse_id) {
            $user = $this->site->getUser();
            $warehouse_id = $user->warehouse_id;
        }

        $detail_link = anchor('sales/view/$1', '<i class="fa fa-file-text-o"></i> ' . lang('sale_details'));
        $cabon_print = anchor('sales/cabon_print/$1', '<i class="fa fa-print"></i> ' . lang('print_cabon'), 'target="_blank"');
        $payments_link = anchor('sales/payments/$1', '<i class="fa fa-money"></i> ' . lang('view_payments'), 'data-toggle="modal" data-backdrop="static" data-target="#myModal"');
        $add_payment_link = anchor('sales/add_payment/$1', '<i class="fa fa-money"></i> ' . lang('add_payment'), 'data-toggle="modal" data-backdrop="static" data-target="#myModal"');
        $add_delivery_link = anchor('sales/add_delivery/$1', '<i class="fa fa-truck"></i> ' . lang('add_delivery'), 'data-toggle="modal" data-backdrop="static" data-target="#myModal"');
        $email_link = anchor('sales/email/$1', '<i class="fa fa-envelope"></i> ' . lang('email_sale'), 'data-toggle="modal" data-backdrop="static" data-target="#myModal"');
        $edit_link = anchor('sales/edit/$1', '<i class="fa fa-edit"></i> ' . lang('edit_sale'), 'class="sledit"');
        $pdf_link = anchor('sales/pdf/$1', '<i class="fa fa-file-pdf-o"></i> ' . lang('download_pdf'));
        $return_link = anchor('sales/return_sale/$1', '<i class="fa fa-angle-double-left"></i> ' . lang('return_sale'));
        $delete_link = "<a href='#' class='po' title='<b>" . lang("delete_sale") . "</b>' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' href='" . admin_url('sales/delete/$1') . "'>"
            . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_sale') . "</a>";
        $action = '<div class="text-center"><div class="btn-group text-left">'
            . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
            . lang('actions') . ' <span class="caret"></span></button>
        <ul class="dropdown-menu pull-right" role="menu">
            <li>' . $detail_link . '</li>
            <li>' . $cabon_print . '</li>
            <li>' . $payments_link . '</li>
            <li>' . $add_payment_link . '</li>
            <li>' . $add_delivery_link . '</li>
            <li>' . $edit_link . '</li>
            <li>' . $pdf_link . '</li>
            <li>' . $email_link . '</li>
            <li>' . $return_link . '</li>
            <li>' . $delete_link . '</li>
        </ul>
        </div></div>';
        $where = "";
        if ($start_date) {
            $where = ' AND ' . $this->db->dbprefix('sales').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"';
        }
        
        $this->datatables
            ->select("
                username, username, phone, 
                (SELECT sum(total) FROM sales s WHERE s.saleman_by = u.id $where) as sale_amount, 
                (SELECT sum(paid) FROM sales s WHERE s.saleman_by = u.id ) as sale_amount, 
                ((SELECT sum(total) - sum(paid)) FROM sales s WHERE s.saleman_by = u.id $where) as balance")
            ->from('users u');

        $this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
    }

    function view_saleman_report($user_id = NULL) 
    {
        if (!$user_id && $_GET['d'] == null) {           
            redirect($_SERVER["HTTP_REFERER"]);
        }   
        $this->data['error'] = validation_errors() ? validation_errors() : $this->session->flashdata('error');
        $this->data['date'] = date('Y-m-d');
        $this->data['user_id'] = $user_id;
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('saleman_detail_report_')));
        $meta = array('page_title' => lang('saleman_detail_report_'), 'bc' => $bc);
        $this->page_construct('reports/view_saleman_report', $meta, $this->data);
    }

    function getSalemanReportDetail($warehouse_id = NULL, $dt = NULL)
    {
        $this->bpas->checkPermissions('index');
        
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }

        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        } else {
            $reference_no = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->input->get('start_date');
        } else {
            $start_date = NULL;
        }

        if ($this->input->get('end_date')) {
            $end_date = $this->input->get('end_date');
        } else {
            $end_date = NULL;
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date);
        }
        if ($this->input->get('search_id')) {
            $search_id = $this->input->get('search_id');
        } else {
            $search_id = NULL;
        }
        if ($this->input->get('sales_type')) {
            $sales_type = $this->input->get('sales_type');
        } else {
            $sales_type = NULL;
        }
        if ($this->input->get('issued_by')) {
            $issued_by = $this->input->get('issued_by');
        } else {
            $issued_by = NULL;
        }
        if ((! $this->Owner || ! $this->Admin) && ! $warehouse_id) {
            $user = $this->site->getUser();
            $warehouse_id = $user->warehouse_id;
        }

        $user_biller_id = $this->session->userdata('biller_id');

        $this->load->library('datatables');
        $this->datatables
        ->select("sales.id, sales.date, sales.due_date, sales.reference_no, sales.biller, companies.name as customer, sales.note, 
                    sales.sale_status, COALESCE(bpas_sales.grand_total, 0) as grand_total,  
                    (SELECT SUM(bpas_return_sales.grand_total) FROM bpas_return_sales WHERE bpas_return_sales.sale_id = bpas_sales.id) as return_sale, 
                    COALESCE( (SELECT SUM(IF((bpas_payments.paid_by != 'deposit' AND ISNULL(bpas_payments.return_id)), bpas_payments.amount, IF(NOT ISNULL(bpas_payments.return_id), ((-1)*bpas_payments.amount), 0))) FROM bpas_payments WHERE bpas_payments.sale_id = bpas_sales.id),0) as paid, 
                    (SELECT SUM(IF(bpas_payments.paid_by = 'deposit', bpas_payments.amount, 0)) FROM bpas_payments WHERE bpas_payments.sale_id = bpas_sales.id) as deposit, 
                    (SELECT SUM(COALESCE(bpas_payments.discount, 0)) FROM bpas_payments WHERE bpas_payments.sale_id = bpas_sales.id) as discount, 
                    (COALESCE(bpas_sales.grand_total,0)-COALESCE((SELECT SUM(bpas_return_sales.grand_total) FROM bpas_return_sales WHERE bpas_return_sales.sale_id = bpas_sales.id), 0)-COALESCE( (SELECT SUM(IF((bpas_payments.paid_by != 'deposit' AND ISNULL(bpas_payments.return_id)), bpas_payments.amount, IF(NOT ISNULL(bpas_payments.return_id), ((-1)*bpas_payments.amount), 0))) FROM bpas_payments WHERE bpas_payments.sale_id = bpas_sales.id),0)- COALESCE((SELECT SUM(IF(bpas_payments.paid_by = 'deposit', bpas_payments.amount, 0)) FROM bpas_payments WHERE bpas_payments.sale_id = bpas_sales.id  ),0)-SUM(COALESCE(bpas_payments.discount,0)) ) as balance, 
                    payment_status")
        ->from('sales')
        ->join('companies', 'sales.customer_id = companies.id', 'left')
        ->join('payments', 'payments.sale_id = sales.id', 'left')
        ->group_by('sales.id');

        if($user_biller_id != NULL){
            $this->db->where('sales.biller_id', $user_biller_id);
        }

        if ($this->permission['sales-index'] = ''){
            if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin) {
                $this->datatables->where('created_by', $this->session->userdata('user_id'));
            } elseif ($this->Customer) {
                $this->datatables->where('customer_id', $this->session->userdata('user_id'));
            }
        }

        if ($customer) {
            
            $this->datatables->where('sales.saleman_by', $customer);
        }
        
        if ($reference_no) {
            $this->datatables->where('sales.reference_no', $reference_no);
        }
        
        if ($biller) {
            $this->datatables->where('sales.biller_id', $biller);
        }
        if ($start_date) {
            $this->datatables->where('date_format(bpas_sales.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
        }

        if ($sales_type) {
            if($sales_type == 'wholesale'){
                $sales_type = 0;
                $this->db->where('sales.pos',$sales_type);
            } elseif ($sales_type == 'retail') {
                $sales_type = 1;
                $this->db->where('sales.pos',$sales_type);
            }
        }

        if ($issued_by) {
            if ($issued_by == 'hide') {
                $this->db->where('sales.note =', '');
            }
        }
        $action ='';
        $this->datatables->add_column("Actions", $action, "sales.id");
        echo $this->datatables->generate();
    }

    public function saleman_report($user_id = null)
    {
        $this->bpas->checkPermissions('salemans', true);
        $Settings = $this->site->getSettings();
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['user_id']    = $user_id;
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']   = $this->site->getAllProject();
        // $this->data['zones']      = $this->site->getAllZones();
        $this->data['zones']      = $this->site->getAllZones_Order_Group();
        $this->data['salemans']   = $this->site->getAllSalemans($Settings->group_saleman_id); //Salemans is group_id = 13 in table Users

        $bc = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('saleman_report')]];
        $meta = ['page_title' => lang('saleman_report'), 'bc' => $bc];
        $this->page_construct('reports/saleman_report', $meta, $this->data);
    }

    public function getSalemanReport($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('salemans', true);
        $product        = $this->input->get('product') ? $this->input->get('product') : null;
        $user           = $this->input->get('user') ? $this->input->get('user') : null;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse      = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no   = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial         = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project        = $this->input->get('project') ? $this->input->get('project') : null;
        $saleman_by     = $this->input->get('saleman_by') ? $this->input->get('saleman_by') : null;
        $zone_id        = $this->input->get('zone_id') ? $this->input->get('zone_id') : null;
        $payment_status = $this->input->get('payment_status') ? $this->input->get('payment_status') : null;

        $arr_zone     = []; 
        if($zone_id){
            $arr_zone[] = $zone_id;
            $child_zones = $this->site->getChildZonesByID($zone_id);
            if($child_zones){
                foreach ($child_zones as $key => $zn) {
                    $arr_zone[] = $zn->id;
                }
            }
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }

        if($preview){
            $sj = "( SELECT sale_id, product_id, serial_no,
            SUM({$this->db->dbprefix('sale_items')}.real_unit_price * {$this->db->dbprefix('sale_items')}.unit_quantity) as item_real_price from {$this->db->dbprefix('sale_items')} ";
            if ($product || $serial) {
                $sj .= ' WHERE ';
            }
            if ($product) {
                $sj .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            }
            if ($product && $serial) {
                $sj .= ' AND ';
            }
            if ($serial) {
                $sj .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
            }
            $sj .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSJ";
            $sk = "
                (SELECT 
                    bpas_sale_items.sale_id AS sale_id,
                    SUM(COALESCE(bpas_sale_items.purchase_unit_cost, 0) * bpas_sale_items.quantity) AS total_cost,
                    SUM((COALESCE(bpas_sale_items.unit_price, 0) * bpas_sale_items.quantity) - (COALESCE(bpas_sale_items.purchase_unit_cost, 0) * bpas_sale_items.quantity)) AS total_profit
                FROM bpas_sale_items
                GROUP BY bpas_sale_items.sale_id) AS bpas_FSK
            ";
            $sl = "
                (SELECT 
                    bpas_payments.sale_id AS sale_id,
                    SUM(COALESCE(bpas_payments.amount, 0)) AS total_paid
                FROM bpas_payments
                GROUP BY bpas_payments.sale_id) AS bpas_FSL
            ";
            $s_cost_before = " (
                SELECT 
                    SUM(COALESCE(s_im.purchase_unit_cost, 0) * s_im.quantity)
                FROM bpas_sale_items AS s_im
                WHERE s_im.sale_id = (
                        SELECT
                            (SELECT x.id FROM bpas_sales AS x WHERE x.sale_status != 'returned' AND x.reference_no = ss.reference_no) 
                        FROM bpas_sales AS ss
                        WHERE ss.id = bpas_sales.id
                    )
                GROUP BY s_im.sale_id
            ) ";
            $s_paid_before = " (
                SELECT 
                    COALESCE(SUM(pmt_.amount), 0) 
                FROM {$this->db->dbprefix('payments')} AS pmt_ 
                LEFT JOIN {$this->db->dbprefix('sales')} AS ss_ ON pmt_.sale_id = ss_.id
                WHERE 
                    pmt_.sale_id < bpas_sales.id AND ss_.reference_no = bpas_sales.reference_no
                GROUP BY pmt_.sale_id
            ) ";

            $str = '';
            if($this->site->getSettings()->cost_sale_commission){
                $str = " 
                    IF(
                        bpas_sales.sale_status != 'returned',
                        IF(COALESCE(bpas_FSL.total_paid, 0) - COALESCE(bpas_FSK.total_cost, 0) < 0, 0, (COALESCE(bpas_FSL.total_paid, 0) - COALESCE(bpas_FSK.total_cost, 0)) * bpas_users.commission / 100),
                        IF(
                            " . $s_paid_before . " - " . $s_cost_before . " > 0,
                            -1 * (COALESCE(Abs(bpas_FSL.total_paid), 0) - COALESCE(Abs(bpas_FSK.total_cost), 0)) * bpas_users.commission / 100,
                            0
                        )
                    ) AS commission";
            } else {
                // $str = " (grand_total * commission) / 100 AS commission ";
                $str = " (bpas_FSL.total_paid * commission) / 100 AS commission ";
            }

            $this->db
                ->select('
                    date, 
                    project_name,
                    reference_no, biller,
                    CONCAT_WS(" ", first_name, last_name) as saleman_by,
                    customer, 
                    zone_name as zone_id,
                    IF(sale_status = "returned", -1 * total_items, total_items) AS total_items,
                    GROUP_CONCAT(CONCAT('.$this->db->dbprefix("sale_items").'.product_name, " (", '.$this->db->dbprefix("sale_items").'.quantity, ")") SEPARATOR "\n") as iname, 
                    saleman_award_points,
                    ' . $str . ',
                    grand_total, 
                    paid, 
                    payment_status', false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join($sj, 'FSJ.sale_id=sales.id', 'left')
                ->join($sk, 'FSK.sale_id=sales.id', 'left')
                ->join($sl, 'FSL.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('users', 'users.id=sales.saleman_by', 'left')
                ->join('zones', 'zones.id=sales.zone_id', 'left')
                ->group_by('sales.id')
                ->order_by('sales.date desc');
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($saleman_by) {
                $this->db->where('sales.saleman_by', $saleman_by);
            }
            if ($zone_id) {
                // $this->db->where('sales.zone_id', $zone_id);
                $this->db->where_in('sales.zone_id', $arr_zone);
            }
            if ($payment_status) {
                if($payment_status == 'paid'){
                    $this->db->where('sales.payment_status', $payment_status);
                } else {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                if($zone_id){
                    $this->data['zone'] = $this->site->getZoneByID($zone_id);    
                }
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('saleman_report')]];
                $meta = ['page_title' => lang('saleman_report'), 'bc' => $bc];
                $this->page_construct('reports/saleman_report_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $sj = "( SELECT sale_id, product_id, serial_no,
                SUM({$this->db->dbprefix('sale_items')}.real_unit_price * {$this->db->dbprefix('sale_items')}.unit_quantity) as item_real_price from {$this->db->dbprefix('sale_items')} ";
            if ($product || $serial) {
                $sj .= ' WHERE ';
            }
            if ($product) {
                $sj .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            }
            if ($product && $serial) {
                $sj .= ' AND ';
            }
            if ($serial) {
                $sj .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
            }
            $sj .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSJ";
            $sk = "
                (SELECT 
                    bpas_sale_items.sale_id AS sale_id,
                    SUM(COALESCE(bpas_sale_items.purchase_unit_cost, 0) * bpas_sale_items.quantity) AS total_cost,
                    SUM((COALESCE(bpas_sale_items.unit_price, 0) * bpas_sale_items.quantity) - (COALESCE(bpas_sale_items.purchase_unit_cost, 0) * bpas_sale_items.quantity)) AS total_profit
                FROM bpas_sale_items
                GROUP BY bpas_sale_items.sale_id) AS bpas_FSK
            ";
            $sl = "
                (SELECT 
                    bpas_payments.sale_id AS sale_id,
                    SUM(COALESCE(bpas_payments.amount, 0)) AS total_paid
                FROM bpas_payments
                GROUP BY bpas_payments.sale_id) AS bpas_FSL
            ";
            $s_cost_before = " (
                SELECT 
                    SUM(COALESCE(s_im.purchase_unit_cost, 0) * s_im.quantity)
                FROM bpas_sale_items AS s_im
                WHERE s_im.sale_id = (
                        SELECT
                            (SELECT x.id FROM bpas_sales AS x WHERE x.sale_status != 'returned' AND x.reference_no = ss.reference_no) 
                        FROM bpas_sales AS ss
                        WHERE ss.id = bpas_sales.id
                    )
                GROUP BY s_im.sale_id
            ) ";
            $s_paid_before = " (
                SELECT 
                    COALESCE(SUM(pmt_.amount), 0) 
                FROM {$this->db->dbprefix('payments')} AS pmt_ 
                LEFT JOIN {$this->db->dbprefix('sales')} AS ss_ ON pmt_.sale_id = ss_.id
                WHERE 
                    pmt_.sale_id < bpas_sales.id AND ss_.reference_no = bpas_sales.reference_no
                GROUP BY pmt_.sale_id
            ) ";

            $str = '';
            if($this->site->getSettings()->cost_sale_commission){
                $str = " 
                    IF(
                        bpas_sales.sale_status != 'returned',
                        IF(COALESCE(bpas_FSL.total_paid, 0) - COALESCE(bpas_FSK.total_cost, 0) < 0, 0, (COALESCE(bpas_FSL.total_paid, 0) - COALESCE(bpas_FSK.total_cost, 0)) * bpas_users.commission / 100),
                        IF(
                            " . $s_paid_before . " - " . $s_cost_before . " > 0,
                            -1 * (COALESCE(Abs(bpas_FSL.total_paid), 0) - COALESCE(Abs(bpas_FSK.total_cost), 0)) * bpas_users.commission / 100,
                            0
                        )
                    ) AS commission";
            } else {
                // $str = " (grand_total * commission) / 100 AS commission ";
                $str = " (bpas_FSL.total_paid * commission) / 100 AS commission ";
            }

            $this->db
                ->select('
                    date, 
                    project_name,
                    reference_no, biller,
                    CONCAT_WS(" ", first_name, last_name) as saleman_by,
                    customer, 
                    zone_name as zone_id,
                    IF(sale_status = "returned", -1 * total_items, total_items) AS total_items,
                    GROUP_CONCAT(CONCAT('.$this->db->dbprefix("sale_items").'.product_name, " (", '.$this->db->dbprefix("sale_items").'.quantity, ")") SEPARATOR "\n") as iname, 
                    saleman_award_points,
                    ' . $str . ',
                    grand_total, 
                    paid, 
                    payment_status', false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join($sj, 'FSJ.sale_id=sales.id', 'left')
                ->join($sk, 'FSK.sale_id=sales.id', 'left')
                ->join($sl, 'FSL.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('users', 'users.id=sales.saleman_by', 'left')
                ->join('zones', 'zones.id=sales.zone_id', 'left')
                ->group_by('sales.id')
                ->order_by('sales.date desc');
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->db->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($saleman_by) {
                $this->db->where('sales.saleman_by', $saleman_by);
            }
            if ($zone_id) {
                // $this->db->where('sales.zone_id', $zone_id);
                $this->db->where_in('sales.zone_id', $arr_zone);
            }
            if ($payment_status) {
                if($payment_status == 'paid'){
                    $this->db->where('sales.payment_status', $payment_status);
                } else {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('saleman_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('saleman'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('zone'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('sale_qty'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('award_points'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('commission'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('payment_status'));

                $row     = 2;
                $ap_total= 0;
                $cms     = 0;
                $sQty    = 0;
                $total   = 0;
                $paid    = 0;
                $balance = 0;
                $totalreal = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->saleman_by);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->zone_id);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->total_items);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->saleman_award_points);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->commission);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, lang($data_row->payment_status));

                    $sQty      += $data_row->total_items;
                    $ap_total  += $data_row->saleman_award_points;
                    $cms       += $data_row->commission;
                    $total     += $data_row->grand_total;
                    $paid      += $data_row->paid;
                    $balance   += ($data_row->grand_total - $data_row->paid);
                    $row++;
                }

                // $this->excel->getActiveSheet()->getStyle('I' . $row . ':L' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $ap_total);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $cms);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $balance);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'saleman_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $si = "(
                SELECT 
                    sale_id, 
                    product_id, 
                    serial_no,
                    GROUP_CONCAT(CONCAT({$this->db->dbprefix('sale_items')}.product_name, '__', 
                    {$this->db->dbprefix('sale_items')}.quantity) SEPARATOR '___') as item_nane from {$this->db->dbprefix('sale_items')} 
                ";
            $sj = "( 
                SELECT 
                    sale_id, 
                    product_id, 
                    serial_no,
                    SUM({$this->db->dbprefix('sale_items')}.original_price * {$this->db->dbprefix('sale_items')}.unit_quantity) as item_real_price from {$this->db->dbprefix('sale_items')} 
                ";
            $sk = "
                (SELECT 
                    bpas_sale_items.sale_id AS sale_id,
                    SUM(COALESCE(bpas_sale_items.purchase_unit_cost, 0) * bpas_sale_items.quantity) AS total_cost,
                    SUM((COALESCE(bpas_sale_items.unit_price, 0) * bpas_sale_items.quantity) - (COALESCE(bpas_sale_items.purchase_unit_cost, 0) * bpas_sale_items.quantity)) AS total_profit
                FROM bpas_sale_items
                GROUP BY bpas_sale_items.sale_id) AS bpas_FSK
            ";
            $sl = "
                (SELECT 
                    bpas_payments.sale_id AS sale_id,
                    SUM(COALESCE(bpas_payments.amount, 0)) AS total_paid
                FROM bpas_payments
                GROUP BY bpas_payments.sale_id) AS bpas_FSL
            ";
            $s_cost_before = " (
                SELECT 
                    SUM(COALESCE(s_im.purchase_unit_cost, 0) * s_im.quantity)
                FROM bpas_sale_items AS s_im
                WHERE s_im.sale_id = (
                        SELECT
                            (SELECT x.id FROM bpas_sales AS x WHERE x.sale_status != 'returned' AND x.reference_no = ss.reference_no LIMIT 1) 
                        FROM bpas_sales AS ss
                        WHERE ss.id = bpas_sales.id
                        LIMIT 1
                    )
                GROUP BY s_im.sale_id
                LIMIT 1
            ) ";
            $s_paid_before = " (
                SELECT 
                    COALESCE(SUM(pmt_.amount), 0) 
                FROM {$this->db->dbprefix('payments')} AS pmt_ 
                LEFT JOIN {$this->db->dbprefix('sales')} AS ss_ ON pmt_.sale_id = ss_.id
                WHERE 
                    pmt_.sale_id < bpas_sales.id AND ss_.reference_no = bpas_sales.reference_no
                GROUP BY pmt_.sale_id
                LIMIT 1
            ) ";

            if ($product || $serial) {
                $si .= ' WHERE ';
                $sj .= ' WHERE ';
            }
            if ($product) {
                $si .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
                $sj .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            }
            if ($product && $serial) {
                $si .= ' AND ';
                $sj .= ' AND ';
            }
            if ($serial) {
                $si .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
                $sj .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
            }

            $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            $sj .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSJ";

            $str = '';
            if($this->site->getSettings()->cost_sale_commission){
                $str = " 
                    IF(
                        bpas_sales.sale_status != 'returned',
                        IF(bpas_FSL.total_paid - bpas_FSK.total_cost < 0, 0, (bpas_FSL.total_paid - bpas_FSK.total_cost) * bpas_users.commission / 100),
                        IF(
                            " . $s_paid_before . " - " . $s_cost_before . " > 0,
                            -1 * (Abs(bpas_FSL.total_paid) - Abs(bpas_FSK.total_cost)) * bpas_users.commission / 100,
                            0
                        )
                    ) AS commission";
            } else {
                // $str = " (grand_total * commission) / 100 AS commission ";
                $str = " (bpas_FSL.total_paid * commission) / 100 AS commission ";
            }

            $this->load->library('datatables');
            $this->datatables
                ->select('
                    DATE_FORMAT(date, "%Y-%m-%d %T") as date,
                    project_name,
                    reference_no,
                    biller,
                    CONCAT_WS(" ", first_name, last_name) as saleman_by,
                    customer,
                    zone_name as zone_id,
                    IF(sale_status = "returned", -1 * total_items, total_items),
                    FSI.item_nane as iname,
                    saleman_award_points,
                    ' . $str . ',
                    grand_total, 
                    paid,
                    (grand_total-paid) as balance,
                    payment_status,
                    ' . $this->db->dbprefix("sales") . '.id as id', false)
                    
                ->from('sales')
                ->join($si, 'FSI.sale_id=sales.id', 'left')
                ->join($sj, 'FSJ.sale_id=sales.id', 'left')
                ->join($sk, 'FSK.sale_id=sales.id', 'left')
                ->join($sl, 'FSL.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('users', 'users.id=sales.saleman_by', 'left')
                ->join('zones', 'zones.id=sales.zone_id', 'left');
            // ->group_by('sales.id');

            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FSI.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('FSI.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($warehouse) {
                $this->datatables->where('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->datatables->where('sales.project_id', $project);
            }
            if ($saleman_by) {
                $this->datatables->where('sales.saleman_by', $saleman_by);
            }
            if ($zone_id) {
                // $this->db->where('sales.zone_id', $zone_id);
                $this->datatables->where_in('sales.zone_id', $arr_zone);
            }
            if ($payment_status) {
                if($payment_status == 'paid'){
                    $this->datatables->where('sales.payment_status', $payment_status);
                } else {
                    $this->datatables->where('sales.payment_status !=', 'paid');
                }
            }

            echo $this->datatables->generate();
        }
    }

    function sales_discount()
    {
        $datt =$this->reports_model->getLastDate("sales","date");
        $this->bpas->checkPermissions('disccount',NULL,'sale_report');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        if ($this->input->post('start_date')) {
            $this->data['start_date'] =  $this->bpas->fsd($this->input->post('start_date'));
        } else {
            $this->data['start_date']= $datt;
        }
        if ($this->input->post('end_date')) {
            $this->data['end_date'] = $this->bpas->fsd($this->input->post('end_date'));
        } else {
            $this->data['end_date'] = $datt;
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('sales_discount_report')));
        $meta = array('page_title' => lang('sales_discount_report'), 'bc' => $bc);
        $this->page_construct('reports/sales_discount', $meta, $this->data);
    }

    function getSalesDiscountReport($pdf = NULL, $xls = NULL)
    {
        $datt =$this->reports_model->getLastDate("sales","date");
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date =  $this->bpas->fsd($this->input->get('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->bpas->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {

            $this->db
                ->select($this->db->dbprefix('payments') . ".id as idd, ". $this->db->dbprefix('sales') . ".suspend_note as noted," . $this->db->dbprefix('payments') . ".date, " . $this->db->dbprefix('payments') . ".reference_no as payment_ref, " . $this->db->dbprefix('sales') . ".reference_no as sale_ref, " . $this->db->dbprefix('purchases') . ".reference_no as purchase_ref, " . $this->db->dbprefix('payments') . ".note, paid_by, amount, type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->group_by('payments.id')
                ->order_by('payments.date desc');
            
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user) {
                    $this->db->where('payments.created_by', $user);
                }
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('sales').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_reference'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('type'));
                $row = 2;
                $total = 0;
                
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->type);
                    if ($data_row->type == 'returned' || $data_row->type == 'sent') {
                        $total -= $data_row->amount;
                    } else {
                        $total += $data_row->amount;
                    }
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $filename = 'payments_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }

                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');

                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {

            $this->load->library('datatables');
            $this->datatables->select("
            sales.id as idd, 
            sales.date,
            sales.customer,         
            sale_items.product_code, 
            sale_items.product_name, 
             
            sale_items.unit_price ,
            sale_items.quantity, 
            sale_items.discount,
            (CASE WHEN bpas_sale_items.discount = '100%' THEN 
                'free'
            ELSE
                bpas_sales.payment_status
            END
            ) AS s_status")
            ->from('sale_items')
            ->join('sales', 'sales.id = sale_items.sale_id', 'left')
            ->join('products', 'products.id = sale_items.product_id', 'left')
            ->where('sale_items.discount <>', 0);
            
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user) {
                    $this->datatables->where('sales.created_by', $user);
                }
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if (isset($biller)) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if (isset($payment_ref)) {
                $this->datatables->like('sales.reference_no', $payment_ref, 'both');
            }
            if (isset($sale_ref)) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('sales').'.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }

    public function multi_transfers()
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('transfers')]];
        $meta = ['page_title' => lang('transfers'), 'bc' => $bc];
        $this->page_construct('reports/multi_transfers', $meta, $this->data);
    }

    public function getMulti_Transfers()
    {
        $this->bpas->checkPermissions('index');

        $detail_link   = anchor('admin/reports/view_multi_transfer/$1', '<i class="fa fa-file-text-o"></i> ' . lang('transfer_details'), 'data-toggle="modal" data-backdrop="static" data-target="#myModal"');
        $delete_link   = "<a href='#' class='tip po' title='<b>" . lang('delete_transfer') . "</b>' data-content=\"<p>"
            . lang('r_u_sure') . "</p><a class='btn btn-danger po-delete' id='a__$1' href='" . admin_url('reports/deleteAccTransfer/$1') . "'>"
            . lang('i_m_sure') . "</a> <button class='btn po-close'>" . lang('no') . "</button>\"  rel='popover'><i class=\"fa fa-trash-o\"></i> "
            . lang('delete_transfer') . '</a>';
        $action = '<div class="text-center"><div class="btn-group text-left">'
            . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
            . lang('actions') . ' <span class="caret"></span></button>
        <ul class="dropdown-menu pull-right" role="menu">
            <li>' . $detail_link . '</li>
        </ul>
        </div></div>';

        $this->load->library('datatables');
        $this->datatables
            ->select('id, date, reference_no, charge_account, charge_amount, transfer_account, transfer_amount, created_by, attachment, status')
            ->from('account_transfer');

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $this->datatables->where('created_by', $this->session->userdata('user_id'));
        }
        echo $this->datatables->generate();
    }

    public function multi_transfer_actions()
    {
        if (!$this->Owner) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            redirect($_SERVER['HTTP_REFERER']);
        }
        $this->form_validation->set_rules('form_action', lang('form_action'), 'required');

        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'delete') {
                    foreach ($_POST['val'] as $id) {
                        $this->accounts_model->deleteAccTransfer($id);
                    }
                    $this->session->set_flashdata('message', lang('transfers_deleted'));
                    redirect($_SERVER['HTTP_REFERER']);
                } elseif ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('multi_transfers'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('charge_account'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('charge_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('transfer_account'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('transfer_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('created_by'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('status'));

                    $row = 2;
                    $total_charge_amount = 0;
                    $total_transfer_amount = 0;
                    foreach ($_POST['val'] as $id) {
                        $transfer = $this->accounts_model->getAccTransferByID($id);
                        $created_by = $this->site->getUser($transfer->created_by);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($transfer->date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $transfer->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $transfer->charge_account);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $transfer->charge_amount);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $transfer->transfer_account);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $transfer->transfer_amount);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $created_by->first_name . " " . $created_by->last_name);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $transfer->status == 1 ? "Complated" : "Padding");

                        $total_charge_amount += $transfer->charge_amount;
                        $total_transfer_amount += $transfer->transfer_amount;
                        $row++;
                    }
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $total_charge_amount);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total_transfer_amount);

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'account_tansfers_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', lang('no_transfer_selected'));
                redirect($_SERVER['HTTP_REFERER']);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER['HTTP_REFERER']);
        }
    }

    public function view_multi_transfer($transfer_acc_id = null)
    {
        $this->bpas->checkPermissions('index', true);

        if ($this->input->get('id')) {
            $transfer_acc_id = $this->input->get('id');
        }
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $transfer            = $this->accounts_model->getAccTransferByID($transfer_acc_id);
        if (!$this->session->userdata('view_right')) {
            $this->bpas->view_rights($transfer->created_by, true);
        }

        $this->data['rows']       = $this->accounts_model->getAllAccTransferItemsByAccID($transfer_acc_id);
        $this->data['transfer']   = $transfer;
        $this->data['tid']        = $transfer_acc_id;
        $this->data['created_by'] = $this->site->getUser($transfer->created_by);
        $this->load->view($this->theme . 'reports/view_multi_transfer', $this->data);
    }

    public function multi_transfer_pdf($transfer_acc_id = null, $view = null, $save_bufffer = null)
    {
        if ($this->input->get('id')) {
            $transfer_acc_id = $this->input->get('id');
        }

        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $transfer            = $this->accounts_model->getAccTransferByID($transfer_acc_id);
        if (!$this->session->userdata('view_right')) {
            $this->bpas->view_rights($transfer->created_by);
        }
        $this->data['rows']           = $this->accounts_model->getAllAccTransferItemsByAccID($transfer_acc_id);
        $this->data['transfer']       = $transfer;
        $this->data['tid']            = $transfer_acc_id;
        $this->data['created_by']     = $this->site->getUser($transfer->created_by);
        $name                         = lang('multi_transfer') . '_' . str_replace('/', '_', $transfer->reference_no) . '.pdf';
        $html                         = $this->load->view($this->theme . 'reports/multi_transfer_pdf', $this->data, true);
        if (!$this->Settings->barcode_img) {
            $html = preg_replace("'\<\?xml(.*)\?\>'", '', $html);
        }
        if ($view) {
            $this->load->view($this->theme . 'reports/multi_transfer_pdf', $this->data);
        } elseif ($save_bufffer) {
            return $this->bpas->generate_pdf($html, $name, $save_bufffer);
        } else {
            $this->bpas->generate_pdf($html, $name);
        }
    }

    public function deleteAccTransfer($id = null)
    {
        $this->bpas->checkPermissions(null, true);
        if ($this->input->get('id')) {
            $id = $this->input->get('id');
        }

        if ($this->accounts_model->deleteAccTransfer($id)) {
            if ($this->input->is_ajax_request()) {
                $this->bpas->send_json(['error' => 0, 'msg' => lang('transfer_deleted')]);
            }
            $this->session->set_flashdata('message', lang('transfer_deleted'));
            admin_redirect('welcome');
        }
    }

    public function salary_report() 
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        
        $bc = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('salary_report')]];
        $meta = ['page_title' => lang('salary_report'), 'bc' => $bc];

        $months = array();
        for ($m = 1; $m <= 12; $m++) {
            $mth = date('F', mktime(0, 0, 0, $m, 1, date('Y')));
            $months[$m] = $mth;
        }

        $start_y   = date("Y", strtotime("-1 year"));
        $current_y = date("Y");
        $years[$current_y] = $current_y;
        for($y = 1; $y <= ($current_y - $start_y); $y++){
            $y_ = date("Y", strtotime("" . -$y . " year"));
            $years[$y_] = $y_;
        }

        $this->data["months"] = $months;
        $this->data["years"]  = $years;
        $this->data["users"] = $this->site->getAllUser();
        $this->page_construct('reports/salary_report', $meta, $this->data);
    }

    public function getSalaryReport() 
    {
        $user     = $this->input->get('user') ? $this->input->get('user') : null;
        $month     = $this->input->get('month') ? $this->input->get('month') : null;
        $year      = $this->input->get('year') ? $this->input->get('year') : null;

        $this->load->library('datatables');
        $this->datatables
        ->select("
            {$this->db->dbprefix('staff_payslip')}.id as id, 
            payment_date, 
            CONCAT_WS(' ', {$this->db->dbprefix('users')}.first_name, {$this->db->dbprefix('users')}.last_name) as fullname, 
            basic, total_allowance, total_deduction, leave_deduction, tax, 
            {$this->db->dbprefix('staff_payslip')}.commission, net_salary, 
            CONCAT_WS(', ', month, year),
            status")
        ->from('staff_payslip')
        ->join('users', 'users.id = staff_payslip.staff_id', 'left');

        if($user){
            $this->datatables->where('staff_payslip.staff_id', $user);
        }
        if($month){
            $this->datatables->where('staff_payslip.month', $month);
        }
        if($year){
            $this->datatables->where('staff_payslip.year', $year);
        }

        echo $this->datatables->generate();
    }

    public function salary_report_actions()
    {
        if (!$this->Owner) {
            $this->session->set_flashdata('warning', lang('access_denied'));
            redirect($_SERVER['HTTP_REFERER']);
        }
        $this->form_validation->set_rules('form_action', lang('form_action'), 'required');

        if ($this->form_validation->run() == true) {
            if (!empty($_POST['val'])) {
                if ($this->input->post('form_action') == 'export_excel') {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('salary_report'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('username'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('basic_salary'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('total_allowance'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('total_deduction'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('leave_deduction'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('tax'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('commission'));
                    $this->excel->getActiveSheet()->SetCellValue('I1', lang('net_salary'));
                    $this->excel->getActiveSheet()->SetCellValue('J1', lang('salary_month'));
                    $this->excel->getActiveSheet()->SetCellValue('K1', lang('status'));

                    $row = 2;
                    $t_basic_salary = 0;
                    $t_allowance = 0;
                    $t_deduction = 0;
                    $t_leave_deduction = 0;
                    $t_tax = 0;
                    $t_commission = 0;
                    $t_net_salary = 0;
                    $pmt = ['0' => 'unpaid',   '1' => 'paid'];

                    foreach ($_POST['val'] as $id) {
                        $staff_payslip = $this->auth_model->getStaffPaySlipByID($id);
                        $user = $this->site->getUser($staff_payslip->staff_id);
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($staff_payslip->payment_date));
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $user->first_name . ' ' . $user->last_name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $staff_payslip->basic);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $staff_payslip->total_allowance);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $staff_payslip->total_deduction);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $staff_payslip->leave_deduction);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $staff_payslip->tax);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, ($staff_payslip->commission !== null ? $staff_payslip->commission : 0));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $staff_payslip->net_salary);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $staff_payslip->month . ', ' . $staff_payslip->year);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $pmt[$staff_payslip->status]);

                        $t_basic_salary    += $staff_payslip->basic;
                        $t_allowance       += $staff_payslip->total_allowance;
                        $t_deduction       += $staff_payslip->total_deduction;
                        $t_leave_deduction += $staff_payslip->leave_deduction;
                        $t_tax             += $staff_payslip->tax;
                        $t_commission      += $staff_payslip->commission !== null ? $staff_payslip->commission : 0;
                        $t_net_salary      += $staff_payslip->net_salary;
                        $row++;
                    }
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $t_basic_salary);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $t_allowance);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $t_deduction);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $t_leave_deduction);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $t_tax);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $t_commission);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $t_net_salary);

                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'salary_report_' . date('Y_m_d_H_i_s');
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
            } else {
                $this->session->set_flashdata('error', lang('no_salary_report_selected'));
                redirect($_SERVER['HTTP_REFERER']);
            }
        } else {
            $this->session->set_flashdata('error', validation_errors());
            redirect($_SERVER['HTTP_REFERER']);
        }
    }

    public function budgets($id = null)
    {
        $this->bpas->checkPermissions();
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['categories'] = $this->reports_model->getExpenseCategories();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('budgets_report')]];
        $meta                     = ['page_title' => lang('budgets_report'), 'bc' => $bc];
        $this->page_construct('reports/budgets', $meta, $this->data);
    }

    public function getBudgetsReport($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('budgets');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $title        = $this->input->get('title') ? $this->input->get('title') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $note         = $this->input->get('note') ? $this->input->get('note') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }

        if($preview){
            $this->db
                ->select("
                    {$this->db->dbprefix('budgets')}.id AS id,
                    DATE_FORMAT({$this->db->dbprefix('budgets')}.date, '%Y-%m-%d %T') AS date, 
                    {$this->db->dbprefix('budgets')}.reference, 
                    CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS user, 
                    {$this->db->dbprefix('budgets')}.title, 
                    {$this->db->dbprefix('budgets')}.amount, 
                    COALESCE(SUM({$this->db->dbprefix('expenses_budget')}.amount), 0) AS expenses,
                    {$this->db->dbprefix('budgets')}.note,
                    {$this->db->dbprefix('budgets')}.attachment", false)
                ->from('budgets')
                ->join('users', 'users.id=budgets.created_by', 'left')
                ->join('expenses_budget', 'expenses_budget.budget_id=budgets.id', 'left')
                ->group_by('budgets.id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('budgets.created_by', $this->session->userdata('user_id'));
            }
            if ($note) {
                $this->db->like('budgets.note', $note, 'both');
            }
            if ($reference_no) {
                $this->db->like('budgets.reference', $reference_no, 'both');
            }
            if ($title) {
                $this->db->like('budgets.title', $title, 'both');
            }
            if ($warehouse) {
                $this->db->where('budgets.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->db->where('budgets.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('budgets.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('budgets_report')]];
                $meta = ['page_title' => lang('budgets_report'), 'bc' => $bc];
                $this->page_construct('reports/budgets_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $this->db
                ->select("
                    {$this->db->dbprefix('budgets')}.id AS id,
                    DATE_FORMAT({$this->db->dbprefix('budgets')}.date, '%Y-%m-%d %T') AS date, 
                    {$this->db->dbprefix('budgets')}.reference, 
                    CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS user, 
                    {$this->db->dbprefix('budgets')}.title, 
                    {$this->db->dbprefix('budgets')}.amount, 
                    COALESCE(SUM({$this->db->dbprefix('expenses_budget')}.amount), 0) AS expenses,
                    {$this->db->dbprefix('budgets')}.note,
                    {$this->db->dbprefix('budgets')}.attachment", false)
                ->from('budgets')
                ->join('users', 'users.id=budgets.created_by', 'left')
                ->join('expenses_budget', 'expenses_budget.budget_id=budgets.id', 'left')
                ->group_by('budgets.id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('budgets.created_by', $this->session->userdata('user_id'));
            }
            if ($note) {
                $this->db->like('budgets.note', $note, 'both');
            }
            if ($reference_no) {
                $this->db->like('budgets.reference', $reference_no, 'both');
            }
            if ($title) {
                $this->db->like('budgets.title', $title, 'both');
            }
            if ($warehouse) {
                $this->db->where('budgets.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->db->where('budgets.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('budgets.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('budgets_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('title'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('expenses'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));

                $row     = 2;
                $budget  = 0;
                $expense = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->user);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->title);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->expenses);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, strip_tags($data_row->note));
                    $budget += $data_row->amount;
                    $expense += $data_row->expenses;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('E' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle('F' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $budget);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $expense);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'budgets_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
            ->select("
                {$this->db->dbprefix('budgets')}.id AS id,
                DATE_FORMAT({$this->db->dbprefix('budgets')}.date, '%Y-%m-%d %T') AS date, 
                {$this->db->dbprefix('budgets')}.reference, 
                CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS user, 
                {$this->db->dbprefix('budgets')}.title, 
                {$this->db->dbprefix('budgets')}.amount, 
                COALESCE(SUM({$this->db->dbprefix('expenses_budget')}.amount), 0) AS expenses,
                {$this->db->dbprefix('budgets')}.note,
                {$this->db->dbprefix('budgets')}.attachment", false)
            ->from('budgets')
            ->join('users',    'users.id=budgets.created_by', 'left')
            ->join('expenses_budget', 'expenses_budget.budget_id=budgets.id', 'left')
            ->group_by('budgets.id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('budgets.created_by', $this->session->userdata('user_id'));
            }

            if ($note) {
                $this->datatables->like('budgets.note', $note, 'both');
            }
            if ($reference_no) {
                $this->datatables->like('budgets.reference', $reference_no, 'both');
            }
            if ($title) {
                $this->datatables->like('budgets.title', $title, 'both');
            }
            if ($warehouse) {
                $this->datatables->where('budgets.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->datatables->where('budgets.created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where('budgets.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $this->datatables->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_detail') . "' href='" . admin_url('purchases/expenses_budget/$1') . "'><span class='label label-primary'>" . lang('view_detail') . '</span></a></div>', 'id');
            $this->datatables->unset_column('id');
            echo $this->datatables->generate();
        }
    }

    public function expenses_budget($id = null)
    {
        $this->bpas->checkPermissions();
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['categories'] = $this->reports_model->getExpenseCategories();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('expenses_budget_report')]];
        $meta                     = ['page_title' => lang('expenses_budget_report'), 'bc' => $bc];
        $this->page_construct('reports/expenses_budget', $meta, $this->data);
    }

    public function getExpensesBudgetReport($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('expenses_budget');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $budget       = $this->input->get('budget') ? $this->input->get('budget') : null;
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $note         = $this->input->get('note') ? $this->input->get('note') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $category     = $this->input->get('category') ? $this->input->get('category') : null;

        $arr_cate = [];
        if($category){
            $arr_cate[] = $category;
            $child_categories = $this->reports_model->getChildsExpenseCategoryByID($category);
            if($child_categories){
                foreach ($child_categories as $key => $cate) {
                    $arr_cate[] = $cate->id;
                }
            }
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }

        if($preview){
            $str = " (  SELECT IF({$this->db->dbprefix('companies')}.company != '-', {$this->db->dbprefix('companies')}.company, {$this->db->dbprefix('companies')}.name) FROM {$this->db->dbprefix('companies')} WHERE {$this->db->dbprefix('companies')}.id = {$this->db->dbprefix('budgets')}.biller_id ) ";
            $this->db
            ->select("
                {$this->db->dbprefix('expenses_budget')}.id AS id,
                DATE_FORMAT({$this->db->dbprefix('expenses_budget')}.date, '%Y-%m-%d %T') AS date, 
                {$this->db->dbprefix('expenses_budget')}.reference, 
                CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS user, 
                IF({$this->db->dbprefix('companies')}.company != '-', {$this->db->dbprefix('companies')}.company, {$this->db->dbprefix('companies')}.name) AS biller, 
                {$this->db->dbprefix('expense_categories')}.name as category, 
                CONCAT({$this->db->dbprefix('budgets')}.title, ' (', {$this->db->dbprefix('budgets')}.amount, ') ', " . $str . ") as budget,
                {$this->db->dbprefix('expenses_budget')}.amount_usd, 
                {$this->db->dbprefix('expenses_budget')}.amount_khm, 
                {$this->db->dbprefix('expenses_budget')}.amount, 
                {$this->db->dbprefix('expenses_budget')}.note,
                {$this->db->dbprefix('expenses_budget')}.attachment", false)
            ->from('expenses_budget')
            ->join('users',   'users.id=expenses_budget.created_by', 'left')
            ->join('companies', 'companies.id=expenses_budget.biller_id', 'left')
            ->join('budgets', 'expenses_budget.budget_id=budgets.id', 'left')
            ->join('expense_categories', 'expense_categories.id=expenses_budget.category_id', 'left')
            ->group_by('expenses_budget.id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('expenses_budget.created_by', $this->session->userdata('user_id'));
            }
            if ($note) {
                $this->db->like('expenses_budget.note', $note, 'both');
            }
            if ($biller) {
                $this->db->like('companies.id', $biller, 'both');
            }
            if ($reference_no) {
                $this->db->like('expenses_budget.reference', $reference_no, 'both');
            }
            if ($budget) {
                $this->db->like('budgets.title', $budget, 'both');
            }
            if ($warehouse) {
                $this->db->where('expenses_budget.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->db->where('expenses_budget.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('expenses_budget.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($category) {
                $this->db->where_in('expenses_budget.category_id', $arr_cate);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('expenses_budget_report')]];
                $meta = ['page_title' => lang('expenses_budget_report'), 'bc' => $bc];
                $this->page_construct('reports/expenses_budget_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $str = " (  SELECT IF({$this->db->dbprefix('companies')}.company != '-', {$this->db->dbprefix('companies')}.company, {$this->db->dbprefix('companies')}.name) FROM {$this->db->dbprefix('companies')} WHERE {$this->db->dbprefix('companies')}.id = {$this->db->dbprefix('budgets')}.biller_id ) ";
            $this->db
            ->select("
                {$this->db->dbprefix('expenses_budget')}.id AS id,
                DATE_FORMAT({$this->db->dbprefix('expenses_budget')}.date, '%Y-%m-%d %T') AS date, 
                {$this->db->dbprefix('expenses_budget')}.reference, 
                CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS user, 
                IF({$this->db->dbprefix('companies')}.company != '-', {$this->db->dbprefix('companies')}.company, {$this->db->dbprefix('companies')}.name) AS biller, 
                {$this->db->dbprefix('expense_categories')}.name as category, 
                CONCAT({$this->db->dbprefix('budgets')}.title, ' (', {$this->db->dbprefix('budgets')}.amount, ') ', " . $str . ") as budget,
                {$this->db->dbprefix('expenses_budget')}.amount_usd, 
                {$this->db->dbprefix('expenses_budget')}.amount_khm, 
                {$this->db->dbprefix('expenses_budget')}.amount, 
                {$this->db->dbprefix('expenses_budget')}.note,
                {$this->db->dbprefix('expenses_budget')}.attachment", false)
            ->from('expenses_budget')
            ->join('users',   'users.id=expenses_budget.created_by', 'left')
            ->join('companies', 'companies.id=expenses_budget.biller_id', 'left')
            ->join('budgets', 'expenses_budget.budget_id=budgets.id', 'left')
            ->join('expense_categories', 'expense_categories.id=expenses_budget.category_id', 'left')
            ->group_by('expenses_budget.id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('expenses_budget.created_by', $this->session->userdata('user_id'));
            }
            if ($note) {
                $this->db->like('expenses_budget.note', $note, 'both');
            }
            if ($biller) {
                $this->db->like('companies.id', $biller, 'both');
            }
            if ($reference_no) {
                $this->db->like('expenses_budget.reference', $reference_no, 'both');
            }
            if ($budget) {
                $this->db->like('budgets.title', $budget, 'both');
            }
            if ($warehouse) {
                $this->db->where('expenses_budget.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->db->where('expenses_budget.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('expenses_budget.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($category) {
                $this->db->where_in('expenses_budget.category_id', $arr_cate);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('expenses_budget_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('branch'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('category'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('budget'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('amount_usd'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('amount_khm'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('note'));

                $row     = 2;
                $expense = 0;
                $khm = 0;
                $usd = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->user);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->category);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->budget);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->amount_usd);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->amount_khm);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, strip_tags($data_row->note));
                    $usd += $data_row->amount_usd;
                    $khm += $data_row->amount_khm;
                    $expense += $data_row->amount;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('I' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $usd);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $khm);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $expense);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'expenses_budget_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $str = " (  SELECT IF({$this->db->dbprefix('companies')}.company != '-', {$this->db->dbprefix('companies')}.company, {$this->db->dbprefix('companies')}.name) FROM {$this->db->dbprefix('companies')} WHERE {$this->db->dbprefix('companies')}.id = {$this->db->dbprefix('budgets')}.biller_id ) ";

            $this->load->library('datatables');
            $this->datatables
            ->select("
                {$this->db->dbprefix('expenses_budget')}.id AS id,
                DATE_FORMAT({$this->db->dbprefix('expenses_budget')}.date, '%Y-%m-%d %T') AS date, 
                {$this->db->dbprefix('expenses_budget')}.reference, 
                CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS user, 
                IF({$this->db->dbprefix('companies')}.company != '-', {$this->db->dbprefix('companies')}.company, {$this->db->dbprefix('companies')}.name) AS biller, 
                {$this->db->dbprefix('expense_categories')}.name as category, 
                CONCAT({$this->db->dbprefix('budgets')}.title, ' (', {$this->db->dbprefix('budgets')}.amount, ') ', " . $str . ") as budget_id,
                {$this->db->dbprefix('expenses_budget')}.amount_usd, 
                {$this->db->dbprefix('expenses_budget')}.amount_khm, 
                {$this->db->dbprefix('expenses_budget')}.amount, 
                {$this->db->dbprefix('expenses_budget')}.note,
                {$this->db->dbprefix('expenses_budget')}.attachment", false)
            ->from('expenses_budget')
            ->join('users',   'users.id=expenses_budget.created_by', 'left')
            ->join('companies', 'companies.id=expenses_budget.biller_id', 'left')
            ->join('budgets', 'expenses_budget.budget_id=budgets.id', 'left')
            ->join('expense_categories', 'expense_categories.id=expenses_budget.category_id', 'left')
            ->group_by('expenses_budget.id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('expenses_budget.created_by', $this->session->userdata('user_id'));
            }
            if ($note) {
                $this->datatables->like('expenses_budget.note', $note, 'both');
            }
            if ($biller) {
                $this->datatables->like('companies.id', $biller, 'both');
            }
            if ($reference_no) {
                $this->datatables->like('expenses_budget.reference', $reference_no, 'both');
            }
            if ($budget) {
                $this->datatables->like('budgets.title', $budget, 'both');
            }
            if ($warehouse) {
                $this->datatables->where('expenses_budget.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->datatables->where('expenses_budget.created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where('expenses_budget.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($category) {
                $this->datatables->where_in('expenses_budget.category_id', $arr_cate);
            }

            $this->datatables->unset_column('id');
            echo $this->datatables->generate();
        }
    }

    public function reconcile_report($id = null)
    {
        $this->bpas->checkPermissions();
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['categories'] = $this->reports_model->getExpenseCategories();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('budgets_report')]];
        $meta                     = ['page_title' => lang('reconcile_report'), 'bc' => $bc];
        $this->page_construct('reports/reconcile_report', $meta, $this->data);
    }

    public function getReconcileReport($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('budgets');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $title        = $this->input->get('title') ? $this->input->get('title') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $note         = $this->input->get('note') ? $this->input->get('note') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }

        /*if($preview){
            $this->db
                ->select("
                    {$this->db->dbprefix('budgets')}.id AS id,
                    DATE_FORMAT({$this->db->dbprefix('budgets')}.date, '%Y-%m-%d %T') AS date, 
                    {$this->db->dbprefix('budgets')}.reference, 
                    CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS user, 
                    {$this->db->dbprefix('budgets')}.title, 
                    {$this->db->dbprefix('budgets')}.amount, 
                    COALESCE(SUM({$this->db->dbprefix('expenses_budget')}.amount), 0) AS expenses,
                    {$this->db->dbprefix('budgets')}.note,
                    {$this->db->dbprefix('budgets')}.attachment", false)
                ->from('budgets')
                ->join('users', 'users.id=budgets.created_by', 'left')
                ->join('expenses_budget', 'expenses_budget.budget_id=budgets.id', 'left')
                ->group_by('budgets.id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('budgets.created_by', $this->session->userdata('user_id'));
            }
            if ($note) {
                $this->db->like('budgets.note', $note, 'both');
            }
            if ($reference_no) {
                $this->db->like('budgets.reference', $reference_no, 'both');
            }
            if ($title) {
                $this->db->like('budgets.title', $title, 'both');
            }
            if ($warehouse) {
                $this->db->where('budgets.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->db->where('budgets.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('budgets.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('budgets_report')]];
                $meta = ['page_title' => lang('budgets_report'), 'bc' => $bc];
                $this->page_construct('reports/budgets_preview', $meta, $this->data);
            }
        } else */if ($pdf || $xls) {
            $this->db
                ->select("
                    {$this->db->dbprefix('budgets')}.id AS id,
                    DATE_FORMAT({$this->db->dbprefix('budgets')}.date, '%Y-%m-%d %T') AS date, 
                    {$this->db->dbprefix('budgets')}.reference, 
                    CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS user, 
                    {$this->db->dbprefix('budgets')}.title, 
                    {$this->db->dbprefix('budgets')}.amount, 
                    {$this->db->dbprefix('budgets')}.amount AS expenses,
                    {$this->db->dbprefix('budgets')}.note,
                    {$this->db->dbprefix('budgets')}.note
                    ", false)
                ->from('budgets')
                ->join('users', 'users.id=budgets.created_by', 'left')
                ->group_by('budgets.id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('budgets.created_by', $this->session->userdata('user_id'));
            }
            if ($note) {
                $this->db->like('budgets.note', $note, 'both');
            }
            if ($reference_no) {
                $this->db->like('budgets.reference', $reference_no, 'both');
            }
            if ($title) {
                $this->db->like('budgets.title', $title, 'both');
            }
            if ($warehouse) {
                $this->db->where('budgets.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->db->where('budgets.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('budgets.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('budgets_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('title'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('expenses'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));

                $row     = 2;
                $budget  = 0;
                $expense = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->user);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->title);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->expenses);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, strip_tags($data_row->note));
                    $budget += $data_row->amount;
                    $expense += $data_row->expenses;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('E' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle('F' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $budget);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $expense);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'budgets_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
            ->select("
                {$this->db->dbprefix('bank_reconsile')}.id AS id,
                DATE_FORMAT({$this->db->dbprefix('bank_reconsile')}.start_date, '%Y-%m-%d %T') AS date,
                DATE_FORMAT({$this->db->dbprefix('bank_reconsile')}.end_date, '%Y-%m-%d %T') AS end_date, 
                {$this->db->dbprefix('bank_reconsile')}.account_code, 
                IF({$this->db->dbprefix('companies')}.company != '-', {$this->db->dbprefix('companies')}.company, {$this->db->dbprefix('companies')}.name) AS biller,
                
                {$this->db->dbprefix('bank_reconsile')}.balance_bank, 
                {$this->db->dbprefix('bank_reconsile')}.balance_book,
                CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS user
                ", false)
            ->from('bank_reconsile')
            ->join('users','users.id=bank_reconsile.created_by', 'left')
            ->join('companies', 'companies.id=bank_reconsile.biller_id', 'left')
            ->group_by('bank_reconsile.id');


        /*
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('budgets.created_by', $this->session->userdata('user_id'));
            }

            if ($note) {
                $this->datatables->like('budgets.note', $note, 'both');
            }
            if ($reference_no) {
                $this->datatables->like('budgets.reference', $reference_no, 'both');
            }
            if ($title) {
                $this->datatables->like('budgets.title', $title, 'both');
            }
            if ($warehouse) {
                $this->datatables->where('budgets.warehouse_id', $warehouse);
            }
            if ($user) {
                $this->datatables->where('budgets.created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where('budgets.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }*/
            $detail_link = anchor('admin/account/concile_form_report/$1', '<label class="label label-primary">' . lang('view_form').'</label>', 'class="tip" title="' . lang('show') . '" data-toggle="modal" data-backdrop="static" data-target="#myModal"');

            $this->datatables->add_column('Actions', "<div class='text-center'>".$detail_link."</div>", 'id');
            $this->datatables->unset_column('id');
            echo $this->datatables->generate();
        }
    }

    public function sale_targets()
    {
        $this->bpas->checkPermissions('sales');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['zones']      = $this->site->getAllZones_Order_Group();
        $this->data['salemans']   = $this->site->getAllSalemans($this->Settings->group_saleman_id);

        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('sale_targets_report')]];
        $meta                     = ['page_title' => lang('sale_targets_report'), 'bc' => $bc];
        $this->page_construct('reports/sale_targets', $meta, $this->data);
    }

    public function getSaleTargetsReport($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('sales');
        
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
        $saleman      = $this->input->get('saleman') ? $this->input->get('saleman') : null;
        $zone         = $this->input->get('zone') ? $this->input->get('zone') : null;
        $description  = $this->input->get('description') ? $this->input->get('description') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        $arr_zone     = []; 
        if($zone){
            $arr_zone[] = $zone;
            $child_zones = $this->site->getChildZonesByID($zone);
            if($child_zones){
                foreach ($child_zones as $key => $zn) {
                    $arr_zone[] = $zn->id;
                }
            }
        }

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }

        if ($pdf || $xls) {
            $str = " ( 
                SELECT COALESCE(SUM(s.grand_total), 0) as total_sales_
                FROM {$this->db->dbprefix('sales')} AS s 
                WHERE 
                    s.zone_id IN 
                    (
                        SELECT {$this->db->dbprefix('zones')}.id
                        FROM {$this->db->dbprefix('zones')} 
                        WHERE 
                            {$this->db->dbprefix('zones')}.id IN ({$this->db->dbprefix('sale_targets')}.multi_zone) OR 
                            {$this->db->dbprefix('zones')}.parent_id IN ({$this->db->dbprefix('sale_targets')}.multi_zone)    
                    ) AND
                    (s.date BETWEEN {$this->db->dbprefix('sale_targets')}.start_date AND {$this->db->dbprefix('sale_targets')}.end_date) AND 
                    (s.sale_status != 'pending' AND s.sale_status != 'consignment') AND 
                    s.saleman_by = {$this->db->dbprefix('sale_targets')}.staff_id 
                    LIMIT 1
                ) ";
                
            $this->db->select("
                {$this->db->dbprefix('sale_targets')}.id AS id,
                DATE_FORMAT({$this->db->dbprefix('sale_targets')}.start_date, '%Y-%m-%d') AS start_date, 
                DATE_FORMAT({$this->db->dbprefix('sale_targets')}.end_date, '%Y-%m-%d') AS end_date, 
                IF({$this->db->dbprefix('companies')}.company != '-', CONCAT({$this->db->dbprefix('companies')}.company, '/', {$this->db->dbprefix('companies')}.name), {$this->db->dbprefix('companies')}.name) AS biller, 
                CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS staff, 
                {$this->db->dbprefix('sale_targets')}.multi_zone AS multi_zone,
                amount AS target, 
                (" . $str . ") AS total_sales, 
                description, 
                (" . $str . " / amount * 100) AS percentage,
                IF(amount > " . $str . ", 0, 1) AS status", false)
            ->from('sale_targets')
            ->join("users", 'users.id=sale_targets.staff_id')
            ->join("companies", 'companies.id=sale_targets.biller_id')
            ->group_by('sale_targets.id');

            if ($description) {
                $this->db->like('sale_targets.description', $description, 'both');
            }
            if ($saleman) {
                $this->db->where('sale_targets.staff_id', $saleman);
            }
            if ($biller) {
                $this->db->where('sale_targets.biller_id', $biller);
            }
            if ($start_date) {
                $this->db->where('sale_targets.start_date', $start_date);
            }
            if ($end_date) {
                $this->db->where('sale_targets.end_date', $end_date);
            }
            if ($zone) {
                foreach($arr_zone as $key => $zn){
                    $key == 0 ? $this->db->where('FIND_IN_SET('.$zn.', bpas_sale_targets.multi_zone)') : $this->datatables->or_where('FIND_IN_SET('.$zn.', bpas_sale_targets.multi_zone)');                    
                }
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sale_targets_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('start_date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('end_date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('saleman'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('zone'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('target'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('description'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('percentage'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));

                $row     = 2;
                $target  = 0;
                $total_sales = 0;
                foreach ($data as $data_row) {
                    $multi_zone = $this->site->getMultiZonesByID($data_row->multi_zone);
                    $zones = "";
                    if(!empty($multi_zone) || $multi_zone != null){
                        foreach ($multi_zone as $key => $zone) {
                            $zones .= count($multi_zone)-1 == $key ? $zone->zone_name : $zone->zone_name . ', ';
                        }
                    }

                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->start_date);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->end_date);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->staff);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $zones);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->target));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->total_sales));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->description);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->percentage));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status == 1 ? lang('complete') : lang('not_complete'));
                    $target += $data_row->target;
                    $total_sales += $data_row->total_sales;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('F' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle('G' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $target);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total_sales);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'sale_targets_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $str = " ( 
                SELECT COALESCE(SUM(s.grand_total), 0) as total_sales_
                FROM {$this->db->dbprefix('sales')} AS s 
                WHERE 
                    s.zone_id IN 
                    (
                        SELECT {$this->db->dbprefix('zones')}.id
                        FROM {$this->db->dbprefix('zones')} 
                        WHERE 
                            {$this->db->dbprefix('zones')}.id IN ({$this->db->dbprefix('sale_targets')}.multi_zone) OR 
                            {$this->db->dbprefix('zones')}.parent_id IN ({$this->db->dbprefix('sale_targets')}.multi_zone)    
                    ) AND
                    (s.date BETWEEN {$this->db->dbprefix('sale_targets')}.start_date AND {$this->db->dbprefix('sale_targets')}.end_date) AND 
                    (s.sale_status != 'pending' AND s.sale_status != 'consignment') AND 
                    s.saleman_by = {$this->db->dbprefix('sale_targets')}.staff_id 
                    LIMIT 1
                ) ";
                
            $this->load->library('datatables');
            $this->datatables->select("
                {$this->db->dbprefix('sale_targets')}.id AS id,
                DATE_FORMAT({$this->db->dbprefix('sale_targets')}.start_date, '%Y-%m-%d') AS start_date, 
                DATE_FORMAT({$this->db->dbprefix('sale_targets')}.end_date, '%Y-%m-%d') AS end_date, 
                IF({$this->db->dbprefix('companies')}.company != '-', CONCAT({$this->db->dbprefix('companies')}.company, '/', {$this->db->dbprefix('companies')}.name), {$this->db->dbprefix('companies')}.name) AS biller, 
                CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS staff, 
                {$this->db->dbprefix('sale_targets')}.multi_zone AS zone,
                amount AS target, 
                (" . $str . ") AS total_sales, 
                description, 
                (" . $str . " / amount * 100) AS percentage, 
                IF(amount > " . $str . ", 0, 1) AS status", false)
            ->from('sale_targets')
            ->join("users", 'users.id=sale_targets.staff_id')
            ->join("companies", 'companies.id=sale_targets.biller_id')
            ->group_by('sale_targets.id');

            if ($description) {
                $this->datatables->like('sale_targets.description', $description, 'both');
            }
            if ($saleman) {
                $this->datatables->where('sale_targets.staff_id', $saleman);
            }
            if ($biller) {
                $this->datatables->where('sale_targets.biller_id', $biller);
            }
            if ($start_date) {
                $this->datatables->where('sale_targets.start_date', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('sale_targets.end_date', $end_date);
            }
            if ($zone) {
                foreach($arr_zone as $key => $zn){
                    $key == 0 ? $this->datatables->where('FIND_IN_SET('.$zn.', bpas_sale_targets.multi_zone)') : 
                    $this->datatables->or_where('FIND_IN_SET('.$zn.', bpas_sale_targets.multi_zone)');                    
                }
            }

            $this->datatables->unset_column('id');
            echo $this->datatables->generate();
        }
    }

    public function getSaleTargetsReport_29_08_2023($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('sales');
        
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : null;
        $saleman      = $this->input->get('saleman') ? $this->input->get('saleman') : null;
        $zone         = $this->input->get('zone') ? $this->input->get('zone') : null;
        $description  = $this->input->get('description') ? $this->input->get('description') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        $arr_zone     = []; 
        if($zone){
            $arr_zone[] = $zone;
            $child_zones = $this->site->getChildZonesByID($zone);
            if($child_zones){
                foreach ($child_zones as $key => $zn) {
                    $arr_zone[] = $zn->id;
                }
            }
        }

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }

        if ($pdf || $xls) {
            $str = " ( 
                SELECT COALESCE(SUM(s.grand_total), 0) as total_sales_
                FROM {$this->db->dbprefix('sales')} AS s 
                WHERE 
                    (FIND_IN_SET(s.zone_id, {$this->db->dbprefix('sale_targets')}.multi_zone)) AND
                    (s.date BETWEEN {$this->db->dbprefix('sale_targets')}.start_date AND {$this->db->dbprefix('sale_targets')}.end_date) AND 
                    (s.sale_status != 'pending' AND s.sale_status != 'consignment') AND 
                    s.saleman_by = {$this->db->dbprefix('sale_targets')}.staff_id 
                    LIMIT 1
                ) ";
                
            $this->db->select("
                {$this->db->dbprefix('sale_targets')}.id AS id,
                DATE_FORMAT({$this->db->dbprefix('sale_targets')}.start_date, '%Y-%m-%d') AS start_date, 
                DATE_FORMAT({$this->db->dbprefix('sale_targets')}.end_date, '%Y-%m-%d') AS end_date, 
                IF({$this->db->dbprefix('companies')}.company != '-', CONCAT({$this->db->dbprefix('companies')}.company, '/', {$this->db->dbprefix('companies')}.name), {$this->db->dbprefix('companies')}.name) AS biller, 
                CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS staff, 
                {$this->db->dbprefix('sale_targets')}.multi_zone AS multi_zone,
                amount AS target, 
                (" . $str . ") AS total_sales, 
                description, 
                (" . $str . " / amount * 100) AS percentage,
                IF(amount > " . $str . ", 0, 1) AS status", false)
            ->from('sale_targets')
            ->join("users", 'users.id=sale_targets.staff_id')
            ->join("companies", 'companies.id=sale_targets.biller_id')
            ->group_by('sale_targets.id');

            if ($description) {
                $this->db->like('sale_targets.description', $description, 'both');
            }
            if ($saleman) {
                $this->db->where('sale_targets.staff_id', $saleman);
            }
            if ($biller) {
                $this->db->where('sale_targets.biller_id', $biller);
            }
            if ($start_date) {
                $this->db->where('sale_targets.start_date', $start_date);
            }
            if ($end_date) {
                $this->db->where('sale_targets.end_date', $end_date);
            }
            if ($zone) {
                foreach($arr_zone as $key => $zn){
                    $key == 0 ? $this->db->where('FIND_IN_SET('.$zn.', bpas_sale_targets.multi_zone)') : $this->datatables->or_where('FIND_IN_SET('.$zn.', bpas_sale_targets.multi_zone)');                    
                }
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('sale_targets_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('start_date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('end_date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('saleman'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('zone'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('target'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('total_sales'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('description'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('percentage'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('status'));

                $row     = 2;
                $target  = 0;
                $total_sales = 0;
                foreach ($data as $data_row) {
                    $multi_zone = $this->site->getMultiZonesByID($data_row->multi_zone);
                    $zones = "";
                    if(!empty($multi_zone) || $multi_zone != null){
                        foreach ($multi_zone as $key => $zone) {
                            $zones .= count($multi_zone)-1 == $key ? $zone->zone_name : $zone->zone_name . ', ';
                        }
                    }

                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->start_date);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->end_date);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->staff);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $zones);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->target));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->total_sales));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->description);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->percentage));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status == 1 ? lang('complete') : lang('not_complete'));
                    $target += $data_row->target;
                    $total_sales += $data_row->total_sales;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('F' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->getStyle('G' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $target);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $total_sales);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'sale_targets_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $str = " ( 
                SELECT COALESCE(SUM(s.grand_total), 0) as total_sales_
                FROM {$this->db->dbprefix('sales')} AS s 
                WHERE 
                    (FIND_IN_SET(s.zone_id, {$this->db->dbprefix('sale_targets')}.multi_zone)) AND
                    (s.date BETWEEN {$this->db->dbprefix('sale_targets')}.start_date AND {$this->db->dbprefix('sale_targets')}.end_date) AND 
                    (s.sale_status != 'pending' AND s.sale_status != 'consignment') AND 
                    s.saleman_by = {$this->db->dbprefix('sale_targets')}.staff_id 
                    LIMIT 1
                ) ";
                
            $this->load->library('datatables');
            $this->datatables->select("
                {$this->db->dbprefix('sale_targets')}.id AS id,
                DATE_FORMAT({$this->db->dbprefix('sale_targets')}.start_date, '%Y-%m-%d') AS start_date, 
                DATE_FORMAT({$this->db->dbprefix('sale_targets')}.end_date, '%Y-%m-%d') AS end_date, 
                IF({$this->db->dbprefix('companies')}.company != '-', CONCAT({$this->db->dbprefix('companies')}.company, '/', {$this->db->dbprefix('companies')}.name), {$this->db->dbprefix('companies')}.name) AS biller, 
                CONCAT({$this->db->dbprefix('users')}.first_name, ' ', {$this->db->dbprefix('users')}.last_name) AS staff, 
                {$this->db->dbprefix('sale_targets')}.multi_zone AS zone,
                amount AS target, 
                (" . $str . ") AS total_sales, 
                description, 
                (" . $str . " / amount * 100) AS percentage, 
                IF(amount > " . $str . ", 0, 1) AS status", false)
            ->from('sale_targets')
            ->join("users", 'users.id=sale_targets.staff_id')
            ->join("companies", 'companies.id=sale_targets.biller_id')
            ->group_by('sale_targets.id');

            if ($description) {
                $this->datatables->like('sale_targets.description', $description, 'both');
            }
            if ($saleman) {
                $this->datatables->where('sale_targets.staff_id', $saleman);
            }
            if ($biller) {
                $this->datatables->where('sale_targets.biller_id', $biller);
            }
            if ($start_date) {
                $this->datatables->where('sale_targets.start_date', $start_date);
            }
            
            if ($end_date) {
                $this->datatables->where('sale_targets.end_date', $end_date);
            }

            if ($zone) {
                foreach($arr_zone as $key => $zn){
                    $key == 0 ? $this->datatables->where('FIND_IN_SET('.$zn.', bpas_sale_targets.multi_zone)') : $this->datatables->or_where('FIND_IN_SET('.$zn.', bpas_sale_targets.multi_zone)');                    
                }
            }

            $this->datatables->unset_column('id');
            echo $this->datatables->generate();

        }
    }
    public function product_sales_report()
    {
        $product = $this->input->post("product");
        $category = $this->input->post("category");
        $warehouse_id = $this->input->post("warehouse");
        $start_date = $this->input->post("start_date");
        $end_date = $this->input->post("end_date");
        $saleman = $this->input->post("saleman");
        $biller = $this->input->post("biller");
        $customer = $this->input->post("customer");
        $project = $this->input->post("project");
        
        $allow_category = $this->site->getCategoryByProject();
        if($allow_category){
            $this->db->where_in("categories.id",$allow_category);
        }
        ($category ? $this->db->where('id',$category) : " ");
        $q = $this->db->get('categories');
        if($q->num_rows() > 0){
            foreach($q->result() as $row){
                $categories[] = $row;
            }
        
        }else{
            $categories = null;
        }
        if(isset($_POST['xls']) || isset($_POST['pdf'])){

            if (!empty($categories)) {
                
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_type'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('unit_quantity'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('unit_price'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('total_discount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('total_cost'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('total_price'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('gross_profit'));
    
                $total = 0;
                if($categories){
                    $row = 2;
                    foreach($categories as $category_row){
                        $data = $this->reports_model->getProductBySales($category_row->id, $start_date, $end_date, $product, $warehouse_id, $saleman, $biller, $project, $customer);
                        if($data){
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, $category_row->name);
                            $row +=1;
                            $total_discount     =0;
                            $total_cost         =0;
                            $total_subtotal     =0;
                            $total_gross_profit =0;
                            foreach ($data as $data_row) {
                                if($data_row->item_discount > 0){
                                    $data_row->unit_price = $data_row->unit_price + ($data_row->item_discount / $data_row->unit_quantity) ;
                                }
                                if(!$this->Admin && !$this->Owner && !$this->GP['products-cost']){
                                    $data_row->cost = 0;
                                }
                                $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->product_code);
                                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->product_name);
                                $this->excel->getActiveSheet()->SetCellValue('C' . $row, ucfirst($data_row->product_type));
                                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
                                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->unit_quantity." ".$data_row->unit_name);
                                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->unit_price));
                                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->item_discount));
                                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->cost));
                                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->subtotal));
                                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->subtotal-$data_row->cost));
                                $total_discount += $data_row->item_discount;
                                $total_cost += $data_row->cost;
                                $total_subtotal += $data_row->subtotal;
                                $total_gross_profit += $data_row->subtotal-$data_row->cost;
                                $row++;
                            }
                            $style = array(
                                'font'  => array(
                                    'bold'  => true,
                                )
                            );

                            $this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($total_discount));
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($total_cost));
                            $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($total_subtotal));
                            $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($total_gross_profit));
                            
                            $grand_total_cost       += $total_cost;
                            $grand_total_discount   += $total_discount;
                            $grand_total_subtotal   += $total_subtotal;
                            $grand_total_gross_profit += $total_gross_profit;
                            $row++;
                        }
                    }
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $style = array(
                                    'font'  => array(
                                        'bold'  => true,
                                        'color' => array('rgb' => 'FF0000')
                                    )
                                );
                            $this->excel->getActiveSheet()->getStyle("G" . $row . ":K" . $row)->getBorders()
                            ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':K'.$row.'')->applyFromArray($style);
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, lang('total'));
                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($grand_total_discount));
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($grand_total_cost));
                            $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($grand_total_subtotal));
                            $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($grand_total_gross_profit));
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);

                $filename = 'product_sales_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        }
        
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['salemans'] = $this->site->getSalemans();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['result_categories'] = $this->reports_model->getAllCategoriesByInventoryInOut($category);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('product_sales_report')));
        $meta = array('page_title' => lang('product_sales_report'), 'bc' => $bc);   
        $this->page_construct('reports/product_sales_report',$meta,$this->data);
    }
    
    public function product_purchases_report()
    {
        $product = $this->input->post("product");
        $category = $this->input->post("category");
        $warehouse_id = $this->input->post("warehouse");
        $start_date = $this->input->post("start_date");
        $end_date = $this->input->post("end_date");
        $biller = $this->input->post("biller");
        $supplier = $this->input->post("supplier");
        $project = $this->input->post("project");
        
        ($category ? $this->db->where('id',$category) : " ");
        $q = $this->db->get('categories');
        if($q->num_rows() > 0){
            foreach($q->result() as $row){
                $categories[] = $row;
            }
        
        }else{
            $categories = null;
        }
        if(isset($_POST['xls']) || isset($_POST['pdf'])){

            if (!empty($categories)) {
                
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_purchases_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_type'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('unit_cost'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('subtotal'));
    
                $total = 0;
                if($categories){
                    $row = 2;
                    $grand_total_quantity =0;   
                    $grand_total_discount =0;
                    $grand_total_subtotal =0;
                    foreach($categories as $category_row){
                        $data = $this->reports_model->getProductByPurchases($category_row->id, $start_date, $end_date, $product, $warehouse_id, $biller, $project, $supplier);
                        if($data){
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, $category_row->name);
                            $row +=1;
                            $total_quantity     =0; 
                            $total_discount     =0;
                            $total_subtotal     =0;
                            foreach ($data as $data_row) {
                                $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->product_code);
                                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->product_name);
                                $this->excel->getActiveSheet()->SetCellValue('C' . $row, ucfirst($data_row->product_type));
                                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                                
                                $this->excel->getActiveSheet()->SetCellValue('E' . $row, strip_tags(html_entity_decode($this->bpas->convertQty($data_row->product_id,$data_row->quantity))));
                                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->unit_cost);
                                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->item_discount));
                                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->subtotal));
            
                                $total_quantity += $data_row->quantity;
                                $total_discount += $data_row->item_discount;
                                $total_subtotal += $data_row->subtotal;
                                $row++;
                            }
                            $style = array(
                                'font'  => array(
                                    'bold'  => true,
                                )
                            );
                
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':H'.$row.'')->applyFromArray($style);
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':H'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($total_quantity));
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($total_discount));
                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($total_subtotal));
                            
                            $grand_total_quantity   += $total_quantity;
                            $grand_total_discount   += $total_discount;
                            $grand_total_subtotal   += $total_subtotal;
                            $row++;
                        }
                    }
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':H'.$row.'')->applyFromArray($style);
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':H'.$row.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                            $style = array(
                                    'font'  => array(
                                        'bold'  => true,
                                        'color' => array('rgb' => 'FF0000')
                                    )
                                );
                            $this->excel->getActiveSheet()->getStyle("E" . $row . ":H" . $row)->getBorders()
                            ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                            $this->excel->getActiveSheet()->getStyle('A'.$row.':I'.$row.'')->applyFromArray($style);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, lang('total'));
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($grand_total_quantity));
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($grand_total_discount));
                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($grand_total_subtotal));
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(40);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);



                $filename = 'product_purchases_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        }
        
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['result_categories'] = $this->reports_model->getAllCategoriesByInventoryInOut($category);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('product_purchases_report')));
        $meta = array('page_title' => lang('product_purchases_report'), 'bc' => $bc);   
        $this->page_construct('reports/product_purchases_report',$meta,$this->data);
    }
    /*
    public function getProductsReport($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('index');
        $dataTable_filter = $this->input->post('sSearch') ? $this->input->post('sSearch') : null;
        $dataTable_filter_col_1 = $this->input->post('sSearch_0') ? $this->input->post('sSearch_0') : null;
        $dataTable_filter_col_2 = $this->input->post('sSearch_1') ? $this->input->post('sSearch_1') : null;

        $product     = $this->input->get('product') ? $this->input->get('product') : null;
        $category    = $this->input->get('category') ? $this->input->get('category') : null;
        $brand       = $this->input->get('brand') ? $this->input->get('brand') : null;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : null;
        $warehouse   = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $cf1         = $this->input->get('cf1') ? $this->input->get('cf1') : null;
        $cf2         = $this->input->get('cf2') ? $this->input->get('cf2') : null;
        $cf3         = $this->input->get('cf3') ? $this->input->get('cf3') : null;
        $cf4         = $this->input->get('cf4') ? $this->input->get('cf4') : null;
        $cf5         = $this->input->get('cf5') ? $this->input->get('cf5') : null;
        $cf6         = $this->input->get('cf6') ? $this->input->get('cf6') : null;
        $start_date  = $this->input->get('start_date') ? $this->input->get('start_date') : date('d-m-Y') . " 00:00:00";
        $end_date    = $this->input->get('end_date') ? $this->input->get('end_date') : date('d-m-Y') . " 23:59:59";

        $pp                     = "( SELECT product_id, SUM(CASE WHEN pi.purchase_id IS NOT NULL THEN quantity ELSE 0 END) as purchasedQty, SUM(quantity_balance) as balacneQty, SUM( unit_cost * quantity_balance ) balacneValue, SUM( (CASE WHEN pi.purchase_id IS NOT NULL THEN (pi.subtotal) ELSE 0 END) ) totalPurchase from {$this->db->dbprefix('purchase_items')} pi LEFT JOIN {$this->db->dbprefix('purchases')} p on p.id = pi.purchase_id WHERE pi.status = 'received' ";
        $ending_purchases       = $pp;

        $pps                    = '( SELECT spi.product_id, SUM( spi.quantity ) purchasedQty FROM ' . $this->db->dbprefix('sales') . ' sp LEFT JOIN ' . $this->db->dbprefix('sale_items') . ' spi on sp.id = spi.sale_id WHERE sp.sale_status != "returned" AND sp.sale_status != "pending" AND sp.store_sale = 1 ';
        $ending_pps             = $pps;
        $pps_returns            = '( SELECT spi.product_id, Abs(SUM( spi.quantity )) purchasedQty FROM ' . $this->db->dbprefix('sales') . ' sp LEFT JOIN ' . $this->db->dbprefix('sale_items') . ' spi on sp.id = spi.sale_id WHERE sp.sale_status = "returned" AND sp.store_sale = 1 ';
        $ending_pps_returns     = $pps_returns;

        $sp                     = '( SELECT si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, SUM( si.item_discount ) totalItemDiscount, SUM( si.total_weight ) totalWeight, s.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s LEFT JOIN ' . $this->db->dbprefix('sale_items') . ' si on s.id = si.sale_id WHERE s.sale_status != "returned" AND s.sale_status != "pending" AND s.pos != 1 ';
        $sp_addon               = '( SELECT si_addon.product_id, SUM( si_addon.quantity ) soldQty, SUM( si_addon.subtotal ) totalSale, s_addon.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s_addon LEFT JOIN ' . $this->db->dbprefix('sale_addon_items') . ' si_addon on s_addon.id = si_addon.sale_id WHERE s_addon.sale_status != "returned" AND s_addon.sale_status != "pending" ';
        $sp_combo               = '( SELECT si_combo.product_id, SUM( si_combo.quantity ) soldQty, SUM( si_combo.subtotal ) totalSale, s_combo.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s_combo LEFT JOIN ' . $this->db->dbprefix('sale_combo_items') . ' si_combo on s_combo.id = si_combo.sale_id WHERE s_combo.sale_status != "returned" AND s_combo.sale_status != "pending" ';
        $pos_sales              = " ( SELECT product_id,order_discount, SUM( ci.quantity ) soldQty FROM " . $this->db->dbprefix('sales') . " s LEFT JOIN " . $this->db->dbprefix('costing') . " ci on s.id = ci.sale_id WHERE s.sale_status != 'pending' AND s.pos = 1 ";

        $ending_sales           = '( SELECT si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, SUM( si.item_discount ) totalItemDiscount, SUM( si.total_weight ) totalWeight, s.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s LEFT JOIN ' . $this->db->dbprefix('sale_items') . ' si on s.id = si.sale_id WHERE s.sale_status != "pending" ';
        $ending_addonsales      = '( SELECT si_addon.product_id, SUM( si_addon.quantity ) soldQty, SUM( si_addon.subtotal ) totalSale, s_addon.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s_addon LEFT JOIN ' . $this->db->dbprefix('sale_addon_items') . ' si_addon on s_addon.id = si_addon.sale_id WHERE s_addon.sale_status != "pending" ';
        $ending_combosales      = '( SELECT si_combo.product_id, SUM( si_combo.quantity ) soldQty, SUM( si_combo.subtotal ) totalSale, s_combo.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s_combo LEFT JOIN ' . $this->db->dbprefix('sale_combo_items') . ' si_combo on s_combo.id = si_combo.sale_id WHERE s_combo.sale_status != "pending" ';
        $ending_pos_sales       = " ( SELECT product_id, SUM( ci.quantity ) soldQty FROM " . $this->db->dbprefix('sales') . " s LEFT JOIN " . $this->db->dbprefix('costing') . " ci on s.id = ci.sale_id WHERE s.sale_status != 'pending' AND s.pos = 1 ";

        $pr1                    = '( SELECT si_return.product_id, SUM( si_return.quantity ) soldQty_return, SUM( si_return.subtotal ) totalSale_return from ' . $this->db->dbprefix('sales') . ' ss LEFT JOIN ' . $this->db->dbprefix('sale_items') . ' si_return on ss.id = si_return.sale_id WHERE ss.sale_status = "returned" ';
        $pr2                    = "( SELECT product_id, SUM(sri.quantity) as returnQty, SUM(sri.subtotal) returnTotalSale from {$this->db->dbprefix('returns')} sr LEFT JOIN {$this->db->dbprefix('return_items')} sri on sr.id = sri.return_id WHERE 1 ";
        $ending_returns         = $pr2;

        $transfers              = "( SELECT product_id, SUM(quantity) as transferQty, SUM(quantity_balance) as balacneQty, SUM(unit_cost * quantity_balance) balacneValue, SUM(pi.subtotal) totalTransfer from {$this->db->dbprefix('purchase_items')} pi LEFT JOIN {$this->db->dbprefix('transfers')} t on t.id = pi.transfer_id WHERE pi.status = 'received' ";
        $ending_transfers_in    = $transfers_in  = $transfers;
        $ending_transfers_out   = $transfers_out = $transfers;

        $adjustments_add        = " ( SELECT aji.product_id, SUM(aji.quantity) adjustmentQty FROM {$this->db->dbprefix('adjustment_items')} aji LEFT JOIN {$this->db->dbprefix('adjustments')} aj ON aj.id = aji.adjustment_id WHERE aji.type = 'addition' ";
        $adjustments_sub        = " ( SELECT aji.product_id, SUM(aji.quantity) adjustmentQty FROM {$this->db->dbprefix('adjustment_items')} aji LEFT JOIN {$this->db->dbprefix('adjustments')} aj ON aj.id = aji.adjustment_id WHERE aji.type = 'subtraction' ";
        $ending_adjustments_add = $adjustments_add = $adjustments_add;
        $ending_adjustments_sub = $adjustments_sub = $adjustments_sub;

        $reward_exchanged_in    = " ( 
                                        SELECT rexi.exchange_product_id AS product_id, SUM(rexi.exchange_quantity) AS exchangedQty
                                        FROM {$this->db->dbprefix('rewards_exchange')} rex 
                                        LEFT JOIN {$this->db->dbprefix('reward_exchange_items')} rexi ON rexi.reward_exchange_id = rex.id 
                                        WHERE rex.category = 'customer' ";
        $reward_received_in     = " ( 
                                        SELECT rexi.receive_product_id AS product_id, SUM(sti.quantity) AS receivedQty
                                        FROM {$this->db->dbprefix('rewards_exchange')} rex 
                                        LEFT JOIN {$this->db->dbprefix('reward_exchange_items')} rexi ON rexi.reward_exchange_id = rex.id 
                                        LEFT JOIN (
                                            SELECT 
                                                {$this->db->dbprefix('stock_received')}.date,
                                                {$this->db->dbprefix('stock_received')}.warehouse_id,
                                                {$this->db->dbprefix('stock_received_items')}.product_id, 
                                                {$this->db->dbprefix('stock_received_items')}.reward_exchange_item_id, 
                                                SUM(COALESCE({$this->db->dbprefix('stock_received_items')}.quantity, 0)) AS quantity
                                            FROM {$this->db->dbprefix('stock_received')} 
                                            LEFT JOIN 
                                                {$this->db->dbprefix('stock_received_items')} ON 
                                                {$this->db->dbprefix('stock_received_items')}.stock_received_id = {$this->db->dbprefix('stock_received')}.id AND 
                                                {$this->db->dbprefix('stock_received')}.reward_exchange_id IS NOT NULL
                                            GROUP BY {$this->db->dbprefix('stock_received_items')}.reward_exchange_item_id
                                        ) sti ON sti.reward_exchange_item_id = rexi.id AND sti.product_id = rexi.receive_product_id
                                        WHERE rex.category = 'supplier' AND rex.type = 'product' ";
        $reward_exchanged_out   = " ( 
                                        SELECT rexi.exchange_product_id AS product_id, SUM(rexi.exchange_quantity) AS exchangedQty
                                        FROM {$this->db->dbprefix('rewards_exchange')} rex 
                                        LEFT JOIN {$this->db->dbprefix('reward_exchange_items')} rexi ON rexi.reward_exchange_id = rex.id 
                                        WHERE rex.category = 'supplier' ";
        $reward_received_out    = " ( 
                                        SELECT rexi.receive_product_id AS product_id, SUM(sti.quantity) AS receivedQty
                                        FROM {$this->db->dbprefix('rewards_exchange')} rex 
                                        LEFT JOIN {$this->db->dbprefix('reward_exchange_items')} rexi ON rexi.reward_exchange_id = rex.id 
                                        LEFT JOIN (
                                            SELECT 
                                                {$this->db->dbprefix('stock_received')}.date,
                                                {$this->db->dbprefix('stock_received')}.warehouse_id,
                                                {$this->db->dbprefix('stock_received_items')}.product_id, 
                                                {$this->db->dbprefix('stock_received_items')}.reward_exchange_item_id, 
                                                SUM(COALESCE({$this->db->dbprefix('stock_received_items')}.quantity, 0)) AS quantity
                                            FROM {$this->db->dbprefix('stock_received')} 
                                            LEFT JOIN 
                                                {$this->db->dbprefix('stock_received_items')} ON 
                                                {$this->db->dbprefix('stock_received_items')}.stock_received_id = {$this->db->dbprefix('stock_received')}.id AND 
                                                {$this->db->dbprefix('stock_received')}.reward_exchange_id IS NOT NULL
                                            GROUP BY {$this->db->dbprefix('stock_received_items')}.reward_exchange_item_id
                                        ) sti ON sti.reward_exchange_item_id = rexi.id AND sti.product_id = rexi.receive_product_id
                                        WHERE rex.category = 'customer' AND rex.type = 'product' ";

        $ending_reward_exchanged_in  = $reward_exchanged_in;
        $ending_reward_received_in   = $reward_received_in;
        $ending_reward_exchanged_out = $reward_exchanged_out;
        $ending_reward_received_out  = $reward_received_out;

        if ($start_date || $warehouse) {
            if ($start_date) {
                $start_date  = $this->bpas->fld($start_date);
                $end_date    = $end_date ? $this->bpas->fld($end_date) : date('Y-m-d');

                $pp                          .= " AND p.date >= '{$start_date}' AND p.date <= '{$end_date}' ";
                $ending_purchases            .= " AND p.date < '{$start_date}' ";

                $pps                         .= " AND sp.date >= '{$start_date}' AND sp.date <= '{$end_date}' ";
                $ending_pps                  .= " AND sp.date < '{$start_date}' ";

                $pps_returns                 .= " AND sp.date >= '{$start_date}' AND sp.date <= '{$end_date}' ";
                $ending_pps_returns          .= " AND sp.date < '{$start_date}' ";

                $sp                          .= " AND s.date >= '{$start_date}' AND s.date <= '{$end_date}' "; 
                $sp_addon                    .= " AND s_addon.date >= '{$start_date}' AND s_addon.date <= '{$end_date}' ";
                $sp_combo                    .= " AND s_combo.date >= '{$start_date}' AND s_combo.date <= '{$end_date}' ";

                $pos_sales                   .= " AND s.date >= '{$start_date}' AND s.date <= '{$end_date}' ";
                $ending_sales                .= " AND s.date < '{$start_date}' "; 
                $ending_addonsales           .= " AND s_addon.date < '{$start_date}' ";
                $ending_combosales           .= " AND s_combo.date < '{$start_date}' ";
                $ending_pos_sales            .= " AND s.date < '{$start_date}' "; 

                $pr1                         .= " AND ss.date >= '{$start_date}' AND ss.date <= '{$end_date}' ";
                $pr2                         .= " AND sr.date >= '{$start_date}' AND sr.date <= '{$end_date}' ";
                $ending_returns              .= " AND sr.date < '{$start_date}' ";

                $transfers_in                .= " AND t.date >= '{$start_date}' AND t.date <= '{$end_date}' ";
                $ending_transfers_in         .= " AND t.date < '{$start_date}' ";      
                $transfers_out               .= " AND t.date >= '{$start_date}' AND t.date <= '{$end_date}' ";
                $ending_transfers_out        .= " AND t.date < '{$start_date}' ";

                $adjustments_add             .= " AND aj.date >= '{$start_date}' AND aj.date <= '{$end_date}' ";
                $ending_adjustments_add      .= " AND aj.date < '{$start_date}' ";
                $adjustments_sub             .= " AND aj.date >= '{$start_date}' AND aj.date <= '{$end_date}' ";
                $ending_adjustments_sub      .= " AND aj.date < '{$start_date}' ";

                $reward_exchanged_in         .= " AND rex.date >= '{$start_date}' AND rex.date <= '{$end_date}' ";
                $ending_reward_exchanged_in  .= " AND rex.date < '{$start_date}' ";
                $reward_received_in          .= " AND sti.date >= '{$start_date}' AND sti.date <= '{$end_date}' ";
                $ending_reward_received_in   .= " AND sti.date < '{$start_date}' ";

                $reward_exchanged_out        .= " AND rex.date >= '{$start_date}' AND rex.date <= '{$end_date}' ";
                $ending_reward_exchanged_out .= " AND rex.date < '{$start_date}' ";
                $reward_received_out         .= " AND sti.date >= '{$start_date}' AND sti.date <= '{$end_date}' ";
                $ending_reward_received_out  .= " AND sti.date < '{$start_date}' ";
            }
            if ($warehouse) {
                $pp                          .= " AND pi.warehouse_id = '{$warehouse}' ";
                $ending_purchases            .= " AND pi.warehouse_id = '{$warehouse}' ";

                $pps                         .= " AND spi.to_warehouse_id = '{$warehouse}' ";
                $ending_pps                  .= " AND spi.to_warehouse_id = '{$warehouse}' ";

                $pps_returns                 .= " AND spi.to_warehouse_id = '{$warehouse}' ";
                $ending_pps_returns          .= " AND spi.to_warehouse_id = '{$warehouse}' ";

                $sp                          .= " AND si.warehouse_id = '{$warehouse}' ";
                $sp_addon                    .= " AND si_addon.warehouse_id = '{$warehouse}' ";
                $sp_combo                    .= " AND si_combo.warehouse_id = '{$warehouse}' ";
                $pos_sales                   .= " AND s.warehouse_id = '{$warehouse}' ";

                $ending_sales                .= " AND si.warehouse_id = '{$warehouse}' ";
                $ending_addonsales           .= " AND si_addon.warehouse_id = '{$warehouse}' ";
                $ending_combosales           .= " AND si_combo.warehouse_id = '{$warehouse}' ";
                $ending_pos_sales            .= " AND s.warehouse_id = '{$warehouse}' ";

                $pr1                         .= " AND si_return.warehouse_id = '{$warehouse}' ";
                $pr2                         .= " AND sr.warehouse_id = '{$warehouse}' ";
                $ending_returns              .= " AND sr.warehouse_id = '{$warehouse}' ";
                
                $transfers_in                .= " AND t.to_warehouse_id = '{$warehouse}' ";
                $ending_transfers_in         .= " AND t.to_warehouse_id = '{$warehouse}' ";
                $transfers_out               .= " AND t.from_warehouse_id = '{$warehouse}' ";
                $ending_transfers_out        .= " AND t.from_warehouse_id = '{$warehouse}' ";

                $adjustments_add             .= " AND aji.warehouse_id = '{$warehouse}' ";
                $ending_adjustments_add      .= " AND aji.warehouse_id = '{$warehouse}' ";
                $adjustments_sub             .= " AND aji.warehouse_id = '{$warehouse}' ";
                $ending_adjustments_sub      .= " AND aji.warehouse_id = '{$warehouse}' ";

                $reward_exchanged_in         .= " AND rex.warehouse_id = '{$warehouse}' ";
                $ending_reward_exchanged_in  .= " AND rex.warehouse_id = '{$warehouse}' ";
                $reward_received_in          .= " AND sti.warehouse_id = '{$warehouse}' ";
                $ending_reward_received_in   .= " AND sti.warehouse_id = '{$warehouse}' ";

                $reward_exchanged_out        .= " AND rex.warehouse_id = '{$warehouse}' ";
                $ending_reward_exchanged_out .= " AND rex.warehouse_id = '{$warehouse}' ";
                $reward_received_out         .= " AND sti.warehouse_id = '{$warehouse}' ";
                $ending_reward_received_out  .= " AND sti.warehouse_id = '{$warehouse}' ";
            }
        }
        $pp                          .= ' GROUP BY pi.product_id ) PCosts';
        $ending_purchases            .= ' GROUP BY pi.product_id ) Ending_Purchases';
        $pps                         .= ' GROUP BY spi.product_id ) Purchases_Store';
        $ending_pps                  .= ' GROUP BY spi.product_id ) Ending_PPS';
        $pps_returns                 .= ' GROUP BY spi.product_id ) Purchases_Store_Return';
        $ending_pps_returns          .= ' GROUP BY spi.product_id ) Ending_PPS_Return';
        $sp                          .= ' GROUP BY si.product_id ) PSales';
        $pos_sales                   .= ' GROUP BY ci.product_id ) POSSales';
        $sp_addon                    .= ' GROUP BY si_addon.product_id ) PaddonSales';
        $sp_combo                    .= ' GROUP BY si_combo.product_id ) PcomboSales';
        $ending_sales                .= ' GROUP BY si.product_id ) Ending_Sales';
        $ending_addonsales           .= ' GROUP BY si_addon.product_id ) Ending_AddonSales';
        $ending_combosales           .= ' GROUP BY si_combo.product_id ) Ending_ComboSales';
        $ending_pos_sales            .= ' GROUP BY ci.product_id ) Ending_POSSales';
        $pr1                         .= ' GROUP BY si_return.product_id ) PSReturn';
        $pr2                         .= ' GROUP BY sri.product_id ) PReturn';
        $ending_returns              .= ' GROUP BY sri.product_id ) Ending_PReturn';
        $transfers_in                .= ' GROUP BY pi.product_id ) Transfers_IN';
        $ending_transfers_in         .= ' GROUP BY pi.product_id ) Ending_Transfers_IN';
        $transfers_out               .= ' GROUP BY pi.product_id ) Transfers_OUT';
        $ending_transfers_out        .= ' GROUP BY pi.product_id ) Ending_Transfers_OUT';
        $adjustments_add             .= ' GROUP BY aji.product_id ) Adjustments_ADD';
        $ending_adjustments_add      .= ' GROUP BY aji.product_id ) Ending_Adjustments_ADD';
        $adjustments_sub             .= ' GROUP BY aji.product_id ) Adjustments_SUB';
        $ending_adjustments_sub      .= ' GROUP BY aji.product_id ) Ending_Adjustments_SUB';

        $reward_exchanged_in         .= ' GROUP BY rexi.exchange_product_id ) RwEx_IN';
        $ending_reward_exchanged_in  .= ' GROUP BY rexi.exchange_product_id ) Ending_RwEx_IN';
        $reward_received_in          .= ' GROUP BY sti.product_id           ) RwRe_IN';
        $ending_reward_received_in   .= ' GROUP BY sti.product_id           ) Ending_RwRe_IN';
        $reward_exchanged_out        .= ' GROUP BY rexi.exchange_product_id ) RwEx_OUT';
        $ending_reward_exchanged_out .= ' GROUP BY rexi.exchange_product_id ) Ending_RwEx_OUT';
        $reward_received_out         .= ' GROUP BY sti.product_id           ) RwRe_OUT';
        $ending_reward_received_out  .= ' GROUP BY sti.product_id           ) Ending_RwRe_OUT';

        $vrn = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM ' . $this->db->dbprefix('product_variants') . ' WHERE name="New" GROUP BY product_id) NVariant';
        $vro = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM ' . $this->db->dbprefix('product_variants') . ' WHERE name="Old" GROUP BY product_id) OVariant';
        $vrb = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM ' . $this->db->dbprefix('product_variants') . ' WHERE name="Broken" GROUP BY product_id) BVariant';

        if ($preview) {
            $this->db->select(
                    $this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . ".name, 
                    COALESCE( Ending_Purchases.purchasedQty, 0 ) 
                    + COALESCE( Ending_PPS.purchasedQty, 0 ) 
                    - COALESCE( Ending_PPS_Return.purchasedQty, 0 ) 
                    - COALESCE( Ending_Sales.soldQty, 0 ) 
                    - COALESCE( Ending_AddonSales.soldQty, 0 ) 
                    - COALESCE( Ending_ComboSales.soldQty, 0 ) 
                    - COALESCE( Ending_POSSales.soldQty, 0 ) 
                    + COALESCE( Ending_PReturn.returnQty, 0 ) 
                    - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) 
                    + COALESCE( Ending_Transfers_IN.transferQty, 0 ) 
                    + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 )
                    - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) 
                    + COALESCE( Ending_RwEx_IN.exchangedQty, 0 ) 
                    + COALESCE( Ending_RwRe_IN.receivedQty, 0 ) 
                    - COALESCE( Ending_RwEx_OUT.exchangedQty, 0 ) 
                    - COALESCE( Ending_RwRe_OUT.receivedQty, 0 ) 
                    as BeginningQty,
                    COALESCE(PCosts.purchasedQty, 0 ) 
                    + COALESCE( Purchases_Store.purchasedQty, 0 ) 
                    - COALESCE( Purchases_Store_Return.purchasedQty, 0 ) 
                    as PurchasedQty,
                    COALESCE( Transfers_IN.transferQty, 0 ) as TransferQtyIN,
                    COALESCE( Transfers_OUT.transferQty, 0 ) as TransferQtyOUT,
                    COALESCE( Adjustments_ADD.adjustmentQty, 0 ) as AdjustmentQtyADD,
                    COALESCE( Adjustments_SUB.adjustmentQty, 0 ) as AdjustmentQtySUB,
                    (
                        COALESCE(PSales.soldQty, 0 ) 
                        + COALESCE( PaddonSales.soldQty, 0 ) 
                        + COALESCE( PcomboSales.soldQty, 0 ) 
                        + COALESCE( POSSales.soldQty, 0 )
                    ) as SoldQty,
                    COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                    COALESCE( PSales.totalItemDiscount, 0 ) as discount,
                    COALESCE( RwEx_IN.exchangedQty, 0 ) as ExchangedQtyIN,
                    COALESCE( RwRe_IN.receivedQty, 0 ) as ReceivedQtyIN,
                    COALESCE( RwEx_OUT.exchangedQty, 0 ) as ExchangedQtyOUT,
                    COALESCE( RwRe_OUT.receivedQty, 0 ) as ReceivedQtyOUT,
                    (   
                        COALESCE( Ending_Purchases.purchasedQty, 0 ) 
                        + COALESCE( Ending_PPS.purchasedQty, 0 ) 
                        - COALESCE( Ending_PPS_Return.purchasedQty, 0 ) 
                        - COALESCE( Ending_Sales.soldQty, 0 ) 
                        - COALESCE( Ending_AddonSales.soldQty, 0 ) 
                        - COALESCE( Ending_ComboSales.soldQty, 0 ) 
                        + COALESCE( Ending_PReturn.returnQty, 0 ) 
                        - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) 
                        + COALESCE( Ending_Transfers_IN.transferQty, 0 ) 
                        + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) 
                        - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) 
                        + COALESCE( Ending_RwEx_IN.exchangedQty, 0 ) 
                        + COALESCE( Ending_RwRe_IN.receivedQty, 0 ) 
                        - COALESCE( Ending_RwEx_OUT.exchangedQty, 0 ) 
                        - COALESCE( Ending_RwRe_OUT.receivedQty, 0 ) 
                        
                        + COALESCE( PCosts.purchasedQty, 0 ) 
                        + COALESCE( Purchases_Store.purchasedQty, 0 ) 
                        - COALESCE( Purchases_Store_Return.purchasedQty, 0 ) 
                        + COALESCE( Transfers_IN.transferQty, 0 ) 
                        - COALESCE( Transfers_OUT.transferQty, 0 ) 
                        + COALESCE( Adjustments_ADD.adjustmentQty, 0 ) 
                        - COALESCE( Adjustments_SUB.adjustmentQty, 0 ) 
                        - COALESCE( PSales.soldQty, 0 ) 
                        - COALESCE( PaddonSales.soldQty, 0 ) 
                        - COALESCE( PcomboSales.soldQty, 0 ) 
                        - COALESCE( POSSales.soldQty, 0 ) 
                        + COALESCE( PReturn.returnQty, 0 ) 
                        + Abs(COALESCE( PSReturn.soldQty_return, 0 ))
                        + COALESCE( RwEx_IN.exchangedQty, 0 )
                        + COALESCE( RwRe_IN.receivedQty, 0 )
                        - COALESCE( RwEx_OUT.exchangedQty, 0 )
                        - COALESCE( RwRe_OUT.receivedQty, 0 )
                    ) as BalacneQty,
                    COALESCE( PSales.totalWeight, 0 ) as weight,
                    COALESCE(NVariant.sQty, 0) as qtyNewVar,
                    COALESCE(OVariant.sQty, 0) as qtyOldVar,
                    COALESCE(BVariant.sQty, 0) as qtyBrokenVar,
                    {$this->db->dbprefix('products')}.id as id", false)
                ->from('products')
                ->join($pp,                          'products.id = PCosts.product_id',                 'left')
                ->join($ending_purchases,            'products.id = Ending_Purchases.product_id',       'left')
                ->join($pps,                         'products.id = Purchases_Store.product_id',        'left')
                ->join($ending_pps,                  'products.id = Ending_PPS.product_id',             'left')
                ->join($pps_returns,                 'products.id = Purchases_Store_Return.product_id', 'left')
                ->join($ending_pps_returns,          'products.id = Ending_PPS_Return.product_id',      'left')
                ->join($sp,                          'products.id = PSales.product_id',                 'left')
                ->join($sp_addon,                    'products.id = PaddonSales.product_id',            'left')
                ->join($sp_combo,                    'products.id = PcomboSales.product_id',            'left')
                ->join($pos_sales,                   'products.id = POSSales.product_id',               'left')
                ->join($ending_sales,                'products.id = Ending_Sales.product_id',           'left')
                ->join($ending_addonsales,           'products.id = Ending_AddonSales.product_id',      'left')
                ->join($ending_combosales,           'products.id = Ending_ComboSales.product_id',      'left')
                ->join($ending_pos_sales,            'products.id = Ending_POSSales.product_id',        'left')
                ->join($transfers_in,                'products.id = Transfers_IN.product_id',           'left')
                ->join($ending_transfers_in,         'products.id = Ending_Transfers_IN.product_id',    'left')
                ->join($transfers_out,               'products.id = Transfers_OUT.product_id',          'left')
                ->join($ending_transfers_out,        'products.id = Ending_Transfers_OUT.product_id',   'left')
                ->join($adjustments_add,             'products.id = Adjustments_ADD.product_id',        'left')
                ->join($ending_adjustments_add,      'products.id = Ending_Adjustments_ADD.product_id', 'left')
                ->join($adjustments_sub,             'products.id = Adjustments_SUB.product_id',        'left')
                ->join($ending_adjustments_sub,      'products.id = Ending_Adjustments_SUB.product_id', 'left')
                ->join($pr1,                         'products.id = PSReturn.product_id',               'left')
                ->join($pr2,                         'products.id = PReturn.product_id',                'left')
                ->join($ending_returns,              'products.id = Ending_PReturn.product_id',         'left')
                ->join($reward_exchanged_in,         'products.id = RwEx_IN.product_id',                'left')
                ->join($ending_reward_exchanged_in,  'products.id = Ending_RwEx_IN.product_id',         'left')
                ->join($reward_received_in,          'products.id = RwRe_IN.product_id',                'left')
                ->join($ending_reward_received_in,   'products.id = Ending_RwRe_IN.product_id',         'left')
                ->join($reward_exchanged_out,        'products.id = RwEx_OUT.product_id',               'left')
                ->join($ending_reward_exchanged_out, 'products.id = Ending_RwEx_OUT.product_id',        'left')
                ->join($reward_received_out,         'products.id = RwRe_OUT.product_id',               'left')
                ->join($ending_reward_received_out,  'products.id = Ending_RwRe_OUT.product_id',        'left')
                ->join($vrn,                         'products.id = NVariant.product_id',               'left')
                ->join($vro,                         'products.id = OVariant.product_id',               'left')
                ->join($vrb,                         'products.id = BVariant.product_id',               'left')
                ->group_by('products.code');
            if ($product || $cf1 || $cf2 || $cf3 || $cf4 || $cf5 || $cf6 || $category || $subcategory || $brand) {
                if ($product) {
                    $this->db->where($this->db->dbprefix('products') . '.id', $product);
                }
                if ($cf1) {
                    $this->db->where($this->db->dbprefix('products') . '.cf1', $cf1);
                }
                if ($cf2) {
                    $this->db->where($this->db->dbprefix('products') . '.cf2', $cf2);
                }
                if ($cf3) {
                    $this->db->where($this->db->dbprefix('products') . '.cf3', $cf3);
                }
                if ($cf4) {
                    $this->db->where($this->db->dbprefix('products') . '.cf4', $cf4);
                }
                if ($cf5) {
                    $this->db->where($this->db->dbprefix('products') . '.cf5', $cf5);
                }
                if ($cf6) {
                    $this->db->where($this->db->dbprefix('products') . '.cf6', $cf6);
                }
                if ($category) {
                    $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
                }
                if ($subcategory) {
                    $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
                }
                if ($brand) {
                    $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
                }
            } else if (empty($dataTable_filter) && empty($dataTable_filter_col_1) && empty($dataTable_filter_col_2)){
                $this->db->where('PCosts.totalPurchase                   !=', 0);
                $this->db->or_where('PCosts.totalPurchase                !=', null);
                $this->db->or_where('Purchases_Store.purchasedQty        !=', 0);
                $this->db->or_where('Purchases_Store.purchasedQty        !=', null);
                $this->db->or_where('Purchases_Store_Return.purchasedQty !=', 0);
                $this->db->or_where('Purchases_Store_Return.purchasedQty !=', null);
                $this->db->or_where('PaddonSales.totalSale               !=', 0);
                $this->db->or_where('PcomboSales.totalSale               !=', 0); 
                $this->db->or_where('POSSales.soldQty                    !=', 0); 
                $this->db->or_where('PaddonSales.totalSale               !=', null);
                $this->db->or_where('PcomboSales.totalSale               !=', null);
                $this->db->or_where('POSSales.soldQty                    !=', null);
                $this->db->or_where('PSales.totalSale                    !=', 0);
                $this->db->or_where('PSales.totalSale                    !=', null);
                $this->db->or_where('PReturn.returnTotalSale             !=', 0);
                $this->db->or_where('PReturn.returnTotalSale             !=', null);
                $this->db->or_where('PSReturn.totalSale_return           !=', 0);
                $this->db->or_where('PSReturn.totalSale_return           !=', null);
                $this->db->or_where('Transfers_IN.totalTransfer          !=', 0);
                $this->db->or_where('Transfers_IN.totalTransfer          !=', null);
                $this->db->or_where('Transfers_OUT.totalTransfer         !=', 0);
                $this->db->or_where('Transfers_OUT.totalTransfer         !=', null);
                $this->db->or_where('Adjustments_ADD.adjustmentQty       !=', 0);
                $this->db->or_where('Adjustments_ADD.adjustmentQty       !=', null);
                $this->db->or_where('Adjustments_SUB.adjustmentQty       !=', 0);
                $this->db->or_where('Adjustments_SUB.adjustmentQty       !=', null);
                $this->db->or_where('RwEx_IN.exchangedQty                !=', 0);
                $this->db->or_where('RwEx_IN.exchangedQty                !=', null);
                $this->db->or_where('Ending_RwEx_IN.exchangedQty         !=', 0);
                $this->db->or_where('Ending_RwEx_IN.exchangedQty         !=', null);
                $this->db->or_where('RwRe_IN.receivedQty                 !=', 0);
                $this->db->or_where('RwRe_IN.receivedQty                 !=', null);
                $this->db->or_where('Ending_RwRe_IN.receivedQty          !=', 0);
                $this->db->or_where('Ending_RwRe_IN.receivedQty          !=', null);
                $this->db->or_where('RwEx_OUT.exchangedQty               !=', 0);
                $this->db->or_where('RwEx_OUT.exchangedQty               !=', null);
                $this->db->or_where('Ending_RwEx_OUT.exchangedQty        !=', 0);
                $this->db->or_where('Ending_RwEx_OUT.exchangedQty        !=', null);
                $this->db->or_where('RwRe_OUT.receivedQty                !=', 0);
                $this->db->or_where('RwRe_OUT.receivedQty                !=', null);
                $this->db->or_where('Ending_RwRe_OUT.receivedQty         !=', 0);
                $this->db->or_where('Ending_RwRe_OUT.receivedQty         !=', null);
                // $this->db->or_where('(COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) !=', 0);
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_report')]];
                $meta = ['page_title' => lang('products_report'), 'bc' => $bc];
                $this->page_construct('reports/products_report_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $this->db->select(
                    $this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . '.name,
                    ' . $this->db->dbprefix('products') . '.serial_no,
                    ' . $this->db->dbprefix('products') . '.category_id,
                    COALESCE( Ending_Purchases.purchasedQty, 0 ) 
                    + COALESCE( Ending_PPS.purchasedQty, 0 ) 
                    - COALESCE( Ending_PPS_Return.purchasedQty, 0 ) 
                    - COALESCE( Ending_Sales.soldQty, 0 ) 
                    - COALESCE( Ending_AddonSales.soldQty, 0 ) 
                    - COALESCE( Ending_ComboSales.soldQty, 0 ) 
                    + COALESCE( Ending_PReturn.returnQty, 0 ) 
                    - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) 
                    + COALESCE( Ending_Transfers_IN.transferQty, 0 ) 
                    + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) 
                    - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) 
                    + COALESCE( Ending_RwEx_IN.exchangedQty, 0 ) 
                    + COALESCE( Ending_RwRe_IN.receivedQty, 0 ) 
                    - COALESCE( Ending_RwEx_OUT.exchangedQty, 0 ) 
                    - COALESCE( Ending_RwRe_OUT.receivedQty, 0 ) 
                    AS BeginningQty,
                    COALESCE( PCosts.purchasedQty, 0 ) 
                    + COALESCE( Purchases_Store.purchasedQty, 0 ) 
                    - COALESCE( Purchases_Store_Return.purchasedQty, 0 ) 
                    AS PurchasedQty,
                    CONCAT(COALESCE( Transfers_IN.transferQty, 0 ), " (IN), ", COALESCE( Transfers_OUT.transferQty, 0 ), " (OUT)") as TransferQty,
                    CONCAT(COALESCE( Adjustments_ADD.adjustmentQty, 0 ), " (ADD), ", COALESCE( Adjustments_SUB.adjustmentQty, 0 ), " (SUB)") as AdjustmentQty,
                    (COALESCE( PSales.soldQty, 0 ) 
                    + COALESCE( PaddonSales.soldQty, 0 ) 
                    + COALESCE( PcomboSales.soldQty, 0 ) 
                    + COALESCE( POSSales.soldQty, 0 )) as SoldQty,
                    COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                    COALESCE( RwEx_IN.exchangedQty, 0 ) as ExchangedQtyIN,
                    COALESCE( RwRe_IN.receivedQty, 0 ) as ReceivedQtyIN,
                    COALESCE( RwEx_OUT.exchangedQty, 0 ) as ExchangedQtyOUT,
                    COALESCE( RwRe_OUT.receivedQty, 0 ) as ReceivedQtyOUT,
                    (   
                        COALESCE( Ending_Purchases.purchasedQty, 0 ) 
                        + COALESCE( Ending_PPS.purchasedQty, 0 ) 
                        - COALESCE( Ending_PPS_Return.purchasedQty, 0 ) 
                        - COALESCE( Ending_Sales.soldQty, 0 ) 
                        - COALESCE( Ending_AddonSales.soldQty, 0 ) 
                        - COALESCE( Ending_ComboSales.soldQty, 0 ) 
                        + COALESCE( Ending_PReturn.returnQty, 0 ) 
                        - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) 
                        + COALESCE( Ending_Transfers_IN.transferQty, 0 ) 
                        + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) 
                        - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) 
                        + COALESCE( Ending_RwEx_IN.exchangedQty, 0 ) 
                        + COALESCE( Ending_RwRe_IN.receivedQty, 0 ) 
                        - COALESCE( Ending_RwEx_OUT.exchangedQty, 0 ) 
                        - COALESCE( Ending_RwRe_OUT.receivedQty, 0 ) 
                        
                        + COALESCE( PCosts.purchasedQty, 0 ) 
                        + COALESCE( Purchases_Store.purchasedQty, 0 ) 
                        - COALESCE( Purchases_Store_Return.purchasedQty, 0 ) 
                        + COALESCE( Transfers_IN.transferQty, 0 ) 
                        - COALESCE( Transfers_OUT.transferQty, 0 ) 
                        + COALESCE( Adjustments_ADD.adjustmentQty, 0 ) 
                        - COALESCE( Adjustments_SUB.adjustmentQty, 0 ) 
                        - COALESCE( PSales.soldQty, 0 ) 
                        - COALESCE( PaddonSales.soldQty, 0 ) 
                        - COALESCE( PcomboSales.soldQty, 0 ) 
                        - COALESCE( POSSales.soldQty, 0 ) 
                        + COALESCE( PReturn.returnQty, 0 ) 
                        + Abs(COALESCE( PSReturn.soldQty_return, 0 ))
                        + COALESCE( RwEx_IN.exchangedQty, 0 )
                        + COALESCE( RwRe_IN.receivedQty, 0 )
                        - COALESCE( RwEx_OUT.exchangedQty, 0 )
                        - COALESCE( RwRe_OUT.receivedQty, 0 )
                    ) AS BalacneQty,
                    COALESCE( PCosts.totalPurchase, 0 ) as TotalPurchase,
                    COALESCE( PSales.totalSale, 0 ) as TotalSales,
                    (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit,
                    COALESCE(NVariant.sQty, 0) as qtyNewVar,
                    COALESCE(OVariant.sQty, 0) as qtyOldVar,
                    COALESCE(BVariant.sQty, 0) as qtyBrokenVar,', false)
                    ->from('products')
                    ->join($pp,                          'products.id = PCosts.product_id',                 'left')
                    ->join($ending_purchases,            'products.id = Ending_Purchases.product_id',       'left')
                    ->join($pps,                         'products.id = Purchases_Store.product_id',        'left')
                    ->join($ending_pps,                  'products.id = Ending_PPS.product_id',             'left')
                    ->join($pps_returns,                 'products.id = Purchases_Store_Return.product_id', 'left')
                    ->join($ending_pps_returns,          'products.id = Ending_PPS_Return.product_id',      'left')
                    ->join($sp,                          'products.id = PSales.product_id',                 'left')
                    ->join($sp_addon,                    'products.id = PaddonSales.product_id',            'left')
                    ->join($sp_combo,                    'products.id = PcomboSales.product_id',            'left')
                    ->join($pos_sales,                   'products.id = POSSales.product_id',               'left')
                    ->join($ending_sales,                'products.id = Ending_Sales.product_id',           'left')
                    ->join($ending_addonsales,           'products.id = Ending_AddonSales.product_id',      'left')
                    ->join($ending_combosales,           'products.id = Ending_ComboSales.product_id',      'left')
                    ->join($ending_pos_sales,            'products.id = Ending_POSSales.product_id',        'left')
                    ->join($transfers_in,                'products.id = Transfers_IN.product_id',           'left')
                    ->join($ending_transfers_in,         'products.id = Ending_Transfers_IN.product_id',    'left')
                    ->join($transfers_out,               'products.id = Transfers_OUT.product_id',          'left')
                    ->join($ending_transfers_out,        'products.id = Ending_Transfers_OUT.product_id',   'left')
                    ->join($adjustments_add,             'products.id = Adjustments_ADD.product_id',        'left')
                    ->join($ending_adjustments_add,      'products.id = Ending_Adjustments_ADD.product_id', 'left')
                    ->join($adjustments_sub,             'products.id = Adjustments_SUB.product_id',        'left')
                    ->join($ending_adjustments_sub,      'products.id = Ending_Adjustments_SUB.product_id', 'left')
                    ->join($pr1,                         'products.id = PSReturn.product_id',               'left')
                    ->join($pr2,                         'products.id = PReturn.product_id',                'left')
                    ->join($ending_returns,              'products.id = Ending_PReturn.product_id',         'left')
                    ->join($reward_exchanged_in,         'products.id = RwEx_IN.product_id',                'left')
                    ->join($ending_reward_exchanged_in,  'products.id = Ending_RwEx_IN.product_id',         'left')
                    ->join($reward_received_in,          'products.id = RwRe_IN.product_id',                'left')
                    ->join($ending_reward_received_in,   'products.id = Ending_RwRe_IN.product_id',         'left')
                    ->join($reward_exchanged_out,        'products.id = RwEx_OUT.product_id',               'left')
                    ->join($ending_reward_exchanged_out, 'products.id = Ending_RwEx_OUT.product_id',        'left')
                    ->join($reward_received_out,         'products.id = RwRe_OUT.product_id',               'left')
                    ->join($ending_reward_received_out,  'products.id = Ending_RwRe_OUT.product_id',        'left')
                    ->join($vrn,                         'products.id = NVariant.product_id',               'left')
                    ->join($vro,                         'products.id = OVariant.product_id',               'left')
                    ->join($vrb,                         'products.id = BVariant.product_id',               'left')
                    ->group_by('products.code');
            if($product || $cf1 || $cf2 || $cf3 || $cf4 || $cf5 || $cf6 || $category || $subcategory || $brand){
                if ($product) {
                    $this->db->where($this->db->dbprefix('products') . '.id', $product);
                }
                if ($cf1) {
                    $this->db->where($this->db->dbprefix('products') . '.cf1', $cf1);
                }
                if ($cf2) {
                    $this->db->where($this->db->dbprefix('products') . '.cf2', $cf2);
                }
                if ($cf3) {
                    $this->db->where($this->db->dbprefix('products') . '.cf3', $cf3);
                }
                if ($cf4) {
                    $this->db->where($this->db->dbprefix('products') . '.cf4', $cf4);
                }
                if ($cf5) {
                    $this->db->where($this->db->dbprefix('products') . '.cf5', $cf5);
                }
                if ($cf6) {
                    $this->db->where($this->db->dbprefix('products') . '.cf6', $cf6);
                }
                if ($category) {
                    $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
                }
                if ($subcategory) {
                    $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
                }
                if ($brand) {
                    $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
                }
            } else if (empty($dataTable_filter) && empty($dataTable_filter_col_1) && empty($dataTable_filter_col_2)){
                $this->db->where('PCosts.totalPurchase                   !=', 0);
                $this->db->or_where('PCosts.totalPurchase                !=', null);
                $this->db->or_where('Purchases_Store.purchasedQty        !=', 0);
                $this->db->or_where('Purchases_Store.purchasedQty        !=', null);
                $this->db->or_where('Purchases_Store_Return.purchasedQty !=', 0);
                $this->db->or_where('Purchases_Store_Return.purchasedQty !=', null);
                $this->db->or_where('PaddonSales.totalSale               !=', 0);
                $this->db->or_where('PcomboSales.totalSale               !=', 0); 
                $this->db->or_where('POSSales.soldQty                    !=', 0); 
                $this->db->or_where('PaddonSales.totalSale               !=', null);
                $this->db->or_where('PcomboSales.totalSale               !=', null);
                $this->db->or_where('POSSales.soldQty                    !=', null);
                $this->db->or_where('PSales.totalSale                    !=', 0);
                $this->db->or_where('PSales.totalSale                    !=', null);
                $this->db->or_where('PReturn.returnTotalSale             !=', 0);
                $this->db->or_where('PReturn.returnTotalSale             !=', null);
                $this->db->or_where('PSReturn.totalSale_return           !=', 0);
                $this->db->or_where('PSReturn.totalSale_return           !=', null);
                $this->db->or_where('Transfers_IN.totalTransfer          !=', 0);
                $this->db->or_where('Transfers_IN.totalTransfer          !=', null);
                $this->db->or_where('Transfers_OUT.totalTransfer         !=', 0);
                $this->db->or_where('Transfers_OUT.totalTransfer         !=', null);
                $this->db->or_where('Adjustments_ADD.adjustmentQty       !=', 0);
                $this->db->or_where('Adjustments_ADD.adjustmentQty       !=', null);
                $this->db->or_where('Adjustments_SUB.adjustmentQty       !=', 0);
                $this->db->or_where('Adjustments_SUB.adjustmentQty       !=', null);
                $this->db->or_where('RwEx_IN.exchangedQty                !=', 0);
                $this->db->or_where('RwEx_IN.exchangedQty                !=', null);
                $this->db->or_where('Ending_RwEx_IN.exchangedQty         !=', 0);
                $this->db->or_where('Ending_RwEx_IN.exchangedQty         !=', null);
                $this->db->or_where('RwRe_IN.receivedQty                 !=', 0);
                $this->db->or_where('RwRe_IN.receivedQty                 !=', null);
                $this->db->or_where('Ending_RwRe_IN.receivedQty          !=', 0);
                $this->db->or_where('Ending_RwRe_IN.receivedQty          !=', null);
                $this->db->or_where('RwEx_OUT.exchangedQty               !=', 0);
                $this->db->or_where('RwEx_OUT.exchangedQty               !=', null);
                $this->db->or_where('Ending_RwEx_OUT.exchangedQty        !=', 0);
                $this->db->or_where('Ending_RwEx_OUT.exchangedQty        !=', null);
                $this->db->or_where('RwRe_OUT.receivedQty                !=', 0);
                $this->db->or_where('RwRe_OUT.receivedQty                !=', null);
                $this->db->or_where('Ending_RwRe_OUT.receivedQty         !=', 0);
                $this->db->or_where('Ending_RwRe_OUT.receivedQty         !=', null);
                // $this->db->or_where('(COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) !=', 0);
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('serial'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('category'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('beginning'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('transfer'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('adjustment'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('return'));
                if ($this->Settings->reward_exchange) {
                    $this->excel->getActiveSheet()->SetCellValue('K1', lang('reward_exchanged_in'));
                    $this->excel->getActiveSheet()->SetCellValue('L1', lang('reward_received_in'));
                    $this->excel->getActiveSheet()->SetCellValue('M1', lang('reward_exchanged_out'));
                    $this->excel->getActiveSheet()->SetCellValue('N1', lang('reward_received_out'));
                    $this->excel->getActiveSheet()->SetCellValue('O1', lang('balance'));
                    $this->excel->getActiveSheet()->SetCellValue('P1', lang('purchased_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('Q1', lang('sold_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('R1', lang('profit_loss'));
                    $this->excel->getActiveSheet()->SetCellValue('S1', lang('new'));
                    $this->excel->getActiveSheet()->SetCellValue('T1', lang('old'));
                    $this->excel->getActiveSheet()->SetCellValue('U1', lang('broken'));
                } else {
                    $this->excel->getActiveSheet()->SetCellValue('K1', lang('balance'));
                    $this->excel->getActiveSheet()->SetCellValue('L1', lang('purchased_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('M1', lang('sold_amount'));
                    $this->excel->getActiveSheet()->SetCellValue('N1', lang('profit_loss'));
                    $this->excel->getActiveSheet()->SetCellValue('O1', lang('new'));
                    $this->excel->getActiveSheet()->SetCellValue('P1', lang('old'));
                    $this->excel->getActiveSheet()->SetCellValue('Q1', lang('broken'));
                }
                $row   = 2;
                $bpQty = 0;
                $sQty  = 0;
                $pQty  = 0;
                $tQty  = 0;
                $aQty  = 0;
                $rQty  = 0;
                $sAmt  = 0;
                $pAmt  = 0;
                $bQty  = 0;
                $rwexi = 0;
                $rwrei = 0;
                $rwexo = 0;
                $rwreo = 0;
                $bAmt  = 0;
                $pl    = 0;
                $pw    = 0;
                $nVarQty = 0;
                $oVarQty = 0;
                $bVarQty = 0;
                foreach ($data as $data_row) {
                    $get_categories= $this->site->getCategoryByID($data_row->category_id);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->serial_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $get_categories->name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->BeginningQty);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->TransferQty);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->AdjustmentQty);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->returnQty);
                    if ($this->Settings->reward_exchange) {
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->ExchangedQtyIN);
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->ReceivedQtyIN);
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->ExchangedQtyOUT);
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->ReceivedQtyOUT);
                        $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->BalacneQty);
                        $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->TotalPurchase);
                        $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $data_row->TotalSales);
                        $this->excel->getActiveSheet()->SetCellValue('R' . $row, $data_row->Profit);
                        $this->excel->getActiveSheet()->SetCellValue('S' . $row, $data_row->qtyNewVar);
                        $this->excel->getActiveSheet()->SetCellValue('T' . $row, $data_row->qtyOldVar);
                        $this->excel->getActiveSheet()->SetCellValue('U' . $row, $data_row->qtyBrokenVar);
                    } else {
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->BalacneQty);
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->TotalPurchase);
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->TotalSales);
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->Profit);
                        $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->qtyNewVar);
                        $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->qtyOldVar);
                        $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $data_row->qtyBrokenVar);
                    }
                    $bpQty   += $data_row->BeginningQty;
                    $pQty    += $data_row->PurchasedQty;
                    $sQty    += $data_row->SoldQty;
                    $rQty    += $data_row->returnQty;
                    $rwexi   += $data_row->ExchangedQtyIN;
                    $rwrei   += $data_row->ReceivedQtyIN;
                    $rwexo   += $data_row->ExchangedQtyOUT;
                    $rwreo   += $data_row->ReceivedQtyOUT;
                    $bQty    += $data_row->BalacneQty;
                    $pAmt    += $data_row->TotalPurchase;
                    $sAmt    += $data_row->TotalSales;
                    $pl      += $data_row->Profit;
                    $nVarQty += $data_row->qtyNewVar;
                    $oVarQty += $data_row->qtyOldVar;
                    $bVarQty += $data_row->qtyBrokenVar;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('E' . $row . ':R' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $bpQty);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $rQty);
                if ($this->Settings->reward_exchange) {
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $rwexi);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $rwrei);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $rwexo);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $rwreo);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $bQty);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $pAmt);
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $sAmt);
                    $this->excel->getActiveSheet()->SetCellValue('R' . $row, $pl);
                    $this->excel->getActiveSheet()->SetCellValue('S' . $row, $nVarQty);
                    $this->excel->getActiveSheet()->SetCellValue('T' . $row, $oVarQty);
                    $this->excel->getActiveSheet()->SetCellValue('U' . $row, $bVarQty);
                } else {
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $bQty);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $pAmt);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $sAmt);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $pl);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $nVarQty);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $oVarQty);
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $bVarQty);
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('T')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('U')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                $filename = 'products_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . ".name,
                    (COALESCE( Ending_Purchases.purchasedQty, 0 ) + COALESCE( Ending_PPS.purchasedQty, 0 ) - COALESCE( Ending_PPS_Return.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) - COALESCE( Ending_AddonSales.soldQty, 0 ) - COALESCE( Ending_ComboSales.soldQty, 0 )  + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) + COALESCE( Ending_RwEx_IN.exchangedQty, 0 ) + COALESCE( Ending_RwRe_IN.receivedQty, 0 ) - COALESCE( Ending_RwEx_OUT.exchangedQty, 0 ) - COALESCE( Ending_RwRe_OUT.receivedQty, 0 ) ) as beginning,
                    CONCAT((COALESCE( PCosts.purchasedQty, 0 ) + COALESCE( Purchases_Store.purchasedQty, 0 ) - COALESCE( Purchases_Store_Return.purchasedQty, 0 )), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
                    CONCAT(COALESCE( Transfers_IN.transferQty, 0 ), '__', COALESCE( Transfers_OUT.transferQty, 0 )) as transfer,
                    CONCAT(COALESCE( Adjustments_ADD.adjustmentQty, 0 ), '__', COALESCE( Adjustments_SUB.adjustmentQty, 0 )) as adjustment,
                    CONCAT(COALESCE( PSales.soldQty, 0 ) + COALESCE( PaddonSales.soldQty, 0 ) + COALESCE( PcomboSales.soldQty, 0 ) + COALESCE( POSSales.soldQty, 0 ), '__', COALESCE( PSales.totalSale, 0) + COALESCE( PaddonSales.totalSale, 0 ) + COALESCE( PcomboSales.totalSale, 0 )+ COALESCE( POSSales.order_discount, 0 ) , '__', COALESCE( PSales.order_discount, 0 ) + COALESCE( PaddonSales.order_discount, 0 ) + COALESCE( PcomboSales.order_discount, 0 ) + COALESCE( POSSales.order_discount, 0 )) as sold, 
                    COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                    CONCAT(COALESCE( RwEx_IN.exchangedQty, 0 ), '__', COALESCE( RwEx_OUT.exchangedQty, 0 )) as reward_exchanged,
                    CONCAT(COALESCE( RwRe_IN.receivedQty, 0 ), '__', COALESCE( RwRe_OUT.receivedQty, 0 )) as reward_received,
                    (   
                        COALESCE( Ending_Purchases.purchasedQty, 0 ) 
                        + COALESCE( Ending_PPS.purchasedQty, 0 ) 
                        - COALESCE( Ending_PPS_Return.purchasedQty, 0 ) 
                        - COALESCE( Ending_Sales.soldQty, 0 ) 
                        - COALESCE( Ending_AddonSales.soldQty, 0 ) 
                        - COALESCE( Ending_ComboSales.soldQty, 0 ) 
                        + COALESCE( Ending_PReturn.returnQty, 0 ) 
                        - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) 
                        + COALESCE( Ending_Transfers_IN.transferQty, 0 ) 
                        + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) 
                        - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )
                        + COALESCE( Ending_RwEx_IN.exchangedQty, 0 ) 
                        + COALESCE( Ending_RwRe_IN.receivedQty, 0 ) 
                        - COALESCE( Ending_RwEx_OUT.exchangedQty, 0 ) 
                        - COALESCE( Ending_RwRe_OUT.receivedQty, 0 )  
                        
                        + COALESCE( PCosts.purchasedQty, 0 ) 
                        + COALESCE( Purchases_Store.purchasedQty, 0 ) 
                        - COALESCE( Purchases_Store_Return.purchasedQty, 0 ) 
                        + COALESCE( Transfers_IN.transferQty, 0 ) 
                        - COALESCE( Transfers_OUT.transferQty, 0 ) 
                        + COALESCE( Adjustments_ADD.adjustmentQty, 0 ) 
                        - COALESCE( Adjustments_SUB.adjustmentQty, 0 ) 
                        - COALESCE( PSales.soldQty, 0 ) 
                        - COALESCE( PaddonSales.soldQty, 0 ) 
                        - COALESCE( PcomboSales.soldQty, 0 ) 
                        - COALESCE( POSSales.soldQty, 0 ) 
                        + COALESCE( PReturn.returnQty, 0 ) 
                        + Abs(COALESCE( PSReturn.soldQty_return, 0 ))
                        + COALESCE( RwEx_IN.exchangedQty, 0 )
                        + COALESCE( RwRe_IN.receivedQty, 0 )
                        - COALESCE( RwEx_OUT.exchangedQty, 0 )
                        - COALESCE( RwRe_OUT.receivedQty, 0 ) 
                    ) as balance,
                    CONCAT(COALESCE(NVariant.sQty, 0), '__',COALESCE(NVariant.name, '' ), '__', COALESCE(OVariant.sQty, 0), '__', COALESCE(OVariant.name, ''), '__', COALESCE(BVariant.sQty, 0), '__', COALESCE(BVariant.name, '')) as variant, {$this->db->dbprefix('products')}.id as id", false)
                ->from('products')
                ->join($pp,                          'products.id = PCosts.product_id',                 'left')
                ->join($ending_purchases,            'products.id = Ending_Purchases.product_id',       'left')
                ->join($pps,                         'products.id = Purchases_Store.product_id',        'left')
                ->join($ending_pps,                  'products.id = Ending_PPS.product_id',             'left')
                ->join($pps_returns,                 'products.id = Purchases_Store_Return.product_id', 'left')
                ->join($ending_pps_returns,          'products.id = Ending_PPS_Return.product_id',      'left')
                ->join($sp,                          'products.id = PSales.product_id',                 'left')
                ->join($sp_addon,                    'products.id = PaddonSales.product_id',            'left')
                ->join($sp_combo,                    'products.id = PcomboSales.product_id',            'left')
                ->join($pos_sales,                   'products.id = POSSales.product_id',               'left')
                ->join($ending_sales,                'products.id = Ending_Sales.product_id',           'left')
                ->join($ending_addonsales,           'products.id = Ending_AddonSales.product_id',      'left')
                ->join($ending_combosales,           'products.id = Ending_ComboSales.product_id',      'left')
                ->join($ending_pos_sales,            'products.id = Ending_POSSales.product_id',        'left')
                ->join($transfers_in,                'products.id = Transfers_IN.product_id',           'left')
                ->join($ending_transfers_in,         'products.id = Ending_Transfers_IN.product_id',    'left')
                ->join($transfers_out,               'products.id = Transfers_OUT.product_id',          'left')
                ->join($ending_transfers_out,        'products.id = Ending_Transfers_OUT.product_id',   'left')
                ->join($adjustments_add,             'products.id = Adjustments_ADD.product_id',        'left')
                ->join($ending_adjustments_add,      'products.id = Ending_Adjustments_ADD.product_id', 'left')
                ->join($adjustments_sub,             'products.id = Adjustments_SUB.product_id',        'left')
                ->join($ending_adjustments_sub,      'products.id = Ending_Adjustments_SUB.product_id', 'left')
                ->join($pr1,                         'products.id = PSReturn.product_id',               'left')
                ->join($pr2,                         'products.id = PReturn.product_id',                'left')
                ->join($ending_returns,              'products.id = Ending_PReturn.product_id',         'left')
                ->join($reward_exchanged_in,         'products.id = RwEx_IN.product_id',                'left')
                ->join($ending_reward_exchanged_in,  'products.id = Ending_RwEx_IN.product_id',         'left')
                ->join($reward_received_in,          'products.id = RwRe_IN.product_id',                'left')
                ->join($ending_reward_received_in,   'products.id = Ending_RwRe_IN.product_id',         'left')
                ->join($reward_exchanged_out,        'products.id = RwEx_OUT.product_id',               'left')
                ->join($ending_reward_exchanged_out, 'products.id = Ending_RwEx_OUT.product_id',        'left')
                ->join($reward_received_out,         'products.id = RwRe_OUT.product_id',               'left')
                ->join($ending_reward_received_out,  'products.id = Ending_RwRe_OUT.product_id',        'left')
                ->join($vrn,                         'products.id = NVariant.product_id',               'left')
                ->join($vro,                         'products.id = OVariant.product_id',               'left')
                ->join($vrb,                         'products.id = BVariant.product_id',               'left')
                ->group_by('products.code');
            if($product || $cf1 || $cf2 || $cf3 || $cf4 || $cf5 || $cf6 || $category || $subcategory || $brand){
                if ($product) {
                    $this->datatables->where($this->db->dbprefix('products') . '.id', $product);
                }
                if ($cf1) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf1', $cf1);
                }
                if ($cf2) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf2', $cf2);
                }
                if ($cf3) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf3', $cf3);
                }
                if ($cf4) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf4', $cf4);
                }
                if ($cf5) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf5', $cf5);
                }
                if ($cf6) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf6', $cf6);
                }
                if ($category) {
                    $this->datatables->where($this->db->dbprefix('products') . '.category_id', $category);
                }
                if ($subcategory) {
                    $this->datatables->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
                }
                if ($brand) {
                    $this->datatables->where($this->db->dbprefix('products') . '.brand', $brand);
                }
            } else if (empty($dataTable_filter) && empty($dataTable_filter_col_1) && empty($dataTable_filter_col_2)){
                $this->datatables->where('PCosts.totalPurchase                   !=', 0);
                $this->datatables->or_where('PCosts.totalPurchase                !=', null);
                $this->datatables->or_where('Purchases_Store.purchasedQty        !=', 0);
                $this->datatables->or_where('Purchases_Store.purchasedQty        !=', null);
                $this->datatables->or_where('Purchases_Store_Return.purchasedQty !=', 0);
                $this->datatables->or_where('Purchases_Store_Return.purchasedQty !=', null);
                $this->datatables->or_where('PaddonSales.totalSale               !=', 0);
                $this->datatables->or_where('PcomboSales.totalSale               !=', 0); 
                $this->datatables->or_where('POSSales.soldQty                    !=', 0); 
                $this->datatables->or_where('PaddonSales.totalSale               !=', null);
                $this->datatables->or_where('PcomboSales.totalSale               !=', null);
                $this->datatables->or_where('POSSales.soldQty                    !=', null);
                $this->datatables->or_where('PSales.totalSale                    !=', 0);
                $this->datatables->or_where('PSales.totalSale                    !=', null);
                $this->datatables->or_where('PReturn.returnTotalSale             !=', 0);
                $this->datatables->or_where('PReturn.returnTotalSale             !=', null);
                $this->datatables->or_where('PSReturn.totalSale_return           !=', 0);
                $this->datatables->or_where('PSReturn.totalSale_return           !=', null);
                $this->datatables->or_where('Transfers_IN.totalTransfer          !=', 0);
                $this->datatables->or_where('Transfers_IN.totalTransfer          !=', null);
                $this->datatables->or_where('Transfers_OUT.totalTransfer         !=', 0);
                $this->datatables->or_where('Transfers_OUT.totalTransfer         !=', null);
                $this->datatables->or_where('Adjustments_ADD.adjustmentQty       !=', 0);
                $this->datatables->or_where('Adjustments_ADD.adjustmentQty       !=', null);
                $this->datatables->or_where('Adjustments_SUB.adjustmentQty       !=', 0);
                $this->datatables->or_where('Adjustments_SUB.adjustmentQty       !=', null);
                $this->datatables->or_where('RwEx_IN.exchangedQty                !=', 0);
                $this->datatables->or_where('RwEx_IN.exchangedQty                !=', null);
                $this->datatables->or_where('Ending_RwEx_IN.exchangedQty         !=', 0);
                $this->datatables->or_where('Ending_RwEx_IN.exchangedQty         !=', null);
                $this->datatables->or_where('RwRe_IN.receivedQty                 !=', 0);
                $this->datatables->or_where('RwRe_IN.receivedQty                 !=', null);
                $this->datatables->or_where('Ending_RwRe_IN.receivedQty          !=', 0);
                $this->datatables->or_where('Ending_RwRe_IN.receivedQty          !=', null);
                $this->datatables->or_where('RwEx_OUT.exchangedQty               !=', 0);
                $this->datatables->or_where('RwEx_OUT.exchangedQty               !=', null);
                $this->datatables->or_where('Ending_RwEx_OUT.exchangedQty        !=', 0);
                $this->datatables->or_where('Ending_RwEx_OUT.exchangedQty        !=', null);
                $this->datatables->or_where('RwRe_OUT.receivedQty                !=', 0);
                $this->datatables->or_where('RwRe_OUT.receivedQty                !=', null);
                $this->datatables->or_where('Ending_RwRe_OUT.receivedQty         !=', 0);
                $this->datatables->or_where('Ending_RwRe_OUT.receivedQty         !=', null);
                // $this->datatables->or_where('(COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) !=', 0);
            }
            echo $this->datatables->generate();
        }
    }*/

    function price_groups($id = null)
    {
        $this->bpas->checkPermissions('products');
        $this->data['price_groups']   = $this->products_model->getAllPrice_Groups();
        $this->data['product_prices'] = $this->products_model->getAllProduct_Prices();
        $this->data['products']       = $this->site->getProducts();

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => 'reports', 'page' => lang('reports')), array('link' => 'reports/price_groups', 'page' => lang('price_groups_report')));
        $meta = array('page_title' => lang('price_groups'), 'bc' => $bc);
        $this->page_construct('reports/price_groups', $meta, $this->data);
    }

    public function getPriceGroupsReport($pdf = null, $xls = null) 
    {
        $this->bpas->checkPermissions('products');
        $product = $this->input->get('product') ? $this->input->get('product') : null;
        $price_groups = $this->products_model->getAllPrice_Groups();
        $product_prices = $this->products_model->getAllProduct_Prices($product);

        $str_q = "";
        if($price_groups){
            foreach($price_groups as $price_group){
                $str_q .= " IFNULL((MAX(CASE WHEN bpas_product_prices.price_group_id = " . $price_group->id . " THEN bpas_product_prices.price END)), bpas_products.price) AS '" . $price_group->name . "', ";
            }
        }
        
        if ($pdf || $xls) {
            if (!empty($price_groups)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('price_groups_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('cost'));
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);

                $col = 'D';
                foreach($price_groups as $price_group) {
                    $this->excel->getActiveSheet()->SetCellValue($col . '1', ucwords($price_group->name));
                    $this->excel->getActiveSheet()->getColumnDimension($col)->setWidth(25);
                    $col++;
                }
                $row = 2;
                if($product_prices){
                    foreach ($product_prices as $product_price) {
                        $groups = explode('__', $product_price->groups);
                        $prices = explode('__', $product_price->price_groups);

                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $product_price->code);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $product_price->name);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $product_price->cost);
                        $col = 'D';
                        foreach ($price_groups as $price_group) { 
                            $key = array_search($price_group->id, $groups); 
                            if ($key !== false){
                                $this->excel->getActiveSheet()->SetCellValue($col . $row, $prices[$key]);
                            } else {
                                $this->excel->getActiveSheet()->SetCellValue($col . $row, $product_price->ori_price);
                            }
                            $col++;
                        }
                        $row++;
                    }
                }
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'price_groups_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
                    {$this->db->dbprefix('products')}.id AS id,
                    {$this->db->dbprefix('products')}.code, 
                    {$this->db->dbprefix('products')}.name, 
                    {$this->db->dbprefix('products')}.cost, " . $str_q . "", false)
                ->from('product_prices')
                ->join('products', 'product_prices.product_id = products.id', 'left')
                ->join('price_groups', 'product_prices.price_group_id = price_groups.id', 'left')
                ->group_by('product_prices.product_id')
                ->order_by('bpas_products.code', 'ASC');

            if ($product) {
                $this->datatables->where('products.id', $product);
            }

            $this->datatables->unset_column('id');
            echo $this->datatables->generate();
        }
    }
    //-------------cashflow-------------
    function cash_flow()
    {
        $this->bpas->checkPermissions('cash_flow'); 
        $this->data['cash_flows'] = $this->accounts_model->getAllCashflows();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('accountings'), 'page' => lang('accounting')), array('link' => '#', 'page' => lang('cash_flow')));
        $meta = array('page_title' => lang('cash_flow'), 'bc' => $bc);
        $this->page_construct('accounts/cash_flow', $meta, $this->data);
    }
    function cashflow($start_date = NULL, $end_date = NULL, $pdf = NULL, $xls = NULL, $biller_id = NULL){
        $no_search_date = true;
        if($start_date && $end_date){
            $no_search_date = false;
        }
        $this->bpas->checkPermissions('income_statement',NULL,'account_report');
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $user = $this->site->getUser();

        if($biller_id != NULL){
            $this->data['biller_id_no_sep'] = $biller_id;
            $biller_sep = explode('-', $biller_id);
            
            $bills = '';
            for($i=0; $i < count($biller_sep); $i++){
                $bills .= $biller_sep[$i] . ',';
            }
            $biller_id =  rtrim($bills, ',');
            $this->data['biller_id'] = $biller_id;
        }else{
            if($user->biller_id){
            //    $this->data['biller_id'] = $user->biller_id;
             //   $biller_id = $user->biller_id;

                $this->data['biller_id'] = '';
                $biller_id = '';
            }else{
                $this->data['biller_id'] = "";
            }
        }
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $billers = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $billers = $this->site->getAllCompanies('biller');
            }
        }else{
            $billers = $this->site->getAllCompanies('biller');
        }
        $this->data['billers'] = $billers;
        $this->data['start'] = urldecode($start_date);
        $this->data['end'] = urldecode($end_date);
        $totalBeforeAyear = date('Y', strtotime($this->data['start'])) - 1;
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('cashflow')));
        $meta = array('page_title' => lang('cashflow'), 'bc' => $bc);
        $from_date = date('Y-m-d H:i',strtotime(urldecode($start_date)));//'2014-08-01';
        $to_date = date('Y-m-d H:i',strtotime(urldecode($end_date)));//'2015-09-01';
        $this->data['from_date'] = $from_date;
        $this->data['to_date'] = $to_date;

        $getIncome = $this->accounts_model->getIncome(1,$from_date,$to_date,$biller_id);
        $business_activity = $this->accounts_model->getCashFlow(1,$from_date,$to_date,$biller_id);
    
        $investing_activity = $this->accounts_model->getCashFlow(2,$from_date,$to_date,$biller_id);
        $financing_activity = $this->accounts_model->getCashFlow(3,$from_date,$to_date,$biller_id);

        
        $this->data['totalBeforeAyear'] = $totalBeforeAyear;
        $this->data['Incomes'] = $getIncome;   
        $this->data['business'] = $business_activity;        
        $this->data['investing'] = $investing_activity;
        $this->data['financing'] = $financing_activity;
        $this->data['projects']         = $this->site->getAllProject();
        //-----------before year------------
        $this->data['IncomesBeforeAyear'] = $this->accounts_model->getIncomeBeforeyear(1,$from_date,$to_date,$biller_id);
        $this->page_construct('reports/cash_flow', $meta, $this->data);
    }
    
    public function sales_detail($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('sales');
        $customer   = $this->input->get('customer') ? $this->input->get('customer') : null;
        $product    = $this->input->get('product_id') ? $this->input->get('product_id') : null;
        $reference  = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $biller     = $this->input->get('biller') ? $this->input->get('biller') : null;
        $warehouse  = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $saleman    = $this->input->get('saleman_by') ? $this->input->get('saleman_by') : null;
        $start_date = $this->input->get('start_date') ? $this->bpas->fsd($this->input->get('start_date')) : date('Y-m-d');
        $end_date   = $this->input->get('end_date') ? $this->bpas->fsd($this->input->get('end_date')) : date('Y-m-d');
        $sale_type  = $this->input->get('sale_type') != '' ? $this->input->get('sale_type') : '';
        $payment_status = $this->input->get('payment_status') != '' ? $this->input->get('payment_status') : '';

        if ($xls || $pdf) {
            $customers  = $this->reports_model->getCustomersPending('customer', null, $customer, $product, $reference, $biller, $warehouse, $saleman, $start_date, $end_date, $sale_type);   
            if(!empty($customers)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('saleman_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Nº'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('product_code') . ' (' . lang('name') . ')');
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('unit_price'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('tax'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('subtotal'));
                
                $row     = 2;
                $total_grand_total = 0; $total_paid = 0; $total_balance = 0;
                foreach ($customers as $customer) {
                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':I' . $row)->SetCellValue('A' . $row, lang("customer") . ' >> ' . $customer->customer);
                    $row++;

                    $grand_total = 0; $paid = 0; $balance = 0;
                    $sales = $this->reports_model->getCustomersPending('sale', null, $customer->id, $product, $reference, $biller, $warehouse, $saleman, $start_date, $end_date, $sale_type);
                    foreach($sales as $inv){
                        $this->excel->getActiveSheet()->mergeCells('A' . $row . ':I' . $row)->SetCellValue('A' . $row, $inv->reference_no);
                        $row++;

                        $return_sale = $inv->return_id ? $this->sales_model->getInvoiceByID($inv->return_id) : null;
                        $items = $this->reports_model->getCustomersPending('item', $inv->id);
                        if(is_array($items)){
                            foreach($items as $item_index => $item) {
                                $this->excel->getActiveSheet()->SetCellValue('A' . $row, ($item_index + 1));
                                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($inv->date));
                                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $inv->reference_no);
                                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $item->product_code . ' (' . $item->product_name . ')');
                                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatQuantity($item->unit_quantity) . ' ' . ($inv->sale_status == 'returned' ? $item->base_unit_code : $item->product_unit_code));
                                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatMoney($item->unit_price));
                                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatMoney($item->item_tax));
                                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatMoney($item->item_discount));
                                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($item->subtotal));
                                $row++;
                            }
                        }
                        if ($return_sale) {
                            $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, (lang('return_total') . ' (' . $this->default_currency->code . ')'));
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($return_sale->grand_total));
                            $row++;
                        }
                        if ($inv->surcharge != 0) {
                            $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, (lang('return_surcharge') . ' (' . $this->default_currency->code . ')'));
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($inv->surcharge));
                            $row++;
                        }
                        if ($inv->order_discount != 0) {
                            $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, (lang('order_discount') . ' (' . $this->default_currency->code . ')'));
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($return_sale ? ($inv->order_discount + $return_sale->order_discount) : $inv->order_discount));
                            $row++;
                            }
                        if ($this->Settings->tax2 && $inv->order_tax != 0) {
                            $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, (lang('order_tax') . ' (' . $this->default_currency->code . ')'));
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($return_sale ? ($inv->order_tax + $return_sale->order_tax) : $inv->order_tax));
                            $row++;
                        }
                        if ($inv->shipping != 0) {
                            $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, (lang('shipping') . ' (' . $this->default_currency->code . ')'));
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($inv->shipping - ($return_sale && $return_sale->shipping ? $return_sale->shipping : 0)));
                            $row++;
                        }

                        $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, (lang('total_amount') . ' (' . $this->default_currency->code . ')'));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($return_sale ? ($inv->grand_total + $return_sale->grand_total) : $inv->grand_total));
                        $row++;

                        $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, (lang('paid') . ' (' . $this->default_currency->code . ')'));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($return_sale ? ($inv->paid + $return_sale->paid) : $inv->paid));
                        $row++;

                        $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, (lang('balance') . ' (' . $this->default_currency->code . ')'));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney(($return_sale ? ($inv->grand_total + $return_sale->grand_total) : $inv->grand_total) - ($return_sale ? ($inv->paid + $return_sale->paid) : $inv->paid)));
                        $row++;

                        // $balance += ($return_sale ? ($inv->grand_total + $return_sale->grand_total) : $inv->grand_total) - ($return_sale ? ($inv->paid + $return_sale->paid) : $inv->paid);
                        $grand_total += $inv->grand_total;
                        $paid        += $inv->paid;
                        $balance     += ($inv->grand_total - $inv->paid);
                    }

                    $total_grand_total += $grand_total;
                    $total_paid        += $paid;
                    $total_balance     += $balance;
                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, lang('Total Balance'));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($balance));
                    $row++;          
                }

                $row++; 
                $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, lang('All Grand Total'));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($total_grand_total));
                $row++;  
                $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, lang('All Paid'));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($total_paid));
                $row++;  
                $this->excel->getActiveSheet()->mergeCells('A' . $row . ':H' . $row)->SetCellValue('A' . $row, lang('All Total Balance'));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatMoney($total_balance));
                $row++;  

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'sales_detail_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
        } elseif ($preview) {
            $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
            $this->data['customer']   = $customer;
            $this->data['customer_details'] = $customer ? $this->site->getCompanyByID($customer) : null;
            $this->data['product']    = $product;
            $this->data['reference']  = $reference;
            $this->data['biller']     = $biller;
            $this->data['warehouse']  = $warehouse;
            $this->data['saleman']    = $saleman;
            $this->data['start_date'] = trim($start_date);
            $this->data['end_date']   = trim($end_date);
            $this->data['sale_type']  = $sale_type;
            $this->data['payment_status'] = $payment_status;

            $this->data['products']   = $this->site->getProducts();
            $this->data['users']      = $this->reports_model->getStaff();
            $this->data['billers']    = $this->site->getAllCompanies('biller');
            $this->data['salemans']   = $this->site->getAllSalemans($this->Settings->group_saleman_id);
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['projects']   = $this->site->getAllProject();

            $this->data['company_info'] = null;
            if ($biller) {
                $this->data['company_info'] = $this->site->getCompanyByID($biller);
            } elseif ($this->Settings->default_biller) {
                $this->data['company_info'] = $this->site->getCompanyByID($this->Settings->default_biller);
            } 
            $this->data['customers']  = $this->reports_model->getCustomersPending('customer', null, $customer, $product, $reference, $biller, $warehouse, $saleman, $start_date, $end_date, $sale_type, $payment_status);

            $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('sales_detail_report')]];
            $meta = ['page_title' => lang('sales_detail_report'), 'bc' => $bc];
            $this->page_construct('reports/sale_detail_preview', $meta, $this->data);
        } else {
            $customer   = $this->input->post('customer') ? $this->input->post('customer') : null;
            $product    = $this->input->post('product_id') ? $this->input->post('product_id') : null;
            $reference  = $this->input->post('reference_no') ? $this->input->post('reference_no') : null;
            $biller     = $this->input->post('biller') ? $this->input->post('biller') : null;
            $warehouse  = $this->input->post('warehouse') ? $this->input->post('warehouse') : null;
            $saleman    = $this->input->post('saleman_by') ? $this->input->post('saleman_by') : null;
            $start_date = $this->input->post('start_date') ? $this->bpas->fsd($this->input->post('start_date')) : date('Y-m-d');
            $end_date   = $this->input->post('end_date') ? $this->bpas->fsd($this->input->post('end_date')) : date('Y-m-d');
            $sale_type  = $this->input->post('sale_type') != '' ? $this->input->post('sale_type') : '';
            $payment_status = $this->input->post('payment_status') != '' ? $this->input->post('payment_status') : '';

            $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
            $this->data['customer']   = $customer;
            $this->data['customer_details'] = $customer ? $this->site->getCompanyByID($customer) : null;
            $this->data['product']    = $product;
            $this->data['reference']  = $reference;
            $this->data['biller']     = $biller;
            $this->data['warehouse']  = $warehouse;
            $this->data['saleman']    = $saleman;
            $this->data['start_date'] = trim($start_date);
            $this->data['end_date']   = trim($end_date);
            $this->data['sale_type']  = $sale_type;
            $this->data['payment_status'] = $payment_status;

            $this->data['products']   = $this->site->getProducts();
            $this->data['users']      = $this->reports_model->getStaff();
            $this->data['billers']    = $this->site->getAllCompanies('biller');
            $this->data['salemans']   = $this->site->getAllSalemans($this->Settings->group_saleman_id);
            $this->data['warehouses'] = $this->site->getAllWarehouses();
            $this->data['projects']   = $this->site->getAllProject();

            $this->data['company_info'] = null;
            if ($biller) {
                $this->data['company_info'] = $this->site->getCompanyByID($biller);
            } elseif ($this->Settings->default_biller) {
                $this->data['company_info'] = $this->site->getCompanyByID($this->Settings->default_biller);
            } 
            $this->data['customers']  = $this->reports_model->getCustomersPending('customer', null, $customer, $product, $reference, $biller, $warehouse, $saleman, $start_date, $end_date, $sale_type, $payment_status);
            $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('sales_detail_report')]];
            $meta                     = ['page_title' => lang('sales_detail_report'), 'bc' => $bc];
            $this->page_construct('reports/sales_detail', $meta, $this->data);
        }
    }

    public function products_using_report($pdf = null, $xls = null, $preview = null) 
    {
        $this->bpas->checkPermissions();
        $this->data['error']      = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['product_variants'] = $this->site->getAllProductVariants();

        if ($this->input->post('start_date')) {
            $dt = 'From ' . $this->input->post('start_date') . ' to ' . $this->input->post('end_date');
        } else {
            $dt = 'Till ' . $this->input->post('end_date');
        }
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_using_report')]];
        $meta = ['page_title' => lang('products_using_report'), 'bc' => $bc];
        $this->page_construct('reports/products_using', $meta, $this->data);
    }

    public function getProductsUsingReport($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('index');

        $dataTable_filter = $this->input->post('sSearch') ? $this->input->post('sSearch') : null;
        $dataTable_filter_col_1 = $this->input->post('sSearch_0') ? $this->input->post('sSearch_0') : null;
        $dataTable_filter_col_2 = $this->input->post('sSearch_1') ? $this->input->post('sSearch_1') : null;

        $product     = $this->input->get('product') ? $this->input->get('product') : null;
        $category    = $this->input->get('category') ? $this->input->get('category') : null;
        $brand       = $this->input->get('brand') ? $this->input->get('brand') : null;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : null;
        $warehouse   = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $cf1         = $this->input->get('cf1') ? $this->input->get('cf1') : null;
        $cf2         = $this->input->get('cf2') ? $this->input->get('cf2') : null;
        $cf3         = $this->input->get('cf3') ? $this->input->get('cf3') : null;
        $cf4         = $this->input->get('cf4') ? $this->input->get('cf4') : null;
        $cf5         = $this->input->get('cf5') ? $this->input->get('cf5') : null;
        $cf6         = $this->input->get('cf6') ? $this->input->get('cf6') : null;
        $start_date  = $this->input->get('start_date') ? $this->input->get('start_date') : date('d-m-Y') . " 00:00:00";
        $end_date    = $this->input->get('end_date') ? $this->input->get('end_date') : date('d-m-Y') . " 23:59:59";

        $pp = "( SELECT 
                    pi.product_id, SUM(CASE WHEN pi.purchase_id IS NOT NULL THEN pi.quantity ELSE 0 END) as purchasedQty, SUM(quantity_balance) as balanceQty, SUM( unit_cost * quantity_balance ) balanceValue, SUM( (CASE WHEN pi.purchase_id IS NOT NULL THEN (pi.subtotal) ELSE 0 END) ) totalPurchase,
                    SUM(IF(LOWER(pv.name) = 'new',    (CASE WHEN pi.purchase_id IS NOT NULL THEN pi.quantity ELSE 0 END), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    (CASE WHEN pi.purchase_id IS NOT NULL THEN pi.quantity ELSE 0 END), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', (CASE WHEN pi.purchase_id IS NOT NULL THEN pi.quantity ELSE 0 END), 0)) AS broken
                FROM {$this->db->dbprefix('purchase_items')} pi 
                LEFT JOIN {$this->db->dbprefix('purchases')} p ON p.id = pi.purchase_id 
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = pi.product_id AND pv.id = pi.option_id
                WHERE pi.status = 'received' ";

        $ending_purchases = $pp;

        $sp  = "( SELECT 
                    si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, SUM( si.item_discount ) totalItemDiscount, SUM( si.total_weight ) totalWeight, s.order_discount as order_discount, 
                    SUM(IF(LOWER(pv.name) = 'new',    COALESCE(si.quantity, 0), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    COALESCE(si.quantity, 0), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', COALESCE(si.quantity, 0), 0)) AS broken 
                FROM {$this->db->dbprefix('sales')} s 
                LEFT JOIN {$this->db->dbprefix('sale_items')} si on s.id = si.sale_id 
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = si.product_id AND pv.id = si.option_id
                WHERE s.sale_status != 'returned' AND s.sale_status != 'pending' ";

        $ending_sales = "( SELECT 
                    si.product_id, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, SUM( si.item_discount ) totalItemDiscount, SUM( si.total_weight ) totalWeight, s.order_discount as order_discount, 
                    SUM(IF(LOWER(pv.name) = 'new',    COALESCE(si.quantity, 0), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    COALESCE(si.quantity, 0), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', COALESCE(si.quantity, 0), 0)) AS broken  
                FROM {$this->db->dbprefix('sales')} s 
                LEFT JOIN {$this->db->dbprefix('sale_items')} si on s.id = si.sale_id 
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = si.product_id AND pv.id = si.option_id
                WHERE s.sale_status != 'pending' ";

        $pr1 = "( SELECT 
                    si_return.product_id, SUM( si_return.quantity ) soldQty_return, SUM( si_return.subtotal ) totalSale_return, 
                    SUM(IF(LOWER(pv.name) = 'new',    COALESCE(si_return.quantity, 0), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    COALESCE(si_return.quantity, 0), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', COALESCE(si_return.quantity, 0), 0)) AS broken  
                FROM {$this->db->dbprefix('sales')} ss 
                LEFT JOIN {$this->db->dbprefix('sale_items')} si_return on ss.id = si_return.sale_id 
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = si_return.product_id AND pv.id = si_return.option_id
                WHERE ss.sale_status = 'returned' ";

        $pr2 = "( SELECT 
                    sri.product_id, SUM(sri.quantity) as returnQty, SUM(sri.subtotal) returnTotalSale, 
                    SUM(IF(LOWER(pv.name) = 'new',    COALESCE(sri.quantity, 0), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    COALESCE(sri.quantity, 0), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', COALESCE(sri.quantity, 0), 0)) AS broken  
                FROM {$this->db->dbprefix('returns')} sr 
                LEFT JOIN {$this->db->dbprefix('return_items')} sri on sr.id = sri.return_id 
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = sri.product_id AND pv.id = sri.option_id ";
        
        $ending_returns = $pr2;

        $transfers = "( SELECT 
                    pi.product_id, SUM(pi.quantity) as transferQty, SUM(quantity_balance) as balanceQty, SUM(unit_cost * quantity_balance) balanceValue, SUM(pi.subtotal) totalTransfer, 
                    SUM(IF(LOWER(pv.name) = 'new',    COALESCE(pi.quantity, 0), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    COALESCE(pi.quantity, 0), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', COALESCE(pi.quantity, 0), 0)) AS broken  
                FROM {$this->db->dbprefix('purchase_items')} pi 
                LEFT JOIN {$this->db->dbprefix('transfers')} t on t.id = pi.transfer_id 
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = pi.product_id AND pv.id = pi.option_id 
                WHERE pi.status = 'received' ";

        $ending_transfers_in = $transfers_in = $transfers;
        $ending_transfers_out = $transfers_out = $transfers;

        $adjustments_add = " ( SELECT 
                    aji.product_id, SUM(aji.quantity) adjustmentQty, 
                    SUM(IF(LOWER(pv.name) = 'new',    COALESCE(aji.quantity, 0), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    COALESCE(aji.quantity, 0), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', COALESCE(aji.quantity, 0), 0)) AS broken   
                FROM {$this->db->dbprefix('adjustment_items')} aji 
                LEFT JOIN {$this->db->dbprefix('adjustments')} aj ON aj.id = aji.adjustment_id 
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = aji.product_id AND pv.id = aji.option_id 
                WHERE aji.type = 'addition' ";

        $adjustments_sub = " ( SELECT 
                    aji.product_id, SUM(aji.quantity) adjustmentQty, 
                    SUM(IF(LOWER(pv.name) = 'new',    COALESCE(aji.quantity, 0), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    COALESCE(aji.quantity, 0), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', COALESCE(aji.quantity, 0), 0)) AS broken  
                FROM {$this->db->dbprefix('adjustment_items')} aji 
                LEFT JOIN {$this->db->dbprefix('adjustments')} aj ON aj.id = aji.adjustment_id 
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = aji.product_id AND pv.id = aji.option_id 
                WHERE aji.type = 'subtraction' ";

        $ending_adjustments_add = $adjustments_add;
        $ending_adjustments_sub = $adjustments_sub;

        $us_using = "( SELECT
                    usi.product_id,
                    SUM(COALESCE(usi.qty_use, 0)) AS usQty,
                    SUM(IF(LOWER(pv.name) = 'new',    COALESCE(usi.qty_use, 0), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    COALESCE(usi.qty_use, 0), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', COALESCE(usi.qty_use, 0), 0)) AS broken  
                FROM {$this->db->dbprefix('enter_using_stock_items')} usi
                LEFT JOIN {$this->db->dbprefix('enter_using_stock')} us ON usi.using_stock_id = us.id
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = usi.product_id AND pv.id = usi.option_id 
                WHERE us.type = 'use' ";

        $us_return = "( SELECT
                    usi.product_id,
                    SUM(COALESCE(usi.qty_use, 0)) AS usQty,
                    SUM(IF(LOWER(pv.name) = 'new',    COALESCE(usi.qty_use, 0), 0)) AS new,
                    SUM(IF(LOWER(pv.name) = 'old',    COALESCE(usi.qty_use, 0), 0)) AS old,
                    SUM(IF(LOWER(pv.name) = 'broken', COALESCE(usi.qty_use, 0), 0)) AS broken  
                FROM {$this->db->dbprefix('enter_using_stock_items')} usi
                LEFT JOIN {$this->db->dbprefix('enter_using_stock')} us ON usi.using_stock_id = us.id
                LEFT JOIN {$this->db->dbprefix('product_variants')} pv ON pv.product_id = usi.product_id AND pv.id = usi.option_id 
                WHERE us.type = 'return' ";

        $ending_us_using  = $us_using;
        $ending_us_return = $us_return;

        if ($start_date || $warehouse) {
            $pr2 .= ' WHERE ';
            $ending_returns .= ' WHERE ';
            if ($start_date) {
                $start_date = $this->bpas->fld($start_date);
                $end_date   = $end_date ? $this->bpas->fld($end_date) : date('Y-m-d');

                $pp                     .= " AND p.date >= '{$start_date}' AND p.date <= '{$end_date}' ";
                $ending_purchases       .= " AND p.date < '{$start_date}' ";

                $sp                     .= " AND s.date >= '{$start_date}' AND s.date <= '{$end_date}' ";
                $ending_sales           .= " AND s.date < '{$start_date}' ";

                $pr1                    .= " AND ss.date >= '{$start_date}' AND ss.date <= '{$end_date}' ";
                $pr2                    .= " sr.date >= '{$start_date}' AND sr.date <= '{$end_date}' ";
                $ending_returns         .= " sr.date < '{$start_date}' ";

                $transfers_in           .= " AND t.date >= '{$start_date}' AND t.date <= '{$end_date}' ";
                $ending_transfers_in    .= " AND t.date < '{$start_date}' ";
                $transfers_out          .= " AND t.date >= '{$start_date}' AND t.date <= '{$end_date}' ";
                $ending_transfers_out   .= " AND t.date < '{$start_date}' ";

                $adjustments_add        .= " AND aj.date >= '{$start_date}' AND aj.date <= '{$end_date}' ";
                $ending_adjustments_add .= " AND aj.date < '{$start_date}' ";
                $adjustments_sub        .= " AND aj.date >= '{$start_date}' AND aj.date <= '{$end_date}' ";
                $ending_adjustments_sub .= " AND aj.date < '{$start_date}' ";

                $us_using               .= " AND us.date >= '{$start_date}' AND us.date <= '{$end_date}' ";
                $ending_us_using        .= " AND us.date < '{$start_date}' ";
                $us_return              .= " AND us.date >= '{$start_date}' AND us.date <= '{$end_date}' ";
                $ending_us_return       .= " AND us.date < '{$start_date}' ";
            }
            if ($warehouse) {
                if($start_date){
                    $pr2                .= " AND ";
                    $ending_returns     .= " AND ";
                }
                $pp                     .= " AND pi.warehouse_id = '{$warehouse}' ";
                $ending_purchases       .= " AND pi.warehouse_id = '{$warehouse}' ";

                $sp                     .= " AND si.warehouse_id = '{$warehouse}' ";
                $ending_sales           .= " AND si.warehouse_id = '{$warehouse}' ";

                $pr1                    .= " AND si_return.warehouse_id = '{$warehouse}' ";
                $pr2                    .= " sr.warehouse_id = '{$warehouse}' ";
                $ending_returns         .= " sr.warehouse_id = '{$warehouse}' ";
                
                $transfers_in           .= " AND t.to_warehouse_id = '{$warehouse}' ";
                $ending_transfers_in    .= " AND t.to_warehouse_id = '{$warehouse}' ";
                $transfers_out          .= " AND t.from_warehouse_id = '{$warehouse}' ";
                $ending_transfers_out   .= " AND t.from_warehouse_id = '{$warehouse}' ";

                $adjustments_add        .= " AND aji.warehouse_id = '{$warehouse}' ";
                $ending_adjustments_add .= " AND aji.warehouse_id = '{$warehouse}' ";
                $adjustments_sub        .= " AND aji.warehouse_id = '{$warehouse}' ";
                $ending_adjustments_sub .= " AND aji.warehouse_id = '{$warehouse}' ";

                $us_using               .= " AND usi.warehouse_id = '{$warehouse}' ";
                $ending_us_using        .= " AND usi.warehouse_id = '{$warehouse}' ";
                $us_return              .= " AND usi.warehouse_id = '{$warehouse}' ";
                $ending_us_return       .= " AND usi.warehouse_id = '{$warehouse}' ";
            }
        }
        
        $pp                             .= ' GROUP BY pi.product_id ) PCosts';
        $ending_purchases               .= ' GROUP BY pi.product_id ) Ending_Purchases';
        $sp                             .= ' GROUP BY si.product_id ) PSales';
        $ending_sales                   .= ' GROUP BY si.product_id ) Ending_Sales';
        $pr1                            .= ' GROUP BY si_return.product_id ) PSReturn';
        $pr2                            .= ' GROUP BY sri.product_id ) PReturn';
        $ending_returns                 .= ' GROUP BY sri.product_id ) Ending_PReturn';
        $transfers_in                   .= ' GROUP BY pi.product_id ) Transfers_IN';
        $ending_transfers_in            .= ' GROUP BY pi.product_id ) Ending_Transfers_IN';
        $transfers_out                  .= ' GROUP BY pi.product_id ) Transfers_OUT';
        $ending_transfers_out           .= ' GROUP BY pi.product_id ) Ending_Transfers_OUT';
        $adjustments_add                .= ' GROUP BY aji.product_id ) Adjustments_ADD';
        $ending_adjustments_add         .= ' GROUP BY aji.product_id ) Ending_Adjustments_ADD';
        $adjustments_sub                .= ' GROUP BY aji.product_id ) Adjustments_SUB';
        $ending_adjustments_sub         .= ' GROUP BY aji.product_id ) Ending_Adjustments_SUB';
        $us_using                       .= ' GROUP BY usi.product_id ) US_Using';
        $ending_us_using                .= ' GROUP BY usi.product_id ) Ending_US_Using';
        $us_return                      .= ' GROUP BY usi.product_id ) US_Return';
        $ending_us_return               .= ' GROUP BY usi.product_id ) Ending_US_Return';

        $vrn = '( SELECT id, product_id, name, SUM(COALESCE(quantity, 0)) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="New" GROUP BY product_id) NVariant';
        $vro = '( SELECT id, product_id, name, SUM(COALESCE(quantity, 0)) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="Old" GROUP BY product_id) OVariant';
        $vrb = '( SELECT id, product_id, name, SUM(COALESCE(quantity, 0)) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="Broken" GROUP BY product_id) BVariant';

        $pv  = "( SELECT DISTINCT {$this->db->dbprefix('product_variants')}.product_id FROM {$this->db->dbprefix('product_variants')} ) bpas_pv ";

        if ($preview) {
            $this->db
                ->select($this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . '.name, ' . $this->db->dbprefix('pv') . ".product_id AS variant, 
                    COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) as BeginningQty,
                    (COALESCE( Ending_Purchases.new, 0 ) - COALESCE( Ending_Sales.new, 0 ) + COALESCE( Ending_PReturn.new, 0 ) - COALESCE( Ending_Transfers_OUT.new, 0 ) + COALESCE( Ending_Transfers_IN.new, 0 ) + COALESCE( Ending_Adjustments_ADD.new, 0 ) - COALESCE( Ending_Adjustments_SUB.new, 0 ) - COALESCE(Ending_US_Using.new, 0) + COALESCE(Ending_US_Return.new, 0)) AS n_BeginningQty, 
                    (COALESCE( Ending_Purchases.old, 0 ) - COALESCE( Ending_Sales.old, 0 ) + COALESCE( Ending_PReturn.old, 0 ) - COALESCE( Ending_Transfers_OUT.old, 0 ) + COALESCE( Ending_Transfers_IN.old, 0 ) + COALESCE( Ending_Adjustments_ADD.old, 0 ) - COALESCE( Ending_Adjustments_SUB.old, 0 ) - COALESCE(Ending_US_Using.old, 0) + COALESCE(Ending_US_Return.old, 0)) AS o_BeginningQty, 
                    (COALESCE( Ending_Purchases.broken, 0 ) - COALESCE( Ending_Sales.broken, 0 ) + COALESCE( Ending_PReturn.broken, 0 ) - COALESCE( Ending_Transfers_OUT.broken, 0 ) + COALESCE( Ending_Transfers_IN.broken, 0 ) + COALESCE( Ending_Adjustments_ADD.broken, 0 ) - COALESCE( Ending_Adjustments_SUB.broken, 0 ) - COALESCE(Ending_US_Using.broken, 0) + COALESCE(Ending_US_Return.broken, 0)) AS b_BeginningQty,

                    COALESCE( PCosts.purchasedQty, 0 ) AS PurchasedQty,
                    COALESCE( PCosts.new, 0 )          AS n_PurchasedQty,
                    COALESCE( PCosts.old, 0 )          AS o_PurchasedQty,
                    COALESCE( PCosts.broken, 0 )       AS b_PurchasedQty,

                    COALESCE( Transfers_IN.transferQty, 0 ) as TransferQtyIN,
                    COALESCE( Transfers_OUT.transferQty, 0 ) as TransferQtyOUT,
                    COALESCE( Adjustments_ADD.adjustmentQty, 0 ) as AdjustmentQtyADD,
                    COALESCE( Adjustments_SUB.adjustmentQty, 0 ) as AdjustmentQtySUB,
                    COALESCE( PSales.soldQty, 0 ) as SoldQty,
                    COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                    COALESCE( PSales.totalItemDiscount, 0 ) as discount,

                    COALESCE( US_Using.usQty, 0 )   AS UsingStockQty,
                    COALESCE( US_Using.new, 0 )     AS n_UsingStockQty, 
                    COALESCE( US_Using.old, 0 )     AS o_UsingStockQty, 
                    COALESCE( US_Using.broken, 0 )  AS b_UsingStockQty, 
                    
                    COALESCE( US_Return.usQty, 0 )  AS ReturnStockQty,
                    COALESCE( US_Return.new, 0 )    AS n_ReturnStockQty, 
                    COALESCE( US_Return.old, 0 )    AS o_ReturnStockQty, 
                    COALESCE( US_Return.broken, 0 ) AS b_ReturnStockQty, 
                    (   
                        COALESCE( Ending_Purchases.purchasedQty, 0 ) - 
                        COALESCE( Ending_Sales.soldQty, 0 ) + 
                        COALESCE( Ending_PReturn.returnQty, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + 
                        COALESCE( Ending_Transfers_IN.transferQty, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) -
                        COALESCE( Ending_US_Using.usQty, 0 ) +
                        COALESCE( Ending_US_Return.usQty, 0 ) +
                        COALESCE( PCosts.purchasedQty, 0 ) +
                        COALESCE( Transfers_IN.transferQty, 0 ) -
                        COALESCE( Transfers_OUT.transferQty, 0 ) +
                        COALESCE( Adjustments_ADD.adjustmentQty, 0 ) -
                        COALESCE( Adjustments_SUB.adjustmentQty, 0 ) -
                        COALESCE( PSales.soldQty, 0 ) +
                        COALESCE( PReturn.returnQty, 0 ) + 
                        Abs(COALESCE( PSReturn.soldQty_return, 0 )) - 
                        COALESCE( US_Using.usQty, 0 ) +
                        COALESCE( US_Return.usQty, 0 )
                    ) as BalanceQty,
                    (
                        COALESCE( Ending_Purchases.new, 0 ) - 
                        COALESCE( Ending_Sales.new, 0 ) + 
                        COALESCE( Ending_PReturn.new, 0 ) + 
                        COALESCE( Ending_Transfers_IN.new, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.new, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.new, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.new, 0 ) -
                        COALESCE( Ending_US_Using.new, 0 ) +
                        COALESCE( Ending_US_Return.new, 0 ) +
                        COALESCE( PCosts.new, 0 ) +
                        COALESCE( Transfers_IN.new, 0 ) -
                        COALESCE( Transfers_OUT.new, 0 ) +
                        COALESCE( Adjustments_ADD.new, 0 ) -
                        COALESCE( Adjustments_SUB.new, 0 ) -
                        COALESCE( PSales.new, 0 ) +
                        COALESCE( PReturn.new, 0 ) + 
                        Abs(COALESCE( PSReturn.new, 0 )) -
                        COALESCE( US_Using.new, 0 ) +
                        COALESCE( US_Return.new, 0 )
                    ) AS n_BalanceQty,
                    (
                        COALESCE( Ending_Purchases.old, 0 ) - 
                        COALESCE( Ending_Sales.old, 0 ) + 
                        COALESCE( Ending_PReturn.old, 0 ) + 
                        COALESCE( Ending_Transfers_IN.old, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.old, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.old, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.old, 0 ) -
                        COALESCE( Ending_US_Using.old, 0 ) +
                        COALESCE( Ending_US_Return.old, 0 ) +
                        COALESCE( PCosts.old, 0 ) +
                        COALESCE( Transfers_IN.old, 0 ) -
                        COALESCE( Transfers_OUT.old, 0 ) +
                        COALESCE( Adjustments_ADD.old, 0 ) -
                        COALESCE( Adjustments_SUB.old, 0 ) -
                        COALESCE( PSales.old, 0 ) +
                        COALESCE( PReturn.old, 0 ) + 
                        Abs(COALESCE( PSReturn.old, 0 )) -
                        COALESCE( US_Using.old, 0 ) +
                        COALESCE( US_Return.old, 0 )
                    ) AS o_BalanceQty,
                    (
                        COALESCE( Ending_Purchases.broken, 0 ) - 
                        COALESCE( Ending_Sales.broken, 0 ) + 
                        COALESCE( Ending_PReturn.broken, 0 ) + 
                        COALESCE( Ending_Transfers_IN.broken, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.broken, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.broken, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.broken, 0 ) -
                        COALESCE( Ending_US_Using.broken, 0 ) +
                        COALESCE( Ending_US_Return.broken, 0 ) +
                        COALESCE( PCosts.broken, 0 ) +
                        COALESCE( Transfers_IN.broken, 0 ) -
                        COALESCE( Transfers_OUT.broken, 0 ) +
                        COALESCE( Adjustments_ADD.broken, 0 ) -
                        COALESCE( Adjustments_SUB.broken, 0 ) -
                        COALESCE( PSales.broken, 0 ) +
                        COALESCE( PReturn.broken, 0 ) + 
                        Abs(COALESCE( PSReturn.broken, 0 )) -
                        COALESCE( US_Using.broken, 0 ) +
                        COALESCE( US_Return.broken, 0 )
                    ) AS b_BalanceQty,
                    COALESCE( PSales.totalWeight, 0 ) as weight,
                    COALESCE(NVariant.sQty, 0) as qtyNewVar,
                    COALESCE(OVariant.sQty, 0) as qtyOldVar,
                    COALESCE(BVariant.sQty, 0) as qtyBrokenVar,
                    {$this->db->dbprefix('products')}.id as id", false)
                ->from('products')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->join($ending_purchases, 'products.id = Ending_Purchases.product_id', 'left')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($ending_sales, 'products.id = Ending_Sales.product_id', 'left')
                ->join($transfers_in, 'products.id = Transfers_IN.product_id', 'left')
                ->join($ending_transfers_in, 'products.id = Ending_Transfers_IN.product_id', 'left')
                ->join($transfers_out, 'products.id = Transfers_OUT.product_id', 'left')
                ->join($ending_transfers_out, 'products.id = Ending_Transfers_OUT.product_id', 'left')
                ->join($adjustments_add, 'products.id = Adjustments_ADD.product_id', 'left')
                ->join($ending_adjustments_add, 'products.id = Ending_Adjustments_ADD.product_id', 'left')
                ->join($adjustments_sub, 'products.id = Adjustments_SUB.product_id', 'left')
                ->join($ending_adjustments_sub, 'products.id = Ending_Adjustments_SUB.product_id', 'left')
                ->join($pr1, 'products.id = PSReturn.product_id', 'left')
                ->join($pr2, 'products.id = PReturn.product_id', 'left')
                ->join($ending_returns, 'products.id = Ending_PReturn.product_id', 'left')
                ->join($us_using, 'products.id = US_Using.product_id', 'left')
                ->join($ending_us_using, 'products.id = Ending_US_Using.product_id', 'left')
                ->join($us_return, 'products.id = US_Return.product_id', 'left')
                ->join($ending_us_return, 'products.id = Ending_US_Return.product_id', 'left')
                ->join($pv, 'products.id = pv.product_id', 'left')
                ->join($vrn, 'products.id = NVariant.product_id', 'left')
                ->join($vro, 'products.id = OVariant.product_id', 'left')
                ->join($vrb, 'products.id = BVariant.product_id', 'left')
                ->group_by('products.code');

            if($product || $cf1 || $cf2 || $cf3 || $cf4 || $cf5 || $cf6 || $category || $subcategory || $brand){
                if ($product) {
                    $this->db->where($this->db->dbprefix('products') . '.id', $product);
                }
                if ($cf1) {
                    $this->db->where($this->db->dbprefix('products') . '.cf1', $cf1);
                }
                if ($cf2) {
                    $this->db->where($this->db->dbprefix('products') . '.cf2', $cf2);
                }
                if ($cf3) {
                    $this->db->where($this->db->dbprefix('products') . '.cf3', $cf3);
                }
                if ($cf4) {
                    $this->db->where($this->db->dbprefix('products') . '.cf4', $cf4);
                }
                if ($cf5) {
                    $this->db->where($this->db->dbprefix('products') . '.cf5', $cf5);
                }
                if ($cf6) {
                    $this->db->where($this->db->dbprefix('products') . '.cf6', $cf6);
                }
                if ($category) {
                    $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
                }
                if ($subcategory) {
                    $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
                }
                if ($brand) {
                    $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
                }
            } else if (empty($dataTable_filter) && empty($dataTable_filter_col_1) && empty($dataTable_filter_col_2)){
                $this->db->where('PCosts.totalPurchase !=', 0);
                $this->db->or_where('PCosts.totalPurchase !=', null);
                $this->db->or_where('PSales.totalSale !=', 0);
                $this->db->or_where('PSales.totalSale !=', null);
                $this->db->or_where('PReturn.returnTotalSale !=', 0);
                $this->db->or_where('PReturn.returnTotalSale !=', null);
                $this->db->or_where('PSReturn.totalSale_return !=', 0);
                $this->db->or_where('PSReturn.totalSale_return !=', null);
                $this->db->or_where('Transfers_IN.totalTransfer !=', 0);
                $this->db->or_where('Transfers_IN.totalTransfer !=', null);
                $this->db->or_where('Transfers_OUT.totalTransfer !=', 0);
                $this->db->or_where('Transfers_OUT.totalTransfer !=', null);
                $this->db->or_where('Adjustments_ADD.adjustmentQty !=', 0);
                $this->db->or_where('Adjustments_ADD.adjustmentQty !=', null);
                $this->db->or_where('Adjustments_SUB.adjustmentQty !=', 0);
                $this->db->or_where('Adjustments_SUB.adjustmentQty !=', null);
                $this->db->or_where('US_Using.usQty !=', 0);
                $this->db->or_where('US_Using.usQty !=', null);
                $this->db->or_where('US_Return.usQty !=', 0);
                $this->db->or_where('US_Return.usQty !=', null);
                // $this->db->or_where('(COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) !=', 0);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_using_report')]];
                $meta = ['page_title' => lang('products_using_report'), 'bc' => $bc];
                $this->page_construct('reports/products_using_report_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . '.name,
                    ' . $this->db->dbprefix('products') . '.serial_no,
                    ' . $this->db->dbprefix('products') . '.category_id,
                    ' . $this->db->dbprefix('pv') . '.product_id AS variant,
                    (COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) - COALESCE( Ending_US_Using.usQty, 0 ) + COALESCE( Ending_US_Return.usQty, 0 )) AS BeginningQty,
                    (COALESCE( Ending_Purchases.new, 0 ) - COALESCE( Ending_Sales.new, 0 ) + COALESCE( Ending_PReturn.new, 0 ) - COALESCE( Ending_Transfers_OUT.new, 0 ) + COALESCE( Ending_Transfers_IN.new, 0 ) + COALESCE( Ending_Adjustments_ADD.new, 0 ) - COALESCE( Ending_Adjustments_SUB.new, 0 ) - COALESCE(Ending_US_Using.new, 0) + COALESCE(Ending_US_Return.new, 0)) AS n_BeginningQty, 
                    (COALESCE( Ending_Purchases.old, 0 ) - COALESCE( Ending_Sales.old, 0 ) + COALESCE( Ending_PReturn.old, 0 ) - COALESCE( Ending_Transfers_OUT.old, 0 ) + COALESCE( Ending_Transfers_IN.old, 0 ) + COALESCE( Ending_Adjustments_ADD.old, 0 ) - COALESCE( Ending_Adjustments_SUB.old, 0 ) - COALESCE(Ending_US_Using.old, 0) + COALESCE(Ending_US_Return.old, 0)) AS o_BeginningQty, 
                    (COALESCE( Ending_Purchases.broken, 0 ) - COALESCE( Ending_Sales.broken, 0 ) + COALESCE( Ending_PReturn.broken, 0 ) - COALESCE( Ending_Transfers_OUT.broken, 0 ) + COALESCE( Ending_Transfers_IN.broken, 0 ) + COALESCE( Ending_Adjustments_ADD.broken, 0 ) - COALESCE( Ending_Adjustments_SUB.broken, 0 ) - COALESCE(Ending_US_Using.broken, 0) + COALESCE(Ending_US_Return.broken, 0)) AS b_BeginningQty,

                    COALESCE( PCosts.purchasedQty, 0 ) AS PurchasedQty, 
                    COALESCE( PCosts.new, 0 )          AS n_PurchasedQty,
                    COALESCE( PCosts.old, 0 )          AS o_PurchasedQty,
                    COALESCE( PCosts.broken, 0 )       AS b_PurchasedQty,
                        
                    CONCAT(COALESCE( Transfers_IN.transferQty, 0 ), " (IN), ", COALESCE( Transfers_OUT.transferQty, 0 ), " (OUT)") as TransferQty,
                    CONCAT(COALESCE( Adjustments_ADD.adjustmentQty, 0 ), " (ADD), ", COALESCE( Adjustments_SUB.adjustmentQty, 0 ), " (SUB)") as AdjustmentQty,
                    COALESCE( PSales.soldQty, 0 ) as SoldQty,
                    COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,

                    COALESCE( US_Using.usQty, 0 )   AS UsingStockQty,
                    COALESCE( US_Using.new, 0 )     AS n_UsingStockQty, 
                    COALESCE( US_Using.old, 0 )     AS o_UsingStockQty, 
                    COALESCE( US_Using.broken, 0 )  AS b_UsingStockQty, 
                    
                    COALESCE( US_Return.usQty, 0 )  AS ReturnStockQty,
                    COALESCE( US_Return.new, 0 )    AS n_ReturnStockQty, 
                    COALESCE( US_Return.old, 0 )    AS o_ReturnStockQty, 
                    COALESCE( US_Return.broken, 0 ) AS b_ReturnStockQty, 
                    (   
                        COALESCE( Ending_Purchases.purchasedQty, 0 ) - 
                        COALESCE( Ending_Sales.soldQty, 0 ) + 
                        COALESCE( Ending_PReturn.returnQty, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + 
                        COALESCE( Ending_Transfers_IN.transferQty, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) -
                        COALESCE( Ending_US_Using.usQty, 0 ) +
                        COALESCE( Ending_US_Return.usQty, 0 ) +
                        COALESCE( PCosts.purchasedQty, 0 ) +
                        COALESCE( Transfers_IN.transferQty, 0 ) -
                        COALESCE( Transfers_OUT.transferQty, 0 ) +
                        COALESCE( Adjustments_ADD.adjustmentQty, 0 ) -
                        COALESCE( Adjustments_SUB.adjustmentQty, 0 ) -
                        COALESCE( PSales.soldQty, 0 ) +
                        COALESCE( PReturn.returnQty, 0 ) + 
                        Abs(COALESCE( PSReturn.soldQty_return, 0 )) - 
                        COALESCE( US_Using.usQty, 0 ) +
                        COALESCE( US_Return.usQty, 0 )
                    ) as BalanceQty,  
                    (
                        COALESCE( Ending_Purchases.new, 0 ) - 
                        COALESCE( Ending_Sales.new, 0 ) + 
                        COALESCE( Ending_PReturn.new, 0 ) + 
                        COALESCE( Ending_Transfers_IN.new, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.new, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.new, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.new, 0 ) -
                        COALESCE( Ending_US_Using.new, 0 ) +
                        COALESCE( Ending_US_Return.new, 0 ) +
                        COALESCE( PCosts.new, 0 ) +
                        COALESCE( Transfers_IN.new, 0 ) -
                        COALESCE( Transfers_OUT.new, 0 ) +
                        COALESCE( Adjustments_ADD.new, 0 ) -
                        COALESCE( Adjustments_SUB.new, 0 ) -
                        COALESCE( PSales.new, 0 ) +
                        COALESCE( PReturn.new, 0 ) + 
                        Abs(COALESCE( PSReturn.new, 0 )) -
                        COALESCE( US_Using.new, 0 ) +
                        COALESCE( US_Return.new, 0 )
                    ) AS n_BalanceQty,
                    (
                        COALESCE( Ending_Purchases.old, 0 ) - 
                        COALESCE( Ending_Sales.old, 0 ) + 
                        COALESCE( Ending_PReturn.old, 0 ) + 
                        COALESCE( Ending_Transfers_IN.old, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.old, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.old, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.old, 0 ) -
                        COALESCE( Ending_US_Using.old, 0 ) +
                        COALESCE( Ending_US_Return.old, 0 ) +
                        COALESCE( PCosts.old, 0 ) +
                        COALESCE( Transfers_IN.old, 0 ) -
                        COALESCE( Transfers_OUT.old, 0 ) +
                        COALESCE( Adjustments_ADD.old, 0 ) -
                        COALESCE( Adjustments_SUB.old, 0 ) -
                        COALESCE( PSales.old, 0 ) +
                        COALESCE( PReturn.old, 0 ) + 
                        Abs(COALESCE( PSReturn.old, 0 )) -
                        COALESCE( US_Using.old, 0 ) +
                        COALESCE( US_Return.old, 0 )
                    ) AS o_BalanceQty,
                    (
                        COALESCE( Ending_Purchases.broken, 0 ) - 
                        COALESCE( Ending_Sales.broken, 0 ) + 
                        COALESCE( Ending_PReturn.broken, 0 ) + 
                        COALESCE( Ending_Transfers_IN.broken, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.broken, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.broken, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.broken, 0 ) -
                        COALESCE( Ending_US_Using.broken, 0 ) +
                        COALESCE( Ending_US_Return.broken, 0 ) +
                        COALESCE( PCosts.broken, 0 ) +
                        COALESCE( Transfers_IN.broken, 0 ) -
                        COALESCE( Transfers_OUT.broken, 0 ) +
                        COALESCE( Adjustments_ADD.broken, 0 ) -
                        COALESCE( Adjustments_SUB.broken, 0 ) -
                        COALESCE( PSales.broken, 0 ) +
                        COALESCE( PReturn.broken, 0 ) + 
                        Abs(COALESCE( PSReturn.broken, 0 )) -
                        COALESCE( US_Using.broken, 0 ) +
                        COALESCE( US_Return.broken, 0 )
                    ) AS b_BalanceQty,
                    COALESCE( PCosts.totalPurchase, 0 ) as TotalPurchase,
                    COALESCE( PSales.totalSale, 0 ) as TotalSales,
                    (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit,
                    COALESCE(NVariant.sQty, 0) as qtyNewVar,
                    COALESCE(OVariant.sQty, 0) as qtyOldVar,
                    COALESCE(BVariant.sQty, 0) as qtyBrokenVar', false)
                ->from('products')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->join($ending_purchases, 'products.id = Ending_Purchases.product_id', 'left')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($ending_sales, 'products.id = Ending_Sales.product_id', 'left')
                ->join($transfers_in, 'products.id = Transfers_IN.product_id', 'left')
                ->join($ending_transfers_in, 'products.id = Ending_Transfers_IN.product_id', 'left')
                ->join($transfers_out, 'products.id = Transfers_OUT.product_id', 'left')
                ->join($ending_transfers_out, 'products.id = Ending_Transfers_OUT.product_id', 'left')
                ->join($adjustments_add, 'products.id = Adjustments_ADD.product_id', 'left')
                ->join($ending_adjustments_add, 'products.id = Ending_Adjustments_ADD.product_id', 'left')
                ->join($adjustments_sub, 'products.id = Adjustments_SUB.product_id', 'left')
                ->join($ending_adjustments_sub, 'products.id = Ending_Adjustments_SUB.product_id', 'left')
                ->join($pr1, 'products.id = PSReturn.product_id', 'left')
                ->join($pr2, 'products.id = PReturn.product_id', 'left')
                ->join($ending_returns, 'products.id = Ending_PReturn.product_id', 'left')
                ->join($us_using, 'products.id = US_Using.product_id', 'left')
                ->join($ending_us_using, 'products.id = Ending_US_Using.product_id', 'left')
                ->join($us_return, 'products.id = US_Return.product_id', 'left')
                ->join($ending_us_return, 'products.id = Ending_US_Return.product_id', 'left')
                ->join($pv, 'products.id = pv.product_id', 'left')
                ->join($vrn, 'products.id = NVariant.product_id', 'left')
                ->join($vro, 'products.id = OVariant.product_id', 'left')
                ->join($vrb, 'products.id = BVariant.product_id', 'left')
                ->order_by('products.code');
            
            if($product || $cf1 || $cf2 || $cf3 || $cf4 || $cf5 || $cf6 || $category || $subcategory || $brand){
                if ($product) {
                    $this->db->where($this->db->dbprefix('products') . '.id', $product);
                }
                if ($cf1) {
                    $this->db->where($this->db->dbprefix('products') . '.cf1', $cf1);
                }
                if ($cf2) {
                    $this->db->where($this->db->dbprefix('products') . '.cf2', $cf2);
                }
                if ($cf3) {
                    $this->db->where($this->db->dbprefix('products') . '.cf3', $cf3);
                }
                if ($cf4) {
                    $this->db->where($this->db->dbprefix('products') . '.cf4', $cf4);
                }
                if ($cf5) {
                    $this->db->where($this->db->dbprefix('products') . '.cf5', $cf5);
                }
                if ($cf6) {
                    $this->db->where($this->db->dbprefix('products') . '.cf6', $cf6);
                }
                if ($category) {
                    $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
                }
                if ($subcategory) {
                    $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
                }
                if ($brand) {
                    $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
                }
            } else if (empty($dataTable_filter) && empty($dataTable_filter_col_1) && empty($dataTable_filter_col_2)){
                $this->db->where('PCosts.totalPurchase !=', 0);
                $this->db->or_where('PCosts.totalPurchase !=', null);
                $this->db->or_where('PSales.totalSale !=', 0);
                $this->db->or_where('PSales.totalSale !=', null);
                $this->db->or_where('PReturn.returnTotalSale !=', 0);
                $this->db->or_where('PReturn.returnTotalSale !=', null);
                $this->db->or_where('PSReturn.totalSale_return !=', 0);
                $this->db->or_where('PSReturn.totalSale_return !=', null);
                $this->db->or_where('Transfers_IN.totalTransfer !=', 0);
                $this->db->or_where('Transfers_IN.totalTransfer !=', null);
                $this->db->or_where('Transfers_OUT.totalTransfer !=', 0);
                $this->db->or_where('Transfers_OUT.totalTransfer !=', null);
                $this->db->or_where('Adjustments_ADD.adjustmentQty !=', 0);
                $this->db->or_where('Adjustments_ADD.adjustmentQty !=', null);
                $this->db->or_where('Adjustments_SUB.adjustmentQty !=', 0);
                $this->db->or_where('Adjustments_SUB.adjustmentQty !=', null);
                $this->db->or_where('US_Using.usQty !=', 0);
                $this->db->or_where('US_Using.usQty !=', null);
                $this->db->or_where('US_Return.usQty !=', 0);
                $this->db->or_where('US_Return.usQty !=', null);
                // $this->db->or_where('(COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) !=', 0);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_using_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('serial'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('category'));
                $this->excel->getActiveSheet()->mergeCells('E1:G1')->SetCellValue('E1', lang('beginning'));
                $this->excel->getActiveSheet()->mergeCells('H1:J1')->SetCellValue('H1', lang('purchased'));
                $this->excel->getActiveSheet()->mergeCells('K1:M1')->SetCellValue('K1', lang('using_stock'));
                $this->excel->getActiveSheet()->mergeCells('N1:P1')->SetCellValue('N1', lang('return_stock'));
                $this->excel->getActiveSheet()->mergeCells('Q1:S1')->SetCellValue('Q1', lang('balance'));

                $this->excel->getActiveSheet()->SetCellValue('E2', lang('new'));
                $this->excel->getActiveSheet()->SetCellValue('F2', lang('old'));
                $this->excel->getActiveSheet()->SetCellValue('G2', lang('broken'));
                $this->excel->getActiveSheet()->SetCellValue('H2', lang('new'));
                $this->excel->getActiveSheet()->SetCellValue('I2', lang('old'));
                $this->excel->getActiveSheet()->SetCellValue('J2', lang('broken'));
                $this->excel->getActiveSheet()->SetCellValue('K2', lang('new'));
                $this->excel->getActiveSheet()->SetCellValue('L2', lang('old'));
                $this->excel->getActiveSheet()->SetCellValue('M2', lang('broken'));
                $this->excel->getActiveSheet()->SetCellValue('N2', lang('new'));
                $this->excel->getActiveSheet()->SetCellValue('O2', lang('old'));
                $this->excel->getActiveSheet()->SetCellValue('P2', lang('broken'));
                $this->excel->getActiveSheet()->SetCellValue('Q2', lang('new'));
                $this->excel->getActiveSheet()->SetCellValue('R2', lang('old'));
                $this->excel->getActiveSheet()->SetCellValue('S2', lang('broken'));

                $row  = 3;
                foreach ($data as $data_row) {
                    $get_categories= $this->site->getCategoryByID($data_row->category_id);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->serial_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $get_categories->name);

                    if (!empty($data_row->variant)) {
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->n_BeginningQty);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->o_BeginningQty);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->b_BeginningQty);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->n_PurchasedQty);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->o_PurchasedQty);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->b_PurchasedQty);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->n_UsingStockQty);
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->o_UsingStockQty);
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->b_UsingStockQty);
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->n_ReturnStockQty);
                        $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->o_ReturnStockQty);
                        $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->b_ReturnStockQty);
                        $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $data_row->n_BalanceQty);
                        $this->excel->getActiveSheet()->SetCellValue('R' . $row, $data_row->o_BalanceQty);
                        $this->excel->getActiveSheet()->SetCellValue('S' . $row, $data_row->b_BalanceQty);
                    } else {
                        $this->excel->getActiveSheet()->mergeCells('E' . $row . ':G' . $row)->SetCellValue('E' . $row, $data_row->BeginningQty);
                        $this->excel->getActiveSheet()->mergeCells('H' . $row . ':J' . $row)->SetCellValue('H' . $row, $data_row->PurchasedQty);
                        $this->excel->getActiveSheet()->mergeCells('K' . $row . ':M' . $row)->SetCellValue('K' . $row, $data_row->UsingStockQty);
                        $this->excel->getActiveSheet()->mergeCells('N' . $row . ':P' . $row)->SetCellValue('N' . $row, $data_row->ReturnStockQty);
                        $this->excel->getActiveSheet()->mergeCells('Q' . $row . ':S' . $row)->SetCellValue('Q' . $row, $data_row->BalanceQty);
                    }
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                $filename = 'products_using_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                    {$this->db->dbprefix('products')}.code, {$this->db->dbprefix('products')}.name,
                    IF(
                        {$this->db->dbprefix('pv')}.product_id IS NOT NULL,
                        CONCAT(( COALESCE( Ending_Purchases.new, 0 ) - COALESCE( Ending_Sales.new, 0 ) + COALESCE( Ending_PReturn.new, 0 ) - COALESCE( Ending_Transfers_OUT.new, 0 ) + COALESCE( Ending_Transfers_IN.new, 0 ) + COALESCE( Ending_Adjustments_ADD.new, 0 ) - COALESCE( Ending_Adjustments_SUB.new, 0 ) - COALESCE(Ending_US_Using.new, 0) + COALESCE(Ending_US_Return.new, 0)), '__', ( COALESCE( Ending_Purchases.old, 0 ) - COALESCE( Ending_Sales.old, 0 ) + COALESCE( Ending_PReturn.old, 0 ) - COALESCE( Ending_Transfers_OUT.old, 0 ) + COALESCE( Ending_Transfers_IN.old, 0 ) + COALESCE( Ending_Adjustments_ADD.old, 0 ) - COALESCE( Ending_Adjustments_SUB.old, 0 ) - COALESCE(Ending_US_Using.old, 0) + COALESCE(Ending_US_Return.old, 0)), '__', ( COALESCE( Ending_Purchases.broken, 0 ) - COALESCE( Ending_Sales.broken, 0 ) + COALESCE( Ending_PReturn.broken, 0 ) - COALESCE( Ending_Transfers_OUT.broken, 0 ) + COALESCE( Ending_Transfers_IN.broken, 0 ) + COALESCE( Ending_Adjustments_ADD.broken, 0 ) - COALESCE( Ending_Adjustments_SUB.broken, 0 ) - COALESCE(Ending_US_Using.broken, 0) + COALESCE(Ending_US_Return.broken, 0))),
                        (COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) - COALESCE( Ending_US_Using.usQty, 0 ) + COALESCE( Ending_US_Return.usQty, 0 ))
                    ) AS beginning,
                    IF(
                        {$this->db->dbprefix('pv')}.product_id IS NOT NULL,
                        CONCAT( COALESCE( PCosts.new, 0 ), '__', COALESCE( PCosts.old, 0 ), '__', COALESCE( PCosts.broken, 0 ) ), 
                        COALESCE( PCosts.purchasedQty, 0 )
                    ) AS purchased,
                    IF(
                        {$this->db->dbprefix('pv')}.product_id IS NOT NULL, 
                        CONCAT( COALESCE( US_Using.new, 0 ), '__', COALESCE( US_Using.old, 0 ), '__', COALESCE( US_Using.broken, 0 ) ), 
                        COALESCE( US_Using.usQty, 0 )
                    ) AS us_using, 
                    IF(
                        {$this->db->dbprefix('pv')}.product_id IS NOT NULL, 
                        CONCAT( COALESCE( US_Return.new, 0 ), '__', COALESCE( US_Return.old, 0 ), '__', COALESCE( US_Return.broken, 0 ) ), 
                        COALESCE( US_Return.usQty, 0 )
                    ) AS us_return, 
                    IF(
                        {$this->db->dbprefix('pv')}.product_id IS NOT NULL, 
                        CONCAT(   
                            (
                                COALESCE( Ending_Purchases.new, 0 ) - 
                                COALESCE( Ending_Sales.new, 0 ) + 
                                COALESCE( Ending_PReturn.new, 0 ) + 
                                COALESCE( Ending_Transfers_IN.new, 0 ) - 
                                COALESCE( Ending_Transfers_OUT.new, 0 ) + 
                                COALESCE( Ending_Adjustments_ADD.new, 0 ) - 
                                COALESCE( Ending_Adjustments_SUB.new, 0 ) -
                                COALESCE( Ending_US_Using.new, 0 ) +
                                COALESCE( Ending_US_Return.new, 0 ) +

                                COALESCE( PCosts.new, 0 ) +
                                COALESCE( Transfers_IN.new, 0 ) -
                                COALESCE( Transfers_OUT.new, 0 ) +
                                COALESCE( Adjustments_ADD.new, 0 ) -
                                COALESCE( Adjustments_SUB.new, 0 ) -
                                COALESCE( PSales.new, 0 ) +
                                COALESCE( PReturn.new, 0 ) + 
                                Abs(COALESCE( PSReturn.new, 0 )) -
                                COALESCE( US_Using.new, 0 ) +
                                COALESCE( US_Return.new, 0 )
                            ), '__',
                            (
                                COALESCE( Ending_Purchases.old, 0 ) - 
                                COALESCE( Ending_Sales.old, 0 ) + 
                                COALESCE( Ending_PReturn.old, 0 ) + 
                                COALESCE( Ending_Transfers_IN.old, 0 ) - 
                                COALESCE( Ending_Transfers_OUT.old, 0 ) + 
                                COALESCE( Ending_Adjustments_ADD.old, 0 ) - 
                                COALESCE( Ending_Adjustments_SUB.old, 0 ) -
                                COALESCE( Ending_US_Using.old, 0 ) +
                                COALESCE( Ending_US_Return.old, 0 ) +

                                COALESCE( PCosts.old, 0 ) +
                                COALESCE( Transfers_IN.old, 0 ) -
                                COALESCE( Transfers_OUT.old, 0 ) +
                                COALESCE( Adjustments_ADD.old, 0 ) -
                                COALESCE( Adjustments_SUB.old, 0 ) -
                                COALESCE( PSales.old, 0 ) +
                                COALESCE( PReturn.old, 0 ) + 
                                Abs(COALESCE( PSReturn.old, 0 )) -
                                COALESCE( US_Using.old, 0 ) +
                                COALESCE( US_Return.old, 0 )
                            ), '__',
                            (
                                COALESCE( Ending_Purchases.broken, 0 ) - 
                                COALESCE( Ending_Sales.broken, 0 ) + 
                                COALESCE( Ending_PReturn.broken, 0 ) + 
                                COALESCE( Ending_Transfers_IN.broken, 0 ) - 
                                COALESCE( Ending_Transfers_OUT.broken, 0 ) + 
                                COALESCE( Ending_Adjustments_ADD.broken, 0 ) - 
                                COALESCE( Ending_Adjustments_SUB.broken, 0 ) -
                                COALESCE( Ending_US_Using.broken, 0 ) +
                                COALESCE( Ending_US_Return.broken, 0 ) +

                                COALESCE( PCosts.broken, 0 ) +
                                COALESCE( Transfers_IN.broken, 0 ) -
                                COALESCE( Transfers_OUT.broken, 0 ) +
                                COALESCE( Adjustments_ADD.broken, 0 ) -
                                COALESCE( Adjustments_SUB.broken, 0 ) -
                                COALESCE( PSales.broken, 0 ) +
                                COALESCE( PReturn.broken, 0 ) + 
                                Abs(COALESCE( PSReturn.broken, 0 )) -
                                COALESCE( US_Using.broken, 0 ) +
                                COALESCE( US_Return.broken, 0 )
                            )
                        ),
                        (   
                            COALESCE( Ending_Purchases.purchasedQty, 0 ) - 
                            COALESCE( Ending_Sales.soldQty, 0 ) + 
                            COALESCE( Ending_PReturn.returnQty, 0 ) - 
                            COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + 
                            COALESCE( Ending_Transfers_IN.transferQty, 0 ) + 
                            COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - 
                            COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) -
                            COALESCE( Ending_US_Using.usQty, 0 ) +
                            COALESCE( Ending_US_Return.usQty, 0 ) +

                            COALESCE( PCosts.purchasedQty, 0 ) +
                            COALESCE( Transfers_IN.transferQty, 0 ) -
                            COALESCE( Transfers_OUT.transferQty, 0 ) +
                            COALESCE( Adjustments_ADD.adjustmentQty, 0 ) -
                            COALESCE( Adjustments_SUB.adjustmentQty, 0 ) -
                            COALESCE( PSales.soldQty, 0 ) +
                            COALESCE( PReturn.returnQty, 0 ) + 
                            Abs(COALESCE( PSReturn.soldQty_return, 0 )) - 
                            COALESCE( US_Using.usQty, 0 ) +
                            COALESCE( US_Return.usQty, 0 )
                        )
                    ) AS balance,
                    {$this->db->dbprefix('products')}.id AS id", false)
                ->from('products')
                ->join($pp, 'products.id = PCosts.product_id', 'left')
                ->join($ending_purchases, 'products.id = Ending_Purchases.product_id', 'left')
                ->join($sp, 'products.id = PSales.product_id', 'left')
                ->join($ending_sales, 'products.id = Ending_Sales.product_id', 'left')
                ->join($transfers_in, 'products.id = Transfers_IN.product_id', 'left')
                ->join($ending_transfers_in, 'products.id = Ending_Transfers_IN.product_id', 'left')
                ->join($transfers_out, 'products.id = Transfers_OUT.product_id', 'left')
                ->join($ending_transfers_out, 'products.id = Ending_Transfers_OUT.product_id', 'left')
                ->join($adjustments_add, 'products.id = Adjustments_ADD.product_id', 'left')
                ->join($ending_adjustments_add, 'products.id = Ending_Adjustments_ADD.product_id', 'left')
                ->join($adjustments_sub, 'products.id = Adjustments_SUB.product_id', 'left')
                ->join($ending_adjustments_sub, 'products.id = Ending_Adjustments_SUB.product_id', 'left')
                ->join($pr1, 'products.id = PSReturn.product_id', 'left')
                ->join($pr2, 'products.id = PReturn.product_id', 'left')
                ->join($ending_returns, 'products.id = Ending_PReturn.product_id', 'left')
                ->join($us_using, 'products.id = US_Using.product_id', 'left')
                ->join($ending_us_using, 'products.id = Ending_US_Using.product_id', 'left')
                ->join($us_return, 'products.id = US_Return.product_id', 'left')
                ->join($ending_us_return, 'products.id = Ending_US_Return.product_id', 'left')
                ->join($pv, 'products.id = pv.product_id', 'left')
                ->join($vrn, 'products.id = NVariant.product_id', 'left')
                ->join($vro, 'products.id = OVariant.product_id', 'left')
                ->join($vrb, 'products.id = BVariant.product_id', 'left')
                ->group_by('products.code');

            if($product || $cf1 || $cf2 || $cf3 || $cf4 || $cf5 || $cf6 || $category || $subcategory || $brand){
                if ($product) {
                    $this->datatables->where($this->db->dbprefix('products') . '.id', $product);
                }
                if ($cf1) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf1', $cf1);
                }
                if ($cf2) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf2', $cf2);
                }
                if ($cf3) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf3', $cf3);
                }
                if ($cf4) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf4', $cf4);
                }
                if ($cf5) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf5', $cf5);
                }
                if ($cf6) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf6', $cf6);
                }
                if ($category) {
                    $this->datatables->where($this->db->dbprefix('products') . '.category_id', $category);
                }
                if ($subcategory) {
                    $this->datatables->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
                }
                if ($brand) {
                    $this->datatables->where($this->db->dbprefix('products') . '.brand', $brand);
                }
            } else if (empty($dataTable_filter) && empty($dataTable_filter_col_1) && empty($dataTable_filter_col_2)){
                $this->datatables->where('PCosts.totalPurchase !=', 0);
                $this->datatables->or_where('PCosts.totalPurchase !=', null);
                $this->datatables->or_where('PSales.totalSale !=', 0);
                $this->datatables->or_where('PSales.totalSale !=', null);
                $this->datatables->or_where('PReturn.returnTotalSale !=', 0);
                $this->datatables->or_where('PReturn.returnTotalSale !=', null);
                $this->datatables->or_where('PSReturn.totalSale_return !=', 0);
                $this->datatables->or_where('PSReturn.totalSale_return !=', null);
                $this->datatables->or_where('Transfers_IN.totalTransfer !=', 0);
                $this->datatables->or_where('Transfers_IN.totalTransfer !=', null);
                $this->datatables->or_where('Transfers_OUT.totalTransfer !=', 0);
                $this->datatables->or_where('Transfers_OUT.totalTransfer !=', null);
                $this->datatables->or_where('Adjustments_ADD.adjustmentQty !=', 0);
                $this->datatables->or_where('Adjustments_ADD.adjustmentQty !=', null);
                $this->datatables->or_where('Adjustments_SUB.adjustmentQty !=', 0);
                $this->datatables->or_where('Adjustments_SUB.adjustmentQty !=', null);
                $this->datatables->or_where('US_Using.usQty !=', 0);
                $this->datatables->or_where('US_Using.usQty !=', null);
                $this->datatables->or_where('US_Return.usQty !=', 0);
                $this->datatables->or_where('US_Return.usQty !=', null);
                // $this->datatables->or_where('(COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) !=', 0);
            }

            echo $this->datatables->generate();
        }
    }

    public function payments_received($start_date = NULL, $end_date = NULL)
    {
        $this->bpas->checkPermissions('payments_received',NULL,'account_report');
        $this->data['error']        = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']        = $this->reports_model->getStaff();
        $this->data['billers']      = $this->site->getAllCompanies('biller');
        $this->data['pos_settings'] = POS ? $this->reports_model->getPOSSetting('biller') : false;
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $this->data['start'] = urldecode($start_date);
        $this->data['end']   = urldecode($end_date);
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('payments_received_report')]];
        $meta = ['page_title' => lang('payments_received_report'), 'bc' => $bc];
        $this->page_construct('reports/payments_received', $meta, $this->data);
    }

    public function getPaymentsReceivedReport($pdf = null, $xls = null, $preview = null, $transfer = null)
    {
        $this->bpas->checkPermissions('payments_received',NULL,'account_report');
        $user           = $this->input->get('user') ? $this->input->get('user') : null;
        $supplier       = $this->input->get('supplier') ? $this->input->get('supplier') : null;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $payment_ref    = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : null;
        $paid_by        = $this->input->get('paid_by') ? $this->input->get('paid_by') : null;
        $sale_ref       = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : null;
        $purchase_ref   = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : null;
        $card           = $this->input->get('card') ? $this->input->get('card') : null;
        $cheque         = $this->input->get('cheque') ? $this->input->get('cheque') : null;
        $transaction_id = $this->input->get('tid') ? $this->input->get('tid') : null;
        $type           = $this->input->get('type') ? $this->input->get('type') : null;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $start          = $this->input->get('start') ? $this->input->get('start') : null;
        $end            = $this->input->get('end') ? $this->input->get('end') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date.' 00:00:00');
            $end_date   = $this->bpas->fld($end_date.' 23:59:59');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($preview) {
            $this->db
                ->select("
                    DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('sales')}.customer as customer, 
                    paid_by, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0))), 0) AS total_pay, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.penalty_paid, 0)), 0) AS penalty, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0)), 0) AS discount, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.penalty_paid, 0))), 0) AS grand_total, 
                    {$this->db->dbprefix('payments')}.type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->where('payments.sale_id !=', null)
                ->group_by('payments.reference_no')
                ->order_by('payments.date', 'DESC');
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->where("{$this->db->dbprefix('payments')}.reference_no IN 
                        (   SELECT p.reference_no FROM {$this->db->dbprefix('sales')} s 
                            JOIN {$this->db->dbprefix('payments')} p ON p.sale_id = s.id 
                            WHERE s.reference_no LIKE '%{$sale_ref}%'
                        ) ");
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            } else if ($start) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start . '" and "' . $end . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                if($start_date) {
                    $this->data['start_date'] = $start_date;
                    $this->data['end_date'] = $end_date;    
                } else {
                    $this->data['start'] = $start;
                    $this->data['end']   = $end;
                }
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('payments_received_report')]];
                $meta = ['page_title' => lang('payments_received_report'), 'bc' => $bc];
                $this->page_construct('reports/payments_received_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $this->db->select("
                    DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('sales')}.customer as customer, 
                    paid_by, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0))), 0) AS total_pay, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.penalty_paid, 0)), 0) AS penalty, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0)), 0) AS discount, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.penalty_paid, 0))), 0) AS grand_total, 
                    {$this->db->dbprefix('payments')}.type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->where('payments.sale_id !=', null)
                ->group_by('payments.reference_no')
                ->order_by('payments.date', 'DESC');
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->where("{$this->db->dbprefix('payments')}.reference_no IN 
                        (   SELECT p.reference_no FROM {$this->db->dbprefix('sales')} s 
                            JOIN {$this->db->dbprefix('payments')} p ON p.sale_id = s.id 
                            WHERE s.reference_no LIKE '%{$sale_ref}%'
                        ) ");
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            } else if ($start) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start . '" and "' . $end . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_received_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Nº'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_pay'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('penalty'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('type'));
                $row = 2; $i = 1;
                $total_pay = 0; $penalty = 0; $discount = 0; $grand_total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $i++);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->total_pay));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->penalty));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->discount));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->type);
                    $total_pay   += $data_row->total_pay;
                    $penalty     += $data_row->penalty;
                    $discount    += $data_row->discount;
                    $grand_total += $data_row->grand_total;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('F' . $row . ':I' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total_pay);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $penalty);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $discount);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $grand_total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(5);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'payments_received_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            // COALESCE({$this->db->dbprefix('q')}.amount, 0) + COALESCE({$this->db->dbprefix('q')}.discount, 0) AS total_pay,
            // COALESCE({$this->db->dbprefix('q')}.discount, 0) AS discount,
            // COALESCE({$this->db->dbprefix('q')}.amount, 0) AS grand_total,
            $q = " ( SELECT pp.* FROM (SELECT p.id, p.reference_no, COALESCE(SUM(p.amount), 0) AS amount, COALESCE(SUM(p.discount), 0) AS discount FROM bpas_payments p WHERE p.sale_id IS NOT NULL GROUP BY p.reference_no) pp ) bpas_q ";
            $this->load->library('datatables');
            $this->datatables
                ->select("
                    '',    
                    DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('sales')}.customer as customer, 
                    {$this->db->dbprefix('payments')}.paid_by, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0))), 0) AS total_pay, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.penalty_paid, 0)), 0) AS penalty, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0)), 0) AS discount, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.penalty_paid, 0))), 0) AS grand_total, 
                    {$this->db->dbprefix('payments')}.type,
                    {$this->db->dbprefix('payments')}.reference_no as id")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                // ->join($q, 'payments.id=q.id', 'left')
                ->where('payments.sale_id !=', null)
                ->group_by('payments.reference_no')
                ->order_by('payments.date', 'DESC');
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($card) {
                $this->datatables->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->datatables->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->datatables->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($type) {
                $this->datatables->where('payments.type', $type);
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->datatables->where("
                    {$this->db->dbprefix('payments')}.reference_no IN 
                    ( SELECT p.reference_no FROM {$this->db->dbprefix('sales')} s 
                        JOIN {$this->db->dbprefix('payments')} p ON p.sale_id = s.id 
                        WHERE s.reference_no LIKE '%{$sale_ref}%'
                    ) 
                ");
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            } else if ($start) {
                $this->datatables->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start . '" and "' . $end . '"');
            }
            $this->datatables->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_detail') . "' href='" . admin_url('reports/payments_received_detail/?reference_no=$1') . "'><span class='label label-primary'>" . lang('view_detail') . '</span></a></div>', 'id');
            $this->datatables->unset_column('id');
            echo $this->datatables->generate();
        }
    }

    public function getPaymentsReceivedReport_12_04_2023($pdf = null, $xls = null, $preview = null, $transfer = null)
    {
        $this->bpas->checkPermissions('payments_received',NULL,'account_report');
        $user           = $this->input->get('user') ? $this->input->get('user') : null;
        $supplier       = $this->input->get('supplier') ? $this->input->get('supplier') : null;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $payment_ref    = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : null;
        $paid_by        = $this->input->get('paid_by') ? $this->input->get('paid_by') : null;
        $sale_ref       = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : null;
        $purchase_ref   = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : null;
        $card           = $this->input->get('card') ? $this->input->get('card') : null;
        $cheque         = $this->input->get('cheque') ? $this->input->get('cheque') : null;
        $transaction_id = $this->input->get('tid') ? $this->input->get('tid') : null;
        $type           = $this->input->get('type') ? $this->input->get('type') : null;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $start          = $this->input->get('start') ? $this->input->get('start') : null;
        $end            = $this->input->get('end') ? $this->input->get('end') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date.' 00:00:00');
            $end_date   = $this->bpas->fld($end_date.' 23:59:59');
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($preview) {
            $this->db
                ->select("
                    DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('sales')}.customer as customer, 
                    paid_by, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0))), 0) AS total_pay, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0)), 0) AS discount, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)), 0) AS grand_total, 
                    {$this->db->dbprefix('payments')}.type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->where('payments.sale_id !=', null)
                ->group_by('payments.reference_no')
                ->order_by('payments.date', 'DESC');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->where("{$this->db->dbprefix('payments')}.reference_no IN 
                        (   SELECT p.reference_no FROM {$this->db->dbprefix('sales')} s 
                            JOIN {$this->db->dbprefix('payments')} p ON p.sale_id = s.id 
                            WHERE s.reference_no LIKE '%{$sale_ref}%'
                        ) ");
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            } else if ($start) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start . '" and "' . $end . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                if($start_date) {
                    $this->data['start_date'] = $start_date;
                    $this->data['end_date'] = $end_date;    
                } else {
                    $this->data['start'] = $start;
                    $this->data['end']   = $end;
                }

                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('payments_received_report')]];
                $meta = ['page_title' => lang('payments_received_report'), 'bc' => $bc];
                $this->page_construct('reports/payments_received_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $this->db
                ->select("
                    DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('sales')}.customer as customer, 
                    paid_by, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0))), 0) AS total_pay, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0)), 0) AS discount, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)), 0) AS grand_total, 
                    {$this->db->dbprefix('payments')}.type")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                ->where('payments.sale_id !=', null)
                ->group_by('payments.reference_no')
                ->order_by('payments.date', 'DESC');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($sale_ref) {
                $this->db->where("{$this->db->dbprefix('payments')}.reference_no IN 
                        (   SELECT p.reference_no FROM {$this->db->dbprefix('sales')} s 
                            JOIN {$this->db->dbprefix('payments')} p ON p.sale_id = s.id 
                            WHERE s.reference_no LIKE '%{$sale_ref}%'
                        ) ");
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            } else if ($start) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start . '" and "' . $end . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_received_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Nº'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_pay'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('type'));

                $row = 2; $i = 1;
                $total_pay = 0; $discount = 0; $grand_total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $i++);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->total_pay));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->discount));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->type);

                    $total_pay   += $data_row->total_pay;
                    $discount    += $data_row->discount;
                    $grand_total += $data_row->grand_total;
                    $row++;
                }

                $this->excel->getActiveSheet()->getStyle('F' . $row . ':H' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total_pay);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $discount);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $grand_total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(5);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'payments_received_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            // COALESCE({$this->db->dbprefix('q')}.amount, 0) + COALESCE({$this->db->dbprefix('q')}.discount, 0) AS total_pay,
            // COALESCE({$this->db->dbprefix('q')}.discount, 0) AS discount,
            // COALESCE({$this->db->dbprefix('q')}.amount, 0) AS grand_total,
            $q = " ( SELECT pp.* FROM (SELECT p.id, p.reference_no, COALESCE(SUM(p.amount), 0) AS amount, COALESCE(SUM(p.discount), 0) AS discount FROM bpas_payments p WHERE p.sale_id IS NOT NULL GROUP BY p.reference_no) pp ) bpas_q ";
            $this->load->library('datatables');
            $this->datatables
                ->select("
                    '',    
                    DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('sales')}.customer as customer, 
                    {$this->db->dbprefix('payments')}.paid_by, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0))), 0) AS total_pay, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0)), 0) AS discount, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)), 0) AS grand_total, 
                    {$this->db->dbprefix('payments')}.type,
                    {$this->db->dbprefix('payments')}.reference_no as id")
                ->from('payments')
                ->join('sales', 'payments.sale_id=sales.id', 'left')
                // ->join($q, 'payments.id=q.id', 'left')
                ->where('payments.sale_id !=', null)
                ->group_by('payments.reference_no')
                ->order_by('payments.date', 'DESC');
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($card) {
                $this->datatables->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->datatables->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->datatables->where('payments.transaction_id', $transaction_id);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($type) {
                $this->datatables->where('payments.type', $type);
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($sale_ref) {
                $this->datatables->where("
                    {$this->db->dbprefix('payments')}.reference_no IN 
                    ( SELECT p.reference_no FROM {$this->db->dbprefix('sales')} s 
                        JOIN {$this->db->dbprefix('payments')} p ON p.sale_id = s.id 
                        WHERE s.reference_no LIKE '%{$sale_ref}%'
                    ) 
                ");
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            } else if ($start) {
                $this->datatables->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start . '" and "' . $end . '"');
            }
            $this->datatables->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_detail') . "' href='" . admin_url('reports/payments_received_detail/?reference_no=$1') . "'><span class='label label-primary'>" . lang('view_detail') . '</span></a></div>', 'id');
            $this->datatables->unset_column('id');
            echo $this->datatables->generate();
        }
    }

    public function payments_received_detail($reference_no = null) 
    {
        $this->bpas->checkPermissions('payments_received',NULL,'account_report');
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        }
        $this->data['error']    = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $payments               = $reference_no ? $this->reports_model->getPRByPayRef($reference_no) : null;
        $invs                   = $reference_no ? $this->reports_model->getSalesByPayRef($reference_no) : null;
        $this->data['invs']     = $invs;
        $this->data['payments'] = $payments;
        $this->data['biller']   = $payments ? $this->site->getCompanyByID($invs[0]->biller_id) : null;
        $this->data['customer'] = $payments ? $this->site->getCompanyByID($invs[0]->customer_id) : null;
        $this->data['currency'] = $this->site->getCurrencyByCode($this->Settings->default_currency);
        $this->load->view($this->theme . 'reports/payments_received_detail', $this->data);
    }

    public function payments_voucher($start_date = NULL, $end_date = NULL)
    {
        $this->bpas->checkPermissions('payments_voucher',NULL,'account_report');
        $this->data['error']        = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']        = $this->reports_model->getStaff();
        $this->data['billers']      = $this->site->getAllCompanies('biller');
        $this->data['pos_settings'] = POS ? $this->reports_model->getPOSSetting('biller') : false;
        if (!$start_date) {
            $start = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end = $this->db->escape(date('Y-m-t 23:59'));
            $end_date = date('Y-m-t 23:59');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $this->data['start'] = urldecode($start_date);
        $this->data['end']   = urldecode($end_date);
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('payments_voucher_report')]];
        $meta = ['page_title' => lang('payments_voucher_report'), 'bc' => $bc];
        $this->page_construct('reports/payments_voucher', $meta, $this->data);
    }

    public function getPaymentsVoucherReport($pdf = null, $xls = null, $preview = null, $transfer = null)
    {
        $this->bpas->checkPermissions('payments_voucher',NULL,'account_report');

        $user           = $this->input->get('user') ? $this->input->get('user') : null;
        $supplier       = $this->input->get('supplier') ? $this->input->get('supplier') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $payment_ref    = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : null;
        $paid_by        = $this->input->get('paid_by') ? $this->input->get('paid_by') : null;
        $purchase_ref   = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : null;
        $card           = $this->input->get('card') ? $this->input->get('card') : null;
        $cheque         = $this->input->get('cheque') ? $this->input->get('cheque') : null;
        $transaction_id = $this->input->get('tid') ? $this->input->get('tid') : null;
        $type           = $this->input->get('type') ? $this->input->get('type') : null;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;

        $start          = $this->input->get('start') ? $this->input->get('start') : null;
        $end            = $this->input->get('end') ? $this->input->get('end') : null;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date.' 00:00:00');
            $end_date   = $this->bpas->fld($end_date.' 23:59:59');
        }

        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($preview) {
            $this->db
                ->select("
                    DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('purchases')}.supplier as supplier, 
                    paid_by, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0))), 0) AS total_pay, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0)), 0) AS discount, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)), 0) AS grand_total, 
                    {$this->db->dbprefix('payments')}.type")
                ->from('payments')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->where('payments.purchase_id !=', null)
                ->group_by('payments.reference_no')
                ->order_by('payments.date', 'DESC');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('purchases.biller_id', $biller);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($purchase_ref) {
                $this->db->where("{$this->db->dbprefix('payments')}.reference_no IN 
                        (   SELECT p.reference_no FROM {$this->db->dbprefix('purchases')} pp 
                            JOIN {$this->db->dbprefix('payments')} p ON p.sale_id = pp.id 
                            WHERE pp.reference_no LIKE '%{$purchase_ref}%'
                        ) ");
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            } else if ($start) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start . '" and "' . $end . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                if($start_date) {
                    $this->data['start_date'] = $start_date;
                    $this->data['end_date'] = $end_date;    
                } else {
                    $this->data['start'] = $start;
                    $this->data['end']   = $end;
                }
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('payments_voucher_report')]];
                $meta = ['page_title' => lang('payments_voucher_report'), 'bc' => $bc];
                $this->page_construct('reports/payments_voucher_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $this->db
                ->select("
                    DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('purchases')}.supplier as supplier, 
                    paid_by, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0))), 0) AS total_pay, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0)), 0) AS discount, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)), 0) AS grand_total, 
                    {$this->db->dbprefix('payments')}.type")
                ->from('payments')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                ->where('payments.purchase_id !=', null)
                ->group_by('payments.reference_no')
                ->order_by('payments.date', 'DESC');

            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($card) {
                $this->db->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->db->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->db->where('payments.transaction_id', $transaction_id);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->db->where('purchases.biller_id', $biller);
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                $this->db->where('payments.type', $type);
            }
            if ($purchase_ref) {
                $this->db->where("{$this->db->dbprefix('payments')}.reference_no IN 
                        (   SELECT p.reference_no FROM {$this->db->dbprefix('purchases')} pp 
                            JOIN {$this->db->dbprefix('payments')} p ON p.sale_id = pp.id 
                            WHERE pp.reference_no LIKE '%{$purchase_ref}%'
                        ) ");
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            } else if ($start) {
                $this->db->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start . '" and "' . $end . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('payments_voucher_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Nº'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('total_pay'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('type'));

                $row = 2; $i = 1;
                $total_pay = 0; $discount = 0; $grand_total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $i++);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->total_pay));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->discount));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->type);

                    $total_pay   += $data_row->total_pay;
                    $discount    += $data_row->discount;
                    $grand_total += $data_row->grand_total;
                    $row++;
                }

                $this->excel->getActiveSheet()->getStyle('F' . $row . ':H' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total_pay);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $discount);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $grand_total);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(5);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                $filename = 'payments_voucher_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            // COALESCE({$this->db->dbprefix('q')}.amount, 0) + COALESCE({$this->db->dbprefix('q')}.discount, 0) AS total_pay,
            // COALESCE({$this->db->dbprefix('q')}.discount, 0) AS discount,
            // COALESCE({$this->db->dbprefix('q')}.amount, 0) AS grand_total,

            $q = " ( SELECT pp.* FROM (SELECT p.id, p.reference_no, COALESCE(SUM(p.amount), 0) AS amount, COALESCE(SUM(p.discount), 0) AS discount FROM bpas_payments p WHERE p.purchase_id IS NOT NULL GROUP BY p.reference_no) pp ) bpas_q ";
            $this->load->library('datatables');
            $this->datatables
                ->select("
                    '',    
                    DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('payments')}.reference_no as payment_ref, 
                    {$this->db->dbprefix('purchases')}.supplier as supplier, 
                    {$this->db->dbprefix('payments')}.paid_by, 
                    COALESCE((SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)) + SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0))), 0) AS total_pay, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.discount, 0)), 0) AS discount, 
                    COALESCE(SUM(COALESCE({$this->db->dbprefix('payments')}.amount, 0)), 0) AS grand_total, 
                    {$this->db->dbprefix('payments')}.type,
                    {$this->db->dbprefix('payments')}.reference_no as id")
                ->from('payments')
                ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
                // ->join($q, 'payments.id=q.id', 'left')
                ->where('payments.purchase_id !=', null)
                ->group_by('payments.reference_no')
                ->order_by('payments.date', 'DESC');

            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($card) {
                $this->datatables->like('payments.cc_no', $card, 'both');
            }
            if ($cheque) {
                $this->datatables->where('payments.cheque_no', $cheque);
            }
            if ($transaction_id) {
                $this->datatables->where('payments.transaction_id', $transaction_id);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($biller) {
                $this->datatables->where('purchases.biller_id', $biller);
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($type) {
                $this->datatables->where('payments.type', $type);
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($purchase_ref) {
                $this->datatables->where("{$this->db->dbprefix('payments')}.reference_no IN 
                        (   SELECT p.reference_no FROM {$this->db->dbprefix('purchases')} pp 
                            JOIN {$this->db->dbprefix('payments')} p ON p.sale_id = pp.id 
                            WHERE pp.reference_no LIKE '%{$purchase_ref}%'
                        ) ");
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            } else if ($start) {
                $this->datatables->where($this->db->dbprefix('payments') . '.date BETWEEN "' . $start . '" and "' . $end . '"');
            }

            $this->datatables->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_detail') . "' href='" . admin_url('reports/payments_voucher_detail/?reference_no=$1') . "'><span class='label label-primary'>" . lang('view_detail') . '</span></a></div>', 'id');
            $this->datatables->unset_column('id');
            echo $this->datatables->generate();
        }
    }

    public function payments_voucher_detail($reference_no = null) 
    {
        $this->bpas->checkPermissions('payments_voucher',NULL,'account_report');
        if ($this->input->get('reference_no')) {
            $reference_no = $this->input->get('reference_no');
        }
        $this->data['error']    = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $payments               = $reference_no ? $this->reports_model->getPVByPayRef($reference_no) : null;
        $invs                   = $reference_no ? $this->reports_model->getPurchasesByPayRef($reference_no) : null;
        $this->data['invs']     = $invs;
        $this->data['payments'] = $payments;
        $this->data['warehouse']= $payments ? $this->site->getWarehouseByID($invs[0]->warehouse_id) : null;
        $this->data['supplier'] = $payments ? $this->site->getCompanyByID($invs[0]->supplier_id) : null;
        $this->data['currency'] = $this->site->getCurrencyByCode($this->Settings->default_currency);

        $this->load->view($this->theme . 'reports/payments_voucher_detail', $this->data);
    }

    public function stock_received()
    {
        $this->bpas->checkPermissions('stock_received');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['projects']         = $this->site->getAllProject();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('stock_received_report')]];
        $meta                     = ['page_title' => lang('stock_received_report'), 'bc' => $bc];
        $this->page_construct('reports/stock_received', $meta, $this->data);
    }

    public function getStockReceivedReport($pdf = null, $xls = null, $preview=null, $excel_deatail = null)
    {
        $this->bpas->checkPermissions('stock_received');
        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $supplier     = $this->input->get('supplier') ? $this->input->get('supplier') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $purchase_ref = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $project     = $this->input->get('project') ? $this->input->get('project') : null;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {
            $pi = "( SELECT 
                        stock_received_id, {$this->db->dbprefix('stock_received_items')}.product_id, 
                        (GROUP_CONCAT(CONCAT(COALESCE({$this->db->dbprefix('stock_received_items')}.product_name, ' '), ' (', {$this->db->dbprefix('stock_received_items')}.quantity, ')') SEPARATOR '\n')) as item_nane 
                    FROM {$this->db->dbprefix('stock_received_items')} ";
            if ($product) {
                $pi .= " WHERE {$this->db->dbprefix('stock_received_items')}.product_id = {$product} ";
            }
            $pi .= " GROUP BY {$this->db->dbprefix('stock_received_items')}.stock_received_id ) FPI";
            $this->db->select("
                    DATE_FORMAT({$this->db->dbprefix('stock_received')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('projects')}.project_name,
                    {$this->db->dbprefix('purchases')}.reference_no as pref, 
                    {$this->db->dbprefix('stock_received')}.re_reference_no as reference_no, 
                    {$this->db->dbprefix('warehouses')}.name as wname, 
                    {$this->db->dbprefix('purchases')}.supplier, 
                    (FPI.item_nane) as iname, 
                    {$this->db->dbprefix('stock_received')}.note");

            $this->db->from('stock_received')
                ->where('stock_received.reward_exchange_id', NULL)
                ->join('purchases', 'stock_received.purchase_id=purchases.id', 'left')
                ->join($pi, 'FPI.stock_received_id=stock_received.id', 'left')
                ->join('projects', 'projects.project_id=purchases.project_id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left');

            if ($user) {
                $this->db->where('stock_received.created_by', $user);
            }
            if ($product) {
                $this->db->where('FPI.product_id', $product, false);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($reference_no) {
                $this->db->like('stock_received.re_reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('stock_received') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('purchases.project_id', $project);
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('stock_received_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchase_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('product_qty'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('note'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->pref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->iname);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, strip_tags(html_entity_decode($data_row->note)));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'stock_received_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($excel_deatail) {
            $pi = "( SELECT 
                        stock_received_id, {$this->db->dbprefix('stock_received_items')}.product_id, 
                        (GROUP_CONCAT(CONCAT(COALESCE({$this->db->dbprefix('stock_received_items')}.product_name, ' '), ' (', {$this->db->dbprefix('stock_received_items')}.quantity, ')') SEPARATOR '\n')) as item_nane 
                    FROM {$this->db->dbprefix('stock_received_items')} ";
            if ($product) {
                $pi .= " WHERE {$this->db->dbprefix('stock_received_items')}.product_id = {$product} ";
            }
            $pi .= " GROUP BY {$this->db->dbprefix('stock_received_items')}.stock_received_id ) FPI";
            $this->db->select("
                    {$this->db->dbprefix('stock_received')}.id as id,
                    DATE_FORMAT({$this->db->dbprefix('stock_received')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('projects')}.project_name,
                    {$this->db->dbprefix('purchases')}.reference_no as pref, 
                    {$this->db->dbprefix('stock_received')}.re_reference_no as reference_no, 
                    {$this->db->dbprefix('warehouses')}.name as wname, 
                    {$this->db->dbprefix('purchases')}.supplier, 
                    (FPI.item_nane) as iname, 
                    {$this->db->dbprefix('stock_received')}.note");

            $this->db->from('stock_received')
                ->where('stock_received.reward_exchange_id', NULL)
                ->join('purchases', 'stock_received.purchase_id=purchases.id', 'left')
                ->join($pi, 'FPI.stock_received_id=stock_received.id', 'left')
                ->join('projects', 'projects.project_id=purchases.project_id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left');

            if ($user) {
                $this->db->where('stock_received.created_by', $user);
            }
            if ($product) {
                $this->db->where('FPI.product_id', $product, false);
            }
            if ($supplier) {
                $this->db->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->db->where('purchases.warehouse_id', $warehouse);
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($reference_no) {
                $this->db->like('stock_received.re_reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('stock_received') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('purchases.project_id', $project);
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('stock_received_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchase_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('note'));
                $row = 2;
                foreach ($data as $data_row) {
                    $items = $this->site->getStockInItems($data_row->id);
                    $count_row = ($row + count($items) -1);
                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':A' . $count_row)->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->mergeCells('B' . $row . ':B' . $count_row)->SetCellValue('B' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->mergeCells('C' . $row . ':C' . $count_row)->SetCellValue('C' . $row, $data_row->pref);
                    $this->excel->getActiveSheet()->mergeCells('D' . $row . ':D' . $count_row)->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->mergeCells('E' . $row . ':E' . $count_row)->SetCellValue('E' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->mergeCells('F' . $row . ':F' . $count_row)->SetCellValue('F' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->mergeCells('J' . $row . ':J' . $count_row)->SetCellValue('J' . $row, strip_tags(html_entity_decode($data_row->note)));
                    foreach ($items as $item) {
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $item->product_name);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $item->product_unit_code);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $item->quantity);
                        $row++;
                    }
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'stock_received_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $pi = "( SELECT 
                        stock_received_id, {$this->db->dbprefix('stock_received_items')}.product_id, 
                        (GROUP_CONCAT(CONCAT(COALESCE({$this->db->dbprefix('stock_received_items')}.product_name, ' '), '__', {$this->db->dbprefix('stock_received_items')}.quantity) SEPARATOR '___')) as item_nane 
                    FROM {$this->db->dbprefix('stock_received_items')} ";
            if ($product) {
                $pi .= " WHERE {$this->db->dbprefix('stock_received_items')}.product_id = {$product} ";
            }
            $pi .= " GROUP BY {$this->db->dbprefix('stock_received_items')}.stock_received_id ) FPI";
            $this->load->library('datatables');
            $this->datatables
                ->select("
                    DATE_FORMAT({$this->db->dbprefix('stock_received')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('projects')}.project_name,
                    {$this->db->dbprefix('purchases')}.reference_no as pref, 
                    {$this->db->dbprefix('stock_received')}.re_reference_no as reference_no, 
                    {$this->db->dbprefix('warehouses')}.name as wname, 
                    {$this->db->dbprefix('purchases')}.supplier, 
                    (FPI.item_nane) as iname, 
                    {$this->db->dbprefix('stock_received')}.note, 
                    {$this->db->dbprefix('stock_received')}.id as id", false);
            $this->datatables->from('stock_received')
                ->where('stock_received.reward_exchange_id', NULL)
                ->join('purchases', 'stock_received.purchase_id=purchases.id', 'left')
                ->join($pi, 'FPI.stock_received_id=stock_received.id', 'left')
                ->join('projects', 'projects.project_id=purchases.project_id', 'left')
                ->join('warehouses', 'warehouses.id=purchases.warehouse_id', 'left');

            if ($user) {
                $this->datatables->where('stock_received.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FPI.product_id', $product, false);
            }
            if ($supplier) {
                $this->datatables->where('purchases.supplier_id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('purchases.warehouse_id', $warehouse);
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($reference_no) {
                $this->datatables->like('stock_received.re_reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('stock_received') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->datatables->where('purchases.project_id', $project);
            }
            echo $this->datatables->generate();
        }
    }

    public function getCategoriesStock($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);
        $warehouse  = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $category   = $this->input->get('category') ? $this->input->get('category') : null;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date   = $this->input->get('end_date') ? $this->input->get('end_date') : null;
            $this->load->library('datatables');
            $this->datatables
                ->select(
                    $this->db->dbprefix('products').'.id as cid,
                    '.$this->db->dbprefix('products').'.id as code,
                    ' . $this->db->dbprefix('products') . '.name,
                   sum('.$this->db->dbprefix('warehouses_products').'.quantity),
                   ' . $this->db->dbprefix('products') . '.name2,
                   ' . $this->db->dbprefix('products') . '.name3,
                   ' . $this->db->dbprefix('products') . '.name4,

                ')
                ->from ('warehouses_products')
                ->join('products', 'products.id = warehouses_products.product_id', 'left')
                ->group_by('warehouses_products.product_id');
            /*$this->datatables
                ->select($this->db->dbprefix('categories') . '.id as cid, 
                    ' . $this->db->dbprefix('categories') . '.code, 
                    ' . $this->db->dbprefix('categories') . '.name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit', false)
                ->from('categories')
                ->join($sp, 'categories.id = PSales.category', 'left')
                ->join($pp, 'categories.id = PCosts.category', 'left');*/

            if ($category) {
                $this->datatables->where('categories.id', $category);
            }
           // $this->datatables->group_by('categories.id, categories.code, categories.name, PSales.SoldQty, PSales.totalSale, PCosts.purchasedQty, PCosts.totalPurchase');
            $this->datatables->unset_column('cid');
            echo $this->datatables->generate();
        
    }

    //---------------loan------------
    public function loans()
    {
        $this->bpas->checkPermissions('loans');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['products'] = $this->reports_model->getLoanProducts();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loans_report')));
        $meta = array('page_title' => lang('loans_report'), 'bc' => $bc);
        $this->page_construct('reports/loans', $meta, $this->data);
    }
    
    public function getLoansReport($pdf = NULL, $xls = NULL)
    {
       //$this->data['currencies']   = $this->site->getAllCurrencies();

        $this->bpas->checkPermissions('loans', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $application_no = $this->input->get('application_no') ? $this->input->get('application_no') : NULL;
        $borrower = $this->input->get('borrower') ? $this->input->get('borrower') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $currency = $this->input->get('currency') ? $this->input->get('currency') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
            
            $this->db
                ->select("
                loans.id as id,
                loans.application_id as application_id,
                loans.reference_no,
                loan_applications.reference_no as application_no,
                loans.biller,
                CONCAT(bpas_loan_tellers.first_name, ' ',bpas_loan_tellers.last_name) as loan_tenor,
                loan_borrowers.code,
                loans.borrower,
                loan_borrower_types.name as loan_purpose,
                CONCAT(UCASE(LEFT(bpas_loan_borrowers.gender, 1)),SUBSTRING(bpas_loan_borrowers.gender, 2)) as gender,
                CONCAT(UCASE(LEFT(bpas_loan_borrowers.phone, 1)),SUBSTRING(bpas_loan_borrowers.phone, 2)) as phone,
                loan_products.name as loan_product,
                loans.disbursed_at,
                loans.interest_rate as interest_rate,
                DATE_ADD(payment_date, INTERVAL (bpas_loans.term*bpas_loans.frequency) DAY) as maturity_date,
                CONCAT(bpas_loan_officers.last_name,' ',bpas_loan_officers.first_name) as loan_officer,
                loans.principal_amount,
                IFNULL(bpas_loans.principal_amount,0) - ROUND(IFNULL(bpas_payments.principal_paid,0)) as outstanding_amount,
                loans.currency,
                loans.status")
            ->from("loans")
            ->join("loan_applications","loan_applications.id=loans.application_id","left")
            ->join("loan_borrower_types","loan_borrower_types.id=loans.borrower_type_id","left")
            ->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
            ->join("loan_products","loan_products.id=loans.loan_product_id","left")
            ->join("users as bpas_loan_tellers","bpas_loan_tellers.id=loans.teller_id","left")
            ->join("users as bpas_loan_officers","bpas_loan_officers.id=loans.loan_officer_id","left")
            ->join('(SELECT 
                            loan_id,
                            IFNULL(SUM(amount),0) AS principal_paid,
                            IFNULL(SUM(interest_paid),0) AS interest_paid
                        FROM
                            '.$this->db->dbprefix('payments').'
                        WHERE type = "received"
                        GROUP BY loan_id) as bpas_payments', 'bpas_payments.loan_id=loans.id', 'left');
                $this->db->where("loans.currency !=", '');

            if($reference_no){
                $this->db->like("loans.reference_no", $reference_no);
            }
            if($application_no){
                $this->db->like("loan_applications.reference_no", $application_no);
            }
            if($biller){
                $this->db->where("loans.biller_id", $biller);
            }
            if($borrower){
                $this->db->where("loans.borrower_id", $borrower);
            }
            if($currency){
                $this->db->where("loans.currency", $currency);
            }
            if($product){
                $this->db->where("loans.loan_product_id", $product);
            }
            if ($user) {
                $this->db->where('loans.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('loans.date >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('loans.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                    ));
                $row1 = 4;
                $this->excel->getActiveSheet()->getStyle('A1:S1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A2:S2')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A4:S4')->applyFromArray($styleArray);
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('loans_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Company Name'));
                $this->excel->getActiveSheet()->SetCellValue('A2', lang('Active Loan Listing Report'));
                $this->excel->getActiveSheet()->SetCellValue('A3', lang('Report period'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang($this->Settings->site_name));
                $this->excel->getActiveSheet()->SetCellValue('B3', lang(($start_date?$start_date:'') . ' - ' . ($end_date?$end_date:'')));
                $this->excel->getActiveSheet()->SetCellValue('A' . $row1, lang('loan_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('B' . $row1, lang('application_no'));
                $this->excel->getActiveSheet()->SetCellValue('C' . $row1, lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D' . $row1, lang('borrower_code'));
                $this->excel->getActiveSheet()->SetCellValue('E' . $row1, lang('borrower'));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row1, lang('gender'));
                $this->excel->getActiveSheet()->SetCellValue('G' . $row1, lang('contact'));
                $this->excel->getActiveSheet()->SetCellValue('H' . $row1, lang('loan_product'));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row1, lang('loan_purpose'));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row1, lang('disbursed_date'));
                $this->excel->getActiveSheet()->SetCellValue('K' . $row1, lang('maturity_date'));
                $this->excel->getActiveSheet()->SetCellValue('L' . $row1, lang('collateral'));
                $this->excel->getActiveSheet()->SetCellValue('M' . $row1, lang('guarantor'));
                $this->excel->getActiveSheet()->SetCellValue('N' . $row1, lang('loan_tenor'));
                $this->excel->getActiveSheet()->SetCellValue('O' . $row1, lang('interest_rate'));
                $this->excel->getActiveSheet()->SetCellValue('P' . $row1, lang('loan_officer'));
                $this->excel->getActiveSheet()->SetCellValue('Q' . $row1, lang('principal_amount'));
                $this->excel->getActiveSheet()->SetCellValue('R' . $row1, lang('outstanding_amount'));
                $this->excel->getActiveSheet()->SetCellValue('S' . $row1, lang('currency'));
                $this->excel->getActiveSheet()->SetCellValue('T' . $row1, lang('status'));
                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    )
                );
                $this->excel->getActiveSheet()->getStyle("A1:M1")->applyFromArray($style)->getFont()->setBold(true);
                
                $n = 0;
                $m = 0;
                
                // var_dump($data);
                $currencies = $this->site->getAllCurrencies();
                foreach ($currencies as $currency) {
                    // var_dump($n);
                    $principal_amount = 0;
                    $outstanding_amount = 0;
                    $row = 5 + $n + $m;
                    $m++;
                    foreach ($data as $data_row){
                        if($currency->code == $data_row->currency){
                            $coll = "";
                            $guar = "";
                            $collaterals = $this->loans_model->getCollaterals($data_row->application_id);
                            $guarantors = $this->loans_model->getGuarantors($data_row->application_id);
                            if($collaterals){
                                $x = sizeof($collaterals);
                                $j = 1;
                                foreach ($collaterals as $collateral) {
                                    $coll .= $collateral->name.' - '.$collateral->model;
                                    if($j != $x){
                                        $coll .= ', ';
                                    }
                                    $j++;
                                }
                            }
                            if($guarantors){
                                $l = sizeof($guarantors);
                                $k = 1;
                                foreach ($guarantors as $guarantor) {
                                    $guar .= $guarantor->unique_no;
                                    if($k != $l){
                                        $guar .= ', ';
                                    }
                                    $k++;
                                }
                                
                            }
                            // $this->excel->getActiveSheet()->getStyle("A" . $row . ":T" . $row)->getBorders()
                   //  ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->reference_no);
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->application_no);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->code);
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->borrower);
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->gender);
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->loan_product);
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->loan_purpose);
                            $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->hrsd($data_row->disbursed_at));
                            $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->hrsd($data_row->maturity_date));
                            $this->excel->getActiveSheet()->SetCellValue('L' . $row, $coll);
                            $this->excel->getActiveSheet()->SetCellValue('M' . $row, $guar);
                            $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->loan_tenor);
                            $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->interest_rate);
                            $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->loan_officer);
                            $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $data_row->principal_amount);
                            $this->excel->getActiveSheet()->SetCellValue('R' . $row, $data_row->outstanding_amount);
                            $this->excel->getActiveSheet()->SetCellValue('S' . $row, lang($data_row->currency));
                            $this->excel->getActiveSheet()->SetCellValue('T' . $row, lang($data_row->status));
                            $principal_amount += $this->bpas->formatDecimal($data_row->principal_amount);
                            $outstanding_amount += $this->bpas->formatDecimal($data_row->outstanding_amount);
                            $row++;
                            $n++;
                            // $this->excel->getActiveSheet()->getStyle("A" . $row . ":T" . $row)->getBorders()
                   //  ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                        }

                        $styleArray = array(
                        'font'  => array(
                            'bold'  => true,
                        ));
                        $this->excel->getActiveSheet()->getStyle('P'.$row.':R'.$row.'')->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->SetCellValue('P' . $row, lang("subtotal"));
                        $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $principal_amount);
                        $this->excel->getActiveSheet()->SetCellValue('R' . $row, $outstanding_amount);
                    }
                    
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $filename = 'loans_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
            
        } else {
            $this->load->library('datatables');
            
            $this->datatables
                ->select("
                loans.id as id,
                loans.reference_no,
                loan_applications.reference_no as application_no,
                loans.biller,
                loan_borrowers.code,
                loans.borrower,
                CONCAT(UCASE(LEFT(bpas_loan_borrowers.gender, 1)),SUBSTRING(bpas_loan_borrowers.gender, 2)) as gender,
                loan_products.name as loan_product,
                loans.disbursed_at,
                DATE_ADD(payment_date, INTERVAL (bpas_loans.term*bpas_loans.frequency) DAY) as maturity_date,
                CONCAT(bpas_loan_officers.last_name,' ',bpas_loan_officers.first_name) as loan_officer,
                loans.principal_amount,
                IFNULL(bpas_loans.principal_amount,0) - ROUND(IFNULL(bpas_payments.principal_paid,0)) as outstanding_amount,
                loans.currency,
                loans.status")
            ->from("loans")
            ->join("loan_applications","loan_applications.id=loans.application_id","left")
            ->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
            ->join("loan_products","loan_products.id=loans.loan_product_id","left")
            ->join("users as bpas_loan_officers","bpas_loan_officers.id=loans.loan_officer_id","left")
            ->join('(SELECT 
                            loan_id,
                            IFNULL(SUM(amount),0) AS principal_paid,
                            IFNULL(SUM(interest_paid),0) AS interest_paid
                        FROM
                            '.$this->db->dbprefix('payments').'
                        WHERE type = "received"
                        GROUP BY loan_id) as bpas_payments', 'bpas_payments.loan_id=loans.id', 'left');
                        
            if($reference_no){
                $this->datatables->like("loans.reference_no", $reference_no);
            }
            if($application_no){
                $this->datatables->like("loan_applications.reference_no", $application_no);
            }
            if($biller){
                $this->datatables->where("loans.biller_id", $biller);
            }  

            if($borrower){
              $this->datatables->where("loans.borrower_id", $borrower);
            }
            if($currency){
                $this->datatables->where("loans.currency", $currency);
            }
            if($product){
                $this->datatables->where("loans.loan_product_id", $product);
            }
            if ($user) {
                $this->datatables->where('loans.created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where('loans.date >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('loans.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
                 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
    
    public function loan_disbursement()
    {
        $this->bpas->checkPermissions('loan_disbursement');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['currencies'] = $this->site->getAllCurrencies();
        $this->data['products'] = $this->reports_model->getLoanProducts();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loan_disbursement_report')));
        $meta = array('page_title' => lang('loan_disbursement_report'), 'bc' => $bc);
        $this->page_construct('reports/loan_disbursement', $meta, $this->data);
    }
    
  public function getLoanDisbursementReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('loan_disbursement', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $loan_reference_no = $this->input->get('loan_reference_no') ? $this->input->get('loan_reference_no') : NULL;
        $borrower = $this->input->get('borrower') ? $this->input->get('borrower') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $currency = $this->input->get('currency') ? $this->input->get('currency') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {

            $this->db
                ->select("
                loans.id as id,
                loans.application_id,
                payments.date,
                payments.reference_no,
                loans.reference_no as loan_reference_no,
                loan_borrowers.code,
                loans.borrower,
                loans.currency,
                loan_borrower_types.name as loan_purpose,
                loan_products.name as loan_product,
                loans.principal_amount,
                CONCAT(bpas_loans.interest_rate,'%') as interest_rate,
                loans.frequency,
                loans.term,
                interest_method.name as name_method,
                payments.amount as disbursement,
                loan_borrowers.gender as gender,
                loan_borrowers.phone as phone,
                loan_borrowers.street_no as street_no,
                payments.type")
            ->from("payments")
            ->join("loans","payments.loan_id=loans.id","left")
            ->join("interest_method","interest_method.id=loans.interest_method","left")
            ->join("loan_borrower_types","loan_borrower_types.id=loans.borrower_type_id","left")
            ->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
            ->join("loan_products","loan_products.id=loans.loan_product_id","left")
            ->where("payments.type", "sent");
            
            if($reference_no){
                $this->db->like("payments.reference_no", $reference_no);
            }
            if($loan_reference_no){
                $this->db->like("loans.reference_no", $loan_reference_no);
            }
            if($biller){
                $this->db->where("loans.biller_id", $biller);
            }
            if($borrower){
                $this->db->where("loans.borrower_id", $borrower);
            }
            if($product){
                $this->db->where("loans.loan_product_id", $product);
            }
            if($currency){
                $this->db->where("loans.currency", $currency);
            }
            if ($user) {
                $this->db->where('loans.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'size'  => 10,
                    ));
                $row1 = 4;
                $this->excel->getActiveSheet()->getStyle('A1:T1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A2:T2')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A4:T4')->applyFromArray($styleArray);
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Company Name'));
                $this->excel->getActiveSheet()->SetCellValue('A2', lang('Loan Disbursement Report'));
                $this->excel->getActiveSheet()->SetCellValue('A3', lang('Report period'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang($this->Settings->site_name));
                $this->excel->getActiveSheet()->SetCellValue('B3', lang(($start_date?$start_date:'') . ' - ' . ($end_date?$end_date:'')));
                $this->excel->getActiveSheet()->setTitle(lang('loan_disbursement_report'));
                $this->excel->getActiveSheet()->SetCellValue('A' . $row1, lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B' . $row1, lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C' . $row1, lang('loan_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D' . $row1, lang('borrower_code'));
                $this->excel->getActiveSheet()->SetCellValue('E' . $row1, lang('borrower'));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row1, lang('gender'));
                $this->excel->getActiveSheet()->SetCellValue('G' . $row1, lang('contact'));
                $this->excel->getActiveSheet()->SetCellValue('H' . $row1, lang('borrower_address'));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row1, lang('collateral'));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row1, lang('guarantor'));
                $this->excel->getActiveSheet()->SetCellValue('K' . $row1, lang('loan_product'));
                $this->excel->getActiveSheet()->SetCellValue('L' . $row1, lang('loan_purpose'));
                $this->excel->getActiveSheet()->SetCellValue('M' . $row1, lang('principal_amount'));
                $this->excel->getActiveSheet()->SetCellValue('N' . $row1, lang('interest_rate'));
                $this->excel->getActiveSheet()->SetCellValue('O' . $row1, lang('frequency'));
                $this->excel->getActiveSheet()->SetCellValue('P' . $row1, lang('term'));
                $this->excel->getActiveSheet()->SetCellValue('Q' . $row1, lang('collection_method'));
                $this->excel->getActiveSheet()->SetCellValue('R' . $row1, lang('disbursement'));
                $this->excel->getActiveSheet()->SetCellValue('S' . $row1, lang('currency'));
                $this->excel->getActiveSheet()->SetCellValue('T' . $row1, lang('type'));
                $style = array(                               
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    )
                );
                $this->excel->getActiveSheet()->getStyle("A1:T1")->applyFromArray($style)->getFont()->setBold(true);
    //             $row = 5;
                // $principal_amount = 0;
    //             $disbursement_amount = 0;
    //             foreach ($data as $data_row){
                $n = 0;
                $m = 0;
                $currencies = $this->site->getAllCurrencies();
                foreach ($currencies as $currency) {
                    $principal_amount = 0;
                    $disbursement_amount = 0;
                    $row = 5 + $n + $m;
                    $m++;
                    foreach ($data as $data_row){
                    if($currency->code == $data_row->currency){
                    $coll = "";
                    $guar = "";
                    $collaterals = $this->loans_model->getCollaterals($data_row->application_id);
                    $guarantors = $this->loans_model->getGuarantors($data_row->application_id);
                    if($collaterals){
                        $x = sizeof($collaterals);
                        $j = 1;
                        foreach ($collaterals as $collateral) {
                            $coll .= $collateral->name.' - '.$collateral->model;
                            if($j != $x){
                                $coll .= ', ';
                            }
                            $j++;
                        }
                    }
                    if($guarantors){
                        $l = sizeof($guarantors);
                        $k = 1;
                        foreach ($guarantors as $guarantor) {
                            $guar .= $guarantor->unique_no;
                            if($k != $l){
                                $guar .= ', ';
                            }
                            $k++;
                        }
                    }
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->loan_reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->borrower);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->gender);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->street_no);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $coll);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $guar);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->loan_product);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->loan_purpose);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->principal_amount);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->interest_rate);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->frequency);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->term);
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, lang($data_row->name_method));
                    $this->excel->getActiveSheet()->SetCellValue('R' . $row, $data_row->disbursement);
                    $this->excel->getActiveSheet()->SetCellValue('S' . $row, $data_row->currency);
                    $this->excel->getActiveSheet()->SetCellValue('T' . $row, $data_row->type);
                    $principal_amount += $data_row->principal_amount;
                    $disbursement_amount += $data_row->disbursement;
                    $row++;
                    $n++;
                }
    //             $styleArray = array(
                //  'font'  => array(
                //      'bold'  => true,
                //      'size'  => 10,
                //  ));
                // $this->excel->getActiveSheet()->getStyle('A'.$row.':T'.$row.'')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, lang("subtotal"));
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($principal_amount));
                $this->excel->getActiveSheet()->SetCellValue('R' . $row, $this->bpas->formatDecimal($disbursement_amount));
            }
        }
                
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('T')->setWidth(15);
                $filename = 'loan_disbursement_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                loans.id as id,
                payments.date,
                payments.reference_no,
                loans.reference_no as loan_reference_no,
                loan_borrowers.code,
                loans.borrower,
                loan_products.name as loan_product,
                loans.principal_amount,
                CONCAT(bpas_loans.interest_rate,'%') as interest_rate,
                loans.frequency,
                loans.term,
                payments.amount as disbursement,
                loans.currency,
                payments.type")
            ->from("payments")
            ->join("loans","payments.loan_id=loans.id","left")
            ->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
            ->join("loan_products","loan_products.id=loans.loan_product_id","left")
            ->where("payments.type", "sent");
            if($reference_no){
                $this->datatables->like("payments.reference_no", $reference_no);
            }
            if($loan_reference_no){
                $this->datatables->like("loans.reference_no", $loan_reference_no);
            }
            if($biller){
                $this->datatables->where("loans.biller_id", $biller);
            }
            if($borrower){
                $this->datatables->where("c", $borrower);
            }
            if($currency){
                $this->datatables->where("loans.currency", $currency);
            }
            if($product){
                $this->datatables->where("loans.loan_product_id", $product);
            }
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
                 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
    
    public function loan_collection()
    {
        $this->bpas->checkPermissions('loan_collection');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['currencies'] = $this->site->getAllCurrencies();
        $this->data['products'] = $this->reports_model->getLoanProducts();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loan_collection_report')));
        $meta = array('page_title' => lang('loan_collection_report'), 'bc' => $bc);
        $this->page_construct('reports/loan_collection', $meta, $this->data);
    }
    
   public function getLoanCollectionReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('loan_disbursement', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $loan_reference_no = $this->input->get('loan_reference_no') ? $this->input->get('loan_reference_no') : NULL;
        $borrower = $this->input->get('borrower') ? $this->input->get('borrower') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $currency = $this->input->get('currency') ? $this->input->get('currency') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->bpas->fld($end_date,false,1);
        }

        $start_date_loan = $this->input->get('start_date_loan') ? $this->input->get('start_date_loan') : NULL;
        $end_date_loan = $this->input->get('end_date_loan') ? $this->input->get('end_date_loan') : NULL;
        if ($start_date_loan) {
            $start_date_loan = $this->bpas->fld($start_date_loan);
        }
        if ($end_date_loan) {
            $end_date_loan = $this->bpas->fld($end_date_loan,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
            $this->db
                ->select("
                loans.id as id,
                bpas_loan_items.interest as interest,
                bpas_loan_items.principal as subprincipal,
                (bpas_loan_items.interest + bpas_loan_items.principal) as total_amount,
                loans.biller,
                payments.date,
                DATEDIFF(SYSDATE(), deadline) AS overdue,
                bpas_loan_items.deadline,
                payments.reference_no,
                loans.reference_no as ref_loan,
                loans.borrower,
                loans.principal_amount as principal_amount,
                IFNULL(bpas_payments.amount, 0) as principal_paid,
                IFNULL(bpas_payments.interest_paid, 0) as interest_paid,
                IFNULL(bpas_payments.amount + bpas_payments.interest_paid, 0) as payment_paid,
                IFNULL(bpas_payments.fee_charge, 0) as fee_charge,
                IFNULL(bpas_payments.penalty_paid, 0) as penalty_paid,
                loans.currency,
                paid_by,
                bpas_payments.type")
                ->from('loan_items')
                ->join('loans', 'loan_items.loan_id=loans.id', 'left')
                ->join('loan_borrowers','loan_borrowers.id=loans.borrower_id','left')
                ->join('payments', 'payments.loan_item_id=loan_items.id', 'left')
                ->group_by('loan_items.id');
                // $this->db->where("loans.currency !=", '');

            // ->from("payments")
            // ->join("loans","payments.loan_id=loans.id","left")
            // ->join("loan_items","loan_items.id=payments.loan_item_id","left")
            // ->where("type <>", "disbursed")
            // ->where("bpas_payments.type", "Received")
            // ->where("loans.id >", 0);
            if($reference_no){
                $this->db->like("payments.reference_no", $reference_no);
            }
            if($loan_reference_no){
                $this->db->like("loans.reference_no", $loan_reference_no);
            }
            if($biller){
                $this->db->where("loans.biller_id", $biller);
            }
            if($borrower){
                $this->db->where("loans.borrower_id", $borrower);
            }
            if($product){
                $this->db->where("loans.loan_product_id", $product);
            }
            if($currency){
                $this->db->where("loans.currency", $currency);
            }
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
             if ($start_date_loan) {
                $this->db->where('loan_items.deadline >=', $start_date_loan);
            }
            if ($end_date_loan) {
                $this->db->where('loan_items.deadline <=', $end_date_loan);
            }
            if ($start_date) {
                $this->db->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'size'  => 10,
                    ));
                $row1 = 5;
                $this->excel->getActiveSheet()->getStyle('A1:S1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A2:S2')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A3:S3')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A4:S4')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A5:S5')->applyFromArray($styleArray);
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('loan_collection_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Company Name'));
                $this->excel->getActiveSheet()->SetCellValue('A2', lang('Active Loan Listing Report'));
                $this->excel->getActiveSheet()->SetCellValue('A3', lang('Report Payment Period'));
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('Report Deadline Period'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang($this->Settings->site_name));
                $this->excel->getActiveSheet()->SetCellValue('B3', lang(($start_date ? $start_date : '') . ' - ' . ($end_date ? $end_date : '')));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang(($start_date_loan ? $start_date_loan : '') . ' - ' . ($end_date_loan ? $end_date_loan : '')));
                $this->excel->getActiveSheet()->SetCellValue('A' . $row1, lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B' . $row1, lang('deadline'));
                $this->excel->getActiveSheet()->SetCellValue('C' . $row1, lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D' . $row1, lang('loan_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E' . $row1, lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row1, lang('borrower'));
                $this->excel->getActiveSheet()->SetCellValue('G' . $row1, lang('total_principal'));
                $this->excel->getActiveSheet()->SetCellValue('H' . $row1, lang('principal'));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row1, lang('interest'));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row1, lang('total_amount'));
                $this->excel->getActiveSheet()->SetCellValue('K' . $row1, lang('principal_paid'));
                $this->excel->getActiveSheet()->SetCellValue('L' . $row1, lang('interest_paid'));
                $this->excel->getActiveSheet()->SetCellValue('M' . $row1, lang('payment_paid'));
                $this->excel->getActiveSheet()->SetCellValue('N' . $row1, lang('fee_charge'));
                $this->excel->getActiveSheet()->SetCellValue('O' . $row1, lang('penalty_paid'));
                $this->excel->getActiveSheet()->SetCellValue('P' . $row1, lang('currency'));
                $this->excel->getActiveSheet()->SetCellValue('Q' . $row1, lang('overdue'));
                $this->excel->getActiveSheet()->SetCellValue('R' . $row1, lang('type'));
                $this->excel->getActiveSheet()->SetCellValue('S' . $row1, lang('Remarkable'));
                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    )
                );
                $this->excel->getActiveSheet()->getStyle("A1:S1")->applyFromArray($style)->getFont()->setBold(true);
           
                $n = 0;
                $m = 0;
                $currencies = $this->site->getAllCurrencies();
                foreach ($currencies as $currency) {
                    $principal_amount = 0;
                    $principal = 0;
                    $interest = 0;
                    $total_amount = 0;
                    $principal_paid = 0;
                    $interest_paid = 0;
                    $payment_paid = 0;
                    $fee_charge = 0;
                    $penalty_paid = 0;
                    $row = 6 + $n + $m;
                    $m++;
                        foreach ($data as $data_row){
                            if($currency->code == $data_row->currency){
                                // $this->excel->getActiveSheet()->getStyle("A" . $row . ":T" . $row)->getBorders()
                    // ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                                $this->excel->getActiveSheet()->SetCellValue('A' . $row, ($data_row->date ? $this->bpas->hrld($data_row->date) : ''));
                                $this->excel->getActiveSheet()->SetCellValue('B' . $row, ($data_row->deadline ? $this->bpas->hrsd($data_row->deadline) : ''));
                                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->ref_loan);
                                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->borrower);
                                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->principal_amount));
                                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->subprincipal));
                                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->interest));
                                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->total_amount));
                                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->principal_paid));
                                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->formatDecimal($data_row->interest_paid));
                                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($data_row->payment_paid));
                                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->formatDecimal($data_row->fee_charge));
                                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->bpas->formatDecimal($data_row->penalty_paid));
                                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->currency);
                                $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $this->bpas->formatDecimal($data_row->overdue));
                                $this->excel->getActiveSheet()->SetCellValue('R' . $row, lang($data_row->type));
                                $this->excel->getActiveSheet()->SetCellValue('S' . $row, lang(''));

                                $principal_amount += $data_row->principal_amount;
                                $principal += $data_row->subprincipal;
                                $interest += $data_row->interest;
                                $total_amount += $data_row->total_amount;
                                $principal_paid += $data_row->principal_paid;
                                $interest_paid += $data_row->interest_paid;
                                $payment_paid += $data_row->payment_paid;
                                $fee_charge += $data_row->fee_charge;
                                $penalty_paid += $data_row->penalty_paid;
                                $row++;
                                $n++;
                                // $this->excel->getActiveSheet()->getStyle("A" . $row . ":T" . $row)->getBorders()
                    // ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                        }
                        $styleArray = array(
                            'font'  => array(
                                'bold'  => true,
                                'size'  => 10,
                            ));
                        $this->excel->getActiveSheet()->getStyle('F'.$row.':O'.$row.'')->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, lang("subtotal"));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($principal));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($interest));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($total_amount));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($principal_paid));
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->formatDecimal($interest_paid));
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($payment_paid));
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->formatDecimal($fee_charge));
                        $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->bpas->formatDecimal($penalty_paid));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $principal_amount);

                    }
                }
                
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('S')->setWidth(15);
                $filename = 'loan_collection_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                loans.id as id,
                payments.date,
                loan_items.deadline,
                payments.reference_no,
                loans.reference_no as ref_loan,
                loan_borrowers.code,
                loans.borrower,
                bpas_loan_items.principal as subprincipal,
                bpas_loan_items.interest as interest,
                (bpas_loan_items.interest + bpas_loan_items.principal) as total_amount,
                IFNULL(bpas_payments.amount, 0) as principal_paid,
                IFNULL(bpas_payments.interest_paid, 0) as interest_paid,
                IFNULL(bpas_payments.amount + bpas_payments.interest_paid, 0) as payment_paid,
                IFNULL(bpas_payments.fee_charge,0) as  fee_charge,
                IFNULL(bpas_payments.penalty_paid,0) as  penalty_paid,
                loans.currency,
                paid_by,
                bpas_payments.type")
            // ->from("payments")
            // ->join("loans","payments.loan_id=loans.id","left")
            // ->join("loan_borrowers","loan_borrowers.id=loans.borrower_id","left")
            // ->where("bpas_payments.type <>", "sent")
            // ->where("bpas_payments.type", "Received")
            // ->where("loans.id >", 0);
                ->from('loan_items')
                ->join('loans', 'loan_items.loan_id=loans.id', 'left')
                ->join('loan_borrowers','loan_borrowers.id=loans.borrower_id','left')
                ->join('payments', 'payments.loan_item_id=loan_items.id', 'left')
                ->group_by('loan_items.id');
            if($reference_no){
                $this->datatables->like("payments.reference_no", $reference_no);
            }
            if($loan_reference_no){
                $this->datatables->like("loans.reference_no", $loan_reference_no);
            }
            if($biller){
                $this->datatables->where("loans.biller_id", $biller);
            }
            if($borrower){
                $this->datatables->where("loans.borrower_id", $borrower);
            }
            if($product){
                $this->datatables->where("loans.loan_product_id", $product);
            }
            if($currency){
                $this->datatables->where("loans.currency", $currency);
            }
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }   
            if ($start_date_loan) {
                $this->datatables->where('loan_items.deadline >=', $start_date_loan);
            }
            if ($end_date_loan) {
                $this->datatables->where('loan_items.deadline <=', $end_date_loan);
            }
            if ($start_date) {
                $this->datatables->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
                 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
    public function loan_collectable()
    {
        $this->bpas->checkPermissions('loan_collection');
        $this->data['users']        = $this->reports_model->getStaff();
        $this->data['warehouses']   = $this->site->getWarehouses();
        $this->data['users']        = $this->reports_model->getStaff();
        $this->data['products']     = $this->reports_model->getLoanProducts();
        $this->data['currencies']   = $this->site->getAllCurrencies();
        $this->data['billers']      = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loan_collectable_report')));
        $meta = array('page_title' => lang('loan_collectable_report'), 'bc' => $bc);
        $this->page_construct('reports/loan_collectable', $meta, $this->data);
    }
    
    public function getLoanCollectableReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('loan_collection', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $loan_reference_no = $this->input->get('loan_reference_no') ? $this->input->get('loan_reference_no') : NULL;
        $borrower = $this->input->get('borrower') ? $this->input->get('borrower') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $currency = $this->input->get('currency') ? $this->input->get('currency') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        $this->load->library('datatables');
        $add_payment_link = anchor('loans/add_payment/$1', '<i class="fa fa-money"></i> ' . lang('add_payment'), ' class="add-payment" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"');
        $payments_link = anchor('loans/view_payments/$1', '<i class="fa fa-money"></i> ' . lang('view_payments'), ' class="view-payment" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"');
        $action = '<div class="text-center"><div class="btn-group text-left">'
                . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
                . lang('actions') . ' <span class="caret"></span></button>
                        <ul class="dropdown-menu pull-right" role="menu">
                            <li>'.$add_payment_link . '</li>
                            <li>'.$payments_link . '</li>
                        </ul>
                    </div></div>';
        if ($xls) {
            $this->db
                ->select("
                loans.id as id,
                loans.biller,
                loans.currency,
                payments.date,
                payments.reference_no,
                loans.reference_no as ref_loan,
                loans.borrower,
                IFNULL(bpas_payments.amount, 0) as principal_paid,
                IFNULL(bpas_payments.interest_paid, 0) as interest_paid,
                IFNULL(bpas_payments.amount + bpas_payments.interest_paid, 0) as payment_paid,
                IFNULL(bpas_payments.fee_charge,0) as  fee_charge,
                IFNULL(bpas_payments.penalty_paid,0) as  penalty_paid,
                paid_by,
                bpas_payments.type")
            ->from("payments")
            ->join("loans","payments.loan_id=loans.id","left")
            ->where("type <>", "disbursed")
            ->where("loans.id >", 0);
            if($reference_no){
                $this->db->like("payments.reference_no", $reference_no);
            }
            if($loan_reference_no){
                $this->db->like("loans.reference_no", $loan_reference_no);
            }
            if($biller){
                $this->db->where("loans.biller_id", $biller);
            }
            if($borrower){
                $this->db->where("loans.borrower_id", $borrower);
            }
            if($product){
                $this->db->where("loans.loan_product_id", $product);
            }
            if($currency){
                $this->db->where("loans.currency", $currency);
            }
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'size'  => 10,
                    ));

                $row1 = 4;
                $this->excel->getActiveSheet()->getStyle('A1:S1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A2:S2')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A3:S3')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A4:S4')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A5:S5')->applyFromArray($styleArray);
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('loan_collection_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Company Name'));
                $this->excel->getActiveSheet()->SetCellValue('A2', lang('Active Loan Listing Report'));
                $this->excel->getActiveSheet()->SetCellValue('A3', lang('Report Period'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang($this->Settings->site_name));
                $this->excel->getActiveSheet()->SetCellValue('B3', lang(($start_date ? $start_date : '') . ' - ' . ($end_date ? $end_date : '')));
                $this->excel->getActiveSheet()->setTitle(lang('loan_collectable_report'));
                $this->excel->getActiveSheet()->SetCellValue('A' . $row1, lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B' . $row1, lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C' . $row1, lang('loan_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D' . $row1, lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E' . $row1, lang('borrower'));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row1, lang('principal_paid'));
                $this->excel->getActiveSheet()->SetCellValue('G' . $row1, lang('interest_paid'));
                $this->excel->getActiveSheet()->SetCellValue('H' . $row1, lang('payment_paid'));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row1, lang('fee_charge'));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row1, lang('penalty_paid'));
                $this->excel->getActiveSheet()->SetCellValue('K' . $row1, lang('currency'));
                $this->excel->getActiveSheet()->SetCellValue('L' . $row1, lang('type'));
            
                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    )
                );
                $this->excel->getActiveSheet()->getStyle("A1:L1")->applyFromArray($style)->getFont()->setBold(true);
                // $row = 2;
                // $principal_paid = 0;
                // $interest_paid = 0;
                // $payment_paid = 0;
                // $fee_charge = 0;
                // $penalty_paid = 0;
                // foreach ($data as $data_row){
                $n = 0;
                $m = 0;
                $currencies = $this->site->getAllCurrencies();
                foreach ($currencies as $currency) {
                    $principal_paid = 0;
                    $interest_paid = 0;
                    $payment_paid = 0;
                    $fee_charge = 0;
                    $penalty_paid = 0;
                    $row = 5 + $n + $m;
                    $m++;
                    foreach ($data as $data_row){
                    if($currency->code == $data_row->currency){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->ref_loan);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->borrower);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->principal_paid));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->interest_paid));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->payment_paid));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->fee_charge));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->penalty_paid));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->currency));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, lang($data_row->type));
                    $principal_paid += $data_row->principal_paid;
                    $interest_paid += $data_row->interest_paid;
                    $payment_paid += $data_row->payment_paid;
                    $fee_charge += $data_row->fee_charge;
                    $penalty_paid += $data_row->penalty_paid;
                    $row++;
                    $n++;
                }

                // $this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row.'')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang("subtotal"));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($principal_paid));
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($interest_paid));
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($payment_paid));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($fee_charge));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($penalty_paid));
            }
        }
            
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $filename = 'loan_collectable_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
                loan_items.id as id,
                loan_items.period,
                loan_items.deadline,
                loans.reference_no,
                CONCAT(bpas_loan_borrowers.last_name,' ',bpas_loan_borrowers.first_name,' [ <small style=color:#FF5454>',bpas_loan_borrowers.phone,'</small> ] ') as borrower,
                loan_items.payment,
                loan_items.interest, 
                loan_items.principal,
                loan_items.balance,
                SUM(IFNULL(bpas_payments.amount,0)) + SUM(IFNULL(bpas_payments.interest_paid,0)) as payment_paid,
                SUM(IFNULL(bpas_payments.interest_paid,0)) as interest_paid,
                SUM(IFNULL(bpas_payments.amount,0)) as principal_paid,
                SUM(IFNULL(bpas_payments.penalty_paid,0)) as penalty_paid,
                loans.currency,
                DATEDIFF(SYSDATE(), deadline) AS overdue,
                loan_items.status")
            ->from('loan_items')
            ->join('loans', 'loan_items.loan_id=loans.id', 'left')
            ->join('loan_borrowers','loan_borrowers.id=loans.borrower_id','left')
            ->join('payments', 'payments.loan_item_id=loan_items.id', 'left')
            ->group_by('loan_items.id');
            $loan_alert_days = ($this->Settings->loan_alert_days && 0 ? $this->Settings->loan_alert_days : 0);
            $this->datatables->where('DATE_SUB('.$this->db->dbprefix('loan_items').'.`deadline`, INTERVAL '.$loan_alert_days.' DAY) <=', date("Y-m-d"));
            $this->datatables->where('loan_items.status !=','paid');
            $this->datatables->where('loan_items.status !=','payoff');
            $this->datatables->where('loans.status !=','payoff');
            $this->datatables->where('loans.status !=','completed');
            // $this->datatables->add_column("Actions", $action, "id");
            // if($reference_no){
            //  $this->datatables->like("payments.reference_no", $reference_no);
            // }
            if($loan_reference_no){
                $this->datatables->like("loans.reference_no", $loan_reference_no);
            }
            if($biller){
                $this->datatables->where("loans.biller_id", $biller);
            }
            if($borrower){
                $this->datatables->where("loans.borrower_id", $borrower);
            }
            if($product){
                $this->datatables->where("loans.loan_product_id", $product);
            }
            if ($user) {
                $this->datatables->where('loans.created_by', $user);
            } 
            if ($currency) {
                $this->datatables->where('loans.currency', $currency);
            }
            if ($start_date) {
                $this->datatables->where('loan_items.deadline >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('loan_items.deadline <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
                 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
    public function pawns()
    {
        $this->bpas->checkPermissions('pawn');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['customers'] = $this->site->getAllCompanies('customer');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('pawn_report')));
        $meta = array('page_title' => lang('pawn_report'), 'bc' => $bc);
        $this->page_construct('reports/pawn', $meta, $this->data);
    }
    
    public function getPawnReport($pdf = false , $xls = false)
    {
        $this->bpas->checkPermissions('pawn');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $curDate = date('Y-m-d');   
        if ($xls) {
            
            $this->load->library('datatables');
            if($payment_status){
                $join = 'inner';
                $this->db->where('pawns.status !=','completed');
                $this->db->where('pawns.status !=','closed');
            }else{
                $join = 'left';
            }
            
            $this->db->select("
                        pawns.date, 
                        pawns.reference_no,
                        pawns.biller,
                        pawns.customer, 
                        pawns.principal,
                        IFNULL(SUM(bpas_pawn_returns.grand_total),0) as total_return,
                        IFNULL((pawn_purchases.cost + pawn_purchases.price),0) as purchase,
                        IFNULL((bpas_pawns.principal - IFNULL(sum(bpas_pawn_returns.grand_total),0) - IFNULL(pawn_purchases.price,0)),0) AS balance,
                        IFNULL(".$this->db->dbprefix('pawns'). " .payment_rate,0) as payment_rate,
                        pawns.status, 
                        IF(".$this->db->dbprefix('pawns').".status='completed' OR ".$this->db->dbprefix('pawns').".status='closed','completed',IF(pawn_items.pawn_id > 0, 'due','pending')) as payment_status")
            ->from('pawns')
            ->join('(SELECT pawn_id FROM bpas_pawn_items WHERE next_date <= "'.$curDate.'" GROUP BY pawn_id) as pawn_items','pawns.id = pawn_items.pawn_id',$join)
            ->join('pawn_returns' , 'pawn_returns.pawn_id = pawns.id' , 'left')
            ->join('(select pawn_id, sum(price * quantity) as price, sum(cost * quantity) as cost FROM bpas_pawn_purchase_items GROUP BY pawn_id) as pawn_purchases' , 'pawn_purchases.pawn_id = pawns.id' , 'left')
            ->group_by('bpas_pawns.id');
            
            
            if($reference_no){
                $this->db->where('pawns.reference_no', $reference_no);
            }
            if($customer){
                $this->db->where('pawns.customer_id', $customer);
            }
            if ($start_date) {
                $this->db->where('date(bpas_pawns.date) >=', $this->bpas->fld($start_date));
                $this->db->where('date(bpas_pawns.date) <=', $this->bpas->fld($end_date,false,1));
            }
            if($biller){
                $this->db->where('pawns.biller_id', $biller);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('pawns.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('pawns.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('pawn_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('principal'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('return'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('purchase'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('payment_rate'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('pawn_status'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('payment_status'));

                $row            = 2;
                $amount         = 0;
                $principal      = 0;
                $payment_rate   = 0;
                $total_return   = 0;
                $total_purchase = 0;
                $balance        = 0;
                foreach ($data as $data_row){
                    
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->date);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($data_row->principal));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->total_return));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->purchase));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->balance));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->payment_rate));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->status);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->payment_status);
                    
                    $principal      += $this->bpas->formatDecimal($data_row->principal);
                    $payment_rate   += $this->bpas->formatDecimal($data_row->payment_rate);
                    $total_return   += $this->bpas->formatDecimal($data_row->total_return);
                    $total_purchase += $this->bpas->formatDecimal($data_row->purchase);
                    $balance        += $this->bpas->formatDecimal($data_row->balance);
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("E" . $row . ":I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($principal));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($total_return));
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($total_purchase));
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($balance));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($payment_rate));
                
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                

                $filename = 'pawn_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
            
        } else{
            
            $this->load->library('datatables');
            if(isset($payment_status)){
                $join = 'inner';
                $this->db->where('pawns.status !=','completed');
                $this->db->where('pawns.status !=','closed');
            }else{
                $join = 'left';
            }
            $this->datatables
            ->select("
                        pawns.date, 
                        pawns.reference_no,
                        pawns.biller,
                        pawns.customer, 
                        pawns.principal,
                        IFNULL(SUM(bpas_pawn_returns.grand_total),0) as total_return,
                        IFNULL((pawn_purchases.cost + pawn_purchases.price),0) as purchase,
                        IFNULL((bpas_pawns.principal - IFNULL(sum(bpas_pawn_returns.grand_total),0) - IFNULL(pawn_purchases.price,0)),0) AS balance,
                        IFNULL(".$this->db->dbprefix('pawns'). " .payment_rate,0) as payment_rate,
                        pawns.status, 
                        IF(".$this->db->dbprefix('pawns').".status='completed' OR ".$this->db->dbprefix('pawns').".status='closed','completed',IF(pawn_items.pawn_id > 0, 'due','pending')) as payment_status,
                        pawns.id")
            ->from('pawns')
            ->join('(SELECT pawn_id FROM bpas_pawn_items WHERE next_date <= "'.$curDate.'" GROUP BY pawn_id) as pawn_items','pawns.id = pawn_items.pawn_id',$join)
            ->join('pawn_returns' , 'pawn_returns.pawn_id = pawns.id' , 'left')
            ->join('(select pawn_id, sum(price * quantity) as price, sum(cost * quantity) as cost FROM bpas_pawn_purchase_items GROUP BY pawn_id) as pawn_purchases' , 'pawn_purchases.pawn_id = pawns.id' , 'left')
            ->group_by('bpas_pawns.id');

            if($reference_no){
                $this->db->where('pawns.reference_no', $reference_no);
            }
            if($customer){
                $this->db->where('pawns.customer_id', $customer);
            }
            if ($start_date) {
                $this->datatables->where('date(bpas_pawns.date) >=', $this->bpas->fld($start_date));
                $this->datatables->where('date(bpas_pawns.date) <=', $this->bpas->fld($end_date,false,1));
            }
            if($biller){
                $this->datatables->where('pawns.biller_id', $biller);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('pawns.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('pawns.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            echo $this->datatables->generate();
        }
    }
    
    public function print_history()
    {
        $this->bpas->checkPermissions('print_history');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('print_history')));
        $meta = array('page_title' => lang('print_history'), 'bc' => $bc);
        $this->page_construct('reports/print_history', $meta, $this->data);
    }
    
    public function getPrintHistory($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('print_history');

        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
        

            $this->db->select("
            print_date,
            transaction,
            reference_no,
            concat(last_name,' ', first_name) as user_print")
            ->from("print_histories")
            ->join('users','users.id = print_histories.print_by','left');
            if ($user) {
                $this->db->where('print_histories.print_by', $user);
            }
            if ($transaction_id) {
                $this->db->where('print_histories.transaction_id', $transaction_id);
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('print_histories').'.print_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($reference_no) {
                $this->db->like('print_histories.reference_no', $reference_no, 'both');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('print_history'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('transaction'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('user'));
                
                $row = 2;
                $total = 0;
                $discount = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->print_date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->transaction);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->user_print);
                    
                    $row++;
                }
                
                
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
  
                $filename = 'print_history_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            
            
            $this->load->library('datatables');
            $this->datatables->select("
            print_date,
            transaction,
            reference_no,
            concat(last_name,' ', first_name) as user_print")
            ->from("print_histories")
            ->join('users','users.id = print_histories.print_by','left');
            if ($user) {
                $this->db->where('print_histories.print_by', $user);
            }
            if (isset($transaction_id)) {
                $this->datatables->where('print_histories.transaction_id', $transaction_id);
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('print_histories').'.print_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($reference_no) {
                $this->db->like('print_histories.reference_no', $reference_no, 'both');
            }
            echo $this->datatables->generate();
        }
    }
    
    function leasing_commission()
    {
        $this->bpas->checkPermissions('commission');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $Settings = $this->site->getSettings();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['salemans']   = $this->site->getAllSalemans($Settings->group_saleman_id);
        $this->data['pos_settings'] = POS ? $this->reports_model->getPOSSetting('biller') : FALSE;

        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('payments_report')));
        $meta = array('page_title' => lang('payments_report'), 'bc' => $bc);
        $this->page_construct('commission/commission_report', $meta, $this->data);
    }
     function getLeasingcommission_Report($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('commission', TRUE);
        $biller_id= $this->session->userdata('biller_id');
        $get_sub_biller = $this->site->get_Sub_Biller($biller_id);
        $elements = array();
        foreach ($get_sub_biller as $sub_biller){
            $elements[] =  $sub_biller->bill_id;
        }
        $sub_bill=implode(' OR '.$this->db->dbprefix('sales').'.biller_id =', $elements);

        
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $supplier = $this->input->get('supplier') ? $this->input->get('supplier') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $payment_ref = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : NULL;
        $paid_by = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
        $sale_ref = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : NULL;
        $purchase_ref = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : NULL;
        $card = $this->input->get('card') ? $this->input->get('card') : NULL;
        $cheque = $this->input->get('cheque') ? $this->input->get('cheque') : NULL;
        $transaction_id = $this->input->get('tid') ? $this->input->get('tid') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {
            $this->db
                ->select("DATE_FORMAT({$this->db->dbprefix('commissions')}.date, '%Y-%m-%d %T') as date, 
                " . $this->db->dbprefix('payments') . ".reference_no as payment_ref, 
                " . $this->db->dbprefix('sales') . ".reference_no as sale_ref,
                CONCAT({$this->db->dbprefix('users')}.first_name,' ',{$this->db->dbprefix('users')}.last_name) as name, 
                {$this->db->dbprefix('commissions')}.amount as amount,
                CONCAT({$this->db->dbprefix('commissions')}.percent,'%') as percent,
                
                {$this->db->dbprefix('commissions')}.status as status,
                " . $this->db->dbprefix('commissions') . ".note as note, 
                {$this->db->dbprefix('commissions')}.id as id")
                ->from('commissions')
                ->join('sales', 'commissions.sale_id=sales.id', 'left')
                ->join('users', 'users.id=sales.saleman_by', 'left')
                ->join('payments', 'payments.id=commissions.payment_id', 'left')
                ->group_by('commissions.id');

            if ($user) {
                $this->db->where('commissions.created_by', $user);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($saleman) {
                $this->db->where('sales.saleman_by', $saleman);
            }
            if($this->SaleLeader){
                $this->db->where('sales.biller_id = '.$sub_bill.'');
            }elseif($this->SaleAgent){
                $this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
            }else{
                if ($biller) {
                    $this->db->where('sales.biller_id', $biller);
                }
            }
            if ($payment_ref) {
                $this->db->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('commissions').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
 

            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                 $this->excel->getActiveSheet()->setTitle(lang('payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_reference'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('saleman'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('percent'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('status'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('note'));
                

                $row = 2;
                $total = 0;$total_stl = 0;$total_sa = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->percent);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->status);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->note);
                    // $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->STL);
                    // $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->SA);
                    if ($data_row->type == 'returned' || $data_row->type == 'sent') {
                        $total -= $data_row->amount;
                    } else {
                        $total += $data_row->amount;
                    }
                    // $total_stl += $data_row->STL;
                    // $total_sa += $data_row->SA;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                 $this->excel->getActiveSheet()->getStyle("I" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                 $this->excel->getActiveSheet()->getStyle("J" . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                    
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $total);
                // $this->excel->getActiveSheet()->SetCellValue('I' . $row, $total_stl);
                // $this->excel->getActiveSheet()->SetCellValue('J' . $row, $total_sa);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'Commission_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);

            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);

        } else {
            
            $sj = "(SELECT CONCAT({$this->db->dbprefix('users')}.first_name,' ',{$this->db->dbprefix('users')}.last_name) as paid_by, id from {$this->db->dbprefix('users')} ";
            $sj .= " GROUP BY {$this->db->dbprefix('users')}.id ) FSJ";
            $si = "(SELECT CONCAT({$this->db->dbprefix('users')}.first_name,' ',{$this->db->dbprefix('users')}.last_name) as created_by, id from {$this->db->dbprefix('users')} ";
            $si .= " GROUP BY {$this->db->dbprefix('users')}.id ) FSI";
            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT({$this->db->dbprefix('commissions')}.date, '%Y-%m-%d %T') as date, paid_date, FSJ.paid_by,FSI.created_by,
                    {$this->db->dbprefix('companies')}.name," . $this->db->dbprefix('payments') . ".reference_no,
                    " . $this->db->dbprefix('sales') . ".reference_no as sale_ref,
                    CONCAT({$this->db->dbprefix('users')}.first_name,' ',{$this->db->dbprefix('users')}.last_name), 
                    {$this->db->dbprefix('commissions')}.amount,
                    CONCAT({$this->db->dbprefix('commissions')}.percent,'%'),
                    {$this->db->dbprefix('commissions')}.status,
                    " . $this->db->dbprefix('commissions') . ".note , 
                    {$this->db->dbprefix('commissions')}.id as id")
                ->from('commissions')
                ->join('sales', 'commissions.sale_id = sales.id', 'left')
                ->join($sj, 'FSJ.id = commissions.paid_by', 'left')
                ->join($si, 'FSI.id = commissions.created_by', 'left')
                ->join('users', 'users.id = sales.saleman_by', 'left')
                ->join('companies', 'companies.id = sales.customer_id', 'left')
                ->join('payments', 'payments.id = commissions.payment_id', 'left')
                ->group_by('commissions.id');
            // $this->datatables
            //     ->select("DATE_FORMAT({$this->db->dbprefix('payments')}.date, '%Y-%m-%d %T') as date, 
            //     " . $this->db->dbprefix('payments') . ".reference_no as payment_ref, 
            //     " . $this->db->dbprefix('sales') . ".reference_no as sale_ref, 
            //     paid_by, 
            //     CONCAT({$this->db->dbprefix('users')}.first_name,' ',{$this->db->dbprefix('users')}.last_name),{$this->db->dbprefix('payments')}.commission_amount,                            {$this->db->dbprefix('payments')}.payment_commission_status 
            //     ,amount,
            //     type,
               
            //     {$this->db->dbprefix('payments')}.id as id")
            //     ->from('payments')
            //     ->join('sales', 'payments.sale_id=sales.id', 'left')
            //     ->join('users', 'users.id=sales.saleman_by', 'left')
            //     ->join('purchases', 'payments.purchase_id=purchases.id', 'left')
            //     ->group_by('payments.id');

            if ($user) {
                $this->datatables->where('commissions.created_by', $user);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($saleman) {
                $this->datatables->where('sales.saleman_by', $saleman);
            }
            if($this->SaleLeader){
                $this->datatables->where('sales.biller_id = '.$sub_bill.'');
            }elseif($this->SaleAgent){
                $this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
            }else{
                if ($biller) {
                    $this->datatables->where('sales.biller_id', $biller);
                }
            }
            if ($payment_ref) {
                $this->datatables->like('payments.reference_no', $payment_ref, 'both');
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('commissions').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }

    public function store_sales()
    {
        $this->bpas->checkPermissions('store_sales');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']   = $this->site->getAllProject();
        $this->data['zones']      = $this->site->getAllZones_Order_Group();

        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('store_sales_report')]];
        $meta                     = ['page_title' => lang('store_sales_report'), 'bc' => $bc];

        $this->page_construct('reports/store_sales', $meta, $this->data);
    }

    public function getStoreSalesReport($pdf = null, $xls = null, $preview = null, $excel_deatail = null)
    {
        $this->bpas->checkPermissions('store_sales', true);
        $product      = $this->input->get('product') ? $this->input->get('product') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $customer     = $this->input->get('customer') ? $this->input->get('customer') : null;
        $phone        = $this->input->get('phone') ? $this->input->get('phone') : null;
        $address      = $this->input->get('address') ? $this->input->get('address') : null;
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : ((!$this->Owner && !$this->Admin) ? $this->session->userdata('biller_id') : null);
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : ((!$this->Owner && !$this->Admin) ? $this->session->userdata('warehouse_id') : null);
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $serial       = $this->input->get('serial') ? $this->input->get('serial') : null;
        $project       = $this->input->get('project') ? $this->input->get('project') : null;
        $sale_type       = $this->input->get('sale_type') ? $this->input->get('sale_type') : null;
        $sale_status  = $this->input->get('sale_status') ? $this->input->get('sale_status') : null;
        $zone         = $this->input->get('zone_id') ? $this->input->get('zone_id') : null;
        $payment_status = $this->input->get('payment_status') ? $this->input->get('payment_status') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if($preview){
            $this->db->select('date,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    reference_no, biller, customer, 
                    ' . $this->db->dbprefix('sale_items') . ".product_code,
                    " . $this->db->dbprefix('sale_items') . ".product_name,
                    " . $this->db->dbprefix('sale_items') . ".expiry,
                    " . $this->db->dbprefix('sale_items') . ".quantity, 
                    " . $this->db->dbprefix('sale_items') . ".product_unit_code, 
                    " . $this->db->dbprefix('warehouses') . ".name as warehouse_name,
                    " . $this->db->dbprefix('sale_items') . ".subtotal,
                    " . $this->db->dbprefix('sale_items') . ".unit_price,
                    " . $this->db->dbprefix('sale_items') . ".item_discount,
                    " . $this->db->dbprefix('sale_items') . ".item_tax,
                    grand_total,
                    total,
                    order_discount,
                    paid,
                    payment_status
                ", false)
                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale', 1)
                ->order_by('sales.date desc');

            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
                if ($sale_status != null) {
                if($sale_status == "consignment"){
                     $this->db->where('consignment_status', 1);
                }else{
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where_in('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where_in('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($sale_type) {
                $this->db->where('sales.pos', $sale_type);
            }
            if ($zone) {
                $this->db->where_in('sales.zone_id', $arr_zone);
            }
            if ($payment_status) {
                if($payment_status == 'paid'){
                    $this->db->where('sales.payment_status', $payment_status);
                } else {
                    $this->db->where('sales.payment_status !=', 'paid');
                }
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
            } else {
                $data = null;
            }
            
            $this->data['biller'] =  $this->site->getCompanyByID($biller);
            $this->data['rows'] = $data;
            $this->data['start_date'] = $start_date;
            $this->data['end_date'] = $end_date;
            if($zone){
                $this->data['zone'] = $this->site->getZoneByID($zone);    
            }
            
            $bc = array(array('link'   => base_url(), 'page' => lang('home')), array('link' => admin_url('sales'), 'page' => lang('sales')), array('link' => '#', 'page' => lang('sale_report')));
            $meta = array('page_title' => lang('sale_report'), 'bc' => $bc);
            $this->page_construct('reports/sale_preview', $meta, $this->data);
        } elseif ($pdf || $xls) {
            $this->db->select('date, project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    '. $this->db->dbprefix('suspended_note').'.name as suspend,
                    reference_no, biller, customer, c.phone, c.address, '. $this->db->dbprefix('sales').'.customer_qty, 

                    GROUP_CONCAT(CONCAT('.$this->db->dbprefix('sale_items') . ".product_code,
                            '_', " . $this->db->dbprefix('sale_items') .".product_name,
                            ' (', " . $this->db->dbprefix('sale_items') . ".quantity, ')') SEPARATOR '\n') as iname, grand_total, total,order_discount, paid, payment_status", false)
                ->from('sales')
                ->join('sale_items', 'sale_items.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('suspended_note', 'suspended_note.note_id=sales.suspend_note', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale', 1)
                ->group_by('sales.id')
                ->order_by('sales.date desc');

            if ($sale_status != null) {
                if($sale_status == "consignment"){
                     $this->db->where('consignment_status', 1);
                }else{
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where_in('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where_in('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($sale_status != null) {
                if($sale_status == "consignment"){
                     $this->db->where('consignment_status', 1);
                }else{
                    $this->db->where('sales.sale_status', $sale_status);
                }
                
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
             
            if($start_date){
                $report_date = 'From '.$start_date.' To '.$end_date ;
            }else{
               $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 25,
                        'name'  => 'Verdana'
                    )
                );

                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);

                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('product') .' (QTY)');
                $this->excel->getActiveSheet()->SetCellValue('K4',($this->pos_settings->pos_type =='pos') ? lang('product_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('payment_status'));

                $row = 5; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->customer_qty);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, ($this->pos_settings->pos_type =='pos') ? $data_row->iname : $data_row->suspend);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->order_discount);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, ($data_row->grand_total - $data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, lang($data_row->payment_status));
                    $cus_qty     += $data_row->customer_qty;
                    $total       += $data_row->total;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('N' . $row . ':P' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $cus_qty);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $balance);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($excel_deatail) {
            $this->db->select('date,
                    project_name,
                    CONCAT('.$this->db->dbprefix('users').'.first_name," ",
                    '.$this->db->dbprefix('users').'.last_name) as created_by,
                    reference_no, 
                    biller, customer,c.phone, c.address, 
                    '. $this->db->dbprefix('sales').'.customer_qty,
                    '.$this->db->dbprefix('sale_items') . ".product_code,
                    " . $this->db->dbprefix('sale_items') .".product_name,
                    " . $this->db->dbprefix('sale_items') .".expiry,
                    " . $this->db->dbprefix('sale_items') . ".quantity, 
                    " . $this->db->dbprefix('sale_items') . ".unit_quantity, 
                    " . $this->db->dbprefix('sale_items') . ".product_unit_code, 
                    " . $this->db->dbprefix('warehouses') . ".name as warehouse_name,
                    " . $this->db->dbprefix('sale_items') . ".subtotal,
                    " . $this->db->dbprefix('sale_items') . ".unit_price,
                    " . $this->db->dbprefix('sale_items') . ".item_discount,
                    " . $this->db->dbprefix('sale_items') . ".item_tax,
                    grand_total,
                    total,
                    order_discount,
                    paid,
                    payment_status
                ", false)
                ->from('sale_items')
                ->join('sales', 'sales.id = sale_items.sale_id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('users', 'users.id=sales.created_by', 'left')
                ->join('warehouses', 'warehouses.id=sale_items.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale', 1)
                ->order_by('sales.date desc');


            if ($user) {
                $this->db->where('sales.created_by', $user);
            }
            if ($sale_status != null) {
                if($sale_status == "consignment"){
                     $this->db->where('consignment_status', 1);
                }else{
                    $this->db->where('sales.sale_status', $sale_status);
                }
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($product) {
                $this->db->where('sale_items.product_id', $product);
            }
            if ($serial) {
                $this->db->like('sale_items.serial_no', $serial);
            }
            if ($biller) {
                $this->db->where_in('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->db->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->db->where('c.phone', $phone);
            }
            if ($address) {
                $this->db->where('c.address', $address);
            }
            if ($warehouse) {
                $this->db->where_in('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->db->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
             
            if($start_date){
                $report_date = 'From '.$start_date.' To '.$end_date ;
            }else{
               $report_date = '' ;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 25,
                        'name'  => 'Verdana'
                    )
                );

                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D3', $report_date);

                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('project'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('address'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('user'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('K4',($this->pos_settings->pos_type =='pos') ? lang('product_qty'): lang('suspend_no'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('unit'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('P4', lang('vat'));
                $this->excel->getActiveSheet()->SetCellValue('Q4', lang('subtotal'));

                $row = 5; $sub_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->project_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->address);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->quantity);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->product_unit_code);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->unit_quantity * $data_row->unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->item_discount);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->item_tax);
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, lang($data_row->subtotal));
                    $sub_qty     += $data_row->quantity;
                    $total       += $data_row->total;
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('N' . $row . ':P' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $sub_qty);
                /*$this->excel->getActiveSheet()->SetCellValue('L' . $row, $total);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $balance);*/

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'sales_report_detail';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $si = "( SELECT sale_id, product_id, serial_no, GROUP_CONCAT(CONCAT({$this->db->dbprefix('sale_items')}.product_name, '__', {$this->db->dbprefix('sale_items')}.quantity) SEPARATOR '___') as item_nane, SUM({$this->db->dbprefix('sale_items')}.quantity) as item_qty from {$this->db->dbprefix('sale_items')} ";
            $sj = "( SELECT sale_id, product_id, serial_no, SUM({$this->db->dbprefix('sale_items')}.original_price * {$this->db->dbprefix('sale_items')}.unit_quantity) as item_real_price from {$this->db->dbprefix('sale_items')} ";

            if ($product || $serial) {
                $si .= ' WHERE ';
                $sj .= ' WHERE ';
            }
            if ($product) {
                $si .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
                $sj .= " {$this->db->dbprefix('sale_items')}.product_id = {$product} ";
            }
            if ($product && $serial) {
                $si .= ' AND ';
                $sj .= ' AND ';
            }
            if ($serial) {
                $si .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
                $sj .= " {$this->db->dbprefix('sale_items')}.serial_no LIKe '%{$serial}%' ";
            }
            $si .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSI";
            $sj .= " GROUP BY {$this->db->dbprefix('sale_items')}.sale_id ) FSJ";

            $this->load->library('datatables');
            $this->datatables
                ->select("DATE_FORMAT(date, '%Y-%m-%d %T') as date,
                    project_name,
                    reference_no,
                    biller,
                    c.name as customer_id,
                    c.phone,
                    c.address,
                    FSI.item_qty as iqty,
                    FSI.item_nane as iname,
                    sale_status,
                    grand_total, paid,
                    (grand_total-paid) as balance,
                    payment_status,
                    {$this->db->dbprefix('sales')}.id as id", false)
                ->from('sales')
                ->join($si, 'FSI.sale_id=sales.id', 'left')
                ->join($sj, 'FSJ.sale_id=sales.id', 'left')
                ->join('projects', 'projects.project_id=sales.project_id', 'left')
                ->join('warehouses', 'warehouses.id=sales.warehouse_id', 'left')
                ->join('companies c', 'c.id=sales.customer_id', 'left')
                ->where('sales.store_sale', 1)
                ->order_by("sales.reference_no");
            // ->group_by('sales.id');
            if ($sale_status != null) {
                if($sale_status == "consignment"){
                    $this->datatables->where('consignment_status', 1);
                }else{
                    $this->datatables->where('sales.sale_status', $sale_status);
                }
            }
            if ($user) {
                $this->datatables->where('sales.created_by', $user);
            }
            if ($product) {
                $this->datatables->where('FSI.product_id', $product);
            }
            if ($serial) {
                $this->datatables->like('FSI.serial_no', $serial);
            }
            if ($biller) {
                $this->datatables->where_in('sales.biller_id', $biller);
            }
            if ($customer) {
                $this->datatables->where('sales.customer_id', $customer);
            }
            if ($phone) {
                $this->datatables->where('c.phone', $phone);
            }
            if ($address) {
                $this->datatables->where('c.address', $address);
            }
            if ($warehouse) {
                $this->datatables->where_in('sales.warehouse_id', $warehouse);
            }
            if ($reference_no) {
                $this->datatables->like('sales.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('sales') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($sale_type) {
                $this->datatables->where('sales.pos', $sale_type);
            }
            
            echo $this->datatables->generate();
        }
    }
    public function installments()
    {
        $this->bpas->checkPermissions('installments');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('installments_report')));
        $meta = array('page_title' => lang('installments'), 'bc' => $bc);
        $this->page_construct('reports/installments', $meta, $this->data);
    }
    
    public function getInstallmentsReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('installments', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $sale_reference_no = $this->input->get('sale_reference_no') ? $this->input->get('sale_reference_no') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $status = $this->input->get('status') ? $this->input->get('status') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {
            
            $this->db
                ->select("
                    installments.id as id,
                    installments.created_date,
                    sales.reference_no as sale_ref,
                    installments.reference_no,
                    installments.biller,
                    projects.project_name as project,
                    installments.customer,
                    companies.phone,
                    installments.description,
                    installments.installment_amount,
                    installments.deposit,
                    bpas_installment_items.principal,
                    bpas_installment_items.interest,
                    bpas_installment_items.payment,
                    IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0) as paid,
                    IFNULL(bpas_installment_items.payment,0) - (IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0)) - IF(bpas_installments.status='payoff', IFNULL(bpas_interest.interest, 0), 0) as balance,
                    IFNULL(bpas_payments.count, 0) as count,
                    installments.status")
                ->from('installments')
                ->join('sales', 'sales.id=installments.sale_id', 'left')
                ->join('companies','companies.id=installments.customer_id','left')
                ->join('projects','projects.project_id=installments.project_id','left')
                ->join('(SELECT 
                            installment_id,
                            SUM(amount) as paid,
                            SUM(interest_paid) as interest_paid,
                            COUNT(id) as count
                        FROM bpas_payments
                        GROUP BY installment_id) AS bpas_payments','bpas_payments.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            IFNULL(sum(payment),0) AS payment,
                            IFNULL(sum(interest),0) AS interest,
                            IFNULL(sum(principal),0) AS principal
                        FROM
                            bpas_installment_items
                        GROUP BY installment_id) as bpas_installment_items', 'bpas_installment_items.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            SUM(interest) as interest
                        FROM bpas_installment_items WHERE status = "pending"
                        GROUP BY installment_id) AS bpas_interest','bpas_interest.installment_id=installments.id', 'left')
                ->group_by('installments.id');
                
            if($sale_reference_no){
                $this->db->like("sales.reference_no", $sale_reference_no);
            }
            if($reference_no){
                $this->db->like("installments.reference_no", $reference_no);
            }
            if($biller){
                $this->db->where("installments.biller_id", $biller);
            }
            if($customer){
                $this->db->where("installments.customer_id", $customer);
            }
            if($project){
                $this->db->where("installments.project_id", $project);
            }
            if($warehouse){
                $this->db->where("installments.warehouse_id", $warehouse);
            }
            if ($user) {
                $this->db->where('installments.created_by', $user);
            }
            if ($status) {
                $this->db->where('installments.status', $status);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('installments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('installments').'.created_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('installments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('sale_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('biller'));
                
                if($this->Settings->project==1){
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('project'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('customer'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('phone'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('description'));
                    $this->excel->getActiveSheet()->SetCellValue('I1', lang('amount'));
                    $this->excel->getActiveSheet()->SetCellValue('J1', lang('deposit'));
                    $this->excel->getActiveSheet()->SetCellValue('K1', lang('principal'));
                    $this->excel->getActiveSheet()->SetCellValue('L1', lang('interest'));
                    $this->excel->getActiveSheet()->SetCellValue('M1', lang('payment'));
                    $this->excel->getActiveSheet()->SetCellValue('N1', lang('paid'));
                    $this->excel->getActiveSheet()->SetCellValue('O1', lang('balance'));
                    $this->excel->getActiveSheet()->SetCellValue('P1', lang('count'));
                    $this->excel->getActiveSheet()->SetCellValue('Q1', lang('status'));
                }else{
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('phone'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('description'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('amount'));
                    $this->excel->getActiveSheet()->SetCellValue('I1', lang('deposit'));
                    $this->excel->getActiveSheet()->SetCellValue('J1', lang('principal'));
                    $this->excel->getActiveSheet()->SetCellValue('K1', lang('interest'));
                    $this->excel->getActiveSheet()->SetCellValue('L1', lang('payment'));
                    $this->excel->getActiveSheet()->SetCellValue('M1', lang('paid'));
                    $this->excel->getActiveSheet()->SetCellValue('N1', lang('balance'));
                    $this->excel->getActiveSheet()->SetCellValue('O1', lang('count'));
                    $this->excel->getActiveSheet()->SetCellValue('P1', lang('status'));
                }

                $row = 2;
                $total = 0;
                $discount = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->created_date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    if($this->Settings->project==1){
                        
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->project);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->phone);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->description);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->installment_amount));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->deposit));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->principal));
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->formatDecimal($data_row->interest));
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($data_row->payment));
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->formatDecimal($data_row->paid));
                        $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->bpas->formatDecimal($data_row->balance));
                        $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->count);
                        $this->excel->getActiveSheet()->SetCellValue('Q' . $row, lang($data_row->status));
                        
                    }else{
                        
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->phone);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->description);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->installment_amount));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->deposit));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->principal));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->interest));
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->formatDecimal($data_row->payment));
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($data_row->paid));
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->formatDecimal($data_row->balance));
                        $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->count);
                        $this->excel->getActiveSheet()->SetCellValue('P' . $row, lang($data_row->status));
                    }
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(10);
                $filename = 'installments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                    installments.id as id,
                    installments.created_date,
                    sales.reference_no as sale_ref,
                    installments.reference_no,
                    projects.project_name as project,
                    installments.customer,
                    companies.phone,
                    CONCAT('<small>',installments.description,'</small>') as description,
                    installments.installment_amount,
                    installments.deposit,
                    bpas_installment_items.principal,
                    bpas_installment_items.interest,
                    bpas_installment_items.payment,
                    IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0) as paid,
                    IFNULL(bpas_installment_items.payment,0) - (IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0)) - IF(bpas_installments.status='payoff', IFNULL(bpas_interest.interest, 0), 0) as balance,
                    IFNULL(bpas_payments.count, 0) as count,
                    installments.status")
                ->from('installments')
                ->join('sales', 'sales.id=installments.sale_id', 'left')
                ->join('companies','companies.id=installments.customer_id','left')
                ->join('warehouses','warehouses.id=installments.warehouse_id','left')
                ->join('projects','projects.project_id=installments.project_id','left')
                ->join('(SELECT 
                            installment_id,
                            SUM(amount) as paid,
                            SUM(interest_paid) as interest_paid,
                            COUNT(id) as count
                        FROM bpas_payments
                        GROUP BY installment_id) AS bpas_payments','bpas_payments.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            IFNULL(sum(payment),0) AS payment,
                            IFNULL(sum(interest),0) AS interest,
                            IFNULL(sum(principal),0) AS principal
                        FROM
                            bpas_installment_items
                        GROUP BY installment_id) as bpas_installment_items', 'bpas_installment_items.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            SUM(interest) as interest
                        FROM bpas_installment_items WHERE status = "pending"
                        GROUP BY installment_id) AS bpas_interest','bpas_interest.installment_id=installments.id', 'left')
                ->group_by('installments.id');
            
            if($sale_reference_no){
                $this->datatables->like("sales.reference_no", $sale_reference_no);
            }
            if($reference_no){
                $this->datatables->like("installments.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("installments.biller_id", $biller);
            }
            if($customer){
                $this->datatables->where("installments.customer_id", $customer);
            }
            if($project){
                $this->datatables->where("installments.project_id", $project);
            }
            if($warehouse){
                $this->datatables->where("installments.warehouse_id", $warehouse);
            }
            if ($user) {
                $this->datatables->where('installments.created_by', $user);
            }
            if ($status) {
                $this->datatables->where('installments.status', $status);
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('installments').'.created_date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('installments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
                 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
    
    public function schdules_report(){
        $this->bpas->checkPermissions('installment_payments');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getWarehouses();
        if($this->config->item('schools')){
            $this->data['grades'] = $this->reports_model->getGrades();
        }
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('schdules_report')));
        $meta = array('page_title' => lang('schdules_report'), 'bc' => $bc);
        $this->page_construct('reports/schdules_report', $meta, $this->data);
    }
    
    public function monthly_installment_payment(){
        $this->bpas->checkPermissions('installment_payments');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('monthly_installment_payment')));
        $meta = array('page_title' => lang('monthly_installment_payment'), 'bc' => $bc);
        $this->page_construct('reports/monthly_installment_payment', $meta, $this->data);
    }
    
    public function installment_payments()
    {
        $this->bpas->checkPermissions('installment_payments');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('installment_payments')));
        $meta = array('page_title' => lang('installment_payments'), 'bc' => $bc);
        $this->page_construct('reports/installment_payments', $meta, $this->data);
    }
    
    public function getInstallmentPaymentsReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('installment_payments', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $payment_ref = $this->input->get('payment_ref') ? $this->input->get('payment_ref') : NULL;
        $sale_ref = $this->input->get('sale_ref') ? $this->input->get('sale_ref') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($xls) {

            $this->db
                ->select("
                    payments.date,
                    payments.reference_no as payment_ref,
                    sales.reference_no as sale_ref,
                    installments.reference_no as reference_no,
                    installments.customer,
                    CONCAT(last_name,' ', first_name) as created_by,
                    IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
                    payments.amount,
                    IFNULL(bpas_payments.interest_paid, 0) as interest_paid,
                    IFNULL(bpas_payments.amount + bpas_payments.interest_paid, 0) as payment_paid,
                    IFNULL(bpas_payments.penalty_paid,0) as  penalty_paid,
                    payments.type,
                    payments.id as id,
                ")
                ->from("payments")
                ->join("sales","payments.sale_id=sales.id","left")
                ->join("installments","payments.installment_id=installments.id","left")
                ->join("users","payments.created_by=users.id","left")
                ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->where('installments.id >', 0);
            
            if($payment_ref){
                $this->db->like("payments.reference_no", $payment_ref);
            }
            if($sale_ref){
                $this->db->like("sales.reference_no", $sale_ref);
            }
            if($reference_no){
                $this->db->like("installments.reference_no", $reference_no);
            }
            if($biller){
                $this->db->where("installments.biller_id", $biller);
            }
            if($warehouse){
                $this->db->like("installments.warehouse_id", $warehouse);
            }
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('installments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('installment_payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('payment_ref'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('sale_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('principal_paid'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('interest_paid'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('payment_paid'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('penalty_paid'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('type'));
                $row = 2;
                $principal_paid = 0;
                $interest_paid = 0;
                $payment_paid = 0;
                $penalty_paid = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->payment_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid_by);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->amount));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->interest_paid));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->payment_paid));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->penalty_paid));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, ucfirst($data_row->type));
                    
                    $principal_paid += $this->bpas->formatDecimal($data_row->principal_paid);
                    $interest_paid += $this->bpas->formatDecimal($data_row->interest_paid);
                    $payment_paid += $this->bpas->formatDecimal($data_row->payment_paid);
                    $penalty_paid += $this->bpas->formatDecimal($data_row->penalty_paid);
                    $row++;
                }
                
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($principal_paid));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($interest_paid));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($payment_paid));
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($penalty_paid));
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $filename = 'installment_payments_report_'.date("Y_m_d_H_i_s");
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                    payments.date,
                    payments.reference_no as payment_ref,
                    sales.reference_no as sale_ref,
                    installments.reference_no as reference_no,
                    companies.code as customer_code,
                    installments.customer,
                    CONCAT(last_name,' ', first_name) as created_by,
                    IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
                    payments.amount,
                    IFNULL(bpas_payments.interest_paid, 0) as interest_paid,
                    IFNULL(bpas_payments.amount + bpas_payments.interest_paid, 0) as payment_paid,
                    IFNULL(bpas_payments.penalty_paid,0) as  penalty_paid,
                    payments.type,
                    payments.id as id,
                ")
                ->from("payments")
                ->join("sales","payments.sale_id=sales.id","left")
                ->join("installments","payments.installment_id=installments.id","left")
                ->join("users","payments.created_by=users.id","left")
                ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                ->join("companies","companies.id = installments.customer_id","left")
                ->where('installments.id >', 0);
            
            if($payment_ref){
                $this->datatables->like("payments.reference_no", $payment_ref);
            }
            if($sale_ref){
                $this->datatables->like("sales.reference_no", $sale_ref);
            }
            if($reference_no){
                $this->datatables->like("installments.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("installments.biller_id", $biller);
            }
            if($warehouse){
                $this->datatables->like("installments.warehouse_id", $warehouse);
            }
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('installments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('payments').'.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }
    public function installment_payment_customers()
    {
        $this->bpas->checkPermissions("installment_payments");
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $Settings = $this->site->getSettings();
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['salemans'] = $this->site->getAllSalemans($Settings->group_saleman_id);//$this->site->getSalemans();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('installment_payment_customers_report')));
        $meta = array('page_title' => lang('installment_payment_customers_report'), 'bc' => $bc);
        $this->page_construct('reports/installment_payment_customers', $meta, $this->data);
    }
    
    public function getInstallmentPaymentCustomers($pdf = NULL, $xls = NULL)
    {
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $status = $this->input->get('status') ? $this->input->get('status') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        
        if ($xls) {
            $sql = '';
            if ($start_date) {
                $sql .= ' AND date >= "' . $start_date . '"';
            }
            if ($end_date) {
                $sql .= ' AND date <= "' . $end_date . '"';
            }
            $this->db
                ->select("
                    installments.id as id,
                    installments.customer,
                    installments.reference_no,
                    installments.description as product,
                    installments.price,
                    sales.total_discount as discount,
                    sales.grand_total as amount,
                    installments.deposit,
                    IFNULL(bpas_installment_items.principal,0) as principal,
                    IFNULL(bpas_installment_items.interest,0) as interest,
                    IFNULL(bpas_installment_items.payment,0) as payment,
                    (IFNULL(bpas_installment_payments.paid, 0) + IFNULL(bpas_installment_payments.interest_paid, 0)) - IFNULL(return_paid,0) as paid,
                    IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0) as total_paid,
                    IFNULL(bpas_installment_items.payment,0) - (IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0)) - IF(bpas_installments.status='payoff', IFNULL(bpas_interest.interest, 0), 0) as total_balance,
                    ((IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0)) * 100) / IFNULL(bpas_installment_items.payment,0) as total_percent_paid,
                    installments.status")
                ->from('installments')
                ->join('sales', 'sales.id=installments.sale_id', 'left')
                ->join('(SELECT
                        sum(abs(grand_total)) AS total_return,
                        sum(abs(paid)) AS return_paid,
                        sale_id
                    FROM
                        bpas_sales
                    WHERE sale_status = "returned"
                    GROUP BY
                        sale_id) as bpas_returns', 'bpas_returns.sale_id=sales.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            SUM(amount) as paid,
                            SUM(interest_paid) as interest_paid
                        FROM bpas_payments
                        GROUP BY installment_id) AS bpas_payments','bpas_payments.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            IFNULL(sum(payment),0) AS payment,
                            IFNULL(sum(interest),0) AS interest,
                            IFNULL(sum(principal),0) AS principal
                        FROM
                            bpas_installment_items
                        GROUP BY installment_id) as bpas_installment_items', 'bpas_installment_items.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            SUM(interest) as interest
                        FROM bpas_installment_items WHERE status = "pending"
                        GROUP BY installment_id) AS bpas_interest','bpas_interest.installment_id=installments.id', 'left')
                ->join('(SELECT 
                                sale_id,
                                SUM(amount) as paid,
                                SUM(interest_paid) as interest_paid
                            FROM bpas_payments WHERE 1=1 '.$sql.'
                            GROUP BY sale_id) AS bpas_installment_payments','bpas_installment_payments.sale_id=installments.sale_id', 'left')
                ->where('ROUND((IFNULL(bpas_installment_payments.paid, 0) + IFNULL(bpas_installment_payments.interest_paid, 0)) - IFNULL(return_paid,0),'.$this->Settings->decimals.') >', 0);
            
            if($reference_no){
                $this->db->like("installments.reference_no", $reference_no);
            }
            if($biller){
                $this->db->where("installments.biller_id", $biller);
            }
            if($customer){
                $this->db->where("installments.customer_id", $customer);
            }
            if($project){
                $this->db->where("installments.project_id", $project);
            }
            if($warehouse){
                $this->db->where("installments.warehouse_id", $warehouse);
            }
            if ($user) {
                $this->db->where('installments.created_by', $user);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('installments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->mergeCells('A1:A2');
                $this->excel->getActiveSheet()->mergeCells('B1:B2');
                $this->excel->getActiveSheet()->mergeCells('C1:C2');
                $this->excel->getActiveSheet()->mergeCells('D1:D2');
                $this->excel->getActiveSheet()->mergeCells('E1:E2');
                $this->excel->getActiveSheet()->mergeCells('F1:F2');
                $this->excel->getActiveSheet()->mergeCells('G1:G2');
                $this->excel->getActiveSheet()->mergeCells('K1:K2');
                $this->excel->getActiveSheet()->mergeCells('H1:J1');
                $this->excel->getActiveSheet()->mergeCells('L1:N1');
                $this->excel->getActiveSheet()->mergeCells('O1:O2');
                $this->excel->getActiveSheet()->setTitle(lang('installment_payment_customer'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('name'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('discount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('deposit'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('installment'));
                $this->excel->getActiveSheet()->SetCellValue('H2', lang('principal'));
                $this->excel->getActiveSheet()->SetCellValue('I2', lang('interest'));
                $this->excel->getActiveSheet()->SetCellValue('J2', lang('payment'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('L2', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('M2', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('N2', lang('percent_paid'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('status'));
                $this->excel->getActiveSheet()->getStyle('A1:O1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('A2:O2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                $row = 3;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->product);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->formatDecimal($data_row->price));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($data_row->discount));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->deposit));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->principal));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->interest));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->payment));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->paid));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->formatDecimal($data_row->total_paid));
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($data_row->total_balance));
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->formatDecimal($data_row->total_percent_paid));
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->status);
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(10);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(10);

                $filename = 'installment_payment_customer_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $sql = '';
            if ($start_date) {
                $sql .= ' AND date >= "' . $start_date . '"';
            }
            if ($end_date) {
                $sql .= ' AND date <= "' . $end_date . '"';
            }
            $this->datatables
                ->select("
                    installments.id as id,
                    installments.customer,
                    installments.reference_no,
                    installments.description as product,
                    installments.price,
                    sales.total_discount as discount,
                    sales.grand_total,
                    installments.deposit,
                    IFNULL(bpas_installment_items.principal,0) as principal,
                    IFNULL(bpas_installment_items.interest,0) as interest,
                    IFNULL(bpas_installment_items.payment,0) as payment,
                    (IFNULL(bpas_installment_payments.paid, 0) + IFNULL(bpas_installment_payments.interest_paid, 0)) - IFNULL(return_paid,0) as paid,
                    IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0) as total_paid,
                    IFNULL(bpas_installment_items.payment,0) - (IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0)) - IF(bpas_installments.status='payoff', IFNULL(bpas_interest.interest, 0), 0) as total_balance,
                    ((IFNULL(bpas_payments.paid, 0) + IFNULL(bpas_payments.interest_paid, 0)) * 100) / IFNULL(bpas_installment_items.payment,0) as total_percent_paid,
                    installments.status")
                ->from('installments')
                ->join('sales', 'sales.id=installments.sale_id', 'left')
                ->join('(SELECT
                        sum(abs(grand_total)) AS total_return,
                        sum(abs(paid)) AS return_paid,
                        sale_id
                    FROM
                        bpas_sales
                    WHERE sale_status = "returned"
                    GROUP BY
                        sale_id) as bpas_returns', 'bpas_returns.sale_id=sales.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            SUM(amount) as paid,
                            SUM(interest_paid) as interest_paid
                        FROM bpas_payments
                        GROUP BY installment_id) AS bpas_payments','bpas_payments.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            IFNULL(sum(payment),0) AS payment,
                            IFNULL(sum(interest),0) AS interest,
                            IFNULL(sum(principal),0) AS principal
                        FROM
                            bpas_installment_items
                        GROUP BY installment_id) as bpas_installment_items', 'bpas_installment_items.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_id,
                            SUM(interest) as interest
                        FROM bpas_installment_items WHERE status = "pending"
                        GROUP BY installment_id) AS bpas_interest','bpas_interest.installment_id=installments.id', 'left')
                ->join('(SELECT 
                                sale_id,
                                SUM(amount) as paid,
                                SUM(interest_paid) as interest_paid
                            FROM bpas_payments WHERE 1=1 '.$sql.'
                            GROUP BY sale_id) AS bpas_installment_payments','bpas_installment_payments.sale_id=installments.sale_id', 'left')
                ->where('ROUND((IFNULL(bpas_installment_payments.paid, 0) + IFNULL(bpas_installment_payments.interest_paid, 0)) - IFNULL(return_paid,0),'.$this->Settings->decimals.') >', 0);
            
            if($reference_no){
                $this->datatables->like("installments.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("installments.biller_id", $biller);
            }
            if($customer){
                $this->datatables->where("installments.customer_id", $customer);
            }
            if($project){
                $this->datatables->where("installments.project_id", $project);
            }
            if($warehouse){
                $this->datatables->where("installments.warehouse_id", $warehouse);
            }
            if ($user) {
                $this->datatables->where('installments.created_by', $user);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('installments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
                 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
    public function installment_missed_repayments()
    {
        $this->bpas->checkPermissions("installment_payments");
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('installment_missed_repayments_report')));
        $meta = array('page_title' => lang('installment_missed_repayments_report'), 'bc' => $bc);
        $this->page_construct('reports/installment_missed_repayments', $meta, $this->data);
    }
    
    public function getMissedRepayments($pdf = NULL, $xls = NULL)
    {       
        $this->bpas->checkPermissions("installment_payments");
        $installment_alert_days = ($this->Settings->installment_alert_days ? $this->Settings->installment_alert_days : 0);
        $installment_late_days  = ($this->Settings->installment_late_days ? ($this->Settings->installment_late_days -1) : 0);
        $user         = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer     = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller       = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project      = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if ($xls) {
            $this->db->select("
                    installment_items.period,
                    installment_items.deadline,
                    installments.reference_no as reference_no,
                    installments.customer,
                    installment_items.payment,
                    installment_items.interest, 
                    installment_items.principal, 
                    installment_items.balance,
                    IFNULL(bpas_payments.amount,0) + IFNULL(bpas_payments.interest_paid,0) as payment_paid,
                    IFNULL(bpas_payments.interest_paid,0) as interest_paid,
                    IFNULL(bpas_payments.amount,0) as principal_paid,
                    IFNULL(bpas_payments.penalty_paid,0) as penalty_paid,
                    bpas_payments.date,
                    DATEDIFF(SYSDATE(), DATE_ADD({$this->db->dbprefix('installment_items')}.deadline, INTERVAL {$installment_late_days} DAY)) AS overdue,
                    installment_items.status")
                ->from('installment_items')
                ->join('installments', 'installment_items.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_item_id,
                            MAX(reference_no) as reference_no,
                            MAX(date) as date,
                            SUM(amount) as amount,
                            SUM(interest_paid) as interest_paid,
                            SUM(penalty_paid) as penalty_paid
                                FROM bpas_payments
                            GROUP BY installment_item_id
                            ) as bpas_payments', 'bpas_payments.installment_item_id=installment_items.id', 'left');
            if($reference_no){
                $this->db->like("installments.reference_no", $reference_no);
            }
            if($biller){
                $this->db->where("installments.biller_id", $biller);
            }
            if($project){
                $this->db->where("installments.project_id", $project);
            }
            if($warehouse){
                $this->db->like("installments.warehouse_id", $warehouse);
            }
            if($customer){
                $this->db->like("installments.customer_id", $customer);
            }
            if ($user) {
                $this->db->where('installments.created_by', $user);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('installments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if ($start_date) {
                $this->db->where('deadline >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('deadline <=', $end_date);
            }
            if(!$reference_no && !$biller && !$warehouse && !$user && !$start_date && !$end_date){
                $this->db->where('DATE_SUB(bpas_installment_items.`deadline`, INTERVAL '.$installment_alert_days.' DAY) <=', date("Y-m-d"));
                $this->db->where('installment_items.status !=','paid');
                $this->db->where('installment_items.status !=','payoff');
                $this->db->where('installments.status !=','payoff');
                $this->db->where('installments.status !=','completed');
                $this->db->where('installments.status !=','inactive');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('installments_missed_repayments'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('period'));
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('deadline'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('payment'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('interest'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('principal'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('balance'));
                    $this->excel->getActiveSheet()->SetCellValue('I1', lang('payment_paid'));
                    $this->excel->getActiveSheet()->SetCellValue('J1', lang('interest_paid'));
                    $this->excel->getActiveSheet()->SetCellValue('K1', lang('principal_paid'));
                    $this->excel->getActiveSheet()->SetCellValue('L1', lang('penalty_paid'));
                    $this->excel->getActiveSheet()->SetCellValue('M1', lang('payment_date'));
                    $this->excel->getActiveSheet()->SetCellValue('N1', lang('overdue'));
                    $this->excel->getActiveSheet()->SetCellValue('O1', lang('status'));
                    $row = 2;
                    foreach ($data as $data_row){
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->period);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrsd($data_row->deadline));
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->payment);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->interest);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->principal);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->balance);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->payment_paid);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->interest_paid);
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->principal_paid);
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->penalty_paid);
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->hrsd($data_row->date));
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->overdue);
                        $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->status);
                        $row++;
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(18);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $filename = 'installments_missed_repayments_' . date('Y_m_d_H_i_s');
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
                $this->session->set_flashdata('error', lang('nothing_found'));
                redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
                    installment_items.id as id,
                    installment_items.period,
                    installment_items.deadline,
                    installments.reference_no as reference_no,
                    installments.customer,
                    installment_items.payment,
                    installment_items.interest, 
                    installment_items.principal,
                    installment_items.balance,
                    IFNULL(bpas_payments.amount,0) + IFNULL(bpas_payments.interest_paid,0) as payment_paid,
                    IFNULL(bpas_payments.interest_paid,0) as interest_paid,
                    IFNULL(bpas_payments.amount,0) as principal_paid,
                    IFNULL(bpas_payments.penalty_paid,0) as penalty_paid,
                    bpas_payments.date,
                    DATEDIFF(SYSDATE(), DATE_ADD({$this->db->dbprefix('installment_items')}.deadline, INTERVAL {$installment_late_days} DAY)) AS overdue,
                    installment_items.status")
                ->from('installment_items')
                ->join('installments', 'installment_items.installment_id=installments.id', 'left')
                ->join('(SELECT 
                            installment_item_id,
                            MAX(reference_no) as reference_no,
                            MAX(date) as date,
                            SUM(amount) as amount,
                            SUM(interest_paid) as interest_paid,
                            SUM(penalty_paid) as penalty_paid
                                FROM bpas_payments
                            GROUP BY installment_item_id
                            ) as bpas_payments', 'bpas_payments.installment_item_id=installment_items.id', 'left');
            if ($reference_no) {
                $this->datatables->like("installments.reference_no", $reference_no);
            }
            if ($biller) {
                $this->datatables->where("installments.biller_id", $biller);
            }
            if ($project) {
                $this->datatables->where("installments.project_id", $project);
            }
            if ($warehouse) {
                $this->datatables->like("installments.warehouse_id", $warehouse);
            }
            if ($customer) {
                $this->datatables->like("installments.customer_id", $customer);
            }
            if ($user) {
                $this->datatables->where('installments.created_by', $user);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('installments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if ($start_date) {
                $this->datatables->where('deadline >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('deadline <=', $end_date);
            }
            if(!$reference_no && !$biller && !$warehouse && !$user && !$start_date && !$end_date){
                $this->datatables->where('DATE_SUB(bpas_installment_items.`deadline`, INTERVAL '.$installment_alert_days.' DAY) <=', date("Y-m-d"));
                $this->datatables->where('installment_items.status !=','paid');
                $this->datatables->where('installment_items.status !=','payoff');
                $this->datatables->where('installments.status !=','payoff');
                $this->datatables->where('installments.status !=','completed');
                $this->datatables->where('installments.status !=','inactive');
            }
            $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }

    public function audit_trail_view($id = false)
    {
        $row = $this->reports_model->getAuditTrailByID($id);
        $this->data['row'] = $row;
        $this->data['user'] = $this->site->getUser($row->user_id);
        $this->load->view($this->theme . 'reports/audit_trail_view', $this->data);
    }
    
    public function getAuditTrails($id = false)
    {       
        $this->load->library('datatables');         
        $this->datatables->select("
                            concat(bpas_users.last_name,' ',bpas_users.first_name) as username, 
                            event, 
                            table_name, 
                            old_values, 
                            new_values, 
                            url, 
                            created_at,
                            user_audit_trails.id")
        ->from("user_audit_trails")
        ->join("users","users.id = user_audit_trails.user_id","left");
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $this->datatables->where('user_audit_trails.user_id', $this->session->userdata('user_id'));
        } 
        echo $this->datatables->generate();
    }
    function balance_sheet_by_month()
    {
        $this->bpas->checkPermissions('balance_sheet');
        $this->data['balance_sheets'] = array('AS','LI','EQ');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('accountings'), 'page' => lang('accounting')), array('link' => '#', 'page' => lang('balance_sheet_by_month')));
        $meta = array('page_title' => lang('balance_sheet_by_month'), 'bc' => $bc);
        $this->page_construct('accounts/balance_sheet_by_month', $meta, $this->data);
    }
    
    function balance_sheet_with_last_month()
    {
        $this->bpas->checkPermissions('balance_sheet');
        $this->data['balance_sheets'] = array('AS','LI','EQ');
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('accountings'), 'page' => lang('accounting')), array('link' => '#', 'page' => lang('balance_sheet_with_last_month')));
        $meta = array('page_title' => lang('balance_sheet_with_last_month'), 'bc' => $bc);
        $this->page_construct('accounts/balance_sheet_with_last_month', $meta, $this->data);
    }

    public function products_expiry($warehouse_id = null)
    {
        $this->bpas->checkPermissions('expiry_alerts');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses']   = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse']    = $warehouse_id ? $this->site->getMultiWarehouseByID($warehouse_id) : null;
        } else {
            $user                       = $this->site->getUser();
            $this->data['warehouses']   = $user->warehouse_id ? $this->site->getMultiWarehouseByID($user->warehouse_id) : null;
            $this->data['warehouse_id'] = $warehouse_id;
            $this->data['warehouse']    = $user->warehouse_id ? $this->site->getMultiWarehouseByID($user->warehouse_id) : null;
        }
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_expiry_report')]];
        $meta = ['page_title' => lang('products_expiry_report'), 'bc' => $bc];
        $this->page_construct('reports/products_expiry', $meta, $this->data);
    }

    public function getProductsExpiry($pdf = null, $xls = null, $preview = null)
    {
        $this->bpas->checkPermissions('products', true);
        $dataTable_filter = $this->input->post('sSearch') ? $this->input->post('sSearch') : null;
        $dataTable_filter_col_1 = $this->input->post('sSearch_0') ? $this->input->post('sSearch_0') : null;
        $dataTable_filter_col_2 = $this->input->post('sSearch_1') ? $this->input->post('sSearch_1') : null;

        $product     = $this->input->get('product') ? $this->input->get('product') : null;
        $category    = $this->input->get('category') ? $this->input->get('category') : null;
        $brand       = $this->input->get('brand') ? $this->input->get('brand') : null;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : null;
        $warehouse   = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $cf1         = $this->input->get('cf1') ? $this->input->get('cf1') : null;
        $cf2         = $this->input->get('cf2') ? $this->input->get('cf2') : null;
        $cf3         = $this->input->get('cf3') ? $this->input->get('cf3') : null;
        $cf4         = $this->input->get('cf4') ? $this->input->get('cf4') : null;
        $cf5         = $this->input->get('cf5') ? $this->input->get('cf5') : null;
        $cf6         = $this->input->get('cf6') ? $this->input->get('cf6') : null;
        $start_date  = $this->input->get('start_date') ? $this->input->get('start_date') : date('d-m-Y') . " 00:00:00";
        $end_date    = $this->input->get('end_date') ? $this->input->get('end_date') : date('d-m-Y') . " 23:59:59";

        $pp  = "( SELECT product_id, pi.expiry, SUM(CASE WHEN pi.purchase_id IS NOT NULL THEN quantity ELSE 0 END) as purchasedQty, SUM(quantity_balance) as balacneQty, SUM( unit_cost * quantity_balance ) balacneValue, SUM( (CASE WHEN pi.purchase_id IS NOT NULL THEN (pi.subtotal) ELSE 0 END) ) totalPurchase from {$this->db->dbprefix('purchase_items')} pi LEFT JOIN {$this->db->dbprefix('purchases')} p on p.id = pi.purchase_id WHERE pi.status = 'received' ";
        $ending_purchases = $pp;
        $sp  =          '( SELECT si.product_id, si.expiry, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, SUM( si.item_discount ) totalItemDiscount, SUM( si.total_weight ) totalWeight, s.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s LEFT JOIN ' . $this->db->dbprefix('sale_items') . ' si on s.id = si.sale_id  WHERE s.sale_status != "returned" AND s.sale_status != "pending" ';
        
        $ending_sales = '( SELECT si.product_id, si.expiry, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale, SUM( si.item_discount ) totalItemDiscount, SUM( si.total_weight ) totalWeight, s.order_discount as order_discount from ' . $this->db->dbprefix('sales') . ' s LEFT JOIN ' . $this->db->dbprefix('sale_items') . ' si on s.id = si.sale_id WHERE s.sale_status != "pending" ';
        $pr1 = '( SELECT si_return.product_id, si_return.expiry, SUM( si_return.quantity ) soldQty_return, SUM( si_return.subtotal ) totalSale_return from ' . $this->db->dbprefix('sales') . ' ss LEFT JOIN ' . $this->db->dbprefix('sale_items') . ' si_return on ss.id = si_return.sale_id WHERE ss.sale_status = "returned" ';
        $pr2 = "( SELECT product_id, sri.expiry, SUM(sri.quantity) as returnQty, SUM(sri.subtotal) returnTotalSale from {$this->db->dbprefix('returns')} sr LEFT JOIN {$this->db->dbprefix('return_items')} sri on sr.id = sri.return_id";
        $ending_returns = $pr2;

        $transfers = "( SELECT product_id, pi.expiry, SUM(quantity) as transferQty, SUM(quantity_balance) as balacneQty, SUM(unit_cost * quantity_balance) balacneValue, SUM(pi.subtotal) totalTransfer from {$this->db->dbprefix('purchase_items')} pi LEFT JOIN {$this->db->dbprefix('transfers')} t on t.id = pi.transfer_id WHERE pi.status = 'received' ";
        $ending_transfers_in = $transfers_in = $transfers;
        $ending_transfers_out = $transfers_out = $transfers;
        $adjustments_add = " ( SELECT aji.product_id,aji.expiry, SUM(aji.quantity) adjustmentQty FROM {$this->db->dbprefix('adjustment_items')} aji LEFT JOIN {$this->db->dbprefix('adjustments')} aj ON aj.id = aji.adjustment_id WHERE aji.type = 'addition' ";
        $adjustments_sub = " ( SELECT aji.product_id,aji.expiry, SUM(aji.quantity) adjustmentQty FROM {$this->db->dbprefix('adjustment_items')} aji LEFT JOIN {$this->db->dbprefix('adjustments')} aj ON aj.id = aji.adjustment_id WHERE aji.type = 'subtraction' ";
        $ending_adjustments_add = $adjustments_add = $adjustments_add;
        $ending_adjustments_sub = $adjustments_sub = $adjustments_sub;

        if ($start_date || $warehouse) {
            $pr2 .= ' WHERE ';
            $ending_returns .= ' WHERE ';
            if ($start_date) {
                $start_date = $this->bpas->fld($start_date);
                $end_date   = $end_date ? $this->bpas->fld($end_date) : date('Y-m-d');

                $pp  .= " AND p.date >= '{$start_date}' AND p.date <= '{$end_date}' ";
                $ending_purchases  .= " AND p.date < '{$start_date}' ";

                $sp  .= " AND s.date >= '{$start_date}' AND s.date <= '{$end_date}' ";
                $ending_sales  .= " AND s.date < '{$start_date}' ";

                $pr1 .= " AND ss.date >= '{$start_date}' AND ss.date <= '{$end_date}' ";
                $pr2 .= " sr.date >= '{$start_date}' AND sr.date <= '{$end_date}' ";
                $ending_returns .= " sr.date < '{$start_date}' ";

                // $stock       .= " AND pi.date >= '{$start_date}' AND pi.date <= '{$end_date}' ";
                // $start_stock .= " AND pi.date < '{$start_date}' ";
                // $end_stock   .= " AND pi.date <= '{$end_date}' ";

                $transfers_in       .= " AND t.date >= '{$start_date}' AND t.date <= '{$end_date}' ";
                $ending_transfers_in .= " AND t.date < '{$start_date}' ";
                $transfers_out       .= " AND t.date >= '{$start_date}' AND t.date <= '{$end_date}' ";
                $ending_transfers_out .= " AND t.date < '{$start_date}' ";

                $adjustments_add .= " AND aj.date >= '{$start_date}' AND aj.date <= '{$end_date}' ";
                $ending_adjustments_add .= " AND aj.date < '{$start_date}' ";
                $adjustments_sub .= " AND aj.date >= '{$start_date}' AND aj.date <= '{$end_date}' ";
                $ending_adjustments_sub .= " AND aj.date < '{$start_date}' ";
            }
            if ($warehouse) {
                if($start_date){
                    $pr2 .= " AND ";
                    $ending_returns .= " AND ";
                }
                $pp  .= " AND pi.warehouse_id = '{$warehouse}' ";
                $ending_purchases  .= " AND pi.warehouse_id = '{$warehouse}' ";

                $sp  .= " AND si.warehouse_id = '{$warehouse}' ";
                $ending_sales  .= " AND si.warehouse_id = '{$warehouse}' ";

                $pr1 .= " AND si_return.warehouse_id = '{$warehouse}' ";
                $pr2 .= " sr.warehouse_id = '{$warehouse}' ";
                $ending_returns .= " sr.warehouse_id = '{$warehouse}' ";

                // $stock       .= " AND pi.warehouse_id = '{$warehouse}' ";
                // $start_stock .= " AND pi.warehouse_id = '{$warehouse}' ";
                // $end_stock   .= " AND pi.warehouse_id = '{$warehouse}' ";
                
                $transfers_in        .= " AND t.to_warehouse_id = '{$warehouse}' ";
                $ending_transfers_in .= " AND t.to_warehouse_id = '{$warehouse}' ";
                $transfers_out        .= " AND t.from_warehouse_id = '{$warehouse}' ";
                $ending_transfers_out .= " AND t.from_warehouse_id = '{$warehouse}' ";

                $adjustments_add     .= " AND aji.warehouse_id = '{$warehouse}' ";
                $ending_adjustments_add     .= " AND aji.warehouse_id = '{$warehouse}' ";
                $adjustments_sub     .= " AND aji.warehouse_id = '{$warehouse}' ";
                $ending_adjustments_sub     .= " AND aji.warehouse_id = '{$warehouse}' ";
            }
        }

        $pp  .= ' GROUP BY pi.expiry, pi.product_id ) PCosts';
        $ending_purchases  .= ' GROUP BY pi.expiry, pi.product_id ) Ending_Purchases';
        $sp  .= ' GROUP BY si.expiry, si.product_id ) PSales';
        $ending_sales  .= ' GROUP BY si.expiry, si.Product_id ) Ending_Sales';
        $pr1 .= ' GROUP BY si_return.expiry, si_return.product_id ) PSReturn';
        $pr2 .= ' GROUP BY sri.expiry, sri.product_id ) PReturn';
        $ending_returns .= ' GROUP BY sri.expiry, sri.product_id ) Ending_PReturn';

        $transfers_in       .= ' GROUP BY pi.expiry, pi.product_id ) Transfers_IN';
        $ending_transfers_in .= ' GROUP BY pi.expiry, pi.product_id ) Ending_Transfers_IN';
        $transfers_out       .= ' GROUP BY pi.expiry, pi.product_id ) Transfers_OUT';
        $ending_transfers_out .= ' GROUP BY pi.expiry, pi.product_id ) Ending_Transfers_OUT';
        $adjustments_add     .= ' GROUP BY aji.expiry, aji.product_id ) Adjustments_ADD';
        $ending_adjustments_add     .= ' GROUP BY aji.expiry, aji.product_id ) Ending_Adjustments_ADD';
        $adjustments_sub     .= ' GROUP BY aji.expiry, aji.product_id ) Adjustments_SUB';
        $ending_adjustments_sub     .= ' GROUP BY aji.expiry, aji.product_id ) Ending_Adjustments_SUB';

        $vrn = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="New" GROUP BY product_id) NVariant';
        $vro = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="Old" GROUP BY product_id) OVariant';
        $vrb = '( SELECT id, product_id, name, SUM(quantity) as sQty FROM '.$this->db->dbprefix('product_variants').' WHERE name="Broken" GROUP BY product_id) BVariant';

        if ($preview) {
            $this->db
                ->select($this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . ".name, 
                    COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) as BeginningQty,
                    COALESCE( PCosts.purchasedQty, 0 ) as PurchasedQty,
                    COALESCE( Transfers_IN.transferQty, 0 ) as TransferQtyIN,
                    COALESCE( Transfers_OUT.transferQty, 0 ) as TransferQtyOUT,
                    COALESCE( Adjustments_ADD.adjustmentQty, 0 ) as AdjustmentQtyADD,
                    COALESCE( Adjustments_SUB.adjustmentQty, 0 ) as AdjustmentQtySUB,
                    COALESCE( PSales.soldQty, 0 ) as SoldQty,
                    COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                    COALESCE( PSales.totalItemDiscount, 0 ) as discount,
                    (   
                        COALESCE( Ending_Purchases.purchasedQty, 0 ) - 
                        COALESCE( Ending_Sales.soldQty, 0 ) + 
                        COALESCE( Ending_PReturn.returnQty, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + 
                        COALESCE( Ending_Transfers_IN.transferQty, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) +
                        COALESCE( PCosts.purchasedQty, 0 ) +
                        COALESCE( Transfers_IN.transferQty, 0 ) -
                        COALESCE( Transfers_OUT.transferQty, 0 ) +
                        COALESCE( Adjustments_ADD.adjustmentQty, 0 ) -
                        COALESCE( Adjustments_SUB.adjustmentQty, 0 ) -
                        COALESCE( PSales.soldQty, 0 ) +
                        COALESCE( PReturn.returnQty, 0 ) + 
                        Abs(COALESCE( PSReturn.soldQty_return, 0 ))
                    ) as BalacneQty, purchase_items.expiry,
                    COALESCE( PSales.totalWeight, 0 ) as weight,
                    COALESCE(NVariant.sQty, 0) as qtyNewVar,
                    COALESCE(OVariant.sQty, 0) as qtyOldVar,
                    COALESCE(BVariant.sQty, 0) as qtyBrokenVar,
                    {$this->db->dbprefix('products')}.id as id", false)
                ->from('purchase_items')
                ->join('products', 'products.id = purchase_items.product_id', 'left')
                ->join($pp, 'purchase_items.product_id = PCosts.product_id AND (purchase_items.expiry <=> PCosts.expiry)', 'left')
                ->join($ending_purchases, 'purchase_items.product_id = Ending_Purchases.product_id AND (purchase_items.expiry <=> Ending_Purchases.expiry)', 'left')
                ->join($sp, 'purchase_items.product_id = PSales.product_id AND (purchase_items.expiry <=> PSales.expiry)', 'left')
                ->join($ending_sales, 'purchase_items.product_id = Ending_Sales.product_id AND (purchase_items.expiry <=> Ending_Sales.expiry)', 'left')
                ->join($transfers_in, 'purchase_items.product_id = Transfers_IN.product_id AND (purchase_items.expiry <=> Transfers_IN.expiry)', 'left')
                ->join($ending_transfers_in, 'purchase_items.product_id = Ending_Transfers_IN.product_id AND (purchase_items.expiry <=> Ending_Transfers_IN.expiry)', 'left')
                ->join($transfers_out, 'purchase_items.product_id = Transfers_OUT.product_id AND (purchase_items.expiry <=> Transfers_OUT.expiry)', 'left')
                ->join($ending_transfers_out, 'purchase_items.product_id = Ending_Transfers_OUT.product_id AND (purchase_items.expiry <=> Ending_Transfers_OUT.expiry)', 'left')
                ->join($adjustments_add, 'purchase_items.product_id = Adjustments_ADD.product_id AND (purchase_items.expiry <=> Adjustments_ADD.expiry)', 'left')
                ->join($ending_adjustments_add, 'purchase_items.product_id = Ending_Adjustments_ADD.product_id AND (purchase_items.expiry <=> Ending_Adjustments_ADD.expiry)', 'left')
                ->join($adjustments_sub, 'purchase_items.product_id = Adjustments_SUB.product_id AND (purchase_items.expiry <=> Adjustments_SUB.expiry)', 'left')
                ->join($ending_adjustments_sub, 'purchase_items.product_id = Ending_Adjustments_SUB.product_id AND (purchase_items.expiry <=> Ending_Adjustments_SUB.expiry)', 'left')
                ->join($pr1, 'purchase_items.product_id = PSReturn.product_id AND (purchase_items.expiry <=> PSReturn.expiry)', 'left')
                ->join($pr2, 'purchase_items.product_id = PReturn.product_id AND (purchase_items.expiry <=> PReturn.expiry)', 'left')
                ->join($ending_returns, 'purchase_items.product_id = Ending_PReturn.product_id AND (purchase_items.expiry <=> Ending_PReturn.expiry)', 'left')
                ->join($vrn, 'purchase_items.product_id = NVariant.product_id', 'left')
                ->join($vro, 'purchase_items.product_id = OVariant.product_id', 'left')
                ->join($vrb, 'purchase_items.product_id = BVariant.product_id', 'left')
                ->order_by('purchase_items.product_code', 'ASC')
                ->order_by('purchase_items.expiry', 'ASC');
                $this->db->where($this->db->dbprefix('products') . '.type', 'standard');
                $this->db->group_by('purchase_items.product_id, purchase_items.expiry');

            if($product || $cf1 || $cf2 || $cf3 || $cf4 || $cf5 || $cf6 || $category || $subcategory || $brand){
                if ($product) {
                    $this->db->where($this->db->dbprefix('products') . '.id', $product);
                }
                if ($cf1) {
                    $this->db->where($this->db->dbprefix('products') . '.cf1', $cf1);
                }
                if ($cf2) {
                    $this->db->where($this->db->dbprefix('products') . '.cf2', $cf2);
                }
                if ($cf3) {
                    $this->db->where($this->db->dbprefix('products') . '.cf3', $cf3);
                }
                if ($cf4) {
                    $this->db->where($this->db->dbprefix('products') . '.cf4', $cf4);
                }
                if ($cf5) {
                    $this->db->where($this->db->dbprefix('products') . '.cf5', $cf5);
                }
                if ($cf6) {
                    $this->db->where($this->db->dbprefix('products') . '.cf6', $cf6);
                }
                if ($category) {
                    $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
                }
                if ($subcategory) {
                    $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
                }
                if ($brand) {
                    $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
                }
            } else if (empty($dataTable_filter) && empty($dataTable_filter_col_1) && empty($dataTable_filter_col_2)){
                $this->db->where('PCosts.totalPurchase !=', 0);
                $this->db->or_where('PCosts.totalPurchase !=', null);
                $this->db->or_where('PSales.totalSale !=', 0);
                $this->db->or_where('PSales.totalSale !=', null);
                $this->db->or_where('PReturn.returnTotalSale !=', 0);
                $this->db->or_where('PReturn.returnTotalSale !=', null);
                $this->db->or_where('PSReturn.totalSale_return !=', 0);
                $this->db->or_where('PSReturn.totalSale_return !=', null);
                $this->db->or_where('Transfers_IN.totalTransfer !=', 0);
                $this->db->or_where('Transfers_IN.totalTransfer !=', null);
                $this->db->or_where('Transfers_OUT.totalTransfer !=', 0);
                $this->db->or_where('Transfers_OUT.totalTransfer !=', null);
                $this->db->or_where('Adjustments_ADD.adjustmentQty !=', 0);
                $this->db->or_where('Adjustments_ADD.adjustmentQty !=', null);
                $this->db->or_where('Adjustments_SUB.adjustmentQty !=', 0);
                $this->db->or_where('Adjustments_SUB.adjustmentQty !=', null);
                // $this->db->or_where('(COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) !=', 0);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                $data = $q->result();
                $this->data['start_date'] = $start_date;
                $this->data['end_date'] = $end_date;
                $this->data['rows'] = $data;
                $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('products_expiry_report')]];
                $meta = ['page_title' => lang('products_expiry_report'), 'bc' => $bc];
                $this->page_construct('reports/products_expiry_preview', $meta, $this->data);
            }
        } elseif ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('products') . '.code, ' . $this->db->dbprefix('products') . '.name,
                    ' . $this->db->dbprefix('products') . '.serial_no,
                    ' . $this->db->dbprefix('products') . '.category_id,
                    COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) as BeginningQty,
                    COALESCE( PCosts.purchasedQty, 0 ) as PurchasedQty,
                    CONCAT(COALESCE( Transfers_IN.transferQty, 0 ), " (IN), ", COALESCE( Transfers_OUT.transferQty, 0 ), " (OUT)") as TransferQty,
                    CONCAT(COALESCE( Adjustments_ADD.adjustmentQty, 0 ), " (ADD), ", COALESCE( Adjustments_SUB.adjustmentQty, 0 ), " (SUB)") as AdjustmentQty,
                    COALESCE( PSales.soldQty, 0 ) as SoldQty,
                    COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                    (   
                        COALESCE( Ending_Purchases.purchasedQty, 0 ) - 
                        COALESCE( Ending_Sales.soldQty, 0 ) + 
                        COALESCE( Ending_PReturn.returnQty, 0 ) - 
                        COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + 
                        COALESCE( Ending_Transfers_IN.transferQty, 0 ) + 
                        COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - 
                        COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 ) +
                        COALESCE( PCosts.purchasedQty, 0 ) +
                        COALESCE( Transfers_IN.transferQty, 0 ) -
                        COALESCE( Transfers_OUT.transferQty, 0 ) +
                        COALESCE( Adjustments_ADD.adjustmentQty, 0 ) -
                        COALESCE( Adjustments_SUB.adjustmentQty, 0 ) -
                        COALESCE( PSales.soldQty, 0 ) +
                        COALESCE( PReturn.returnQty, 0 ) + 
                        Abs(COALESCE( PSReturn.soldQty_return, 0 ))
                    ) as BalacneQty, purchase_items.expiry,
                    COALESCE( PCosts.totalPurchase, 0 ) as TotalPurchase,
                    COALESCE( PSales.totalSale, 0 ) as TotalSales,
                    (COALESCE( PSales.totalSale, 0 ) - COALESCE( PCosts.totalPurchase, 0 )) as Profit,
                    COALESCE(NVariant.sQty, 0) as qtyNewVar,
                    COALESCE(OVariant.sQty, 0) as qtyOldVar,
                    COALESCE(BVariant.sQty, 0) as qtyBrokenVar,', false)
                ->from('purchase_items')
                ->join('products', 'products.id = purchase_items.product_id', 'left')
                ->join($pp, 'purchase_items.product_id = PCosts.product_id AND (purchase_items.expiry <=> PCosts.expiry)', 'left')
                ->join($ending_purchases, 'purchase_items.product_id = Ending_Purchases.product_id AND (purchase_items.expiry <=> Ending_Purchases.expiry)', 'left')
                ->join($sp, 'purchase_items.product_id = PSales.product_id AND (purchase_items.expiry <=> PSales.expiry)', 'left')
                ->join($ending_sales, 'purchase_items.product_id = Ending_Sales.product_id AND (purchase_items.expiry <=> Ending_Sales.expiry)', 'left')
                ->join($transfers_in, 'purchase_items.product_id = Transfers_IN.product_id AND (purchase_items.expiry <=> Transfers_IN.expiry)', 'left')
                ->join($ending_transfers_in, 'purchase_items.product_id = Ending_Transfers_IN.product_id AND (purchase_items.expiry <=> Ending_Transfers_IN.expiry)', 'left')
                ->join($transfers_out, 'purchase_items.product_id = Transfers_OUT.product_id AND (purchase_items.expiry <=> Transfers_OUT.expiry)', 'left')
                ->join($ending_transfers_out, 'purchase_items.product_id = Ending_Transfers_OUT.product_id AND (purchase_items.expiry <=> Ending_Transfers_OUT.expiry)', 'left')
                ->join($adjustments_add, 'purchase_items.product_id = Adjustments_ADD.product_id AND (purchase_items.expiry <=> Adjustments_ADD.expiry)', 'left')
                ->join($ending_adjustments_add, 'purchase_items.product_id = Ending_Adjustments_ADD.product_id AND (purchase_items.expiry <=> Ending_Adjustments_ADD.expiry)', 'left')
                ->join($adjustments_sub, 'purchase_items.product_id = Adjustments_SUB.product_id AND (purchase_items.expiry <=> Adjustments_SUB.expiry)', 'left')
                ->join($ending_adjustments_sub, 'purchase_items.product_id = Ending_Adjustments_SUB.product_id AND (purchase_items.expiry <=> Ending_Adjustments_SUB.expiry)', 'left')
                ->join($pr1, 'purchase_items.product_id = PSReturn.product_id AND (purchase_items.expiry <=> PSReturn.expiry)', 'left')
                ->join($pr2, 'purchase_items.product_id = PReturn.product_id AND (purchase_items.expiry <=> PReturn.expiry)', 'left')
                ->join($ending_returns, 'purchase_items.product_id = Ending_PReturn.product_id AND (purchase_items.expiry <=> Ending_PReturn.expiry)', 'left')
                ->join($vrn, 'purchase_items.product_id = NVariant.product_id', 'left')
                ->join($vro, 'purchase_items.product_id = OVariant.product_id', 'left')
                ->join($vrb, 'purchase_items.product_id = BVariant.product_id', 'left')
                ->order_by('purchase_items.product_code', 'ASC')
                ->order_by('purchase_items.expiry', 'ASC');
                $this->db->where($this->db->dbprefix('products') . '.type', 'standard');
                $this->db->group_by('purchase_items.product_id, purchase_items.expiry');

            if($product || $cf1 || $cf2 || $cf3 || $cf4 || $cf5 || $cf6 || $category || $subcategory || $brand){
                if ($product) {
                    $this->db->where($this->db->dbprefix('products') . '.id', $product);
                }
                if ($cf1) {
                    $this->db->where($this->db->dbprefix('products') . '.cf1', $cf1);
                }
                if ($cf2) {
                    $this->db->where($this->db->dbprefix('products') . '.cf2', $cf2);
                }
                if ($cf3) {
                    $this->db->where($this->db->dbprefix('products') . '.cf3', $cf3);
                }
                if ($cf4) {
                    $this->db->where($this->db->dbprefix('products') . '.cf4', $cf4);
                }
                if ($cf5) {
                    $this->db->where($this->db->dbprefix('products') . '.cf5', $cf5);
                }
                if ($cf6) {
                    $this->db->where($this->db->dbprefix('products') . '.cf6', $cf6);
                }
                if ($category) {
                    $this->db->where($this->db->dbprefix('products') . '.category_id', $category);
                }
                if ($subcategory) {
                    $this->db->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
                }
                if ($brand) {
                    $this->db->where($this->db->dbprefix('products') . '.brand', $brand);
                }
            } else if (empty($dataTable_filter) && empty($dataTable_filter_col_1) && empty($dataTable_filter_col_2)){
                $this->db->where('PCosts.totalPurchase !=', 0);
                $this->db->or_where('PCosts.totalPurchase !=', null);
                $this->db->or_where('PSales.totalSale !=', 0);
                $this->db->or_where('PSales.totalSale !=', null);
                $this->db->or_where('PReturn.returnTotalSale !=', 0);
                $this->db->or_where('PReturn.returnTotalSale !=', null);
                $this->db->or_where('PSReturn.totalSale_return !=', 0);
                $this->db->or_where('PSReturn.totalSale_return !=', null);
                $this->db->or_where('Transfers_IN.totalTransfer !=', 0);
                $this->db->or_where('Transfers_IN.totalTransfer !=', null);
                $this->db->or_where('Transfers_OUT.totalTransfer !=', 0);
                $this->db->or_where('Transfers_OUT.totalTransfer !=', null);
                $this->db->or_where('Adjustments_ADD.adjustmentQty !=', 0);
                $this->db->or_where('Adjustments_ADD.adjustmentQty !=', null);
                $this->db->or_where('Adjustments_SUB.adjustmentQty !=', 0);
                $this->db->or_where('Adjustments_SUB.adjustmentQty !=', null);
                // $this->db->or_where('(COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) !=', 0);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('serial'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('category'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('beginning'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('transfer'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('adjustment'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('return'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('expiry_date'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('profit_loss'));
                $this->excel->getActiveSheet()->SetCellValue('P1', lang('new'));
                $this->excel->getActiveSheet()->SetCellValue('Q1', lang('old'));
                $this->excel->getActiveSheet()->SetCellValue('R1', lang('broken'));

                $row  = 2;
                $bpQty = 0;
                $sQty = 0;
                $pQty = 0;
                $tQty = 0;
                $aQty = 0;
                $rQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $bQty = 0;
                $bAmt = 0;
                $pl   = 0;
                $pw   = 0;
                $nVarQty = 0;
                $oVarQty = 0;
                $bVarQty = 0;
                foreach ($data as $data_row) {
                    $get_categories= $this->site->getCategoryByID($data_row->category_id);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->serial_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $get_categories->name);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->BeginningQty);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->TransferQty);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->AdjustmentQty);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->returnQty);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->BalacneQty);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, !empty($data_row->expiry) ? date('d/m/Y', strtotime($data_row->expiry)) : 'N/A');
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $data_row->Profit);
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->qtyNewVar);
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $data_row->qtyOldVar);
                    $this->excel->getActiveSheet()->SetCellValue('R' . $row, $data_row->qtyBrokenVar);

                    $bpQty += $data_row->BeginningQty;
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $rQty += $data_row->returnQty;
                    $bQty += $data_row->BalacneQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $pl   += $data_row->Profit;
                    $nVarQty += $data_row->qtyNewVar;
                    $oVarQty += $data_row->qtyOldVar;
                    $bVarQty += $data_row->qtyBrokenVar;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('E' . $row . ':R' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $bpQty);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $rQty);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $bQty);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('O' . $row, $pl);
                $this->excel->getActiveSheet()->SetCellValue('P' . $row, $nVarQty);
                $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $oVarQty);
                $this->excel->getActiveSheet()->SetCellValue('R' . $row, $bVarQty);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                $filename = 'products_expiry_report_' . date('Y_m_d_H_i_s');
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select($this->db->dbprefix('purchase_items') . '.product_code, ' . $this->db->dbprefix('purchase_items') . ".product_name,
                    (COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) as beginning,
                    CONCAT(COALESCE( PCosts.purchasedQty, 0 ), '__', COALESCE( PCosts.totalPurchase, 0 )) as purchased,
                    CONCAT(COALESCE( Transfers_IN.transferQty, 0 ), '__', COALESCE( Transfers_OUT.transferQty, 0 )) as transfer,
                    CONCAT(COALESCE( Adjustments_ADD.adjustmentQty, 0 ), '__', COALESCE( Adjustments_SUB.adjustmentQty, 0 )) as adjustment,
                    CONCAT(COALESCE( PSales.soldQty, 0 ), '__', COALESCE( PSales.totalSale, 0), '__', COALESCE( PSales.order_discount, 0 )) as sold, 
                    COALESCE( PReturn.returnQty, 0 ) + Abs(COALESCE( PSReturn.soldQty_return, 0 )) as returnQty,
                    (COALESCE(Ending_Purchases.purchasedQty,0)-COALESCE(Ending_Sales.soldQty,0)+COALESCE(Ending_PReturn.returnQty,0)-COALESCE(Ending_Transfers_OUT.transferQty,0)+COALESCE(Ending_Transfers_IN.transferQty,0)+COALESCE(Ending_Adjustments_ADD.adjustmentQty,0)-COALESCE(Ending_Adjustments_SUB.adjustmentQty,0)+COALESCE(PCosts.purchasedQty,0)+COALESCE(Transfers_IN.transferQty,0)-COALESCE(Transfers_OUT.transferQty,0)+COALESCE(Adjustments_ADD.adjustmentQty,0)-COALESCE(Adjustments_SUB.adjustmentQty,0)-COALESCE(PSales.soldQty,0)+COALESCE(PReturn.returnQty,0)+Abs(COALESCE(PSReturn.soldQty_return,0))) as balance, purchase_items.expiry,
                    CONCAT(COALESCE(NVariant.sQty, 0), '__',COALESCE(NVariant.name, '' ), '__', COALESCE(OVariant.sQty, 0), '__', COALESCE(OVariant.name, ''), '__', COALESCE(BVariant.sQty, 0), '__', COALESCE(BVariant.name, '')) as variant ,  {$this->db->dbprefix('purchase_items')}.product_id as id", false)
                ->from('purchase_items')
                ->join('products', 'purchase_items.product_id = products.id', 'left')
                ->join($pp, 'purchase_items.product_id = PCosts.product_id AND (purchase_items.expiry <=> PCosts.expiry)', 'left')
                ->join($ending_purchases, 'purchase_items.product_id = Ending_Purchases.product_id AND (purchase_items.expiry <=> Ending_Purchases.expiry)', 'left')
                ->join($sp, 'purchase_items.product_id = PSales.product_id AND (purchase_items.expiry <=> PSales.expiry)', 'left')
                ->join($ending_sales, 'purchase_items.product_id = Ending_Sales.product_id AND (purchase_items.expiry <=> Ending_Sales.expiry)', 'left')
                ->join($transfers_in, 'purchase_items.product_id = Transfers_IN.product_id AND (purchase_items.expiry <=> Transfers_IN.expiry)', 'left')
                ->join($ending_transfers_in, 'purchase_items.product_id = Ending_Transfers_IN.product_id AND (purchase_items.expiry <=> Ending_Transfers_IN.expiry)', 'left')
                ->join($transfers_out, 'purchase_items.product_id = Transfers_OUT.product_id AND (purchase_items.expiry <=> Transfers_OUT.expiry)', 'left')
                ->join($ending_transfers_out, 'purchase_items.product_id = Ending_Transfers_OUT.product_id AND (purchase_items.expiry <=> Ending_Transfers_OUT.expiry)', 'left')
                ->join($adjustments_add, 'purchase_items.product_id = Adjustments_ADD.product_id AND (purchase_items.expiry <=> Adjustments_ADD.expiry)', 'left')
                ->join($ending_adjustments_add, 'purchase_items.product_id = Ending_Adjustments_ADD.product_id AND (purchase_items.expiry <=> Ending_Adjustments_ADD.expiry)', 'left')
                ->join($adjustments_sub, 'purchase_items.product_id = Adjustments_SUB.product_id AND (purchase_items.expiry <=> Adjustments_SUB.expiry)', 'left')
                ->join($ending_adjustments_sub, 'purchase_items.product_id = Ending_Adjustments_SUB.product_id AND (purchase_items.expiry <=> Ending_Adjustments_SUB.expiry)', 'left')
                ->join($pr1, 'purchase_items.product_id = PSReturn.product_id AND (purchase_items.expiry <=> PSReturn.expiry)', 'left')
                ->join($pr2, 'purchase_items.product_id = PReturn.product_id AND (purchase_items.expiry <=> PReturn.expiry)', 'left')
                ->join($ending_returns, 'purchase_items.product_id = Ending_PReturn.product_id AND (purchase_items.expiry <=> Ending_PReturn.expiry)', 'left')
                ->join($vrn, 'purchase_items.product_id = NVariant.product_id', 'left')
                ->join($vro, 'purchase_items.product_id = OVariant.product_id', 'left')
                ->join($vrb, 'purchase_items.product_id = BVariant.product_id', 'left');
                $this->datatables->where($this->db->dbprefix('products') . '.type', 'standard');
                // ->order_by('purchase_items.product_code', 'ASC')
                // ->order_by('purchase_items.expiry', 'ASC');
                $this->datatables->group_by('purchase_items.product_id, purchase_items.expiry');
            if($product || $cf1 || $cf2 || $cf3 || $cf4 || $cf5 || $cf6 || $category || $subcategory || $brand){
                if ($product) {
                    $this->datatables->where($this->db->dbprefix('products') . '.id', $product);
                }
                if ($cf1) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf1', $cf1);
                }
                if ($cf2) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf2', $cf2);
                }
                if ($cf3) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf3', $cf3);
                }
                if ($cf4) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf4', $cf4);
                }
                if ($cf5) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf5', $cf5);
                }
                if ($cf6) {
                    $this->datatables->where($this->db->dbprefix('products') . '.cf6', $cf6);
                }
                if ($category) {
                    $this->datatables->where($this->db->dbprefix('products') . '.category_id', $category);
                }
                if ($subcategory) {
                    $this->datatables->where($this->db->dbprefix('products') . '.subcategory_id', $subcategory);
                }
                if ($brand) {
                    $this->datatables->where($this->db->dbprefix('products') . '.brand', $brand);
                }
            } else if (empty($dataTable_filter) && empty($dataTable_filter_col_1) && empty($dataTable_filter_col_2)){
                $this->datatables->where('PCosts.totalPurchase !=', 0);
                $this->datatables->or_where('PCosts.totalPurchase !=', null);
                $this->datatables->or_where('PSales.totalSale !=', 0);
                $this->datatables->or_where('PSales.totalSale !=', null);
                $this->datatables->or_where('PReturn.returnTotalSale !=', 0);
                $this->datatables->or_where('PReturn.returnTotalSale !=', null);
                $this->datatables->or_where('PSReturn.totalSale_return !=', 0);
                $this->datatables->or_where('PSReturn.totalSale_return !=', null);
                $this->datatables->or_where('Transfers_IN.totalTransfer !=', 0);
                $this->datatables->or_where('Transfers_IN.totalTransfer !=', null);
                $this->datatables->or_where('Transfers_OUT.totalTransfer !=', 0);
                $this->datatables->or_where('Transfers_OUT.totalTransfer !=', null);
                $this->datatables->or_where('Adjustments_ADD.adjustmentQty !=', 0);
                $this->datatables->or_where('Adjustments_ADD.adjustmentQty !=', null);
                $this->datatables->or_where('Adjustments_SUB.adjustmentQty !=', 0);
                $this->datatables->or_where('Adjustments_SUB.adjustmentQty !=', null);
                // $this->datatables->or_where('(COALESCE( Ending_Purchases.purchasedQty, 0 ) - COALESCE( Ending_Sales.soldQty, 0 ) + COALESCE( Ending_PReturn.returnQty, 0 ) - COALESCE( Ending_Transfers_OUT.transferQty, 0 ) + COALESCE( Ending_Transfers_IN.transferQty, 0 ) + COALESCE( Ending_Adjustments_ADD.adjustmentQty, 0 ) - COALESCE( Ending_Adjustments_SUB.adjustmentQty, 0 )) !=', 0);
            }

            echo $this->datatables->generate();
        }
    }
    
    // sale chart
    public function top10_sale_chart($warehouse = null)
    {
        $this->bpas->checkPermissions('index', true);
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }
        
        $this->data['stocks']        = $warehouse ? $this->reports_model->getTop10Sale($warehouse) : $this->reports_model->getTop10Sale();
        $this->data['warehouses']   = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse']    = $warehouse ? $this->site->getWarehouseByID($warehouse) : null;
        $this->data['totals']       = $this->reports_model->getWarehouseTotals($warehouse);
        $bc                         = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('reports')]];
        $meta                       = ['page_title' => lang('reports'), 'bc' => $bc];
        $this->page_construct('reports/top10_sale_chart', $meta, $this->data);
    }

    // profit chart 
     public function top10_profit_chart($warehouse = null)
    {
        $this->bpas->checkPermissions('index', true);
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }

        $this->data['stocks']        = $warehouse ? $this->reports_model->getTop10Profit($warehouse) : $this->reports_model->getTop10Profit();
        $this->data['warehouses']   = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse']    = $warehouse ? $this->site->getWarehouseByID($warehouse) : null;
        $this->data['totals']       = $this->reports_model->getWarehouseTotals($warehouse);
   
        $bc                         = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('reports')]];
        $meta                       = ['page_title' => lang('reports'), 'bc' => $bc];
        $this->page_construct('reports/top10_profit_chart', $meta, $this->data);
    }

    // expense category chart
     public function expense_category_chart($warehouse = null)
    {
        $this->bpas->checkPermissions('index', true);
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }
        $this->data['stocks']        = $warehouse ? $this->reports_model->getAllExpenses($warehouse) : $this->reports_model->getAllExpenses();
        $this->data['warehouses']   = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse']    = $warehouse ? $this->site->getWarehouseByID($warehouse) : null;
        $this->data['total_expense_categories']       = $this->reports_model->getAllTotalExpensesCategories()->total;
        $this->data['total_amount']       = $this->reports_model->getAllTotalExpenses($warehouse)->total_amount;
        $bc                         = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('reports')]];
        $meta                       = ['page_title' => lang('reports'), 'bc' => $bc];
        $this->page_construct('reports/expense_category_chart', $meta, $this->data);
    }
    //revenue_vs_expenses_chart
    public function revenue_vs_expenses_chart($warehouse = null, $start_date = null, $end_date = null)
    {
        $this->bpas->checkPermissions('index', true);
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }
        $this->data['stocks']        = $warehouse ? $this->reports_model->getWarehouseStockValue($warehouse) : $this->reports_model->getStockValue();
        $this->data['warehouses']   = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse']    = $warehouse ? $this->site->getWarehouseByID($warehouse) : null;
        $this->data['totals']       = $this->reports_model->getWarehouseTotals($warehouse);
        $bc                         = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('reports')]];
        $meta                       = ['page_title' => lang('reports'), 'bc' => $bc];
        $this->page_construct('reports/revenue_vs_expenses_chart', $meta, $this->data);
    }
    // cash in out chart
    public function cash_in_out_chart($start_date = null, $end_date = null)
    {
        $this->bpas->checkPermissions('profit_loss');
        if (!$start_date) {
            $start      = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end      = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $sales = $this->reports_model->getAllSales($start, $end);
        $this->data['total_sales']           = $this->reports_model->getTotalSales($start, $end);
        $this->data['total_payment_received'] = $this->reports_model->getTotalPaymentReceived($start, $end);
        $this->data['total_sales_costing_by_payment'] = $this->reports_model->getTotalCostByPayment($start, $end);
        $this->data['getReturnOnSales']      = $this->reports_model->getReturnOnSales($start, $end);
        $this->data['total_sales_costing']   = $this->reports_model->getTotalCost($start, $end);
        $this->data['total_purchases']       = $this->reports_model->getTotalPurchases($start, $end);
        $this->data['total_return_sales']    = $this->reports_model->getTotalReturnSales($start, $end);
        $this->data['total_discounts']       = $this->reports_model->getTotaldiscounts($start, $end);
        $this->data['total_expenses']        = $this->reports_model->getTotalExpenses($start, $end);
        $this->data['total_payroll']         = $this->reports_model->getTotalPayroll($start, $end);
        // $this->data['total_payroll']         = $this->reports_model->getTotalExpenses_salary($start, $end);
        $this->data['totalexbycategories']   = $this->reports_model->getExpensesBycategories($start, $end);
        $this->data['total_expenses_budget'] = $this->reports_model->getTotalExpensesBudget($start, $end);
        $this->data['total_paid']            = $this->reports_model->getTotalPaidAmount($start, $end);
        $this->data['total_received']        = $this->reports_model->getTotalReceivedAmount($start, $end);
        $this->data['total_received_cash']   = $this->reports_model->getTotalReceivedCashAmount($start, $end);
        $this->data['total_received_cc']     = $this->reports_model->getTotalReceivedCCAmount($start, $end);
        $this->data['total_received_cheque'] = $this->reports_model->getTotalReceivedChequeAmount($start, $end);
        $this->data['total_received_ppp']    = $this->reports_model->getTotalReceivedPPPAmount($start, $end);
        $this->data['total_received_stripe'] = $this->reports_model->getTotalReceivedStripeAmount($start, $end);
        $this->data['total_returned']        = $this->reports_model->getTotalReturnedAmount($start, $end);
        $this->data['start']                 = urldecode($start_date);
        $this->data['end']                   = urldecode($end_date);

        $warehouses = $this->site->getAllWarehouses();
        if (!empty($warehouses)) {
            foreach ($warehouses as $warehouse) {
                $total_purchases     = $this->reports_model->getTotalPurchases($start, $end, $warehouse->id);
                $total_sales         = $this->reports_model->getTotalSales($start, $end, $warehouse->id);
                $total_returns       = $this->reports_model->getTotalReturnSales($start, $end, $warehouse->id);
                $total_expenses      = $this->reports_model->getTotalExpenses($start, $end, $warehouse->id);
                $total_cost          = $this->reports_model->getTotalCost($start, $end, $warehouse->id);
                $total_return_warehouse =$this->reports_model->getTotalReturnedwarehouse($start, $end,$warehouse->id);
                $total_discounts     = $this->reports_model->getTotaldiscounts($start, $end,$warehouse->id);

                $warehouses_report[] = [
                    'warehouse'       => $warehouse,
                    'total_purchases' => $total_purchases,
                    'total_sales'     => $total_sales,
                    'total_returns'   => $total_returns,
                    'total_expenses'  => $total_expenses,
                    'total_discounts' => $total_discounts->total_amount,
                    'total_returned'  => $total_return_warehouse->total_return,   
                    'total_cost'      => $total_cost->cost
                ];
            }
        }
        if (!empty($warehouses_report)) {
            $this->data['warehouses_report'] = $warehouses_report;
        }

        $bc                         = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('reports')]];
        $meta                       = ['page_title' => lang('cash_in/out_chart'), 'bc' => $bc];
        $this->page_construct('reports/cash_in_out_chart', $meta, $this->data);
    }

    // profit vs lost chart
    public function profit_vs_lost_chart($start_date = null, $end_date = null)
    {
        $this->bpas->checkPermissions('profit_loss');
        if (!$start_date) {
            $start      = $this->db->escape(date('Y-m') . '-1');
            $start_date = date('Y-m') . '-1';
        } else {
            $start = $this->db->escape(urldecode($start_date));
        }
        if (!$end_date) {
            $end      = $this->db->escape(date('Y-m-d H:i'));
            $end_date = date('Y-m-d H:i');
        } else {
            $end = $this->db->escape(urldecode($end_date));
        }
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $sales = $this->reports_model->getAllSales($start, $end);
        $this->data['total_sales']           = $this->reports_model->getTotalSales($start, $end);
        $this->data['total_payment_received'] = $this->reports_model->getTotalPaymentReceived($start, $end);
        $this->data['total_sales_costing_by_payment'] = $this->reports_model->getTotalCostByPayment($start, $end);
        $this->data['getReturnOnSales']      = $this->reports_model->getReturnOnSales($start, $end);
        $this->data['total_sales_costing']   = $this->reports_model->getTotalCost($start, $end);
        $this->data['total_purchases']       = $this->reports_model->getTotalPurchases($start, $end);
        $this->data['total_return_sales']    = $this->reports_model->getTotalReturnSales($start, $end);
        $this->data['total_discounts']       = $this->reports_model->getTotaldiscounts($start, $end);
        $this->data['total_expenses']        = $this->reports_model->getTotalExpenses($start, $end);
        $this->data['total_payroll']         = $this->reports_model->getTotalPayroll($start, $end);
        // $this->data['total_payroll']         = $this->reports_model->getTotalExpenses_salary($start, $end);
        $this->data['totalexbycategories']   = $this->reports_model->getExpensesBycategories($start, $end);
        $this->data['total_expenses_budget'] = $this->reports_model->getTotalExpensesBudget($start, $end);
        $this->data['total_paid']            = $this->reports_model->getTotalPaidAmount($start, $end);
        $this->data['total_received']        = $this->reports_model->getTotalReceivedAmount($start, $end);
        $this->data['total_received_cash']   = $this->reports_model->getTotalReceivedCashAmount($start, $end);
        $this->data['total_received_cc']     = $this->reports_model->getTotalReceivedCCAmount($start, $end);
        $this->data['total_received_cheque'] = $this->reports_model->getTotalReceivedChequeAmount($start, $end);
        $this->data['total_received_ppp']    = $this->reports_model->getTotalReceivedPPPAmount($start, $end);
        $this->data['total_received_stripe'] = $this->reports_model->getTotalReceivedStripeAmount($start, $end);
        $this->data['total_returned']        = $this->reports_model->getTotalReturnedAmount($start, $end);
        $this->data['start']                 = urldecode($start_date);
        $this->data['end']                   = urldecode($end_date);


        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('reports')]];
        $meta = ['page_title' => lang('profit_and/or_lost_chart'), 'bc' => $bc];
        $this->page_construct('reports/profit_vs_lost_chart', $meta, $this->data);
    }
    // warehouse product chart
     public function warehouse_product_chart($warehouse = null)
    {
        $this->bpas->checkPermissions('index', true);
        $data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        if ($this->input->get('warehouse')) {
            $warehouse = $this->input->get('warehouse');
        }

        $this->data['stocks']        = $warehouse ? $this->reports_model->getStockWarehouse($warehouse) : $this->reports_model->getStockWarehouse();
        
        $this->data['warehouses']   = $this->site->getAllWarehouses();
        $this->data['warehouse_id'] = $warehouse;
        $this->data['warehouse']    = $warehouse ? $this->site->getWarehouseByID($warehouse) : null;
        $this->data['totals']       = $this->reports_model->getWarehouseTotals($warehouse);
        $bc                         = [['link' => base_url(), 'page' => lang('home')], ['link' => '#', 'page' => lang('reports')]];
        $meta                       = ['page_title' => lang('reports'), 'bc' => $bc];
        $this->page_construct('reports/warehouse_product_chart', $meta, $this->data);
    }
    public function borrowers()
    {
        $this->bpas->checkPermissions("borrowers");
        $this->data['billers']   = $this->site->getBillers();
        $this->data['currencies']   = $this->site->getAllCurrencies();
        $this->data['products']   = $this->site->getProducts();
        $this->data['users']   = $this->site->getAllUsers();
        $bc = array(array('link' => base_url(), 'page' => lang('report_borrowers')), array('link' => admin_url('reports'), 'page' => lang('report_borrowers')), array('link' => '#', 'page' => lang('report_borrowers')));
        $meta = array('page_title' => lang('report_borrowers'), 'bc' => $bc);
        $this->page_construct('reports/loan_borrowers', $meta, $this->data);
    }

    public function getBorrowersReport($pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('products', true);
        $warehouse  = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $category   = $this->input->get('category') ? $this->input->get('category') : null;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date   = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $borrower = $this->input->get('borrower') ;
        $start_date_loan = $this->input->get('start_date_loan') ? $this->input->get('start_date_loan') : null;
        $end_date_loan  = $this->input->get('end_date_loan') ? $this->input->get('end_date_loan') : null;

        $pp = "( SELECT pp.category_id as category, SUM( pi.quantity ) purchasedQty, SUM( pi.subtotal ) totalPurchase from {$this->db->dbprefix('products')} pp
                left JOIN " . $this->db->dbprefix('purchase_items') . ' pi ON pp.id = pi.product_id
                left join ' . $this->db->dbprefix('purchases') . ' p ON p.id = pi.purchase_id ';
        $sp = "( SELECT sp.category_id as category, SUM( si.quantity ) soldQty, SUM( si.subtotal ) totalSale from {$this->db->dbprefix('products')} sp
                left JOIN " . $this->db->dbprefix('sale_items') . ' si ON sp.id = si.product_id
                left join ' . $this->db->dbprefix('sales') . ' s ON s.id = si.sale_id ';
        if ($start_date || $warehouse) {
            $pp .= ' WHERE ';
            $sp .= ' WHERE ';
            if ($start_date) {
                $start_date = $this->bpas->fld($start_date);
                $end_date   = $end_date ? $this->bpas->fld($end_date) : date('Y-m-d');
                $pp .= " p.date >= '{$start_date}' AND p.date < '{$end_date}' ";
                $sp .= " s.date >= '{$start_date}' AND s.date < '{$end_date}' ";
                if ($warehouse) {
                    $pp .= ' AND ';
                    $sp .= ' AND ';
                }
            }
            if ($warehouse) {
                $pp .= " pi.warehouse_id = '{$warehouse}' ";
                $sp .= " si.warehouse_id = '{$warehouse}' ";
            }
        }
        $pp .= ' GROUP BY pp.category_id ) PCosts';
        $sp .= ' GROUP BY sp.category_id ) PSales';

        if ($pdf || $xls) {
            $this->db
                ->select($this->db->dbprefix('categories') . '.code, ' . $this->db->dbprefix('categories') . '.name,
                    SUM( COALESCE( PCosts.purchasedQty, 0 ) ) as PurchasedQty,
                    SUM( COALESCE( PSales.soldQty, 0 ) ) as SoldQty,
                    SUM( COALESCE( PCosts.totalPurchase, 0 ) ) as TotalPurchase,
                    SUM( COALESCE( PSales.totalSale, 0 ) ) as TotalSales,
                    (SUM( COALESCE( PSales.totalSale, 0 ) )- SUM( COALESCE( PCosts.totalPurchase, 0 ) ) ) as Profit', false)
                ->from('categories')
                ->join($sp, 'categories.id = PSales.category', 'left')
                ->join($pp, 'categories.id = PCosts.category', 'left')
                ->group_by('categories.id, categories.code, categories.name')
                ->order_by('categories.code', 'asc');

            if ($category) {
                $this->db->where($this->db->dbprefix('categories') . '.id', $category);
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('categories_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('category_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('category_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchased'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('sold'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('purchased_amount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('sold_amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('profit_loss'));

                $row  = 2;
                $sQty = 0;
                $pQty = 0;
                $sAmt = 0;
                $pAmt = 0;
                $pl   = 0;
                foreach ($data as $data_row) {
                    $profit = $data_row->TotalSales - $data_row->TotalPurchase;
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->PurchasedQty);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->SoldQty);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->TotalPurchase);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->TotalSales);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $profit);
                    $pQty += $data_row->PurchasedQty;
                    $sQty += $data_row->SoldQty;
                    $pAmt += $data_row->TotalPurchase;
                    $sAmt += $data_row->TotalSales;
                    $pl   += $profit;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('C' . $row . ':G' . $row)->getBorders()
                    ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('C' . $row, $pQty);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $sQty);
                $this->excel->getActiveSheet()->SetCellValue('E' . $row, $pAmt);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $sAmt);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $pl);

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('C2:G' . $row)->getAlignment()->setWrapText(true);
                $filename = 'categories_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {

         $this->load->library('datatables');
        
        $action = '<div class="text-center"><div class="btn-group text-left">'
            . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
            . lang('actions') . ' </button>
                  
                </div></div>';
        $this->datatables
            ->select("
                loan_borrowers.id as id,
                loan_borrowers.code,
                loan_unique_types.name as unique_type,
                loan_borrowers.unique_no,
                CONCAT(bpas_loan_borrowers.last_name,' ',bpas_loan_borrowers.first_name) as name,
                CONCAT(UCASE(LEFT(gender, 1)),SUBSTRING(gender, 2)) as gender,
                loan_borrowers.phone,
                bpas_loans.cycle,
                IFNULL(bpas_provinces.name,'') as province,
                IFNULL(bpas_districts.name,'') as district,
                IFNULL(bpas_communces.name,'') as commune,
                IFNULL(bpas_villages.name,'') as village
                ")
            ->from("loan_borrowers")
            ->join("loan_unique_types","loan_unique_types.id=unique_type_id","left")
            ->join("(SELECT 
                                borrower_id, 
                                IFNULL(COUNT(id),'n/a') as cycle 
                        FROM bpas_loans GROUP BY borrower_id
                    ) as bpas_loans","bpas_loans.borrower_id=loan_borrowers.id","left")
            ->join('locations as bpas_countries','loan_borrowers.country_id = bpas_countries.id','left')
            ->join('locations as bpas_provinces','loan_borrowers.province_id = bpas_provinces.id','left')
            ->join('locations as bpas_districts','loan_borrowers.district_id = bpas_districts.id','left')
            ->join('locations as bpas_communces','loan_borrowers.commune_id = bpas_communces.id','left')
            ->join('locations as bpas_villages','loan_borrowers.village_id = bpas_villages.id','left')
            ->where('loan_borrowers.type','Customer')
            ->add_column('Actions', "<div class='text-center'><a class=\"tip\" title='" . lang('view_report') . "' href='" . admin_url('reports/borrower_report/$1') . "'><span class='label label-primary'>" . lang('view_report') . '</span></a></div>', 'id')

            ->group_by("loan_borrowers.id")
            ->unset_column('id');

             if ($borrower) {
                $this->datatables->where($this->db->dbprefix('loans') . '.borrower_id', $borrower);
            }
             if ($start_date_loan) {
            $this->datatables->where($this->db->dbprefix('loans') . '.disbursed_at 
                BETWEEN "' . $start_date_loan . '" and "' . $end_date_loan . '"');
        }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('created_by', $this->session->userdata('user_id'));
            }
            //$this->datatables->add_column("Actions", $action, "id");
        echo $this->datatables->generate();
        }
    }
    function cash_management($pdf = NULL,$biller_id = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('cash_book',NULL,'account_report');
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['users'] = $this->reports_model->getStaff();

        $biller = $this->input->post('biller') ? $this->input->post('biller'):null;

        if ($this->input->post('start_date')) {
            $dt = "From " . $this->input->post('start_date') . " to " . $this->input->post('end_date');
            $this->data['start_date2'] = $this->bpas->fld($this->input->post('start_date'));
            
        } else {
            $dt = "Till " . $this->input->post('end_date');
            $this->data['start_date2'] = date('Y-m-01');
        }
        if($this->input->post('end_date')){
            $this->data['end_date2'] = $this->bpas->fld($this->input->post('end_date'));
        }else{
            $this->data['end_date2'] =  date('Y-m-t');
        }
     
        $user = $this->site->getUser();

        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }

        $this->data['biller']              = $biller;
        $this->data['cash_transaction']    = $this->site->getCashAccounts();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => admin_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('Cash_Books_Report')));
        $meta = array('page_title' => lang('Cash_Books_Report'), 'bc' => $bc);
        $this->page_construct('reports/cash_management_report', $meta, $this->data);
    }
    public function installment_collectable()
    {
        $this->bpas->checkPermissions('installment_collectable');
        $this->data['users']        = $this->reports_model->getStaff();
        $this->data['warehouses']   = $this->site->getWarehouses();
        $this->data['users']        = $this->reports_model->getStaff();
        $this->data['products']     = $this->reports_model->getLoanProducts();
        $this->data['currencies']   = $this->site->getAllCurrencies();
        $this->data['billers']      = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('loan_collectable_report')));
        $meta = array('page_title' => lang('loan_collectable_report'), 'bc' => $bc);
        $this->page_construct('reports/installment_collectable', $meta, $this->data);
    }

    public function getInstallCollectableReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('loan_collection', TRUE);
        $user                  = $this->input->get('user') ? $this->input->get('user') : NULL;
        $reference_no          = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $loan_reference_no     = $this->input->get('loan_reference_no') ? $this->input->get('loan_reference_no') : NULL;
        $borrower              = $this->input->get('borrower') ? $this->input->get('borrower') : NULL;
        $biller                = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $product               = $this->input->get('product') ? $this->input->get('product') : NULL;
        $currency              = $this->input->get('currency') ? $this->input->get('currency') : NULL;
        $start_date            = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date              = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $installment_late_days = ($this->Settings->installment_late_days ? ($this->Settings->installment_late_days -1) : 0);
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        $this->load->library('datatables');
        $add_payment_link = anchor('loans/add_payment/$1', '<i class="fa fa-money"></i> ' . lang('add_payment'), ' class="add-payment" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"');
        $payments_link = anchor('loans/view_payments/$1', '<i class="fa fa-money"></i> ' . lang('view_payments'), ' class="view-payment" data-toggle="modal" data-backdrop="static" data-keyboard="false" data-target="#myModal"');
        $action = '<div class="text-center"><div class="btn-group text-left">'
                . '<button type="button" class="btn btn-default btn-xs btn-primary dropdown-toggle" data-toggle="dropdown">'
                . lang('actions') . ' <span class="caret"></span></button>
                        <ul class="dropdown-menu pull-right" role="menu">
                            <li>'.$add_payment_link . '</li>
                            <li>'.$payments_link . '</li>
                        </ul>
                    </div></div>';
        if ($xls) {
            $this->db
                ->select("
                loans.id as id,
                loans.biller,
                loans.currency,
                payments.date,
                payments.reference_no,
                loans.reference_no as ref_loan,
                loans.borrower,
                IFNULL(bpas_payments.amount, 0) as principal_paid,
                IFNULL(bpas_payments.interest_paid, 0) as interest_paid,
                IFNULL(bpas_payments.amount + bpas_payments.interest_paid, 0) as payment_paid,
                IFNULL(bpas_payments.fee_charge,0) as  fee_charge,
                IFNULL(bpas_payments.penalty_paid,0) as  penalty_paid,
                paid_by,
                bpas_payments.type")
            ->from("payments")
            ->join("loans","payments.loan_id=loans.id","left")
            ->where("type <>", "disbursed")
            ->where("loans.id >", 0);
            if($reference_no){
                $this->db->like("payments.reference_no", $reference_no);
            }
            if($loan_reference_no){
                $this->db->like("loans.reference_no", $loan_reference_no);
            }
            if($biller){
                $this->db->where("loans.biller_id", $biller);
            }
            if($borrower){
                $this->db->where("loans.borrower_id", $borrower);
            }
            if($product){
                $this->db->where("loans.loan_product_id", $product);
            }
            if($currency){
                $this->db->where("loans.currency", $currency);
            }
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($start_date) {
                $this->db->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('loans.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('loans.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $styleArray = array('font'  => array('bold'  => true, 'size'  => 10,));
                $row1 = 4;
                $this->excel->getActiveSheet()->getStyle('A1:S1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A2:S2')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A3:S3')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A4:S4')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->getStyle('A5:S5')->applyFromArray($styleArray);
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('loan_collection_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('Company Name'));
                $this->excel->getActiveSheet()->SetCellValue('A2', lang('Active Loan Listing Report'));
                $this->excel->getActiveSheet()->SetCellValue('A3', lang('Report Period'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang($this->Settings->site_name));
                $this->excel->getActiveSheet()->SetCellValue('B3', lang(($start_date ? $start_date : '') . ' - ' . ($end_date ? $end_date : '')));
                $this->excel->getActiveSheet()->setTitle(lang('loan_collectable_report'));
                $this->excel->getActiveSheet()->SetCellValue('A' . $row1, lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B' . $row1, lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C' . $row1, lang('loan_reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D' . $row1, lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E' . $row1, lang('borrower'));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row1, lang('principal_paid'));
                $this->excel->getActiveSheet()->SetCellValue('G' . $row1, lang('interest_paid'));
                $this->excel->getActiveSheet()->SetCellValue('H' . $row1, lang('payment_paid'));
                $this->excel->getActiveSheet()->SetCellValue('I' . $row1, lang('fee_charge'));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row1, lang('penalty_paid'));
                $this->excel->getActiveSheet()->SetCellValue('K' . $row1, lang('currency'));
                $this->excel->getActiveSheet()->SetCellValue('L' . $row1, lang('type'));
                $style = array(
                    'alignment' => array(
                        'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    )
                );
                $this->excel->getActiveSheet()->getStyle("A1:L1")->applyFromArray($style)->getFont()->setBold(true);
                // $row = 2;
                // $principal_paid = 0;
                // $interest_paid = 0;
                // $payment_paid = 0;
                // $fee_charge = 0;
                // $penalty_paid = 0;
                // foreach ($data as $data_row){
                $n = 0;
                $m = 0;
                $currencies = $this->site->getAllCurrencies();
                foreach ($currencies as $currency) {
                    $principal_paid = 0;
                    $interest_paid = 0;
                    $payment_paid = 0;
                    $fee_charge = 0;
                    $penalty_paid = 0;
                    $row = 5 + $n + $m;
                    $m++;
                    foreach ($data as $data_row){
                        if($currency->code == $data_row->currency){
                            $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                            $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                            $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->ref_loan);
                            $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                            $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->borrower);
                            $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->principal_paid));
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->interest_paid));
                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->payment_paid));
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->fee_charge));
                            $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->penalty_paid));
                            $this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->currency));
                            $this->excel->getActiveSheet()->SetCellValue('L' . $row, lang($data_row->type));
                            $principal_paid += $data_row->principal_paid;
                            $interest_paid += $data_row->interest_paid;
                            $payment_paid += $data_row->payment_paid;
                            $fee_charge += $data_row->fee_charge;
                            $penalty_paid += $data_row->penalty_paid;
                            $row++;
                            $n++;
                        }

                        // $this->excel->getActiveSheet()->getStyle('A'.$row.':J'.$row.'')->applyFromArray($styleArray);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang("subtotal"));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($principal_paid));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($interest_paid));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($payment_paid));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($fee_charge));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($penalty_paid));
                    }
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $filename = 'loan_collectable_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
                installment_items.id as id,
                installment_items.period,
                installment_items.deadline,
                installments.reference_no,
                CONCAT({$this->db->dbprefix('companies')}.name,' ',{$this->db->dbprefix('companies')}.company,' [ <small style=color:#FF5454>',{$this->db->dbprefix('companies')}.phone,'</small> ] ') as borrower,
                installment_items.payment,
                installment_items.interest, 
                installment_items.principal,
                installment_items.balance,
                SUM(IFNULL(bpas_payments.amount,0)) + SUM(IFNULL(bpas_payments.interest_paid,0)) as payment_paid,
                SUM(IFNULL(bpas_payments.interest_paid,0)) as interest_paid,
                SUM(IFNULL(bpas_payments.amount,0)) as principal_paid,
                SUM(IFNULL(bpas_payments.penalty_paid,0)) as penalty_paid,
                installments.currency,
                DATEDIFF(SYSDATE(), DATE_ADD(deadline, INTERVAL {$installment_late_days} DAY)) AS overdue,
                installment_items.status")
            ->from('installment_items')
            ->join('installments', 'installment_items.installment_id=installments.id', 'left')
            ->join('companies','companies.id=installments.customer_id','left')
            ->join('payments', 'payments.loan_item_id=installment_items.id', 'left')
            ->group_by('installment_items.id');
            $loan_alert_days = ($this->Settings->loan_alert_days && 0 ? $this->Settings->loan_alert_days : 0);
            //$this->datatables->where('DATE_SUB('.$this->db->dbprefix('installment_items').'.`deadline`, INTERVAL '.$loan_alert_days.' DAY) <=', date("Y-m-d"));
            $this->datatables->where('installment_items.status !=','paid');
            $this->datatables->where('installment_items.status !=','payoff');
            $this->datatables->where('installments.status !=','payoff');
            $this->datatables->where('installments.status !=','completed');
            if($loan_reference_no){
                $this->datatables->like("installments.reference_no", $loan_reference_no);
            }
            if($biller){
                $this->datatables->where("installments.biller_id", $biller);
            }
            if($borrower){
                $this->datatables->where("installments.customer_id", $borrower);
            }
            // if($product){
            //     $this->datatables->where("installments.loan_product_id", $product);
            // }
            if ($user) {
                $this->datatables->where('installments.created_by', $user);
            } 
            if ($currency) {
                $this->datatables->where('installments.currency', $currency);
            }
            if ($start_date) {
                $this->datatables->where('installment_items.deadline >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('installment_items.deadline <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('installments.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('installments.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
                 $this->datatables->unset_column("id");
            echo $this->datatables->generate();
        }
    }
     public function payments_alerts($warehouse_id = null)
    {
        $this->bpas->checkPermissions('payments_alerts');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        if ($this->Owner || $this->Admin || !$this->session->userdata('warehouse_id')) {
            $this->data['warehouses']   = $this->site->getAllWarehouses();
            $this->data['warehouse_id'] = $warehouse_id;
            // $this->data['warehouse']    = $warehouse_id ? $this->site->getWarehouseByID($warehouse_id) : null;
            $this->data['warehouse']    = $warehouse_id ? $this->site->getMultiWarehouseByID($warehouse_id) : null;
        } else {
            $user                       = $this->site->getUser();
            $this->data['warehouses']   = null;
            $this->data['warehouse_id'] = $user->warehouse_id;
            // $this->data['warehouse'] = $user->warehouse_id ? $this->site->getWarehouseByID($user->warehouse_id) : null;
            $this->data['warehouse']    = $user->warehouse_id ? $this->site->getMultiWarehouseByID($user->warehouse_id) : null;
        }

        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('product_quantity_alerts')]];
        $meta = ['page_title' => lang('payments_alerts'), 'bc' => $bc];
        $this->page_construct('reports/payments_alerts', $meta, $this->data);
    }
    function getPaymentsAlerts()
    {
        $installment_alert_days = ($this->Settings->installment_alert_days?$this->Settings->installment_alert_days:0);
        $this->load->library('datatables');
        $this->datatables
            ->select("title,{$this->db->dbprefix('sales')}.reference_no as reference_no, amount, payment_date, description,")
            ->join('sales', 'down_payments.sale_id=sales.id', 'left')
            ->where('down_payments.status',0)
            ->where('DATE_SUB('. $this->db->dbprefix('down_payments')  .'.payment_date, INTERVAL '.$installment_alert_days.' DAY) <= CURDATE()')
            ->order_by('down_payments.payment_date asc')
            ->from("down_payments");
            
        echo $this->datatables->generate();
    }
    public function repairs()
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['brands'] = $this->site->getAllBrands();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('repairs_report')));
        $meta = array('page_title' => lang('repairs_report'), 'bc' => $bc);
        $this->page_construct('reports/repairs', $meta, $this->data);
    }

    public function getRepairsReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('repairs');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $model = $this->input->get('model') ? $this->input->get('model') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if ($xls) {

            $this->db
                    ->select(" 
                    date, 
                    reference_no, 
                    customer, 
                    repairs.phone, 
                    brands.name as brand, 
                    models.name as model, 
                    imei_number,
                    receive_date,
                    grand_total,
                    repairs.status")
                ->from('repairs')
                ->join('brands','brands.id=repairs.brand_id','left')
                ->join('models','models.id=repairs.model_id','left');
        
            if($reference_no){
                $this->db->like("repairs.reference_no", $reference_no);
            }
            if($biller){
                $this->db->where("repairs.biller_id", $biller);
            }
            if($warehouse){
                $this->db->where("repairs.warehouse_id", $warehouse);
            }
            if($customer){
                $this->db->where("repairs.customer_id", $customer);
            }
            if($user){
                $this->db->where("repairs.created_by", $user);
            }
            if($brand){
                $this->db->where("repairs.brand_id", $brand);
            }
            if($model){
                $this->db->where("repairs.model_id", $model);
            }
            if ($start_date) {
                $this->db->where('repairs.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('repairs_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('brand'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('model'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('imei_number'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('receive_date'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('status'));
                $row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->brand);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->model);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->imei_number);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->hrld($data_row->receive_date));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatMoney($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->status));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $filename = 'repairs_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                    ->select(" 
                    date, 
                    reference_no, 
                    customer, 
                    repairs.phone, 
                    brands.name as brand, 
                    models.name as model, 
                    imei_number,
                    receive_date,
                    grand_total,
                    repairs.status,
                    repairs.attachment")
                ->from('repairs')
                ->join('brands','brands.id=repairs.brand_id','left')
                ->join('models','models.id=repairs.model_id','left');
        
            if($reference_no){
                $this->datatables->like("repairs.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("repairs.biller_id", $biller);
            }
            if($warehouse){
                $this->datatables->where("repairs.warehouse_id", $warehouse);
            }
            if($customer){
                $this->datatables->where("repairs.customer_id", $customer);
            }
            if($user){
                $this->datatables->where("repairs.created_by", $user);
            }
            if($brand){
                $this->datatables->where("repairs.brand_id", $brand);
            }
            if($model){
                $this->datatables->where("repairs.model_id", $model);
            }
            if ($start_date) {
                $this->datatables->where('repairs.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('repairs.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('repairs.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where("repairs.created_by", $this->session->userdata('view_right'));
            }
            echo $this->datatables->generate();
        }
    }
    public function repair_items()
    {
        $this->bpas->checkPermissions('repairs');
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['technicians'] = $this->reports_model->getAllTechnicians();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['brands'] = $this->site->getAllBrands();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('repair_items_report')));
        $meta = array('page_title' => lang('repair_items_report'), 'bc' => $bc);
        $this->page_construct('reports/repair_items', $meta, $this->data);
    }

    public function getRepairItemsReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('repairs');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $model = $this->input->get('model') ? $this->input->get('model') : NULL;
        $technician = $this->input->get('technician') ? $this->input->get('technician') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;

        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if ($xls) {

            $this->db
                ->select("
                date, 
                reference_no, 
                customer, 
                repairs.phone, 
                brands.name as brand, 
                models.name as model, 
                imei_number,
                repair_items.product_name as problem,
                repair_items.warranty,
                repair_items.unit_price,
                repair_items.comment,
                staff_note,
                receive_date,
                concat(bpas_users.first_name,' ',bpas_users.last_name) as technician,
                repair_items.problem_status,
                DATEDIFF(sysdate(),receive_date) as days")
            ->from('repairs')
            ->join('repair_items','repairs.id=repair_items.repair_id','right')
            ->join('users','users.id=repair_items.technician_id','left')
            ->join('brands','brands.id=repairs.brand_id','left')
            ->join('models','models.id=repairs.model_id','left')
            ->where("repairs.status !=", "sent");
        
            if($reference_no){
                $this->db->like("repairs.reference_no", $reference_no);
            }
            if($biller){
                $this->db->where("repairs.biller_id", $biller);
            }
            if($warehouse){
                $this->db->where("repairs.warehouse_id", $warehouse);
            }
            if($customer){
                $this->db->where("repairs.customer_id", $customer);
            }
            if($technician){
                $this->db->where("repair_items.technician_id", $technician);
            }
            if($brand){
                $this->db->where("repairs.brand_id", $brand);
            }
            if($model){
                $this->db->where("repairs.model_id", $model);
            }
            if ($start_date) {
                $this->db->where('repairs.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('repair_items_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('phone'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('brand'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('model'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('imei_number'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('problem'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('warranty'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('comment'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('staff_note'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('receive_date'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('technician'));
                $this->excel->getActiveSheet()->SetCellValue('P1', lang('status'));
                $row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->phone);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->brand);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->model);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->imei_number);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->problem);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->warranty);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->unit_price);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->comment);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->staff_note);
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->hrld($data_row->receive_date));
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, ($data_row->technician));
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, lang($data_row->status));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $filename = 'repair_items_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                    ->select(" 
                    date, 
                    reference_no, 
                    customer, 
                    repairs.phone, 
                    brands.name as brand, 
                    models.name as model, 
                    imei_number,
                    repair_items.product_name as problem,
                    repair_items.warranty,
                    repair_items.unit_price,
                    repair_items.comment,
                    staff_note,
                    receive_date,
                    concat(bpas_users.first_name,' ',bpas_users.last_name) as technician,
                    repair_items.problem_status,
                    DATEDIFF(sysdate(),receive_date) as days")
                ->from('repairs')
                ->join('repair_items','repairs.id=repair_items.repair_id','right')
                ->join('users','users.id=repair_items.technician_id','left')
                ->join('brands','brands.id=repairs.brand_id','left')
                ->join('models','models.id=repairs.model_id','left')
                ->where("repairs.status !=", "sent");
        
            if($reference_no){
                $this->datatables->like("repairs.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("repairs.biller_id", $biller);
            }
            if($warehouse){
                $this->datatables->where("repairs.warehouse_id", $warehouse);
            }
            if($customer){
                $this->datatables->where("repairs.customer_id", $customer);
            }
            if($technician){
                $this->datatables->where("repair_items.technician_id", $technician);
            }
            if($brand){
                $this->datatables->where("repairs.brand_id", $brand);
            }
            if($model){
                $this->datatables->where("repairs.model_id", $model);
            }
            if ($start_date) {
                $this->datatables->where('repairs.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('repairs.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('repairs.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where("repairs.created_by", $this->session->userdata('view_right'));
            }
            echo $this->datatables->generate();
        }
    }
    public function stock_value_report()
    {
        $this->bpas->checkPermissions();
        $product_id = $this->input->post("product") ? $this->input->post("product") : false;
        $warehouse_id = $this->input->post("warehouse") ? $this->input->post("warehouse") : false;
        $end_date =  $this->input->post("end_date") ? $this->bpas->fld($this->input->post("end_date")) : false;
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['products'] = $this->reports_model->getValuationProducts($product_id);
        $this->data['stockmoves'] = $this->reports_model->getArrayStockmoves($product_id,$warehouse_id,$end_date);
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('inventory_valuation_report')));
        $meta = array('page_title' => lang('inventory_valuation_report'), 'bc' => $bc);
        $this->page_construct('reports/inventory_valuation_report', $meta, $this->data);
    }
    public function stock_value_action($pdf = null , $xls = null){
        $product_id = $this->input->get("product") ? $this->input->get("product") : false;
        $warehouse_id = $this->input->get("warehouse") ? $this->input->get("warehouse") : false;
        $end_date =  $this->input->get("end_date") ? $this->bpas->fld($this->input->get("end_date")) : false;
        $products = $this->reports_model->getValuationProducts($product_id);
        $stockmoves = $this->reports_model->getArrayStockmoves($product_id,$warehouse_id,$end_date);
        if (!empty($products)) {
            $this->load->library('excel');
            $this->excel->setActiveSheetIndex(0);
            $this->excel->getActiveSheet()->setTitle(lang('inventory_valuation_report'));
            $this->excel->getActiveSheet()->SetCellValue('A1', lang('code'));
            $this->excel->getActiveSheet()->SetCellValue('B1', lang('name'));
            $this->excel->getActiveSheet()->SetCellValue('C1', lang('date'));
            $this->excel->getActiveSheet()->SetCellValue('D1', lang('transaction'));
            $this->excel->getActiveSheet()->SetCellValue('E1', lang('reference'));
            $this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
            $this->excel->getActiveSheet()->SetCellValue('G1', lang('unit'));
            $this->excel->getActiveSheet()->SetCellValue('H1', lang('unit_cost'));
            $this->excel->getActiveSheet()->SetCellValue('I1', lang('QOH'));
            $this->excel->getActiveSheet()->SetCellValue('J1', lang('average_cost'));
            $this->excel->getActiveSheet()->SetCellValue('K1', lang('stock_value'));
            $row = 2;
            $product_value = 0;
            foreach($products as $product){
                $old_qty = 0;
                $old_cost = 0;
                $stock_value = 0;
                $total_qoh = 0;
                $total_cost = 0;

                $style = array('font'  => array('bold'  => true));
                $this->excel->getActiveSheet()->getStyle('A'.$row.':B'.$row.'')->applyFromArray($style);
                $this->excel->getActiveSheet()->SetCellValue('A' . $row, $product->code);
                $this->excel->getActiveSheet()->SetCellValue('B' . $row, $product->name);
                $row++;
                if(isset($stockmoves[$product->id])){
                    foreach($stockmoves[$product->id] as $stockmove){
                        if($stockmove->transaction=='CostAdjument' || $stockmove->transaction=='OpeningBalance' || $stockmove->transaction=='Pawns' || $stockmove->transaction=='Purchases' || $stockmove->transaction=='Receives' || ($stockmove->transaction=='QuantityAdjustment' && $stockmove->quantity > 0) || ($stockmove->transaction=='Convert' && $stockmove->quantity > 0)){ 
                            $new_cost = $stockmove->real_unit_cost;
                            $new_qty = $stockmove->quantity;
                            $total_qty = $new_qty + $old_qty;
                            if($old_qty >= 0){
                                $total_old_cost = $old_qty * $old_cost;
                                $total_new_cost = $new_qty * $new_cost; 
                                $old_cost = ($total_old_cost + $total_new_cost) / $total_qty;
                            }else{
                                if($total_qty > 0){
                                    $old_cost = $new_cost;
                                }else{
                                    $old_cost = $product->cost;
                                }
                            }
                        }else{
                            $old_cost = $stockmove->real_unit_cost;
                        }
                        $old_qty += $stockmove->quantity;
                        $qoh = $old_qty;
                        $average_cost = $old_cost;
                        $stock_value += ($stockmove->quantity * $stockmove->real_unit_cost);
                        $total_qoh = $qoh;
                        $total_cost = $average_cost;

                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->hrld($stockmove->date));
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $stockmove->transaction);
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $stockmove->reference_no);
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($stockmove->quantity));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $stockmove->unit_name);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($stockmove->real_unit_cost * ($stockmove->unit_quantity > 0 ? $stockmove->unit_quantity : 1)));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($qoh));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($average_cost));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($stock_value));
                        $row++;
                    }
                }
                $this->excel->getActiveSheet()->getStyle('H'.$row.':K'.$row.'')->applyFromArray($style);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $product->name);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($total_qoh));
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($total_cost));
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($stock_value));
                $row++;
                $product_value += $stock_value;
            }
            $style = array('font'  => array('bold'  => true, 'color' => array('rgb' => 'FF0000')));
            $this->excel->getActiveSheet()->getStyle('K'.$row)->applyFromArray($style);
            $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($product_value));
            $row++;
            $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
            $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
            $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
            $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
            $filename = 'inventory_valuation_report_' . date('Y_m_d_H_i_s');
            $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
            $this->load->helper('excel');
            create_excel($this->excel, $filename);
        }
        $this->session->set_flashdata('error', lang('nothing_found'));
        redirect($_SERVER["HTTP_REFERER"]);
    }
    function receive_payments_report()
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('receive_payments_report')));
        $meta = array('page_title' => lang('receive_payments_report'), 'bc' => $bc);
        $this->page_construct('reports/receive_payments_report', $meta, $this->data);
    }

    function getReceivePaymentsReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('receive_payments_report', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $paid_by = $this->input->get('paid_by') ? $this->input->get('paid_by') : NULL;
        $type = $this->input->get('type') ? $this->input->get('type') : NULL;
        $start_date = $this->input->get('start_date') ? $this->bpas->fld($this->input->get('start_date')) : NULL;
        $end_date = $this->input->get('end_date') ? $this->bpas->fld($this->input->get('end_date'),false,1) : NULL;
        if ($xls) {
            $this->db->select("
                        sales.biller,
                        DATE_FORMAT(".$this->db->dbprefix('payments').".date, '%Y-%m-%d %T') as date, 
                        payments.reference_no,
                        CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by, 
                        IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
                        SUM(IFNULL(".$this->db->dbprefix('payments').".amount,0) + IFNULL(".$this->db->dbprefix('payments').".interest_paid,0) + IFNULL(".$this->db->dbprefix('payments').".penalty_paid,0)) as amount,
                        SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'pending',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)) as pending_amount,
                        SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'checked',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)) as checked_amount,
                        SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'approved',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)) as approved_amount,
                        SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'verified',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)) as verified_amount,
                        (SUM(IFNULL(".$this->db->dbprefix('payments').".amount,0) + IFNULL(".$this->db->dbprefix('payments').".interest_paid,0) + IFNULL(".$this->db->dbprefix('payments').".penalty_paid,0)) - SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'verified',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0))) as balance,
                        IF(ROUND(((SUM(IFNULL(".$this->db->dbprefix('payments').".amount,0) + IFNULL(".$this->db->dbprefix('payments').".interest_paid,0) + IFNULL(".$this->db->dbprefix('payments').".penalty_paid,0)) - SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'verified',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)))),".$this->Settings->decimals.") = 0,
                            'completed',
                            IF(".$this->db->dbprefix('receive_payments').".id > 0, 'partial', 'pending')
                        ) as status
                    ")
                    ->from('payments')
                    ->join("sales","sales.id = payments.sale_id","inner")
                    ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                    ->join('users','users.id = payments.created_by', 'left')
                    ->join("receive_payment_items","receive_payment_items.payment_id = payments.id","left")
                    ->join("receive_payments","receive_payments.id = receive_payment_items.receive_id","left")
                    ->group_by("sales.biller_id,DATE(".$this->db->dbprefix("payments").".date),payments.created_by,payments.paid_by");


            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($biller) {
                $this->db->where('sales.biller_id', $biller);
            }
            if ($project) {
                $this->db->where('sales.project_id', $project);
            }
            if ($paid_by) {
                $this->db->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                if($type=="sale"){
                    $this->db->where("IFNULL(".$this->db->dbprefix('sales').".pos,0)",0);
                }else{
                    $this->db->where("IFNULL(".$this->db->dbprefix('sales').".pos,0)",1);
                }
            }
            if ($type) {
                $this->db->where('receive_payments.type', $type);
            }
            if ($start_date) {
                $this->db->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in("sales.warehouse_id",json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('sales.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('payments.created_by', $this->session->userdata('user_id'));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('receive_payments_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('received_by'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('pending'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('checked'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('approved'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('verified'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('status'));
                $row = 2;
                $amount = 0;
                $pending_amount = 0;
                $checked_amount = 0;
                $verified_amount = 0;
                $approved_amount = 0;
                $balance = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->paid_by);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->amount));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->pending_amount));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->checked_amount));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->approved_amount));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->verified_amount));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->balance));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, lang($data_row->status));
                    $amount += $data_row->amount;
                    $pending_amount += $data_row->pending_amount;
                    $checked_amount += $data_row->checked_amount;
                    $verified_amount += $data_row->verified_amount;
                    $approved_amount += $data_row->approved_amount;
                    $balance += $data_row->balance;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("F" . $row . ":K" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $amount);
                $this->excel->getActiveSheet()->SetCellValue('G' . $row, $pending_amount);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $checked_amount);
                $this->excel->getActiveSheet()->SetCellValue('I' . $row, $approved_amount);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $verified_amount);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $balance);
                
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
        
                $filename = 'receive_payments_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
                        sales.biller,
                        DATE_FORMAT(".$this->db->dbprefix('payments').".date, '%Y-%m-%d %T') as date, 
                        payments.reference_no,
                        CONCAT(".$this->db->dbprefix('users').".last_name,' ',".$this->db->dbprefix('users').".first_name) as created_by, 
                        IFNULL(".$this->db->dbprefix('cash_accounts').".name,".$this->db->dbprefix('payments').".paid_by) as paid_by,
                        SUM(IFNULL(".$this->db->dbprefix('payments').".amount,0) + IFNULL(".$this->db->dbprefix('payments').".interest_paid,0) + IFNULL(".$this->db->dbprefix('payments').".penalty_paid,0)) as amount,
                        SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'pending',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)) as pending_amount,
                        SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'checked',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)) as checked_amount,
                        SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'approved',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)) as approved_amount,
                        SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'verified',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)) as verified_amount,
                        (SUM(IFNULL(".$this->db->dbprefix('payments').".amount,0) + IFNULL(".$this->db->dbprefix('payments').".interest_paid,0) + IFNULL(".$this->db->dbprefix('payments').".penalty_paid,0)) - SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'verified',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0))) as balance,
                        IF(ROUND(((SUM(IFNULL(".$this->db->dbprefix('payments').".amount,0) + IFNULL(".$this->db->dbprefix('payments').".interest_paid,0) + IFNULL(".$this->db->dbprefix('payments').".penalty_paid,0)) - SUM(IF(".$this->db->dbprefix("receive_payments").".status = 'verified',IFNULL(".$this->db->dbprefix("receive_payment_items").".payment_amount,0),0)))),".$this->Settings->decimals.") = 0,
                            'completed',
                            IF(".$this->db->dbprefix('receive_payments').".id > 0, 'partial', 'pending')
                        ) as status
                    ")
                    ->from('payments')
                    ->join("sales","sales.id = payments.sale_id","inner")
                    ->join("cash_accounts","cash_accounts.id = payments.paid_by","left")
                    ->join('users','users.id = payments.created_by', 'left')
                    ->join("receive_payment_items","receive_payment_items.payment_id = payments.id","left")
                    ->join("receive_payments","receive_payments.id = receive_payment_items.receive_id","left")
                    ->group_by("sales.biller_id,DATE(".$this->db->dbprefix("payments").".date),payments.created_by,payments.paid_by");


            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($biller) {
                $this->datatables->where('sales.biller_id', $biller);
            }
            if ($project) {
                $this->datatables->where('sales.project_id', $project);
            }
            if ($paid_by) {
                $this->datatables->where('payments.paid_by', $paid_by);
            }
            if ($type) {
                if($type=="sale"){
                    $this->datatables->where("IFNULL(".$this->db->dbprefix('sales').".pos,0)",0);
                }else{
                    $this->datatables->where("IFNULL(".$this->db->dbprefix('sales').".pos,0)",1);
                }
            }
            if ($start_date) {
                $this->datatables->where('payments.date >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('payments.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in("sales.warehouse_id",json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('sales.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('payments.created_by', $this->session->userdata('user_id'));
            }
            echo $this->datatables->generate();
        }
    }

    public function receive_payments_summary_report()
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $this->data['cash_accounts'] = $this->site->getCashAccounts();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('receive_payments_summary_report')));
        $meta = array('page_title' => lang('receive_payments_summary_report'), 'bc' => $bc);
        $this->page_construct('reports/receive_payments_summary_report', $meta, $this->data);
    }

    public function customer_rewards_exchange_report()
    {
        $this->bpas->checkPermissions('reward_exchange');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']   = $this->site->getAllProject();
        $this->data['zones']      = $this->site->getAllZones_Order_Group();
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $this->data['salemans']   = $this->site->getAllSalemans($this->Settings->group_saleman_id);
        $this->data['nest_categories'] = $this->site->getNestedCategories();
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('rewards_exchange_customer_report')]];
        $meta = ['page_title' => lang('rewards_exchange_customer_report'), 'bc' => $bc];
        $this->page_construct('reports/rewards_exchange_customer', $meta, $this->data);
    }

    public function getRewardsExchangeCustomer($xls = null, $xls2 = null)
    {
        $this->bpas->checkPermissions('reward_exchange');
        $created_by     = $this->input->get('user') ? $this->input->get('user') : null;
        $customer       = $this->input->get('customer') ? $this->input->get('customer') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $reference_no   = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $warehouse      = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $payment_status = $this->input->get('payment_status') ? $this->input->get('payment_status') : NULL;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $type           = $this->input->get('type') ? $this->input->get('type') : null;
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $biller     = $this->input->get('biller') ? $this->input->get('biller') : explode(',', $userdata->multi_biller);
            $warehouse  = $this->input->get('warehouse') ? $this->input->get('warehouse') : explode(',', $userdata->warehouse_id);
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date . ' 00:00:00');
            $end_date   = $this->bpas->fld($end_date . ' 23:59:00');
        }
        if ($xls) {
            $si = "( SELECT reward_exchange_id, exchange_product_id,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.exchange_product_name, '__', {$this->db->dbprefix('reward_exchange_items')}.exchange_quantity) SEPARATOR '___') as exchange_product_name,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.receive_product_name, '__', {$this->db->dbprefix('reward_exchange_items')}.receive_quantity) SEPARATOR '___') as receive_product_name,
                SUM({$this->db->dbprefix('reward_exchange_items')}.subtotal) as subtotal,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_product_code,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_quantity
                from {$this->db->dbprefix('reward_exchange_items')} ";
            $si .= " GROUP BY {$this->db->dbprefix('reward_exchange_items')}.reward_exchange_id ) FSI";
                $this->db->select("
                            DATE_FORMAT({$this->db->dbprefix('rewards_exchange')}.date, '%Y-%m-%d %T') as date,
                            {$this->db->dbprefix('rewards_exchange')}.reference_no,
                            {$this->db->dbprefix('rewards_exchange')}.biller, 
                            {$this->db->dbprefix('rewards_exchange')}.company, 
                            FSI.exchange_product_name, 
                            FSI.receive_product_name,
                            FSI.subtotal,
                            {$this->db->dbprefix('rewards_exchange')}.status, 
                            {$this->db->dbprefix('rewards_exchange')}.grand_total, 
                            {$this->db->dbprefix('rewards_exchange')}.paid, 
                            ({$this->db->dbprefix('rewards_exchange')}.grand_total - {$this->db->dbprefix('rewards_exchange')}.paid) as balance,
                            {$this->db->dbprefix('rewards_exchange')}.payment_status,
                            {$this->db->dbprefix('rewards_exchange')}.id as id", false)
                            ->from('rewards_exchange')
                            ->join($si, 'FSI.reward_exchange_id=rewards_exchange.id', 'left')
                            ->where('rewards_exchange.category', 'customer')
                            ->order_by('rewards_exchange.id', 'desc');
                            if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                                $this->db->where("FIND_IN_SET({$this->db->dbprefix('rewards_exchange')}.created_by, '" . $this->session->userdata('user_id') . "')");
                            }
                            if ($biller) {
                                $this->db->where('rewards_exchange.biller_id', $biller);
                            }
                            if ($warehouse) {
                                $this->db->where('rewards_exchange.warehouse_id', $warehouse);
                            }
                            if ($created_by) {
                                $this->db->where('rewards_exchange.created_by', $created_by);
                            }
                            if ($payment_status) {
                                $get_status = explode('_', $payment_status);
                                $this->db->where_in('rewards_exchange.payment_status', $get_status);
                            }
                            if ($reference_no) {
                                $this->db->where('rewards_exchange.reference_no', $reference_no);
                            }
                            if ($customer) {
                                $this->db->where('rewards_exchange.company_id', $customer);
                            }
                            if ($type) {
                                $this->db->where('rewards_exchange.type', $type);
                            }
                            if ($start_date) {
                                $this->db->where($this->db->dbprefix('rewards_exchange') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
                            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array('font'  => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 25, 'name'  => 'Verdana'));
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('customer_rewards_exchange_report'));
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('exchange_product'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('receive_product'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('K4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('payment_status'));
                $row = 5; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $cost = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->exchange_product_name);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->receive_product_name);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->subtotal);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->status);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->balance);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->payment_status);
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('J' . $row . ':M' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $balance);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'customer_rewards_exchange_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($xls2) {
            $si = "( SELECT reward_exchange_id, exchange_product_id,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.exchange_product_name) ) as exchange_product_name,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.exchange_quantity) ) as exchange_quantity,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.receive_product_name) ) as receive_product_name,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.receive_quantity) ) as receive_quantity,
                SUM({$this->db->dbprefix('reward_exchange_items')}.subtotal) as subtotal,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_product_code
                from {$this->db->dbprefix('reward_exchange_items')} ";
            $si .= " GROUP BY {$this->db->dbprefix('reward_exchange_items')}.reward_exchange_id ) FSI";
                $this->db->select("
                            DATE_FORMAT({$this->db->dbprefix('rewards_exchange')}.date, '%Y-%m-%d %T') as date,
                            {$this->db->dbprefix('rewards_exchange')}.reference_no,
                            {$this->db->dbprefix('rewards_exchange')}.biller, 
                            {$this->db->dbprefix('rewards_exchange')}.company, 
                            FSI.exchange_product_name, 
                            FSI.receive_product_name,
                            FSI.exchange_quantity,
                            FSI.receive_quantity,
                            FSI.subtotal,
                            {$this->db->dbprefix('rewards_exchange')}.status, 
                            {$this->db->dbprefix('rewards_exchange')}.grand_total, 
                            {$this->db->dbprefix('rewards_exchange')}.paid, 
                            ({$this->db->dbprefix('rewards_exchange')}.grand_total - {$this->db->dbprefix('rewards_exchange')}.paid) as balance,
                            {$this->db->dbprefix('rewards_exchange')}.payment_status,
                            {$this->db->dbprefix('rewards_exchange')}.id as id", false)
                            ->from('rewards_exchange')
                            ->join($si, 'FSI.reward_exchange_id=rewards_exchange.id', 'left')
                            ->where('rewards_exchange.category', 'customer')
                            ->order_by('rewards_exchange.id', 'desc');
                            if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                                $this->db->where("FIND_IN_SET({$this->db->dbprefix('rewards_exchange')}.created_by, '" . $this->session->userdata('user_id') . "')");
                            }
                            if ($biller) {
                                $this->db->where('rewards_exchange.biller_id', $biller);
                            }
                            if ($warehouse) {
                                $this->db->where('rewards_exchange.warehouse_id', $warehouse);
                            }
                            if ($created_by) {
                                $this->db->where('rewards_exchange.created_by', $created_by);
                            }
                            if ($payment_status) {
                                $get_status = explode('_', $payment_status);
                                $this->db->where_in('rewards_exchange.payment_status', $get_status);
                            }
                            if ($reference_no) {
                                $this->db->where('rewards_exchange.reference_no', $reference_no);
                            }
                            if ($customer) {
                                $this->db->where('rewards_exchange.company_id', $customer);
                            }
                            if ($type) {
                                $this->db->where('rewards_exchange.type', $type);
                            }
                            if ($start_date) {
                                $this->db->where($this->db->dbprefix('rewards_exchange') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
                            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array('font'  => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 25, 'name'  => 'Verdana'));
                // $this->excel->getActiveSheet()->SetCellValue('E2:H2', lang('customer_rewards_exchange_report'));
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('customer_rewards_exchange_report'));
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('exchange_product'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('exchange_quantity'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('receive_product'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('receive_quantity'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('K4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('payment_status'));
                $row = 5;$count_row = 0; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $cost = 0; $n = 1;
                foreach ($data as $data_row) {
                    $inv_items = $this->reports_model->getAllexchange_items($data_row->id);
                    $count_row = ($row + count($inv_items) -1);
                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':A' . $count_row)->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->mergeCells('B' . $row . ':B' . $count_row)->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->mergeCells('C' . $row . ':C' . $count_row)->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->mergeCells('D' . $row . ':D' . $count_row)->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->mergeCells('E' . $row . ':E' . $count_row)->SetCellValue('E' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->mergeCells('K' . $row . ':K' . $count_row)->SetCellValue('K' . $row, $data_row->status);
                    $this->excel->getActiveSheet()->mergeCells('L' . $row . ':L' . $count_row)->SetCellValue('L' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->mergeCells('M' . $row . ':M' . $count_row)->SetCellValue('M' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->mergeCells('N' . $row . ':N' . $count_row)->SetCellValue('N' . $row, $data_row->balance);
                    $this->excel->getActiveSheet()->mergeCells('O' . $row . ':O' . $count_row)->SetCellValue('O' . $row, $data_row->payment_status);
                    foreach ($inv_items as $item) {
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $item->exchange_product_name);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $item->exchange_quantity);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $item->receive_product_name);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $item->receive_quantity);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->subtotal);
                        $row++;
                    }
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('J' . $row . ':M' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $balance);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'customer_rewards_exchange_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else{
            $si = "( SELECT reward_exchange_id, exchange_product_id,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.exchange_product_name, '__', {$this->db->dbprefix('reward_exchange_items')}.exchange_quantity) SEPARATOR '___') as exchange_product_name,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.receive_product_name, '__', {$this->db->dbprefix('reward_exchange_items')}.receive_quantity) SEPARATOR '___') as receive_product_name,
                SUM({$this->db->dbprefix('reward_exchange_items')}.subtotal) as subtotal,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_product_code,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_quantity
                from {$this->db->dbprefix('reward_exchange_items')} ";
            $si .= " GROUP BY {$this->db->dbprefix('reward_exchange_items')}.reward_exchange_id ) FSI";
                $this->load->library('datatables');
                $this->datatables->select("
                            DATE_FORMAT({$this->db->dbprefix('rewards_exchange')}.date, '%Y-%m-%d %T') as date,
                            {$this->db->dbprefix('rewards_exchange')}.reference_no,
                            {$this->db->dbprefix('rewards_exchange')}.biller, 
                            {$this->db->dbprefix('rewards_exchange')}.company, 
                            FSI.exchange_product_name, 
                            FSI.receive_product_name,
                            {$this->db->dbprefix('rewards_exchange')}.status, 
                            {$this->db->dbprefix('rewards_exchange')}.grand_total, 
                            {$this->db->dbprefix('rewards_exchange')}.paid, 
                            ({$this->db->dbprefix('rewards_exchange')}.grand_total - {$this->db->dbprefix('rewards_exchange')}.paid) as balance,
                            {$this->db->dbprefix('rewards_exchange')}.payment_status,
                            {$this->db->dbprefix('rewards_exchange')}.type,
                            {$this->db->dbprefix('rewards_exchange')}.id as id", false)
                            ->from('rewards_exchange')
                            ->join($si, 'FSI.reward_exchange_id=rewards_exchange.id', 'left')
                            ->where('rewards_exchange.category', 'customer')
                            ->order_by('rewards_exchange.id', 'desc');
                
                if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                    $this->datatables->where("FIND_IN_SET({$this->db->dbprefix('rewards_exchange')}.created_by, '" . $this->session->userdata('user_id') . "')");
                }
                if ($biller) {
                    $this->datatables->where('rewards_exchange.biller_id', $biller);
                }
                if ($warehouse) {
                    $this->datatables->where('rewards_exchange.warehouse_id', $warehouse);
                }
                if ($created_by) {
                    $this->datatables->where('rewards_exchange.created_by', $created_by);
                }
                if ($payment_status) {
                    $get_status = explode('_', $payment_status);
                    $this->datatables->where_in('rewards_exchange.payment_status', $get_status);
                }
                if ($reference_no) {
                    $this->datatables->where('rewards_exchange.reference_no', $reference_no);
                }
                if ($customer) {
                    $this->datatables->where('rewards_exchange.company_id', $customer);
                }
                if ($type) {
                    $this->datatables->where('rewards_exchange.type', $type);
                }
                if ($start_date) {
                    $this->datatables->where($this->db->dbprefix('rewards_exchange') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
                }
                echo $this->datatables->generate();
            }
    }

    public function supplier_rewards_exchange_report()
    {
        $this->bpas->checkPermissions('reward_exchange');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers']    = $this->site->getAllCompanies('biller');
        $this->data['projects']   = $this->site->getAllProject();
        $this->data['zones']      = $this->site->getAllZones_Order_Group();
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands']     = $this->site->getAllBrands();
        $this->data['salemans']   = $this->site->getAllSalemans($this->Settings->group_saleman_id);
        $this->data['nest_categories'] = $this->site->getNestedCategories();
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('rewards_exchange_supplier')]];
        $meta = ['page_title' => lang('rewards_exchange_supplier_report'), 'bc' => $bc];
        $this->page_construct('reports/rewards_exchange_supplier', $meta, $this->data);
    }

    public function getRewardsExchangeSupplier($xls = null, $xls2 = null)
    {
        $this->bpas->checkPermissions('reward_exchange');
        $created_by     = $this->input->get('user') ? $this->input->get('user') : null;
        $customer       = $this->input->get('supplier') ? $this->input->get('supplier') : null;
        $biller         = $this->input->get('biller') ? $this->input->get('biller') : null;
        $reference_no   = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $warehouse      = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $payment_status = $this->input->get('payment_status') ? $this->input->get('payment_status') : NULL;
        $start_date     = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date       = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        $type           = $this->input->get('type') ? $this->input->get('type') : null;
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $biller     = $this->input->get('biller') ? $this->input->get('biller') : explode(',', $userdata->multi_biller);
            $warehouse  = $this->input->get('warehouse') ? $this->input->get('warehouse') : explode(',', $userdata->warehouse_id);
        }
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date . ' 00:00:00');
            $end_date   = $this->bpas->fld($end_date . ' 23:59:00');
        }
        if ($xls) {
            $si = "( SELECT reward_exchange_id, exchange_product_id,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.exchange_product_name, '__', {$this->db->dbprefix('reward_exchange_items')}.exchange_quantity) SEPARATOR '___') as exchange_product_name,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.receive_product_name, '__', {$this->db->dbprefix('reward_exchange_items')}.receive_quantity) SEPARATOR '___') as receive_product_name,
                SUM({$this->db->dbprefix('reward_exchange_items')}.subtotal) as subtotal,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_product_code,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_quantity
                from {$this->db->dbprefix('reward_exchange_items')} ";
            $si .= " GROUP BY {$this->db->dbprefix('reward_exchange_items')}.reward_exchange_id ) FSI";

                $this->db->select("
                            DATE_FORMAT({$this->db->dbprefix('rewards_exchange')}.date, '%Y-%m-%d %T') as date,
                            {$this->db->dbprefix('rewards_exchange')}.reference_no,
                            {$this->db->dbprefix('rewards_exchange')}.biller, 
                            {$this->db->dbprefix('rewards_exchange')}.company, 
                            FSI.exchange_product_name, 
                            FSI.receive_product_name,
                            FSI.subtotal,
                            {$this->db->dbprefix('rewards_exchange')}.status, 
                            {$this->db->dbprefix('rewards_exchange')}.grand_total, 
                            {$this->db->dbprefix('rewards_exchange')}.paid, 
                            ({$this->db->dbprefix('rewards_exchange')}.grand_total - {$this->db->dbprefix('rewards_exchange')}.paid) as balance,
                            {$this->db->dbprefix('rewards_exchange')}.payment_status,
                            {$this->db->dbprefix('rewards_exchange')}.id as id", false)
                            ->from('rewards_exchange')
                            ->join($si, 'FSI.reward_exchange_id=rewards_exchange.id', 'left')
                            ->where('rewards_exchange.category', 'supplier')
                            ->order_by('rewards_exchange.id', 'desc');
                            if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                                $this->db->where("FIND_IN_SET({$this->db->dbprefix('rewards_exchange')}.created_by, '" . $this->session->userdata('user_id') . "')");
                            }
                            if ($biller) {
                                $this->db->where('rewards_exchange.biller_id', $biller);
                            }
                            if ($warehouse) {
                                $this->db->where('rewards_exchange.warehouse_id', $warehouse);
                            }
                            if ($created_by) {
                                $this->db->where('rewards_exchange.created_by', $created_by);
                            }
                            if ($payment_status) {
                                $get_status = explode('_', $payment_status);
                                $this->db->where_in('rewards_exchange.payment_status', $get_status);
                            }
                            if ($reference_no) {
                                $this->db->where('rewards_exchange.reference_no', $reference_no);
                            }
                            if ($customer) {
                                $this->db->where('rewards_exchange.company_id', $customer);
                            }
                            if ($type) {
                                $this->db->where('rewards_exchange.type', $type);
                            }
                            if ($start_date) {
                                $this->db->where($this->db->dbprefix('rewards_exchange') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
                            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array(
                    'font'  => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 25,
                        'name'  => 'Verdana'
                    )
                );
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('customer_rewards_exchange_report'));
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('exchange_product'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('receive_product'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('K4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('payment_status'));
                $row = 5; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $cost = 0; $n = 1;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->exchange_product_name);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->receive_product_name);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->subtotal);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $data_row->status);
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->balance);
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $data_row->payment_status);
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('J' . $row . ':M' . $row)->getBorders()
                ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('K' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $balance);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'supplier_rewards_exchange_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($xls2) {
            $si = "( SELECT reward_exchange_id, exchange_product_id,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.exchange_product_name) ) as exchange_product_name,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.exchange_quantity) ) as exchange_quantity,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.receive_product_name) ) as receive_product_name,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.receive_quantity) ) as receive_quantity,
                SUM({$this->db->dbprefix('reward_exchange_items')}.subtotal) as subtotal,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_product_code
                from {$this->db->dbprefix('reward_exchange_items')} ";
            $si .= " GROUP BY {$this->db->dbprefix('reward_exchange_items')}.reward_exchange_id ) FSI";
                $this->db->select("
                            DATE_FORMAT({$this->db->dbprefix('rewards_exchange')}.date, '%Y-%m-%d %T') as date,
                            {$this->db->dbprefix('rewards_exchange')}.reference_no,
                            {$this->db->dbprefix('rewards_exchange')}.biller, 
                            {$this->db->dbprefix('rewards_exchange')}.company, 
                            FSI.exchange_product_name, 
                            FSI.receive_product_name,
                            FSI.exchange_quantity,
                            FSI.receive_quantity,
                            FSI.subtotal,
                            {$this->db->dbprefix('rewards_exchange')}.status, 
                            {$this->db->dbprefix('rewards_exchange')}.grand_total, 
                            {$this->db->dbprefix('rewards_exchange')}.paid, 
                            ({$this->db->dbprefix('rewards_exchange')}.grand_total - {$this->db->dbprefix('rewards_exchange')}.paid) as balance,
                            {$this->db->dbprefix('rewards_exchange')}.payment_status,
                            {$this->db->dbprefix('rewards_exchange')}.id as id", false)
                            ->from('rewards_exchange')
                            ->join($si, 'FSI.reward_exchange_id=rewards_exchange.id', 'left')
                            ->where('rewards_exchange.category', 'supplier')
                            ->order_by('rewards_exchange.id', 'desc');
                            if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                                $this->db->where("FIND_IN_SET({$this->db->dbprefix('rewards_exchange')}.created_by, '" . $this->session->userdata('user_id') . "')");
                            }
                            if ($biller) {
                                $this->db->where('rewards_exchange.biller_id', $biller);
                            }
                            if ($warehouse) {
                                $this->db->where('rewards_exchange.warehouse_id', $warehouse);
                            }
                            if ($created_by) {
                                $this->db->where('rewards_exchange.created_by', $created_by);
                            }
                            if ($payment_status) {
                                $get_status = explode('_', $payment_status);
                                $this->db->where_in('rewards_exchange.payment_status', $get_status);
                            }
                            if ($reference_no) {
                                $this->db->where('rewards_exchange.reference_no', $reference_no);
                            }
                            if ($customer) {
                                $this->db->where('rewards_exchange.company_id', $customer);
                            }
                            if ($type) {
                                $this->db->where('rewards_exchange.type', $type);
                            }
                            if ($start_date) {
                                $this->db->where($this->db->dbprefix('rewards_exchange') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
                            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $styleArray = array('font'  => array('bold'  => true, 'color' => array('rgb' => '#000000'), 'size'  => 25, 'name'  => 'Verdana'));
                $this->excel->getActiveSheet()->setTitle(lang('sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('D1', $this->Settings->site_name);
                $this->excel->getActiveSheet()->getStyle('D1')->applyFromArray($styleArray);
                $this->excel->getActiveSheet()->SetCellValue('D2', lang('supplier_rewards_exchange_report'));
                $this->excel->getActiveSheet()->SetCellValue('A4', lang('no'));
                $this->excel->getActiveSheet()->SetCellValue('B4', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('C4', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D4', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('E4', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('F4', lang('exchange_product'));
                $this->excel->getActiveSheet()->SetCellValue('G4', lang('exchange_quantity'));
                $this->excel->getActiveSheet()->SetCellValue('H4', lang('receive_product'));
                $this->excel->getActiveSheet()->SetCellValue('I4', lang('receive_quantity'));
                $this->excel->getActiveSheet()->SetCellValue('J4', lang('subtotal'));
                $this->excel->getActiveSheet()->SetCellValue('K4', lang('status'));
                $this->excel->getActiveSheet()->SetCellValue('L4', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('M4', lang('paid'));
                $this->excel->getActiveSheet()->SetCellValue('N4', lang('balance'));
                $this->excel->getActiveSheet()->SetCellValue('O4', lang('payment_status'));
                $row = 5; $count_row = 0; $cus_qty = 0; $total = 0; $grand_total = 0; $discount = 0; $paid = 0; $balance = 0; $cost = 0; $n = 1;
                foreach ($data as $data_row) {
                    $inv_items = $this->reports_model->getAllexchange_items($data_row->id);
                    $count_row = ($row + count($inv_items) -1);
                    $this->excel->getActiveSheet()->mergeCells('A' . $row . ':A' . $count_row)->SetCellValue('A' . $row, $n);
                    $this->excel->getActiveSheet()->mergeCells('B' . $row . ':B' . $count_row)->SetCellValue('B' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->mergeCells('C' . $row . ':C' . $count_row)->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->mergeCells('D' . $row . ':D' . $count_row)->SetCellValue('D' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->mergeCells('E' . $row . ':E' . $count_row)->SetCellValue('E' . $row, $data_row->company);
                    $this->excel->getActiveSheet()->mergeCells('K' . $row . ':K' . $count_row)->SetCellValue('K' . $row, $data_row->status);
                    $this->excel->getActiveSheet()->mergeCells('L' . $row . ':L' . $count_row)->SetCellValue('L' . $row, $data_row->grand_total);
                    $this->excel->getActiveSheet()->mergeCells('M' . $row . ':M' . $count_row)->SetCellValue('M' . $row, $data_row->paid);
                    $this->excel->getActiveSheet()->mergeCells('N' . $row . ':N' . $count_row)->SetCellValue('N' . $row, $data_row->balance);
                    $this->excel->getActiveSheet()->mergeCells('O' . $row . ':O' . $count_row)->SetCellValue('O' . $row, $data_row->payment_status);
                    foreach ($inv_items as $item) {
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $item->exchange_product_name);
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $item->exchange_quantity);
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $item->receive_product_name);
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $item->receive_quantity);
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row,  $item->subtotal);
                        $row++;
                    }
                    $grand_total += $data_row->grand_total;
                    $paid        += $data_row->paid;
                    $balance     += ($data_row->grand_total - $data_row->paid);
                    // $row++;
                    $n++;
                }
                $this->excel->getActiveSheet()->getStyle('J' . $row . ':M' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('L' . $row, $grand_total);
                $this->excel->getActiveSheet()->SetCellValue('M' . $row, $paid);
                $this->excel->getActiveSheet()->SetCellValue('N' . $row, $balance);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('E2:E' . $row)->getAlignment()->setWrapText(true);
                $filename = 'supplier_rewards_exchange_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else{
            $si = "( SELECT reward_exchange_id, exchange_product_id,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.exchange_product_name, '__', {$this->db->dbprefix('reward_exchange_items')}.exchange_quantity) SEPARATOR '___') as exchange_product_name,
                GROUP_CONCAT(CONCAT({$this->db->dbprefix('reward_exchange_items')}.receive_product_name, '__', {$this->db->dbprefix('reward_exchange_items')}.receive_quantity) SEPARATOR '___') as receive_product_name,
                SUM({$this->db->dbprefix('reward_exchange_items')}.subtotal) as subtotal,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_product_code,
                {$this->db->dbprefix('reward_exchange_items')}.exchange_quantity
                from {$this->db->dbprefix('reward_exchange_items')} ";
            $si .= " GROUP BY {$this->db->dbprefix('reward_exchange_items')}.reward_exchange_id ) FSI";
                $this->load->library('datatables');
                $this->datatables->select("
                            DATE_FORMAT({$this->db->dbprefix('rewards_exchange')}.date, '%Y-%m-%d %T') as date,
                            {$this->db->dbprefix('rewards_exchange')}.reference_no,
                            {$this->db->dbprefix('rewards_exchange')}.biller, 
                            {$this->db->dbprefix('rewards_exchange')}.company, 
                            FSI.exchange_product_name, 
                            FSI.receive_product_name,
                            {$this->db->dbprefix('rewards_exchange')}.status, 
                            {$this->db->dbprefix('rewards_exchange')}.grand_total, 
                            {$this->db->dbprefix('rewards_exchange')}.paid, 
                            ({$this->db->dbprefix('rewards_exchange')}.grand_total - {$this->db->dbprefix('rewards_exchange')}.paid) as balance,
                            {$this->db->dbprefix('rewards_exchange')}.payment_status,
                            {$this->db->dbprefix('rewards_exchange')}.type,
                            {$this->db->dbprefix('rewards_exchange')}.id as id", false)
                            ->from('rewards_exchange')
                            ->join($si, 'FSI.reward_exchange_id=rewards_exchange.id', 'left')
                            ->where('rewards_exchange.category', 'supplier')
                            ->order_by('rewards_exchange.id', 'desc');
                
                if (!$this->Customer && !$this->Supplier && !$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                    $this->datatables->where("FIND_IN_SET({$this->db->dbprefix('rewards_exchange')}.created_by, '" . $this->session->userdata('user_id') . "')");
                }
                if ($biller) {
                    $this->datatables->where('rewards_exchange.biller_id', $biller);
                }
                if ($warehouse) {
                    $this->datatables->where('rewards_exchange.warehouse_id', $warehouse);
                }
                if ($created_by) {
                    $this->datatables->where('rewards_exchange.created_by', $created_by);
                }
                if ($payment_status) {
                    $get_status = explode('_', $payment_status);
                    $this->datatables->where_in('rewards_exchange.payment_status', $get_status);
                }
                if ($reference_no) {
                    $this->datatables->where('rewards_exchange.reference_no', $reference_no);
                }
                if ($customer) {
                    $this->datatables->where('rewards_exchange.company_id', $customer);
                }
                if ($type) {
                    $this->datatables->where('rewards_exchange.type', $type);
                }
                if ($start_date) {
                    $this->datatables->where($this->db->dbprefix('rewards_exchange') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
                }
                echo $this->datatables->generate();
            }
    }

    public function reward_stock_received()
    {
        $this->bpas->checkPermissions('stock_received');
        $this->data['error']      = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['projects']   = $this->site->getAllProject();
        $bc   = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('rewards_stock_received_report')]];
        $meta = ['page_title' => lang('rewards_stock_received_report'), 'bc' => $bc];
        $this->page_construct('reports/reward_stock_received', $meta, $this->data);
    }

    public function getRewardStockReceivedReport($pdf = null, $xls = null, $preview = null, $excel_deatail = null)
    {
        $this->bpas->checkPermissions('stock_received');
        $customer     = $this->input->get('customer') ? $this->input->get('customer') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $supplier     = $this->input->get('supplier') ? $this->input->get('supplier') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $purchase_ref = $this->input->get('purchase_ref') ? $this->input->get('purchase_ref') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if ($pdf || $xls) {
            $this->db->select("
                DATE_FORMAT({$this->db->dbprefix('stock_received')}.date, '%Y-%m-%d %T') as date, 
                {$this->db->dbprefix('rewards_exchange')}.reference_no as pref, 
                {$this->db->dbprefix('stock_received')}.reference_no, 
                {$this->db->dbprefix('warehouses')}.name as wname, 
                {$this->db->dbprefix('purchases')}.supplier, 
                IF({$this->db->dbprefix('rewards_exchange')}.category = 'supplier', {$this->db->dbprefix('companies')}.name, '') AS supplier,
                IF({$this->db->dbprefix('rewards_exchange')}.category = 'customer', {$this->db->dbprefix('companies')}.name, '') AS customer,
                {$this->db->dbprefix('stock_received')}.note, 
                {$this->db->dbprefix('stock_received')}.id as id", false);
            $this->db->from('stock_received')
            ->where('stock_received.purchase_id', NULL)
            ->join('purchases', 'stock_received.purchase_id=purchases.id', 'left')
            ->join('rewards_exchange', 'rewards_exchange.id=stock_received.reward_exchange_id', 'left')
            ->join('companies', 'companies.id = rewards_exchange.company_id', 'left')
            ->join('warehouses', 'warehouses.id = stock_received.warehouse_id', 'left');
            if ($user) {
                $this->db->where('stock_received.created_by', $user);
            }
            if ($supplier) {
                $this->db->where('rewards_exchange.company_id', $supplier);
            }
            // if ($customer) {
            //     $this->db->where('rewards_exchange.company_id', $customer);
            // }
            if ($warehouse) {
                $this->db->where('rewards_exchange.warehouse_id', $warehouse);
            }
            if ($purchase_ref) {
                $this->db->like('rewards_exchange.reference_no', $purchase_ref, 'both');
            }
            if ($reference_no) {
                $this->db->like('stock_received.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('stock_received') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('reward_stock_received_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reward_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->pref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, strip_tags(html_entity_decode($data_row->note)));
                    $row++;
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'stock_received_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } elseif ($excel_deatail) {
            $this->db->select("
                DATE_FORMAT({$this->db->dbprefix('stock_received')}.date, '%Y-%m-%d %T') as date, 
                {$this->db->dbprefix('rewards_exchange')}.reference_no as pref, 
                {$this->db->dbprefix('stock_received')}.reference_no, 
                {$this->db->dbprefix('warehouses')}.name as wname, 
                {$this->db->dbprefix('purchases')}.supplier, 
                IF({$this->db->dbprefix('rewards_exchange')}.category = 'supplier', {$this->db->dbprefix('companies')}.name, '') AS supplier,
                IF({$this->db->dbprefix('rewards_exchange')}.category = 'customer', {$this->db->dbprefix('companies')}.name, '') AS customer,
                {$this->db->dbprefix('stock_received')}.note, 
                {$this->db->dbprefix('stock_received')}.id as id", false);
            $this->db->from('stock_received')
                ->where('stock_received.purchase_id', NULL)
                ->join('purchases', 'stock_received.purchase_id=purchases.id', 'left')
                ->join('rewards_exchange', 'rewards_exchange.id=stock_received.reward_exchange_id', 'left')
                ->join('companies', 'companies.id = rewards_exchange.company_id', 'left')
                ->join('warehouses', 'warehouses.id = stock_received.warehouse_id', 'left');
            if ($user) {
                $this->db->where('stock_received.created_by', $user);
            }
            if ($supplier) {
                $this->db->where('rewards_exchange.company_id', $supplier);
            }
            // if ($customer) {
            //     $this->db->where('rewards_exchange.company_id', $customer);
            // }
            if ($warehouse) {
                $this->db->where('rewards_exchange.warehouse_id', $warehouse);
            }
            if ($purchase_ref) {
                $this->db->like('rewards_exchange.reference_no', $purchase_ref, 'both');
            }
            if ($reference_no) {
                $this->db->like('stock_received.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->db->where($this->db->dbprefix('stock_received') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('reward_stock_received_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reward_reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('note'));
                $row = 2;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->pref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->wname);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, strip_tags(html_entity_decode($data_row->note)));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->excel->getActiveSheet()->getStyle('F2:F' . $row)->getAlignment()->setWrapText(true);
                $filename = 'stock_received_detail_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                    DATE_FORMAT({$this->db->dbprefix('stock_received')}.date, '%Y-%m-%d %T') as date, 
                    {$this->db->dbprefix('rewards_exchange')}.reference_no as pref, 
                    {$this->db->dbprefix('stock_received')}.reference_no, 
                    {$this->db->dbprefix('warehouses')}.name as wname, 
                    IF({$this->db->dbprefix('rewards_exchange')}.category = 'customer', {$this->db->dbprefix('customers')}.name, '') AS customer,
                    IF({$this->db->dbprefix('rewards_exchange')}.category = 'supplier', {$this->db->dbprefix('suppliers')}.name, '') AS supplier,
                    {$this->db->dbprefix('stock_received')}.note, 
                    {$this->db->dbprefix('stock_received')}.id as id", false);
            $this->datatables->from('stock_received');
            $this->datatables->where('stock_received.reward_exchange_id IS NOT NULL');
            $this->datatables->join('rewards_exchange', 'rewards_exchange.id=stock_received.reward_exchange_id', 'left');
            $this->datatables->join('companies bpas_customers', 'bpas_customers.id = rewards_exchange.company_id', 'left');
            $this->datatables->join('companies bpas_suppliers', 'bpas_suppliers.id = rewards_exchange.company_id', 'left');
            $this->datatables->join('warehouses', 'warehouses.id = stock_received.warehouse_id', 'left');
            if ($user) {
                $this->datatables->where('stock_received.created_by', $user);
            }
            if ($customer) {
                $this->datatables->where('bpas_customers.id', $customer);
            }
            if ($supplier) {
                $this->datatables->where('bpas_suppliers.id', $supplier);
            }
            if ($warehouse) {
                $this->datatables->where('rewards_exchange.warehouse_id', $warehouse);
            }
            if ($purchase_ref) {
                $this->datatables->like('rewards_exchange.reference_no', $purchase_ref, 'both');
            }
            if ($reference_no) {
                $this->datatables->like('stock_received.reference_no', $reference_no, 'both');
            }
            if ($start_date) {
                $this->datatables->where($this->db->dbprefix('stock_received') . '.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }
    function deposits($biller_id = NULL)
    {
        $datt =$this->reports_model->getLastDate("deposits","date");
        $this->bpas->checkPermissions('payments',NULL,'report_profit');
        $user = $this->site->getUser();
        if($biller_id != NULL){
            $this->data['biller_id'] = $biller_id;
        }else{
            $this->data['biller_id'] = "";
        }
        if(!$this->Owner && !$this->Admin) {
            if($user->biller_id){
                $this->data['billers'] = $this->site->getCompanyByArray($user->biller_id);
            }else{
                $this->data['billers'] = $this->site->getAllCompanies('biller');
            }
        }else{
            $this->data['billers'] = $this->site->getAllCompanies('biller');
        }
         if ($this->input->post('start_date')) {
            $start_date = $this->bpas->fsd($this->input->post('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->post('end_date')) {
            $end_date = $this->bpas->fsd($this->input->post('end_date'));
        } else {
            $end_date = $datt;
        }
        $this->data['start_date2'] = $start_date;
        $this->data['end_date2']   = $end_date;
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');
        $this->data['users'] = $this->reports_model->getStaff();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('deposits_report')));
        $meta = array('page_title' => lang('deposits_report'), 'bc' => $bc);
        $this->page_construct('reports/deposits_so_po_report', $meta, $this->data);
    }
    function getdepositsReports($pdf = NULL, $xls = NULL)
    {
        $datt =$this->reports_model->getLastDate("deposits", "date");
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('deposit_ref')) {
            $deposit_ref = $this->input->get('deposit_ref');
        } else {
            $deposit_ref = NULL;
        }
        if ($this->input->get('purchase_ref')) {
            $purchase_ref = $this->input->get('purchase_ref');
        } else {
            $purchase_ref = NULL;
        }
        if ($this->input->get('purchase_order_ref')) {
            $purchase_order_ref = $this->input->get('purchase_order_ref');
        } else {
            $purchase_order_ref = NULL;
        }
        if ($this->input->get('sale_ref')) {
            $sale_ref = $this->input->get('sale_ref');
        } else {
            $sale_ref = NULL;
        }
        if ($this->input->get('sale_order_ref')) {
            $sale_order_ref = $this->input->get('sale_order_ref');
        } else {
            $sale_order_ref = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->bpas->fsd($this->input->get('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->bpas->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }

        if ($pdf || $xls) {
        
            $user_biller_id = $this->session->userdata('biller_id');

                  $this->db->select(
                    $this->db->dbprefix('payments').".id as idd,
                    ".$this->db->dbprefix('payments').".date, 
                    ".$this->db->dbprefix('payments').".reference_no as deposit_ref,
                    ".$this->db->dbprefix('purchases_order').".reference_no as purchase_order_ref,
                    IF ({$this->db->dbprefix('companies')}.group_name = 'supplier', bpas_companies.name, '') as supplier,

                    ".$this->db->dbprefix('sales_order').".reference_no as sale_order_ref, 
                    IF ({$this->db->dbprefix('companies')}.group_name = 'customer', bpas_companies.name, '') as customer,
                    ".$this->db->dbprefix('payments').".paid_by, 
                    ".$this->db->dbprefix('payments').".amount,
                    CONCAT(bpas_users.first_name,' ',bpas_users.last_name) as create_by ")
                ->from('payments')
                
                ->join('sales', 'sales.id=payments.sale_id', 'left')
                ->join('sales_order', 'sales_order.id=payments.sale_order_id', 'left')
                ->join('purchases', 'purchases.id=payments.purchase_order_id', 'left')
                ->join('purchases_order', 'purchases_order.id=payments.purchase_order_id', 'left')
                ->join('companies', 'companies.id=purchases_order.biller_id', 'left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->order_by('payments.date', 'DESC');

            $this->db->where('payments.sale_order_id is not null');

            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
           
                $this->db->where('payments.created_by', $this->session->userdata('user_id'));
                
            }
            if ($user) {
                $this->db->where('payments.created_by', $user);
            }
            if ($deposit_ref) {
                $this->db->like('payments.reference', $deposit_ref, 'both');
            }
            /*
            if ($biller_id) {
                $this->db->where('payments.biller_id', $biller_id);
            }
            if ($customer) {
                $this->db->where('payments.company_id', $customer);
            }
            if ($supplier) {
                $this->db->where('payments.company_id', $supplier);
            }
            
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            */
            if ($purchase_order_ref) {
                $this->db->like('purchases_order.reference_no', $purchase_order_ref, 'both');
            }
            
            if ($sale_order_ref) {
                $this->db->like('sales_order.reference_no', $sale_order_ref, 'both');
            }
            if ($start_date) {
                $this->db->where('date_format('.$this->db->dbprefix('deposits') . '.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }


            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('deposits_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchase_order_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('sale_order_ref'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('created_by'));

                $row = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->deposit_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->purchase_order_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->sale_order_ref);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->paid_by);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->decode_html($data_row->note));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->create_by);
                    $total += $data_row->amount;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("J" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('J' . $row, $total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $filename = 'deposits_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }
                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $user_id        = $this->session->userdata('user_id');
            $user_biller_id = $this->session->userdata('biller_id');
            $this->load->library('datatables');
            $this->datatables->select(
                    $this->db->dbprefix('payments').".id as idd,
                    ".$this->db->dbprefix('payments').".date, 
                    ".$this->db->dbprefix('payments').".reference_no as deposit_ref,
                    ".$this->db->dbprefix('purchases_order').".reference_no as purchase_order_ref,
                    IF ({$this->db->dbprefix('companies')}.group_name = 'supplier', bpas_companies.name, '') as supplier,

                    ".$this->db->dbprefix('sales_order').".reference_no as sale_order_ref, 
                    IF ({$this->db->dbprefix('companies')}.group_name = 'customer', bpas_companies.name, '') as customer,
                    ".$this->db->dbprefix('payments').".paid_by, 
                    ".$this->db->dbprefix('payments').".amount,
                    CONCAT(bpas_users.first_name,' ',bpas_users.last_name) as create_by ")
                ->from('payments')
                
                ->join('sales', 'sales.id=payments.sale_id', 'left')
                ->join('sales_order', 'sales_order.id=payments.sale_order_id', 'left')
                ->join('purchases', 'purchases.id=payments.purchase_order_id', 'left')
                ->join('purchases_order', 'purchases_order.id=payments.purchase_order_id', 'left')
                ->join('companies', 'companies.id=purchases_order.biller_id', 'left')
                ->join('users', 'users.id=payments.created_by', 'left')
                ->order_by('payments.date', 'DESC');

            $this->datatables->where('payments.sale_order_id is not null');

            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user_id) {
                    $this->datatables->where('payments.created_by', $user_id);
                }
            }
            if ($user) {
                $this->datatables->where('payments.created_by', $user);
            }
            if ($deposit_ref) {
                $this->datatables->like('payments.reference', $deposit_ref, 'both');
            }
            /*
            if ($biller_id) {
                $this->datatables->where('payments.biller_id', $biller_id);
            }
            if ($customer) {
                $this->datatables->where('payments.company_id', $customer);
            }
            if ($supplier) {
                $this->datatables->where('payments.company_id', $supplier);
            }
            
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            */
            if ($purchase_order_ref) {
                $this->datatables->like('purchases_order.reference_no', $purchase_order_ref, 'both');
            }
            
            if ($sale_order_ref) {
                $this->datatables->like('sales_order.reference_no', $sale_order_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('deposits') . '.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }
    function getdepositsReports_fromtabledeposit($pdf = NULL, $xls = NULL)
    {
        $datt =$this->reports_model->getLastDate("deposits", "date");
        if ($this->input->get('user')) {
            $user = $this->input->get('user');
        } else {
            $user = NULL;
        }
        if ($this->input->get('biller')) {
            $biller = $this->input->get('biller');
        } else {
            $biller = NULL;
        }
        if ($this->input->get('biller_id')) {
            $biller_id = $this->input->get('biller_id');
        } else {
            $biller_id = NULL;
        }
        if ($this->input->get('supplier')) {
            $supplier = $this->input->get('supplier');
        } else {
            $supplier = NULL;
        }
        if ($this->input->get('customer')) {
            $customer = $this->input->get('customer');
        } else {
            $customer = NULL;
        }
        if ($this->input->get('deposit_ref')) {
            $deposit_ref = $this->input->get('deposit_ref');
        } else {
            $deposit_ref = NULL;
        }
        if ($this->input->get('purchase_ref')) {
            $purchase_ref = $this->input->get('purchase_ref');
        } else {
            $purchase_ref = NULL;
        }
        if ($this->input->get('purchase_order_ref')) {
            $purchase_order_ref = $this->input->get('purchase_order_ref');
        } else {
            $purchase_order_ref = NULL;
        }
        if ($this->input->get('sale_ref')) {
            $sale_ref = $this->input->get('sale_ref');
        } else {
            $sale_ref = NULL;
        }
        if ($this->input->get('sale_order_ref')) {
            $sale_order_ref = $this->input->get('sale_order_ref');
        } else {
            $sale_order_ref = NULL;
        }
        if ($this->input->get('start_date')) {
            $start_date = $this->bpas->fsd($this->input->get('start_date'));
        } else {
            $start_date = $datt;
        }
        if ($this->input->get('end_date')) {
            $end_date = $this->bpas->fsd($this->input->get('end_date'));
        } else {
            $end_date = $datt;
        }

        if ($pdf || $xls) {
            $user_id        = $this->session->userdata('user_id');
            $user_biller_id = $this->session->userdata('biller_id');
            $this->db->select(
                    $this->db->dbprefix('deposits') . ".id as idd, ". 
                    $this->db->dbprefix('deposits'). ".date, " . 
                    $this->db->dbprefix('deposits') . ".reference as deposit_ref, " . 
                    $this->db->dbprefix('purchases') . ".reference_no as purchase_ref, " .
                    $this->db->dbprefix('purchases_order') . ".reference_no as purchase_order_ref, " .
                    $this->db->dbprefix('sales') . ".reference_no as sale_ref, " .
                    $this->db->dbprefix('sales_order') . ".reference_no as sale_order_ref, 
                    IF (bpas_groups.name = 'supplier', bpas_companies.name, '') as supplier,
                    IF (bpas_groups.name = 'customer', bpas_companies.name, '') as customer,
                    bpas_deposits.paid_by, 
                    bpas_deposits.amount, 
                    bpas_deposits.note, 
                    CONCAT(bpas_users.first_name,' ',bpas_users.last_name) as create_by ")
                ->from('deposits')
                ->join('companies', 'companies.id=deposits.company_id', 'left')
                ->join('groups', 'groups.id=companies.group_id', 'left')
                ->join('sales', 'sales.id=deposits.sale_id', 'left')
                ->join('sales_order', 'sales_order.id=deposits.so_id', 'left')
                ->join('purchases', 'purchases.id=deposits.po_id', 'left')
                ->join('purchases_order', 'purchases_order.id=deposits.po_id', 'left')
                ->join('users', 'users.id=deposits.created_by', 'left')
                ->group_by('deposits.id')
                ->order_by('deposits.date', 'DESC');
            
            if($user_biller_id != NULL){
                $this->db->where('deposits.biller_id', $user_biller_id);
            }
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user_id) {
                    $this->db->where('deposits.created_by', $user_id);
                }
            }
            if ($user) {
                $this->db->where('deposits.created_by', $user);
            }
            if ($biller) {
                $this->db->where('deposits.biller_id', $biller);
            }
            if ($biller_id) {
                $this->db->where('deposits.biller_id', $biller_id);
            }
            if ($customer) {
                $this->db->where('deposits.company_id', $customer);
            }
            if ($supplier) {
                $this->db->where('deposits.company_id', $supplier);
            }
            if ($deposit_ref) {
                $this->db->like('deposits.reference', $deposit_ref, 'both');
            }
            if ($purchase_ref) {
                $this->db->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($purchase_order_ref) {
                $this->db->like('purchases_order.reference_no', $purchase_order_ref, 'both');
            }
            if ($sale_ref) {
                $this->db->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($sale_order_ref) {
                $this->db->like('sales_order.reference_no', $sale_order_ref, 'both');
            }
            if ($start_date) {
                $this->db->where('date_format('.$this->db->dbprefix('payments') . '.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }

            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('deposits_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('deposit_ref'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('purchase_ref'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('purchase_order_ref'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('sale_ref'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('sale_order_ref'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('supplier'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('paid_by'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('created_by'));

                $row = 2;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->deposit_ref);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->purchase_ref);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->purchase_order_ref);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->sale_ref);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->sale_order_ref);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->supplier);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->paid_by));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, strip_tags($data_row->note));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $data_row->create_by);
                    $total += $data_row->amount;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle("J" . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('H' . $row, $total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $filename = 'deposits_report';
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                if ($pdf) {
                    $styleArray = array(
                        'borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )
                    );
                    $this->excel->getDefaultStyle()->applyFromArray($styleArray);
                    $this->excel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
                    require_once(APPPATH . "third_party" . DIRECTORY_SEPARATOR . "MPDF" . DIRECTORY_SEPARATOR . "mpdf.php");
                    $rendererName = PHPExcel_Settings::PDF_RENDERER_MPDF;
                    $rendererLibrary = 'MPDF';
                    $rendererLibraryPath = APPPATH . 'third_party' . DIRECTORY_SEPARATOR . $rendererLibrary;
                    if (!PHPExcel_Settings::setPdfRenderer($rendererName, $rendererLibraryPath)) {
                        die('Please set the $rendererName: ' . $rendererName . ' and $rendererLibraryPath: ' . $rendererLibraryPath . ' values' .
                            PHP_EOL . ' as appropriate for your directory structure');
                    }
                    header('Content-Type: application/pdf');
                    header('Content-Disposition: attachment;filename="' . $filename . '.pdf"');
                    header('Cache-Control: max-age=0');
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'PDF');
                    $objWriter->save('php://output');
                    exit();
                }
                if ($xls) {
                    ob_clean();
                    header('Content-Type: application/vnd.ms-excel');
                    header('Content-Disposition: attachment;filename="' . $filename . '.xls"');
                    header('Cache-Control: max-age=0');
                    ob_clean();
                    $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
                    $objWriter->save('php://output');
                    exit();
                }
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $user_id        = $this->session->userdata('user_id');
            $user_biller_id = $this->session->userdata('biller_id');
            $this->load->library('datatables');
            $this->datatables->select(
                    $this->db->dbprefix('deposits') . ".id as idd, ". 
                    $this->db->dbprefix('deposits'). ".date, " . 
                    $this->db->dbprefix('deposits') . ".reference as deposit_ref, " . 
                    $this->db->dbprefix('purchases') . ".reference_no as purchase_ref, " .
                    $this->db->dbprefix('purchases_order') . ".reference_no as purchase_order_ref, " .
                    $this->db->dbprefix('sales') . ".reference_no as sale_ref, " .
                    $this->db->dbprefix('sales_order') . ".reference_no as sale_order_ref, 
                    IF (bpas_groups.name = 'supplier', bpas_companies.name, '') as supplier,
                    IF (bpas_groups.name = 'customer', bpas_companies.name, '') as customer,
                    bpas_deposits.paid_by, 
                    bpas_deposits.amount, 
                    bpas_deposits.note, 
                    CONCAT(bpas_users.first_name,' ',bpas_users.last_name) as create_by ")
                ->from('deposits')
                ->join('companies', 'companies.id=deposits.company_id', 'left')
                ->join('groups', 'groups.id=companies.group_id', 'left')
                ->join('sales', 'sales.id=deposits.sale_id', 'left')
                ->join('sales_order', 'sales_order.id=deposits.so_id', 'left')
                ->join('purchases', 'purchases.id=deposits.po_id', 'left')
                ->join('purchases_order', 'purchases_order.id=deposits.po_id', 'left')
                ->join('users', 'users.id=deposits.created_by', 'left')
                ->group_by('deposits.id')
                ->order_by('deposits.date', 'DESC');

            if($user_biller_id != NULL){
                $this->db->where('deposits.biller_id', $user_biller_id);
            }
            if(!$this->Owner && !$this->Admin && $this->session->userdata('view_right') == 0){
                if ($user_id) {
                    $this->datatables->where('deposits.created_by', $user_id);
                }
            }
            if ($user) {
                $this->datatables->where('deposits.created_by', $user);
            }
            if ($biller) {
                $this->datatables->where('deposits.biller_id', $biller);
            }
            if ($biller_id) {
                $this->datatables->where('deposits.biller_id', $biller_id);
            }
            if ($customer) {
                $this->datatables->where('deposits.company_id', $customer);
            }
            if ($supplier) {
                $this->datatables->where('deposits.company_id', $supplier);
            }
            if ($deposit_ref) {
                $this->datatables->like('deposits.reference', $deposit_ref, 'both');
            }
            if ($purchase_ref) {
                $this->datatables->like('purchases.reference_no', $purchase_ref, 'both');
            }
            if ($purchase_order_ref) {
                $this->datatables->like('purchases_order.reference_no', $purchase_order_ref, 'both');
            }
            if ($sale_ref) {
                $this->datatables->like('sales.reference_no', $sale_ref, 'both');
            }
            if ($sale_order_ref) {
                $this->datatables->like('sales_order.reference_no', $sale_order_ref, 'both');
            }
            if ($start_date) {
                $this->datatables->where('date_format('.$this->db->dbprefix('payments') . '.date,"%Y-%m-%d") BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            echo $this->datatables->generate();
        }
    }
    //-----------fuel-----------------
    public function fuel_customers_report()
    {
        $this->bpas->checkPermissions();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['salemans'] = $this->site->getSalemans();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_customers_report')));
        $meta = array('page_title' => lang('fuel_customers_report'), 'bc' => $bc);
        $this->page_construct('reports/fuel_customers_report', $meta, $this->data);
    }
    
    public function getFuelCustomersReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('fuel_customers_report');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if ($xls) {
            $this->db->select("
                            fuel_customers.date,
                            fuel_customers.reference,
                            companies.company as customer,
                            CONCAT(".$this->db->dbprefix("users").".last_name,' ',".$this->db->dbprefix("users").".first_name) as salesman,
                            creators.created_by,
                            IFNULL(bpas_fuel_customer_items.quantity,0) as quantity,
                            IFNULL(".$this->db->dbprefix("fuel_customers").".grand_total,0) as grand_total,
                            fuel_customers.attachment,
                            IF (".$this->db->dbprefix("fuel_customers").".status = 'completed','completed', IF (bpas_fuel_customer_items.fuel_sale_id > 0,'cleared','pending')) AS status,
                            fuel_customers.id as id
                        ")
            ->from("fuel_customers")
            ->join("(SELECT 
                            fuel_customer_id,
                            SUM(quantity) as quantity,
                            SUM(fuel_sale_id) as fuel_sale_id
                        FROM ".$this->db->dbprefix("fuel_customer_items")."
                        GROUP BY fuel_customer_id) as bpas_fuel_customer_items","bpas_fuel_customer_items.fuel_customer_id=fuel_customers.id","left")
            ->join("users", "users.id=fuel_customers.saleman_id", "left")
            ->join("(SELECT id,CONCAT(last_name,' ',first_name) as created_by FROM ".$this->db->dbprefix("users").") as creators","creators.id = fuel_customers.created_by","left")
            ->join("companies", "companies.id=fuel_customers.customer_id", "left");
            
            if($customer){
                $this->db->like("fuel_customers.customer_id", $customer);
            }
            if($reference_no){
                $this->db->like("fuel_customers.reference_no", $reference_no);
            }
            if($biller){
                $this->db->where("fuel_customers.biller_id", $biller);
            }
            if($saleman){
                $this->db->where("fuel_customers.saleman_id", $saleman);
            }
            if($user){
                $this->db->where("fuel_customers.created_by", $user);
            }
            if($warehouse){
                $this->db->where("fuel_customers.warehouse_id", $warehouse);
            }
            if ($start_date) {
                $this->db->where('fuel_customers.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('fuel_customers.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('fuel_customers.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where("fuel_customers.created_by", $this->session->userdata('view_right'));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_customers_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('salesman'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('status'));
                $row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->salesman);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatQuantity($data_row->quantity));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->grand_total));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, lang($data_row->status));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);

                $filename = 'fuel_customers_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                            fuel_customers.date,
                            fuel_customers.reference,
                            companies.company as customer,
                            CONCAT(".$this->db->dbprefix("users").".last_name,' ',".$this->db->dbprefix("users").".first_name) as salesman,
                            creators.created_by,
                            IFNULL(bpas_fuel_customer_items.quantity,0) as quantity,
                            IFNULL(".$this->db->dbprefix("fuel_customers").".grand_total,0) as grand_total,
                            fuel_customers.attachment,
                            IF (".$this->db->dbprefix("fuel_customers").".status = 'completed','completed', IF (bpas_fuel_customer_items.fuel_sale_id > 0,'cleared','pending')) AS status,
                            fuel_customers.id as id
                        ")
            ->from("fuel_customers")
            ->join("(SELECT 
                            fuel_customer_id,
                            SUM(quantity) as quantity,
                            SUM(fuel_sale_id) as fuel_sale_id
                        FROM ".$this->db->dbprefix("fuel_customer_items")."
                        GROUP BY fuel_customer_id) as bpas_fuel_customer_items","bpas_fuel_customer_items.fuel_customer_id=fuel_customers.id","left")
            ->join("users", "users.id=fuel_customers.saleman_id", "left")
            ->join("(SELECT id,CONCAT(last_name,' ',first_name) as created_by FROM ".$this->db->dbprefix("users").") as creators","creators.id = fuel_customers.created_by","left")
            ->join("companies", "companies.id=fuel_customers.customer_id", "left");
            
            if($customer){
                $this->datatables->like("fuel_customers.customer_id", $customer);
            }
            if($reference_no){
                $this->datatables->like("fuel_customers.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("fuel_customers.biller_id", $biller);
            }
            if($saleman){
                $this->datatables->where("fuel_customers.saleman_id", $saleman);
            }
            if($user){
                $this->datatables->where("fuel_customers.created_by", $user);
            }
            if($warehouse){
                $this->datatables->where("fuel_customers.warehouse_id", $warehouse);
            }
            if ($start_date) {
                $this->datatables->where('fuel_customers.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('fuel_customers.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('fuel_customers.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where("fuel_customers.created_by", $this->session->userdata('view_right'));
            }
            echo $this->datatables->generate();
        }
    }
    
    public function fuel_customer_details_report()
    {
        $this->bpas->checkPermissions("fuel_customers_report");
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['salemans'] = $this->site->getSalemans();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_customer_details_report')));
        $meta = array('page_title' => lang('fuel_customer_details_report'), 'bc' => $bc);
        $this->page_construct('reports/fuel_customer_details_report', $meta, $this->data);
    }
    
    public function getFuelCustomerDetailsReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('fuel_customers_report');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if ($xls) {
            $this->db->select("
                            fuel_customers.date,
                            fuel_customers.reference,
                            companies.company as customer,
                            CONCAT(".$this->db->dbprefix("users").".last_name,' ',".$this->db->dbprefix("users").".first_name) as salesman,
                            creators.created_by,
                            CONCAT(".$this->db->dbprefix("customer_trucks").".name,' - ',".$this->db->dbprefix("customer_trucks").".plate_number) as truck,
                            products.name as product_name,
                            IFNULL(".$this->db->dbprefix("fuel_customer_items").".quantity,0) as quantity,
                            IFNULL(".$this->db->dbprefix("fuel_customer_items").".unit_price,0) as unit_price,
                            IFNULL(".$this->db->dbprefix("fuel_customer_items").".subtotal,0) as subtotal,
                            fuel_customers.status,
                            IF (".$this->db->dbprefix("fuel_customers").".status = 'completed','completed', IF (".$this->db->dbprefix('fuel_customer_items').".fuel_sale_id > 0,'cleared','pending')) AS status,
                            fuel_customers.id as id
                        ")
            ->from("fuel_customer_items")
            ->join("fuel_customers","fuel_customers.id = fuel_customer_items.fuel_customer_id","left")
            ->join("customer_trucks","customer_trucks.id = fuel_customer_items.truck_id","left")
            ->join("products","products.id = fuel_customer_items.product_id","left")
            ->join("users", "users.id=fuel_customers.saleman_id", "left")
            ->join("(SELECT id,CONCAT(last_name,' ',first_name) as created_by FROM ".$this->db->dbprefix("users").") as creators","creators.id = fuel_customers.created_by","left")
            ->join("companies", "companies.id=fuel_customers.customer_id", "left")
            ->group_by("fuel_customer_items.id");
            
            if($product){
                $this->db->where("fuel_customer_items.product_id", $product);
            }
            if($customer){
                $this->db->like("fuel_customers.customer_id", $customer);
            }
            if($reference_no){
                $this->db->like("fuel_customers.reference_no", $reference_no);
            }
            if($biller){
                $this->db->where("fuel_customers.biller_id", $biller);
            }
            if($saleman){
                $this->db->where("fuel_customers.saleman_id", $saleman);
            }
            if($user){
                $this->db->where("fuel_customers.created_by", $user);
            }
            if($warehouse){
                $this->db->where("fuel_customers.warehouse_id", $warehouse);
            }
            if ($start_date) {
                $this->db->where('fuel_customers.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('fuel_customers.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('fuel_customers.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where("fuel_customers.created_by", $this->session->userdata('view_right'));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_customer_details_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('customer'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('salesman'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('truck'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('product'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('quantity'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('unit_price'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('status'));
                $row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->customer);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->salesman);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->created_by);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->truck);
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->product_name);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatQuantity($data_row->quantity));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->unit_price));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->subtotal));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, lang($data_row->status));
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $filename = 'fuel_customer_details_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                            fuel_customers.date,
                            fuel_customers.reference,
                            companies.company as customer,
                            CONCAT(".$this->db->dbprefix("users").".last_name,' ',".$this->db->dbprefix("users").".first_name) as salesman,
                            creators.created_by,
                            CONCAT(".$this->db->dbprefix("customer_trucks").".name,' - ',".$this->db->dbprefix("customer_trucks").".plate_number) as truck,
                            products.name as product_name,
                            IFNULL(".$this->db->dbprefix("fuel_customer_items").".quantity,0) as quantity,
                            IFNULL(".$this->db->dbprefix("fuel_customer_items").".unit_price,0) as unit_price,
                            IFNULL(".$this->db->dbprefix("fuel_customer_items").".subtotal,0) as subtotal,
                            IF (".$this->db->dbprefix("fuel_customers").".status = 'completed','completed', IF (".$this->db->dbprefix('fuel_customer_items').".fuel_sale_id > 0,'cleared','pending')) AS status,
                            fuel_customers.id as id
                        ")
            ->from("fuel_customer_items")
            ->join("fuel_customers","fuel_customers.id = fuel_customer_items.fuel_customer_id","left")
            ->join("customer_trucks","customer_trucks.id = fuel_customer_items.truck_id","left")
            ->join("products","products.id = fuel_customer_items.product_id","left")
            ->join("users", "users.id=fuel_customers.saleman_id", "left")
            ->join("(SELECT id,CONCAT(last_name,' ',first_name) as created_by FROM ".$this->db->dbprefix("users").") as creators","creators.id = fuel_customers.created_by","left")
            ->join("companies", "companies.id=fuel_customers.customer_id", "left")
            ->group_by("fuel_customer_items.id");
            
            if($product){
                $this->datatables->where("fuel_customer_items.product_id", $product);
            }
            if($customer){
                $this->datatables->like("fuel_customers.customer_id", $customer);
            }
            if($reference_no){
                $this->datatables->like("fuel_customers.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("fuel_customers.biller_id", $biller);
            }
            if($saleman){
                $this->datatables->where("fuel_customers.saleman_id", $saleman);
            }
            if($user){
                $this->datatables->where("fuel_customers.created_by", $user);
            }
            if($warehouse){
                $this->datatables->where("fuel_customers.warehouse_id", $warehouse);
            }
            if ($start_date) {
                $this->datatables->where('fuel_customers.date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('fuel_customers.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('fuel_customers.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where("fuel_customers.created_by", $this->session->userdata('view_right'));
            }
            echo $this->datatables->generate();
        }
    }
    public function nozzles_report()
    {
        $this->bpas->checkPermissions('fuel_sales');
        $this->data['tank_items'] = $this->reports_model->getDailyTankItems();
        $this->data['nozzles'] = $this->reports_model->getDailyTanks();
        $this->data['tanks'] = $this->reports_model->getTanks();
        $this->data['salemans'] = $this->site->getSalemans();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('nozzles_report')));
        $meta = array('page_title' => lang('nozzles_report'), 'bc' => $bc);
        $this->page_construct('reports/nozzles_report', $meta, $this->data);
    }
    
    public function nozzles_export($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('fuel_sales');
        if ($xls) {
            $tank_items = $this->reports_model->getDailyTankItems();
            $nozzles = $this->reports_model->getDailyTanks();
            if (!empty($tank_items)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('nozzles_report'));
                $row = 1;
                $col = 0;
                if($tank_items){
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('nozzle_no'));
                    $col++;
                    if(isset($tank_items) && $tank_items){
                        foreach($tank_items as $tank_item){
                            $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$tank_item->product_name);
                            $col+=3;
                        }
                    }
                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, lang('total'));
                    $row++;
                    $col = 1;
                    if(isset($tank_items) && $tank_items){
                        foreach($tank_items as $tank_item){
                            $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,lang('begin'));
                            $col++;
                            $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,lang('ending'));
                            $col++;
                            $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,lang('quantity'));
                            $col++;
                        }
                        $row++;
                    }
                    $col = 0;
                    if(isset($nozzles) && $nozzles){
                        foreach($nozzles as $nozzle){
                            $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$nozzle->tank." (".$nozzle->nozzle_no.") ");
                            if(isset($tank_items) && $tank_items){
                                $col=1; $quantity = 0;
                                foreach($tank_items as $tank_item){
                                    $item_row = $this->reports_model->getDailyTankItemsQty($nozzle->tank_id, $nozzle->id, $tank_item->product_id);
                                    $quantity += $item_row->quantity;
                                    $quantity += $item_row->customer_qty;
                                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->bpas->formatDecimal($item_row->nozzle_start_no));
                                    $col++;
                                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->bpas->formatDecimal($item_row->nozzle_end_no));
                                    $col++;
                                    $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->bpas->formatDecimal($item_row->quantity + $item_row->customer_qty));
                                    $col++;
                                }
                                $this->excel->getActiveSheet()->setCellValueByColumnAndRow($col,$row,$this->bpas->formatDecimal($quantity));
                                $col++;
                                $row++;
                                $col = 0;
                            }
                        }
                    }
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
                    $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(10);
                }
                $filename = 'nozzles_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } 
    }
    public function fuel_sales()
    {
        $this->bpas->checkPermissions('fuel_sales');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['salemans'] = $this->site->getSalemans();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_sales_report')));
        $meta = array('page_title' => lang('fuel_sales_report'), 'bc' => $bc);
        $this->page_construct('reports/fuel_sales', $meta, $this->data);
    }
    
    public function getFuelSalesReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('fuel_sales');
        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if ($xls) {
            $this->db
                ->select("
                        fuel_sales.date, 
                        fuel_sales.reference_no, 
                        fuel_sales.biller, 
                        fuel_sales.saleman, 
                        CONCAT(bpas_fuel_times.open_time,' - ',bpas_fuel_times.close_time) as time,
                        IFNULL(bpas_fuel_sale_items.using_qty,0) as using_qty,
                        IFNULL(bpas_fuel_sale_items.customer_qty,0) as customer_qty,
                        IFNULL(bpas_fuel_sale_items.customer_amount,0) as customer_amount,
                        IFNULL(bpas_fuel_sale_items.quantity,0) as quantity,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total,0) as total_sales,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash_open,0) as cash_change,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash,0) as cash_submit,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".credit_amount,0) as credit_amount,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".bank_amount,0) as bank_amount,
                        (IFNULL(".$this->db->dbprefix('fuel_sales').".bank_amount,0) + IFNULL(".$this->db->dbprefix('fuel_sales').".credit_amount,0) +  IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash,0) - IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash_open,0))- IFNULL(".$this->db->dbprefix('fuel_sales').".total,0) as different,
                        CONCAT(last_name,' ',first_name) as username,
                        fuel_sales.attachment,
                        IF(IFNULL(".$this->db->dbprefix("fuel_sales").".total,0) = 0, 'completed', IF(ROUND(bpas_sales.quantity,".$this->Settings->decimals.")>=ROUND(".$this->db->dbprefix("fuel_sale_items").".quantity,".$this->Settings->decimals."),'completed',IF(bpas_sales.quantity > 0,'partial','pending'))) as status,
                        fuel_sales.id
                        ")
            ->from("fuel_sales")
            ->join('fuel_times', 'fuel_times.id=fuel_sales.time_id', 'left')
            ->join('(SELECT 
                            fuel_sale_id,
                            SUM(subtotal) as subtotal,
                            SUM(quantity) as quantity
                        FROM '.$this->db->dbprefix('sales').'
                        LEFT JOIN '.$this->db->dbprefix('sale_items').' ON '.$this->db->dbprefix('sale_items').'.sale_id = bpas_sales.id
                        GROUP BY fuel_sale_id) as bpas_sales','bpas_sales.fuel_sale_id=fuel_sales.id','left')
            ->join('(SELECT 
                            fuel_sale_id,
                            SUM(quantity) as quantity,
                            SUM(using_qty) as using_qty,
                            SUM(customer_qty) as customer_qty,
                            SUM(customer_amount) as customer_amount
                        FROM '.$this->db->dbprefix('fuel_sale_items').'
                        GROUP BY fuel_sale_id) as bpas_fuel_sale_items','bpas_fuel_sale_items.fuel_sale_id=fuel_sales.id','left')
            ->join("users","users.id=fuel_sales.created_by","left");

            if($reference_no){
                $this->db->like("fuel_sales.reference_no", $reference_no);
            }
            if($biller){
                $this->db->where("fuel_sales.biller_id", $biller);
            }
            if($project){
                $this->db->where("fuel_sales.project_id", $project);
            }
            if($saleman){
                $this->db->where("fuel_sales.saleman_id", $saleman);
            }
            if($user){
                $this->db->where("fuel_sales.created_by", $user);
            }
            if($warehouse){
                $this->db->where("fuel_sales.warehouse_id", $warehouse);
            }
            if ($start_date) {
                $this->db->where('fuel_sales.date >=', $start_date);
            }
            if ($end_date) {
                $this->db->where('fuel_sales.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('fuel_sales.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('fuel_sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where("fuel_sales.created_by", $this->session->userdata('view_right'));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_sales_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('saleman'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('time'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('using_qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('customer_qty'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('customer_amount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('fuel_qty'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('fuel_amount'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('cash_change'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('cash_submit'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('credit_amount'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('bank_amount'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('different'));
                $this->excel->getActiveSheet()->SetCellValue('P1', lang('created_by'));
                $this->excel->getActiveSheet()->SetCellValue('Q1', lang('status'));
                $row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->saleman);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->time);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatQuantity($data_row->using_qty));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatQuantity($data_row->customer_qty));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->customer_amount));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatQuantity($data_row->quantity));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->total_sales));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->cash_change));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->formatDecimal($data_row->cash_submit));
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($data_row->credit_amount));
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->formatDecimal($data_row->bank_amount));
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->bpas->formatDecimal($data_row->different));
                    $this->excel->getActiveSheet()->SetCellValue('P' . $row, $data_row->username);
                    $this->excel->getActiveSheet()->SetCellValue('Q' . $row, $data_row->status);
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(15);
                $filename = 'fuel_sales_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                        fuel_sales.date, 
                        fuel_sales.reference_no, 
                        fuel_sales.biller, 
                        fuel_sales.saleman, 
                        CONCAT(bpas_fuel_times.open_time,' - ',bpas_fuel_times.close_time) as time,
                        IFNULL(bpas_fuel_sale_items.using_qty,0) as using_qty,
                        IFNULL(bpas_fuel_sale_items.customer_qty,0) as customer_qty,
                        IFNULL(bpas_fuel_sale_items.customer_amount,0) as customer_amount,
                        IFNULL(bpas_fuel_sale_items.quantity,0) as quantity,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total,0) as total_sales,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash_open,0) as cash_change,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash,0) as cash_submit,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".credit_amount,0) as credit_amount,
                        IFNULL(".$this->db->dbprefix('fuel_sales').".bank_amount,0) as bank_amount,
                        (IFNULL(".$this->db->dbprefix('fuel_sales').".bank_amount,0) + IFNULL(".$this->db->dbprefix('fuel_sales').".credit_amount,0) +  IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash,0) - IFNULL(".$this->db->dbprefix('fuel_sales').".total_cash_open,0))- IFNULL(".$this->db->dbprefix('fuel_sales').".total,0) as different,
                        CONCAT(last_name,' ',first_name) as username,
                        fuel_sales.attachment,
                        IF(IFNULL(".$this->db->dbprefix("fuel_sales").".total,0) = 0, 'completed', IF(ROUND(bpas_sales.quantity,".$this->Settings->decimals.")>=ROUND(".$this->db->dbprefix("fuel_sale_items").".quantity,".$this->Settings->decimals."),'completed',IF(bpas_sales.quantity > 0,'partial','pending'))) as status,
                        fuel_sales.id
                        ")
            ->from("fuel_sales")
            ->join('fuel_times', 'fuel_times.id=fuel_sales.time_id', 'left')
            ->join('(SELECT 
                            fuel_sale_id,
                            SUM(subtotal) as subtotal,
                            SUM(quantity) as quantity
                        FROM '.$this->db->dbprefix('sales').'
                        LEFT JOIN '.$this->db->dbprefix('sale_items').' ON '.$this->db->dbprefix('sale_items').'.sale_id = bpas_sales.id
                        GROUP BY fuel_sale_id) as bpas_sales','bpas_sales.fuel_sale_id=fuel_sales.id','left')
            ->join('(SELECT 
                            fuel_sale_id,
                            SUM(quantity) as quantity,
                            SUM(using_qty) as using_qty,
                            SUM(customer_qty) as customer_qty,
                            SUM(customer_amount) as customer_amount
                        FROM '.$this->db->dbprefix('fuel_sale_items').'
                        GROUP BY fuel_sale_id) as bpas_fuel_sale_items','bpas_fuel_sale_items.fuel_sale_id=fuel_sales.id','left')
            ->join("users","users.id=fuel_sales.created_by","left");
            
            
        
            if($reference_no){
                $this->datatables->like("fuel_sales.reference_no", $reference_no);
            }
            if($biller){
                $this->datatables->where("fuel_sales.biller_id", $biller);
            }
            if($project){
                $this->datatables->where("fuel_sales.project_id", $project);
            }
            if($saleman){
                $this->datatables->where("fuel_sales.saleman_id", $saleman);
            }
            if($user){
                $this->datatables->where("fuel_sales.created_by", $user);
            }
            if($warehouse){
                $this->datatables->where("fuel_sales.warehouse_id", $warehouse);
            }
            if ($start_date) {
                $this->datatables->where('fuel_sales.date >=', $start_date);
            }
            if ($end_date) {
                $this->datatables->where('fuel_sales.date <=', $end_date);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('fuel_sales.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('fuel_sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where("fuel_sales.created_by", $this->session->userdata('view_right'));
            }
            echo $this->datatables->generate();
        }
    }
    
    public function fuel_sale_details()
    {
        $this->bpas->checkPermissions('fuel_sales');
        $this->load->library("pagination");
        $page = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;
        $post = $_POST?$_POST:$_GET;
        unset($post['submit_report']);
        $config = array(
            "suffix" => ($post?'?'.http_build_query(($post), '', "&"):''),
            "base_url" => base_url() . "reports/fuel_sale_details",
            "total_rows" => count($this->reports_model->getSaleFuelDetails()),
            "per_page" => $this->Settings->rows_per_page,
            "uri_segment" => 3,
            'full_tag_open' => '<ul class="pagination pagination-sm">',
            'full_tag_close' => '</ul>',
            'first_link' => false,
            'last_link' => false,
            'next_link' => 'Next > ',
            'next_tag_open' => '<li class="next">',
            'next_tag_close' => '</li>',
            'prev_link' => ' < Previous',
            'prev_tag_open' => '<li class="prev">',
            'prev_tag_close' => '</li>',
            'cur_tag_open' => '<li class="active"><a>',
            'cur_tag_close' => '</a></li>',
            'num_tag_open' => '<li>',
            'num_tag_close' => '</li>',
        );
        $this->pagination->initialize($config);
        $this->data["pagination"] = $this->pagination->create_links();
        $this->data['fuel_sales'] = $this->reports_model->getSaleFuelDetails($config["per_page"], $page);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['salemans'] = $this->site->getSalemans();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_sale_details_report')));
        $meta = array('page_title' => lang('fuel_sale_details_report'), 'bc' => $bc);
        $this->page_construct('reports/fuel_sale_details', $meta, $this->data);
    }
    
    public function fuel_sale_details_export($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('fuel_sales');
        if ($xls) {
            $fuel_sales = $this->reports_model->getSaleFuelDetails();
            if (!empty($fuel_sales)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_sale_details'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('biller'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('saleman'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('time'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('using_qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('customer_qty'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('customer_amount'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('fuel_qty'));
                $this->excel->getActiveSheet()->SetCellValue('J1', lang('fuel_amount'));
                $this->excel->getActiveSheet()->SetCellValue('K1', lang('cash_change'));
                $this->excel->getActiveSheet()->SetCellValue('L1', lang('cash_submit'));
                $this->excel->getActiveSheet()->SetCellValue('M1', lang('credit_amount'));
                $this->excel->getActiveSheet()->SetCellValue('N1', lang('bank_amount'));
                $this->excel->getActiveSheet()->SetCellValue('O1', lang('different'));
                $row = 2;
                foreach ($fuel_sales as $data_row){
                    $different = ($data_row->bank_amount + $data_row->credit_amount + $data_row->total_cash - $data_row->total_cash_open - $data_row->total);
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference_no);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->biller);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->saleman);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $data_row->time);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->using_qty));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->customer_qty));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->customer_amount));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->quantity));
                    $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($data_row->total));
                    $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($data_row->total_cash_open));
                    $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->formatDecimal($data_row->total_cash));
                    $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($data_row->credit_amount));
                    $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->formatDecimal($data_row->bank_amount));
                    $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->bpas->formatDecimal($different));
                    $row++;
                    $fuel_items = $this->reports_model->getSaleFuelItemsDetails($data_row->id);
                    if($fuel_items){
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, lang('item'));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, lang('tank'));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, lang('nozzle_no'));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, lang('nozzle_start_no'));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, lang('nozzle_end_no'));
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, lang('using_qty'));
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, lang('customer_qty'));
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, lang('fuel_qty'));
                        $this->excel->getActiveSheet()->SetCellValue('O' . $row, lang('total_qty'));
                        $row++;
                        foreach($fuel_items as $i => $item){
                            $this->excel->getActiveSheet()->SetCellValue('G' . $row, $item->item);
                            $this->excel->getActiveSheet()->SetCellValue('H' . $row, $item->tank);
                            $this->excel->getActiveSheet()->SetCellValue('I' . $row, $item->nozzle_no);
                            $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->formatDecimal($item->nozzle_start_no));
                            $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->formatDecimal($item->nozzle_end_no));
                            $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->formatDecimal($item->using_qty));
                            $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->formatDecimal($item->customer_qty));
                            $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->formatDecimal($item->quantity));
                            $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->bpas->formatDecimal($item->quantity + $item->customer_qty + $item->using_qty));
                            $row++;
                        }
                    }
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(18);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
       
                $filename = 'fuel_sale_details_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } 
    }
    public function fuel_products()
    {
        $this->bpas->checkPermissions('fuel_sales');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['salemans'] = $this->site->getSalemans();
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('fuel_products_report')));
        $meta = array('page_title' => lang('fuel_products_report'), 'bc' => $bc);
        $this->page_construct('reports/fuel_products', $meta, $this->data);
    }
    
    public function getFuelProductsReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('fuel_sales');
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $start_date = $this->input->get('start_date') ? $this->bpas->fld($this->input->get('start_date')) : NULL;
        $end_date = $this->input->get('end_date') ? $this->bpas->fld($this->input->get('end_date'),false,1) : NULL;
        if ($xls) {
            $this->db->select("
                            products.code, 
                            products.name, 
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".using_qty,0)) as using_qty,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_qty,0)) as customer_qty,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_amount,0)) as customer_amount,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".quantity,0)) as fuel_qty,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".subtotal,0)) as fuel_amount,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".quantity,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_qty,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".using_qty,0)) as total_qty,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".subtotal,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_amount,0)) as total_amount
                        ")
                    ->from("fuel_sale_items")
                    ->join("fuel_sales","fuel_sales.id = fuel_sale_items.fuel_sale_id","inner")
                    ->join("products","products.id = fuel_sale_items.product_id","left")
                    ->group_by("fuel_sale_items.product_id");

            if($user){
                $this->db->where("fuel_sales.created_by", $user);
            }
            if($product){
                $this->db->where("fuel_sale_items.product_id", $product);
            }
            if($warehouse){
                $this->db->where("fuel_sales.warehouse_id", $warehouse);
            }
            if($start_date){
                $this->db->where("fuel_sales.date >=", $start_date);
            }
            if($end_date){
                $this->db->where("fuel_sales.date <=", $end_date);
            }
            if($biller){
                $this->db->where("fuel_sales.biller_id", $biller);
            }
            if($project){
                $this->db->where("fuel_sales.project_id", $project);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->db->where('fuel_sales.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('fuel_sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where("fuel_sales.created_by", $this->session->userdata('view_right'));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('fuel_products_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('using_qty'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('customer_qty'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('customer_amount'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('fuel_qty'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('fuel_amount'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('total_qty'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('total_amount'));
                $row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->formatQuantity($data_row->using_qty));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->formatQuantity($data_row->customer_qty));
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($data_row->customer_amount));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatQuantity($data_row->fuel_qty));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($data_row->fuel_amount));
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($data_row->total_qty));
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->formatDecimal($data_row->total_amount));

                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
            
                $filename = 'fuel_products_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
                            products.code, 
                            products.name, 
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".using_qty,0)) as using_qty,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_qty,0)) as customer_qty,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_amount,0)) as customer_amount,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".quantity,0)) as fuel_qty,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".subtotal,0)) as fuel_amount,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".quantity,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_qty,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".using_qty,0)) as total_qty,
                            SUM(IFNULL(".$this->db->dbprefix('fuel_sale_items').".subtotal,0) + IFNULL(".$this->db->dbprefix('fuel_sale_items').".customer_amount,0)) as total_amount
                        ")
                    ->from("fuel_sale_items")
                    ->join("fuel_sales","fuel_sales.id = fuel_sale_items.fuel_sale_id","inner")
                    ->join("products","products.id = fuel_sale_items.product_id","left")
                    ->group_by("fuel_sale_items.product_id");

            if($user){
                $this->datatables->where("fuel_sales.created_by", $user);
            }
            if($product){
                $this->datatables->where("fuel_sale_items.product_id", $product);
            }
            if($warehouse){
                $this->datatables->where("fuel_sales.warehouse_id", $warehouse);
            }
            if($start_date){
                $this->datatables->where("fuel_sales.date >=", $start_date);
            }
            if($end_date){
                $this->datatables->where("fuel_sales.date <=", $end_date);
            }
            if($biller){
                $this->datatables->where("fuel_sales.biller_id", $biller);
            }
            if($project){
                $this->datatables->where("fuel_sales.project_id", $project);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
                $this->datatables->where('fuel_sales.biller_id', $this->session->userdata('biller_id'));
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('fuel_sales.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where("fuel_sales.created_by", $this->session->userdata('view_right'));
            }
            echo $this->datatables->generate();
        }
    }
    public function tanks()
    {
        $this->bpas->checkPermissions('tanks');
        $this->data['salemans'] = $this->site->getSalemans();
        $this->data['tanks'] = $this->reports_model->getTanks();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('tanks_report')));
        $meta = array('page_title' => lang('tanks_report'), 'bc' => $bc);
        $this->page_construct('reports/tanks', $meta, $this->data);
    }
    public function getTanksReport($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('tanks');
        $saleman = $this->input->get('saleman') ? $this->input->get('saleman') : NULL;
        $tank = $this->input->get('tank') ? $this->input->get('tank') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if ($end_date) {
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if ($xls) {
                $this->db->select("
                                fuel_sales.date,
                                fuel_sales.saleman,
                                tanks.`name`,
                                fuel_sale_items.nozzle_no,
                                fuel_sale_items.nozzle_start_no,
                                fuel_sale_items.nozzle_end_no 
                            ")
                ->from("fuel_sale_items")
                ->join("fuel_sales", "fuel_sales.id = fuel_sale_items.fuel_sale_id", "left")
                ->join("tanks", "tanks.id = fuel_sale_items.tank_id", "left");

                if($saleman){
                    $this->db->where("fuel_sales.saleman_id", $saleman);
                }
                if ($start_date) {
                    $this->db->where("fuel_sales.date >=", $start_date);
                }
                if ($end_date) {
                    $this->db->where("fuel_sales.date <=", $end_date);
                }
                if ($tank) {
                    $this->db->where("fuel_sale_items.tank_id", $tank);
                }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('tanks_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('salesman'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('tank'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('nozzle_no'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('nozzle_start_no'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('nozzle_end_no'));
                $row = 2;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->saleman);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->nozzle_no);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatQuantity($data_row->nozzle_start_no));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatQuantity($data_row->nozzle_end_no));

                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);

                $filename = 'tanks_report_'.date("Y_m_d_H_i_s");
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                            fuel_sales.date,
                            fuel_sales.saleman,
                            tanks.`name`,
                            fuel_sale_items.nozzle_no,
                            fuel_sale_items.nozzle_start_no,
                            fuel_sale_items.nozzle_end_no 
                        ")
            ->from("fuel_sale_items")
            ->join("fuel_sales", "fuel_sales.id = fuel_sale_items.fuel_sale_id", "left")
            ->join("tanks", "tanks.id = fuel_sale_items.tank_id", "left");

            if($saleman){
                $this->datatables->where("fuel_sales.saleman_id", $saleman);
            }
            if ($start_date) {
                $this->datatables->where("fuel_sales.date >=", $start_date);
            }
            if ($end_date) {
                $this->datatables->where("fuel_sales.date <=", $end_date);
            }
            if ($tank) {
                $this->datatables->where("fuel_sale_items.tank_id", $tank);
            }
            echo $this->datatables->generate();
        }
    }
    public function product_monthly_sale()
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_monthly_sale')));
        $meta = array('page_title' => lang('product_monthly_sale'), 'bc' => $bc);
        $this->page_construct('reports/product_monthly_sale', $meta, $this->data);
    }
    
    public function getProductsMontlySale($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('product_monthly_sale', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : NULL;      
        $cf1 = $this->input->get('cf1') ? $this->input->get('cf1') : NULL;
        $cf2 = $this->input->get('cf2') ? $this->input->get('cf2') : NULL;
        $cf3 = $this->input->get('cf3') ? $this->input->get('cf3') : NULL;
        $cf4 = $this->input->get('cf4') ? $this->input->get('cf4') : NULL;
        $cf5 = $this->input->get('cf5') ? $this->input->get('cf5') : NULL;
        $cf6 = $this->input->get('cf6') ? $this->input->get('cf6') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $year = $this->input->get('year') ? $this->input->get('year') : date('Y');
        $allow_category = $this->site->getCategoryByProject();

        $where = '';
        $where_warehouse = '';
        if($product){
            $where .=" AND ".$this->db->dbprefix('products').".id = '".$product."'";
        }
        if($category){
            $where .=" AND ".$this->db->dbprefix('products').".category_id = '".$category."'";
        }
        if($brand){
            $where .=" AND ".$this->db->dbprefix('products').".brand = '".$brand."'";
        }
        if($subcategory){
            $where .=" AND ".$this->db->dbprefix('products').".subcategory_id = '".$subcategory."'";
        }
        if($cf1){
            $where .=" AND ".$this->db->dbprefix('products').".cf1 = '".$cf1."'";
        }
        if($cf2){
            $where .=" AND ".$this->db->dbprefix('products').".cf2 = '".$cf2."'";
        }
        if($cf3){
            $where .=" AND ".$this->db->dbprefix('products').".cf3 = '".$cf3."'";
        }
        if($cf4){
            $where .=" AND ".$this->db->dbprefix('products').".cf4 = '".$cf4."'";
        }
        if($cf5){
            $where .=" AND ".$this->db->dbprefix('products').".cf5 = '".$cf5."'";
        }
        if($cf6){
            $where .=" AND ".$this->db->dbprefix('products').".cf6 = '".$cf6."'";
        }
        if ($allow_category) {
            $where .= " AND ".$this->db->dbprefix('products').".category_id IN ('".implode("','",$allow_category)."')";
        }
        if($warehouse){
            $where_warehouse .=" AND ".$this->db->dbprefix('sales').".warehouse_id = '".$warehouse."'";
        }
        
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $uwarehouses = json_decode($this->session->userdata('warehouse_id'));
            if($uwarehouses){
                $u = 1;
                $warehouse_ids = '';
                foreach($uwarehouses as $uwarehouse){
                    if($u != 1){
                        $warehouse_ids .= ", '".$uwarehouse."'";
                    }else{
                        $warehouse_ids .= "'".$uwarehouse."'";
                        $u = 2;
                    }
                }
            }

            $where_warehouse .= " AND ".$this->db->dbprefix('sales').".warehouse_id IN (".$warehouse_ids.")";
        }
        
        if ($xls) {

            $this->db
                ->select("category_name,code,name,jan_quantity,fab_quantity,mar_quantity,apr_quantity,may_quantity,jun_quantity,jul_quantity,aug_quantity,sep_quantity,oct_quantity,nov_quantity,dec_quantity,total_quantity")
                ->from("(SELECT
                                (".$this->db->dbprefix('categories').".`name`) AS category_name,
                                (".$this->db->dbprefix('products').".code) as code,
                                (".$this->db->dbprefix('products').".name) as name,
                                IFNULL(stm_jan.qty,0) AS jan_quantity,
                                IFNULL(stm_fab.qty,0) AS fab_quantity,  
                                IFNULL(stm_mar.qty,0) AS mar_quantity,
                                IFNULL(stm_apr.qty,0) AS apr_quantity,
                                IFNULL(stm_may.qty,0) AS may_quantity,
                                IFNULL(stm_jun.qty,0) AS jun_quantity,
                                IFNULL(stm_jul.qty,0) AS jul_quantity,
                                IFNULL(stm_aug.qty,0) AS aug_quantity,
                                IFNULL(stm_sep.qty,0) AS sep_quantity,
                                IFNULL(stm_oct.qty,0) AS oct_quantity,
                                IFNULL(stm_nov.qty,0) AS nov_quantity,
                                IFNULL(stm_dec.qty,0) AS dec_quantity,
                                IFNULL(stm_tot.qty,0) AS total_quantity
                            FROM
                                ".$this->db->dbprefix('products')."
                            INNER JOIN ".$this->db->dbprefix('categories')." ON ".$this->db->dbprefix('categories').".id = ".$this->db->dbprefix('products').".category_id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 1 GROUP BY product_id) as stm_jan ON stm_jan.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 2 GROUP BY product_id) as stm_fab ON stm_fab.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 3 GROUP BY product_id) as stm_mar ON stm_mar.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 4 GROUP BY product_id) as stm_apr ON stm_apr.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 5 GROUP BY product_id) as stm_may ON stm_may.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 6 GROUP BY product_id) as stm_jun ON stm_jun.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 7 GROUP BY product_id) as stm_jul ON stm_jul.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 8 GROUP BY product_id) as stm_aug ON stm_aug.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 9 GROUP BY product_id) as stm_sep ON stm_sep.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 10 GROUP BY product_id) as stm_oct ON stm_oct.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 11 GROUP BY product_id) as stm_nov ON stm_nov.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 12 GROUP BY product_id) as stm_dec ON stm_dec.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0 ) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." GROUP BY product_id) as stm_tot ON stm_tot.product_id = ".$this->db->dbprefix('products').".id
                            WHERE 1=1 ".$where."
                        ) as product_monthly
                        WHERE total_quantity <> 0
                        
                ")
                ->order_by('category_name');
                
                $q = $this->db->get();
                if ($q->num_rows() > 0) {
                    foreach (($q->result()) as $row) {
                        $data[] = $row;
                    }
                } else {
                    $data = NULL;
                }

                if (!empty($data)) {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('product_monthly_sale'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('category'));   
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang('jan'));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('fab'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('mar'));
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('apr'));
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('may'));
                    $this->excel->getActiveSheet()->SetCellValue('I1', lang('jun'));
                    $this->excel->getActiveSheet()->SetCellValue('J1', lang('jul'));
                    $this->excel->getActiveSheet()->SetCellValue('K1', lang('aug'));
                    $this->excel->getActiveSheet()->SetCellValue('L1', lang('sep'));
                    $this->excel->getActiveSheet()->SetCellValue('M1', lang('oct'));
                    $this->excel->getActiveSheet()->SetCellValue('N1', lang('nov'));
                    $this->excel->getActiveSheet()->SetCellValue('O1', lang('dec'));
                    $this->excel->getActiveSheet()->SetCellValue('P1', lang('total'));

                    $row = 2;
                    foreach ($data as $data_row) {
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->category_name);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->code);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->name);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->remove_tag($data_row->jan_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->remove_tag($data_row->fab_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->remove_tag($data_row->mar_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->remove_tag($data_row->apr_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->remove_tag($data_row->may_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('I' . $row, $this->bpas->remove_tag($data_row->jun_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('J' . $row, $this->bpas->remove_tag($data_row->jul_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('K' . $row, $this->bpas->remove_tag($data_row->aug_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('L' . $row, $this->bpas->remove_tag($data_row->sep_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('M' . $row, $this->bpas->remove_tag($data_row->oct_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('N' . $row, $this->bpas->remove_tag($data_row->nov_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('O' . $row, $this->bpas->remove_tag($data_row->dec_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('P' . $row, $this->bpas->remove_tag($data_row->total_quantity));
                        $row++;
                    }
                    
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(30);
                    

                    $filename = 'product_monthly_sale_' . date('Y_m_d_H_i_s');
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);

                }
                $this->session->set_flashdata('error', lang('nothing_found'));
                redirect($_SERVER["HTTP_REFERER"]);
        }else{
            $this->load->library('datatables');
            $this->datatables
                ->select("category_name,code,name,jan_quantity,fab_quantity,mar_quantity,apr_quantity,may_quantity,jun_quantity,jul_quantity,aug_quantity,sep_quantity,oct_quantity,nov_quantity,dec_quantity,total_quantity")
                ->from("(SELECT
                                (".$this->db->dbprefix('categories').".`name`) AS category_name,
                                (".$this->db->dbprefix('products').".code) as code,
                                (".$this->db->dbprefix('products').".name) as name,
                                IFNULL(stm_jan.qty,0) AS jan_quantity,
                                IFNULL(stm_fab.qty,0) AS fab_quantity,  
                                IFNULL(stm_mar.qty,0) AS mar_quantity,
                                IFNULL(stm_apr.qty,0) AS apr_quantity,
                                IFNULL(stm_may.qty,0) AS may_quantity,
                                IFNULL(stm_jun.qty,0) AS jun_quantity,
                                IFNULL(stm_jul.qty,0) AS jul_quantity,
                                IFNULL(stm_aug.qty,0) AS aug_quantity,
                                IFNULL(stm_sep.qty,0) AS sep_quantity,
                                IFNULL(stm_oct.qty,0) AS oct_quantity,
                                IFNULL(stm_nov.qty,0) AS nov_quantity,
                                IFNULL(stm_dec.qty,0) AS dec_quantity,
                                IFNULL(stm_tot.qty,0) AS total_quantity
                            FROM
                                ".$this->db->dbprefix('products')."
                            INNER JOIN ".$this->db->dbprefix('categories')." ON ".$this->db->dbprefix('categories').".id = ".$this->db->dbprefix('products').".category_id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 1 GROUP BY product_id) as stm_jan ON stm_jan.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 2 GROUP BY product_id) as stm_fab ON stm_fab.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 3 GROUP BY product_id) as stm_mar ON stm_mar.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 4 GROUP BY product_id) as stm_apr ON stm_apr.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 5 GROUP BY product_id) as stm_may ON stm_may.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 6 GROUP BY product_id) as stm_jun ON stm_jun.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 7 GROUP BY product_id) as stm_jul ON stm_jul.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 8 GROUP BY product_id) as stm_aug ON stm_aug.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 9 GROUP BY product_id) as stm_sep ON stm_sep.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 10 GROUP BY product_id) as stm_oct ON stm_oct.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 11 GROUP BY product_id) as stm_nov ON stm_nov.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." AND MONTH (".$this->db->dbprefix('sales').".date) = 12 GROUP BY product_id) as stm_dec ON stm_dec.product_id = ".$this->db->dbprefix('products').".id
                            LEFT JOIN (SELECT product_id, IFNULL(sum(quantity + IFNULL(foc,0)),0 ) as qty FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date ) = ".$year." GROUP BY product_id) as stm_tot ON stm_tot.product_id = ".$this->db->dbprefix('products').".id
                            WHERE 1=1 ".$where."
                        ) as product_monthly
                        WHERE total_quantity <> 0
                        
                ");
            echo $this->datatables->generate();
        }
        
    }
    
    public function product_yearly_sale()
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
        $this->data['categories'] = $this->site->getAllCategories();
        $this->data['brands'] = $this->site->getBrands();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_yearly_sale')));
        $meta = array('page_title' => lang('product_yearly_sale'), 'bc' => $bc);
        $this->page_construct('reports/product_yearly_sale', $meta, $this->data);
    }
    
    public function getProductsYearlySale($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('product_monthly_sale', TRUE);
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;
        $category = $this->input->get('category') ? $this->input->get('category') : NULL;
        $brand = $this->input->get('brand') ? $this->input->get('brand') : NULL;
        $subcategory = $this->input->get('subcategory') ? $this->input->get('subcategory') : NULL;      
        $cf1 = $this->input->get('cf1') ? $this->input->get('cf1') : NULL;
        $cf2 = $this->input->get('cf2') ? $this->input->get('cf2') : NULL;
        $cf3 = $this->input->get('cf3') ? $this->input->get('cf3') : NULL;
        $cf4 = $this->input->get('cf4') ? $this->input->get('cf4') : NULL;
        $cf5 = $this->input->get('cf5') ? $this->input->get('cf5') : NULL;
        $cf6 = $this->input->get('cf6') ? $this->input->get('cf6') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $year = $this->input->get('year') ? $this->input->get('year') : date('Y');
        $allow_category = $this->site->getCategoryByProject();
        $where = '';
        $where_warehouse = '';
        if($product){
            $where .=" AND ".$this->db->dbprefix('products').".id = '".$product."'";
        }
        if($category){
            $where .=" AND ".$this->db->dbprefix('products').".category_id = '".$category."'";
        }
        if($brand){
            $where .=" AND ".$this->db->dbprefix('products').".brand = '".$brand."'";
        }
        if($subcategory){
            $where .=" AND ".$this->db->dbprefix('products').".subcategory_id = '".$subcategory."'";
        }
        if($cf1){
            $where .=" AND ".$this->db->dbprefix('products').".cf1 = '".$cf1."'";
        }
        if($cf2){
            $where .=" AND ".$this->db->dbprefix('products').".cf2 = '".$cf2."'";
        }
        if($cf3){
            $where .=" AND ".$this->db->dbprefix('products').".cf3 = '".$cf3."'";
        }
        if($cf4){
            $where .=" AND ".$this->db->dbprefix('products').".cf4 = '".$cf4."'";
        }
        if($cf5){
            $where .=" AND ".$this->db->dbprefix('products').".cf5 = '".$cf5."'";
        }
        if($cf6){
            $where .=" AND ".$this->db->dbprefix('products').".cf6 = '".$cf6."'";
        }
        
        if($warehouse){
            $where_warehouse .=" AND ".$this->db->dbprefix('sales').".warehouse_id = '".$warehouse."'";
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
            $warehouse_ids = str_replace(']',')','('.$warehouse_ids.')');
            $where_warehouse .= " AND ".$this->db->dbprefix('sales').".warehouse_id IN ".$warehouse_ids;
        }
        if ($xls) {

            $this->db
                ->select("category_name,code,name,last_quantity,current_quantity")
                ->from("(SELECT
                                (".$this->db->dbprefix('categories').".`name`) AS category_name,
                                (".$this->db->dbprefix('categories').".`id`) AS category_id,
                                (".$this->db->dbprefix('products').".code) as code,
                                (".$this->db->dbprefix('products').".name) as name,
                                convert_qty(".$this->db->dbprefix('products').".id ,(SELECT IFNULL(sum(quantity + IFNULL(foc,0)),0) FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date) = ".($year - 1)." AND product_id = ".$this->db->dbprefix('products').".id )) AS last_quantity,
                                convert_qty(".$this->db->dbprefix('products').".id ,(SELECT IFNULL(sum(quantity + IFNULL(foc,0)),0) FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date) = ".$year." AND product_id = ".$this->db->dbprefix('products').".id )) AS current_quantity
                            FROM
                                ".$this->db->dbprefix('products')."
                            INNER JOIN ".$this->db->dbprefix('categories')." ON ".$this->db->dbprefix('categories').".id = ".$this->db->dbprefix('products').".category_id
                            WHERE 1=1 ".$where."
                        ) as product_monthly
                        
                ")
                ->order_by('category_name');
                if($allow_category){
                    $this->db->where_in("product_monthly.category_id",$allow_category);
                }
                
                $q = $this->db->get();
                if ($q->num_rows() > 0) {
                    foreach (($q->result()) as $row) {
                        $data[] = $row;
                    }
                } else {
                    $data = NULL;
                }

                if (!empty($data)) {
                    $this->load->library('excel');
                    $this->excel->setActiveSheetIndex(0);
                    $this->excel->getActiveSheet()->setTitle(lang('product_monthly_sale'));
                    $this->excel->getActiveSheet()->SetCellValue('A1', lang('category'));   
                    $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_code'));
                    $this->excel->getActiveSheet()->SetCellValue('C1', lang('product_name'));
                    $this->excel->getActiveSheet()->SetCellValue('D1', lang(($year-1)));
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang($year));
                    
                    $row = 2;
                    foreach ($data as $data_row) {
                        $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->category_name);
                        $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->code);
                        $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->name);
                        $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->remove_tag($data_row->last_quantity));
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->remove_tag($data_row->current_quantity));
                        
                        $row++;
                    }
                    
                    $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                    $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(35);
                    $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);

                    
            
                    $filename = 'product_yearly_sale_' . date('Y_m_d_H_i_s');
                    $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    $this->load->helper('excel');
                    create_excel($this->excel, $filename);
                }
                $this->session->set_flashdata('error', lang('nothing_found'));
                redirect($_SERVER["HTTP_REFERER"]);
        }else{
            $this->load->library('datatables');
            $this->datatables
                ->select("category_name,code,name,last_quantity,current_quantity")
                ->from("(SELECT
                                (".$this->db->dbprefix('categories').".`name`) AS category_name,
                                (".$this->db->dbprefix('categories').".`id`) AS category_id,
                                (".$this->db->dbprefix('products').".code) as code,
                                (".$this->db->dbprefix('products').".name) as name,
                                convert_qty(".$this->db->dbprefix('products').".id ,(SELECT IFNULL(sum(quantity + IFNULL(foc,0)),0) FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date) = ".($year - 1)." AND product_id = ".$this->db->dbprefix('products').".id )) AS last_quantity,
                                convert_qty(".$this->db->dbprefix('products').".id ,(SELECT IFNULL(sum(quantity + IFNULL(foc,0)),0) FROM ".$this->db->dbprefix('sale_items')." INNER JOIN ".$this->db->dbprefix('sales')." ON ".$this->db->dbprefix('sales').".id = ".$this->db->dbprefix('sale_items').".sale_id WHERE 1=1 ".$where_warehouse." AND YEAR (".$this->db->dbprefix('sales').".date) = ".$year." AND product_id = ".$this->db->dbprefix('products').".id )) AS current_quantity
                            FROM
                                ".$this->db->dbprefix('products')."
                            INNER JOIN ".$this->db->dbprefix('categories')." ON ".$this->db->dbprefix('categories').".id = ".$this->db->dbprefix('products').".category_id
                            WHERE 1=1 ".$where."
                        ) as product_monthly
                        
                ");
            if($allow_category){
                $this->datatables->where_in("product_monthly.category_id",$allow_category);
            }   
            echo $this->datatables->generate();
        }
        
    }
    public function daily_sale_lists()
    {
        $this->bpas->checkPermissions('daily_sales');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_sale_lists')));
        $meta = array('page_title' => lang('daily_sale_lists'), 'bc' => $bc);
        $this->page_construct('reports/daily_sale_lists', $meta, $this->data);
    }
    
    public function get_daily_sales($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('daily_sales', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $sale_type = $this->input->get('sale_type') ? $this->input->get('sale_type') : NULL;
        $sale_tax = $this->input->get('sale_tax') ? $this->input->get('sale_tax') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if($end_date){
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
            $biller = $this->session->userdata('biller_id');
        }
        $where = " AND ".$this->db->dbprefix('sales').".sale_status !='draft'";
        if($biller){
            $where .= " AND ".$this->db->dbprefix('sales').".biller_id='".$biller."'";
        }
        if($customer){
            $where .= " AND ".$this->db->dbprefix('sales').".customer_id='".$customer."'";
        }
        if($project){
            $where .= " AND ".$this->db->dbprefix('sales').".project_id='".$project."'";
        }
        if($warehouse){
            $where .= " AND ".$this->db->dbprefix('sales').".warehouse_id='".$warehouse."'";
        }
        if ($user) {
            $where .= " AND ".$this->db->dbprefix('sales').".created_by='".$user."'";
        }
        if ($start_date) {
            $where .= " AND ".$this->db->dbprefix('sales').".date >= '".$start_date."'";
        }
        if ($end_date) {
            $where .= " AND ".$this->db->dbprefix('sales').".date <= '".$end_date."'";
        }
        if($sale_type){
            if($sale_type=="sale"){
                $where .= " AND ".$this->db->dbprefix('sales').".pos != '1'";
            }else if($sale_type=="pos"){
                $where .= " AND ".$this->db->dbprefix('sales').".pos = '1'";
            }
        }
        if($sale_tax){
            if($sale_tax=="yes"){
                $where .= " AND IFNULL(".$this->db->dbprefix('sales').".order_tax,0) != '0'";
            }else if($sale_tax=="no"){
                $where .= " AND IFNULL(".$this->db->dbprefix('sales').".order_tax,0) = '0'";
            }
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
            $warehouse_ids = str_replace(']',')',$warehouse_ids);
            $where .= " AND ".$this->db->dbprefix('sales').".warehouse_id IN ".$warehouse_ids;
        }
        if ($xls) {
            $this->db->select("montly_sale.date,montly_sale.sale_qty,montly_sale.item_qty,montly_sale.grand_total,montly_sale.total_cost,montly_sale.total_margin")
                            ->from("(SELECT
                                        date( ".$this->db->dbprefix('sales').".date ) AS date,
                                        count( ".$this->db->dbprefix('sales').".id ) AS sale_qty,
                                        sum( IFNULL(sale_items.quantity,0)) AS item_qty,
                                        sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) AS grand_total,
                                        sum( IFNULL( sale_items.cost, 0 ) ) AS total_cost,
                                        sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) - sum( IFNULL( sale_items.cost, 0 ) ) AS total_margin 
                                    FROM
                                        ".$this->db->dbprefix('sales')."
                                        LEFT JOIN ( SELECT sale_id, sum( cost * (quantity + IFNULL(foc,0)) ) AS cost, sum( quantity + IFNULL(foc,0) ) AS quantity FROM ".$this->db->dbprefix('sale_items')." GROUP BY sale_id ) AS sale_items ON ".$this->db->dbprefix('sales').".`id` = `sale_items`.`sale_id` 
                                    WHERE 1=1 ".$where."
                                    GROUP BY
                                        date( ".$this->db->dbprefix('sales').".date ) 
                                    ORDER BY
                                        date( ".$this->db->dbprefix('sales').".date ) DESC) 
                                    as montly_sale
                                ");
            
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('daily_sale_lists'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('sales'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('item_qty'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('grand_total'));
                if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('cost'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('gross_margin'));
                }
                $row = 2;
                $total_sale = 0;
                $total_qty = 0;
                $total_grand = 0;
                $total_cost = 0;
                $total_margin = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->formatQuantity($data_row->sale_qty));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->formatQuantity($data_row->item_qty));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->formatDecimal($data_row->grand_total));
                    if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($data_row->total_cost));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->total_margin));
                    }
                    
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                }


                $filename = 'daily_sale_lists_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("montly_sale.date,montly_sale.sale_qty,montly_sale.item_qty,montly_sale.grand_total,montly_sale.total_cost,montly_sale.total_margin")
                            ->from("(SELECT
                                        date( ".$this->db->dbprefix('sales').".date ) AS date,
                                        count( ".$this->db->dbprefix('sales').".id ) AS sale_qty,
                                        sum( IFNULL(sale_items.quantity,0)) AS item_qty,
                                        sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) AS grand_total,
                                        sum( IFNULL( sale_items.cost, 0 ) ) AS total_cost,
                                        sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) - sum( IFNULL( sale_items.cost, 0 ) ) AS total_margin 
                                    FROM
                                        ".$this->db->dbprefix('sales')."
                                        LEFT JOIN ( SELECT sale_id, sum( cost * (quantity + IFNULL(foc,0)) ) AS cost, sum( quantity + IFNULL(foc,0) ) AS quantity FROM ".$this->db->dbprefix('sale_items')." GROUP BY sale_id ) AS sale_items ON ".$this->db->dbprefix('sales').".`id` = `sale_items`.`sale_id` 
                                    WHERE 1=1 ".$where."
                                    GROUP BY
                                        date( ".$this->db->dbprefix('sales').".date ) 
                                    ORDER BY
                                        date( ".$this->db->dbprefix('sales').".date ) DESC) 
                                    as montly_sale
                                ");
            echo $this->datatables->generate();
        }
    }
    public function projects($biller_id = null)
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $user = $this->site->getUser($this->session->userdata('user_id'));
        if ($this->Settings->multi_biller) {
            $user_biller_id = $user->multi_biller;
        } else {
            $user_biller_id = $user->biller_id;
        }
        $count = explode(',', $user_biller_id);
        if (($this->Owner || $this->Admin) || !$user_biller_id) {
            $this->data['billers']   = $this->site->getAllCompanies('biller');
            $this->data['biller_id'] = $biller_id;
            $this->data['biller']    = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        } else {
            if (count($count) > 1) {
                $this->data['billers']   = $this->site->getAllCompanies('biller');
            } else {
                $this->data['billers']   = null;
            }
            $this->data['count_billers'] = $count;
            $this->data['biller_id']     = $biller_id;
            $this->data['biller']        = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        }

        $this->data['user_biller_id'] = $user_biller_id;
        $this->data['multi_biller']   = $user_biller_id ? $this->site->getMultiBillerByID($user_biller_id) : null;
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['categories'] = $this->reports_model->getExpenseCategories();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('projects_report')]];
        $meta                     = ['page_title' => lang('projects_report'), 'bc' => $bc];
        $this->page_construct('reports/projects_report', $meta, $this->data);
    }
    public function getProjectsReport($biller_id = null, $pdf = null, $xls = null)
    {
        $this->bpas->checkPermissions('expenses');

        $reference_no = $this->input->get('reference_no') ? $this->input->get('reference_no') : null;
        $category     = $this->input->get('category') ? $this->input->get('category') : null;
        $warehouse    = $this->input->get('warehouse') ? $this->input->get('warehouse') : null;
        $note         = $this->input->get('note') ? $this->input->get('note') : null;
        $user         = $this->input->get('user') ? $this->input->get('user') : null;
        $start_date   = $this->input->get('start_date') ? $this->input->get('start_date') : null;
        $end_date     = $this->input->get('end_date') ? $this->input->get('end_date') : null;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
            $end_date   = $this->bpas->fld($end_date);
        }
        $search_biller = $biller_id ? $biller_id : null;
        if ((!$this->Owner && !$this->Admin) && !$biller_id) {
            $user_log = $this->site->getUser($this->session->userdata('user_id'));
            if ($this->Settings->multi_biller) {
                $biller_id = $user_log->multi_biller;
            } else {
                $biller_id = $user_log->biller_id;
            }
        } 
        if ($pdf || $xls) {
            $this->db
                ->select("
                    DATE_FORMAT({$this->db->dbprefix('companies')}.date, '%Y-%m-%d %T') as date, 
                    CONCAT({$this->db->dbprefix('companies')}.company,'/',{$this->db->dbprefix('companies')}.name) as biller,
                    project_name,
                    CONCAT(cl.name) as client, 
                    {$this->db->dbprefix('projects')}.start_date,
                    {$this->db->dbprefix('projects')}.end_date, 
                    {$this->db->dbprefix('projects')}.status, 
                    
                    {$this->db->dbprefix('projects')}.project_id as id", false)
                ->from('projects')
                ->join('users', 'users.id=projects.created_by', 'left')
                ->join('companies', 'companies.id=projects.biller_id', 'left')
                ->join('companies cl', 'cl.id=projects.clients_id', 'left')
                ->group_by('projects.project_id');

            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->db->where('created_by', $this->session->userdata('user_id'));
            }
            if ($biller_id) {
                $this->db->where('expenses.biller_id IN ('.$biller_id.')');
            }
            if ($note) {
                $this->db->like('expenses.description', $note, 'both');
            }
            if ($user) {
                $this->db->where('created_by', $user);
            }
            if ($start_date) {
                $this->db->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }

            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = null;
            }
            if (!empty($data)) {
                $biller = $this->site->getBillerDetails($search_biller);
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $style_font_TNR = array(
                    'font' => array(
                        'bold'  => true,
                        'color' => array('rgb' => '#000000'),
                        'size'  => 12,
                        'name'  => 'Time New Romance'
                    ),
                );
                $objDrawing = new PHPExcel_Worksheet_Drawing();
                $logo = $_SERVER['DOCUMENT_ROOT'] . '/' . dirname($_SERVER['SCRIPT_NAME']) . '/assets/uploads/logos/' . (!empty($biller) ? $biller->logo : $this->Settings->logo);
                $objDrawing->setPath($logo);
                $objDrawing->setOffsetX(8);
                $objDrawing->setOffsetY(50);
                $objDrawing->setCoordinates('B1');
                $objDrawing->setHeight(75);
                $objDrawing->setWorksheet($this->excel->getActiveSheet());
                $this->excel->getActiveSheet()->SetCellValue('D2', (!empty($biller) ? $biller->company . ' ' . $biller->name : ''));    
                $this->excel->getActiveSheet()->getStyle('D2')->applyFromArray($style_font_TNR);
                $this->excel->getActiveSheet()->mergeCells('D3:E3')->setCellValue('D3', (!empty($biller) ? strip_tags($biller->address) : ''));
                $this->excel->getActiveSheet()->getRowDimension('3')->setRowHeight(30);
                $this->excel->getActiveSheet()->getStyle('D3')->getAlignment()->setWrapText(true);
                $this->excel->getActiveSheet()->SetCellValue('C6', lang('expenses_report'));
                $this->excel->getActiveSheet()->getStyle('C6')->applyFromArray($style_font_TNR);
                $this->excel->getActiveSheet()->setTitle(lang('expenses_report'));
                $this->excel->getActiveSheet()->SetCellValue('A8', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B8', lang('reference_no'));
                $this->excel->getActiveSheet()->SetCellValue('C8', lang('category'));
                $this->excel->getActiveSheet()->SetCellValue('D8', lang('amount'));
                $this->excel->getActiveSheet()->SetCellValue('E8', lang('note'));
                $this->excel->getActiveSheet()->SetCellValue('F8', lang('created_by'));
                $row   = 9;
                $total = 0;
                foreach ($data as $data_row) {
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->reference);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->category);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->amount);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->remove_tag($data_row->note));
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $data_row->created_by);
                    $total += $data_row->amount;
                    $row++;
                }
                $this->excel->getActiveSheet()->getStyle('D' . $row)->getBorders()->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                $this->excel->getActiveSheet()->SetCellValue('D' . $row, $total);
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(35);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $filename = 'expenses_report';
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER['HTTP_REFERER']);
        } else {
            $this->load->library('datatables');
            $this->datatables
                ->select("
                    DATE_FORMAT({$this->db->dbprefix('companies')}.date, '%Y-%m-%d %T') as date, 
                    CONCAT({$this->db->dbprefix('companies')}.company,'/',{$this->db->dbprefix('companies')}.name) as biller,
                    project_name,
                    CONCAT(cl.name) as client, 
                    {$this->db->dbprefix('projects')}.start_date,
                    {$this->db->dbprefix('projects')}.end_date, 
                    {$this->db->dbprefix('projects')}.status, 
                    
                    {$this->db->dbprefix('projects')}.project_id as id", false)
                ->from('projects')
                ->join('users', 'users.id=projects.created_by', 'left')
                ->join('companies', 'companies.id=projects.biller_id', 'left')
                ->join('companies cl', 'cl.id=projects.clients_id', 'left')
                ->group_by('projects.project_id');
                
            if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
                $this->datatables->where('created_by', $this->session->userdata('user_id'));
            }
            if ($biller_id) {
                $this->datatables->where('projects.biller_id IN ('.$biller_id.')');
            }
            if ($note) {
                $this->datatables->like('projects.description', $note, 'both');
            }
            if ($reference_no) {
                $this->datatables->like('projects', $reference_no, 'both');
            }
            if ($user) {
                $this->datatables->where('created_by', $user);
            }
            if ($start_date) {
                $this->datatables->where('date BETWEEN "' . $start_date . '" and "' . $end_date . '"');
            }
            echo $this->datatables->generate();
        }
    }
    public function project_budget($biller_id = null)
    {
        $this->bpas->checkPermissions();
        $this->data['error'] = (validation_errors()) ? validation_errors() : $this->session->flashdata('error');

        $user = $this->site->getUser($this->session->userdata('user_id'));
        if ($this->Settings->multi_biller) {
            $user_biller_id = $user->multi_biller;
        } else {
            $user_biller_id = $user->biller_id;
        }
        $count = explode(',', $user_biller_id);
        if (($this->Owner || $this->Admin) || !$user_biller_id) {
            $this->data['billers']   = $this->site->getAllCompanies('biller');
            $this->data['biller_id'] = $biller_id;
            $this->data['biller']    = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        } else {
            if (count($count) > 1) {
                $this->data['billers']   = $this->site->getAllCompanies('biller');
            } else {
                $this->data['billers']   = null;
            }
            $this->data['count_billers'] = $count;
            $this->data['biller_id']     = $biller_id;
            $this->data['biller']        = $biller_id ? $this->site->getCompanyByID($biller_id) : null;
        }
        $this->data['projects']   = $this->site->getAllProject();
        $this->data['user_biller_id'] = $user_biller_id;
        $this->data['multi_biller']   = $user_biller_id ? $this->site->getMultiBillerByID($user_biller_id) : null;
        $this->data['warehouses'] = $this->site->getAllWarehouses();
        $this->data['users']      = $this->reports_model->getStaff();
        $this->data['categories'] = $this->reports_model->getExpenseCategories();
        $bc                       = [['link' => base_url(), 'page' => lang('home')], ['link' => admin_url('reports'), 'page' => lang('reports')], ['link' => '#', 'page' => lang('project_budgets_report')]];
        $meta                     = ['page_title' => lang('project_budgets_report'), 'bc' => $bc];
        $this->page_construct('reports/project_budgets_report', $meta, $this->data);
    }
    public function daily_sale_profit()
    {
        $this->bpas->checkPermissions('daily_sale_profit');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('daily_sale_profit')));
        $meta = array('page_title' => lang('daily_sale_profit'), 'bc' => $bc);
        $this->page_construct('reports/daily_sale_profit', $meta, $this->data);
    }
    public function get_daily_sales_profit($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('daily_sales', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $sale_type = $this->input->get('sale_type') ? $this->input->get('sale_type') : NULL;
        $sale_tax = $this->input->get('sale_tax') ? $this->input->get('sale_tax') : NULL;

        $where_begin = "";
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if($end_date){
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
            $biller = $this->session->userdata('biller_id');
        }
        $where = " AND ".$this->db->dbprefix('sales').".sale_status !='draft'";
        if($biller){
            $where .= " AND ".$this->db->dbprefix('sales').".biller_id='".$biller."'";
        }
        if($customer){
            $where .= " AND ".$this->db->dbprefix('sales').".customer_id='".$customer."'";
        }
        if($project){
            $where .= " AND ".$this->db->dbprefix('sales').".project_id='".$project."'";
        }
        if($warehouse){
            $where .= " AND ".$this->db->dbprefix('sales').".warehouse_id='".$warehouse."'";
        }
        if ($user) {
            $where .= " AND ".$this->db->dbprefix('sales').".created_by='".$user."'";
        }
        if ($start_date) {
            $where .= " AND ".$this->db->dbprefix('sales').".date >= '".$start_date."'";
            $where_begin .= " AND DATE({$this->db->dbprefix('stock_movement')}.date) < '".$start_date."'";
        }
        if ($end_date) {
            $where .= " AND ".$this->db->dbprefix('sales').".date <= '".$end_date."'";
        }
        if($sale_type){
            if($sale_type=="sale"){
                $where .= " AND ".$this->db->dbprefix('sales').".pos != '1'";
            }else if($sale_type=="pos"){
                $where .= " AND ".$this->db->dbprefix('sales').".pos = '1'";
            }
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
            $warehouse_ids = str_replace(']',')',$warehouse_ids);
            $where .= " AND ".$this->db->dbprefix('sales').".warehouse_id IN ".$warehouse_ids;
        }

        $sp = "( SELECT 
                    {$this->db->dbprefix('stock_movement')}.transaction_id,
                    sum( IFNULL({$this->db->dbprefix('sales')}.grand_total, 0 ) ) AS grand_total,
                    sum( IFNULL({$this->db->dbprefix('sale_items')}.cost, 0 ) ) AS total_cost
                from ".$this->db->dbprefix('sales')." 
                JOIN ".$this->db->dbprefix('sale_items') . " on {$this->db->dbprefix('sales')}.id = {$this->db->dbprefix('sale_items')}.sale_id 
                JOIN " .$this->db->dbprefix('stock_movement'). " on {$this->db->dbprefix('sales')}.id = {$this->db->dbprefix('stock_movement')}.transaction_id
                WHERE ({$this->db->dbprefix('stock_movement')}.transaction ='Sale' OR {$this->db->dbprefix('stock_movement')}.transaction ='SaleReturn') 
            ";
        $sp .= " ) PSales";

        $this->load->library('datatables');
        $this->datatables
            ->select("
                DATE_FORMAT({$this->db->dbprefix('stock_movement')}.date, '%Y-%m-%d') as date, 
                {$this->db->dbprefix('stock_movement')}.transaction as transaction,
                PSales.grand_total as grand_total, 
                {$this->db->dbprefix('stock_movement')}.product_id as product_id, 
                {$this->db->dbprefix('stock_movement')}.product_name as product_name,
                {$this->db->dbprefix('stock_movement')}.product_type as product_type,
                {$this->db->dbprefix('stock_movement')}.quantity as quantity
            ")
            ->from('stock_movement')
            ->join($sp, 'stock_movement.id = PSales.transaction_id', 'left')
            ->group_by("DATE_FORMAT({$this->db->dbprefix('stock_movement')}.date, '%Y-%m-%d')") 
            ->order_by("{$this->db->dbprefix('stock_movement')}.date DESC");

        echo $this->datatables->generate();
        
    }
    public function monthly_sale_profit()
    {
        $this->bpas->checkPermissions('monthly_sale_profit');
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('monthly_sale_profit')));
        $meta = array('page_title' => lang('monthly_sale_profit'), 'bc' => $bc);
        $this->page_construct('reports/monthly_sale_profit', $meta, $this->data);
    }
    public function get_monthly_sales_profit($pdf = NULL, $xls = NULL)
    {
        $this->bpas->checkPermissions('daily_sales', TRUE);
        $user = $this->input->get('user') ? $this->input->get('user') : NULL;
        $customer = $this->input->get('customer') ? $this->input->get('customer') : NULL;
        $biller = $this->input->get('biller') ? $this->input->get('biller') : NULL;
        $project = $this->input->get('project') ? $this->input->get('project') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $start_date = $this->input->get('start_date') ? $this->input->get('start_date') : NULL;
        $end_date = $this->input->get('end_date') ? $this->input->get('end_date') : NULL;
        $sale_type = $this->input->get('sale_type') ? $this->input->get('sale_type') : NULL;
        $sale_tax = $this->input->get('sale_tax') ? $this->input->get('sale_tax') : NULL;
        if ($start_date) {
            $start_date = $this->bpas->fld($start_date);
        }
        if($end_date){
            $end_date = $this->bpas->fld($end_date,false,1);
        }
        if (!$this->Owner && !$this->Admin && !$this->session->userdata('view_right')) {
            $user = $this->session->userdata('user_id');
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('biller_id')) {
            $biller = $this->session->userdata('biller_id');
        }
        $where = " AND ".$this->db->dbprefix('sales').".sale_status !='draft'";
        if($biller){
            $where .= " AND ".$this->db->dbprefix('sales').".biller_id='".$biller."'";
        }
        if($customer){
            $where .= " AND ".$this->db->dbprefix('sales').".customer_id='".$customer."'";
        }
        if($project){
            $where .= " AND ".$this->db->dbprefix('sales').".project_id='".$project."'";
        }
        if($warehouse){
            $where .= " AND ".$this->db->dbprefix('sales').".warehouse_id='".$warehouse."'";
        }
        if ($user) {
            $where .= " AND ".$this->db->dbprefix('sales').".created_by='".$user."'";
        }
        if ($start_date) {
            $where .= " AND ".$this->db->dbprefix('sales').".date >= '".$start_date."'";
        }
        if ($end_date) {
            $where .= " AND ".$this->db->dbprefix('sales').".date <= '".$end_date."'";
        }
        if($sale_type){
            if($sale_type=="sale"){
                $where .= " AND ".$this->db->dbprefix('sales').".pos != '1'";
            }else if($sale_type=="pos"){
                $where .= " AND ".$this->db->dbprefix('sales').".pos = '1'";
            }
        }
        if($sale_tax){
            if($sale_tax=="yes"){
                $where .= " AND IFNULL(".$this->db->dbprefix('sales').".order_tax,0) != '0'";
            }else if($sale_tax=="no"){
                $where .= " AND IFNULL(".$this->db->dbprefix('sales').".order_tax,0) = '0'";
            }
        }
        if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
            $warehouse_ids = str_replace('[','(',$this->session->userdata('warehouse_id'));
            $warehouse_ids = str_replace(']',')',$warehouse_ids);
            $where .= " AND ".$this->db->dbprefix('sales').".warehouse_id IN ".$warehouse_ids;
        }

        if ($xls) {
            $this->db->select("montly_sale.date,montly_sale.sale_qty,montly_sale.item_qty,montly_sale.grand_total,montly_sale.total_cost,montly_sale.total_margin")
                            ->from("(SELECT
                                        date( ".$this->db->dbprefix('sales').".date ) AS date,
                                        count( ".$this->db->dbprefix('sales').".id ) AS sale_qty,
                                        sum( IFNULL(sale_items.quantity,0)) AS item_qty,
                                        sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) AS grand_total,
                                        sum( IFNULL( sale_items.cost, 0 ) ) AS total_cost,
                                        sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) - sum( IFNULL( sale_items.cost, 0 ) ) AS total_margin 
                                    FROM
                                        ".$this->db->dbprefix('sales')."
                                        LEFT JOIN ( SELECT sale_id, sum( cost * (quantity + IFNULL(foc,0)) ) AS cost, sum( quantity + IFNULL(foc,0) ) AS quantity FROM ".$this->db->dbprefix('sale_items')." GROUP BY sale_id ) AS sale_items ON ".$this->db->dbprefix('sales').".`id` = `sale_items`.`sale_id` 
                                    WHERE 1=1 ".$where."
                                    GROUP BY
                                        date( ".$this->db->dbprefix('sales').".date ) 
                                    ORDER BY
                                        date( ".$this->db->dbprefix('sales').".date ) DESC) 
                                    as montly_sale
                                ");
            
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {

                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('daily_sale_lists'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('date'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('sales'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('item_qty'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('grand_total'));
                if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
                    $this->excel->getActiveSheet()->SetCellValue('E1', lang('cost'));
                    $this->excel->getActiveSheet()->SetCellValue('F1', lang('gross_margin'));
                }
                $row = 2;
                $total_sale = 0;
                $total_qty = 0;
                $total_grand = 0;
                $total_cost = 0;
                $total_margin = 0;
                foreach ($data as $data_row){
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $this->bpas->hrld($data_row->date));
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $this->bpas->formatQuantity($data_row->sale_qty));
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $this->bpas->formatQuantity($data_row->item_qty));
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $this->bpas->formatDecimal($data_row->grand_total));
                    if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
                        $this->excel->getActiveSheet()->SetCellValue('E' . $row, $this->bpas->formatDecimal($data_row->total_cost));
                        $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->total_margin));
                    }
                    
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
                    $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                    $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                }


                $filename = 'daily_sale_lists_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        } else {
            $this->load->library('datatables');
            $this->datatables->select("
                montly_sale.date,
                montly_sale.sale_qty,
                montly_sale.item_qty,
                montly_sale.grand_total,
                montly_sale.total_cost,
                montly_sale.total_margin
            ")
            ->from("(SELECT
                        DATE_FORMAT({$this->db->dbprefix('sales')}.date,'%m/%Y') AS date,

                        count( ".$this->db->dbprefix('sales').".id ) AS sale_qty,
                        sum( IFNULL(sale_items.quantity,0)) AS item_qty,
                        sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) AS grand_total,
                        sum( IFNULL( sale_items.cost, 0 ) ) AS total_cost,
                        sum( IFNULL( ".$this->db->dbprefix('sales').".grand_total, 0 ) ) - sum( IFNULL( sale_items.cost, 0 ) ) AS total_margin 
                    FROM
                        ".$this->db->dbprefix('sales')."
                        LEFT JOIN ( SELECT sale_id, sum( cost * (quantity + IFNULL(foc,0)) ) AS cost, sum( quantity + IFNULL(foc,0) ) AS quantity FROM ".$this->db->dbprefix('sale_items')." GROUP BY sale_id ) AS sale_items ON ".$this->db->dbprefix('sales').".`id` = `sale_items`.`sale_id` 
                    WHERE 1=1 ".$where."
                    GROUP BY
                        MONTH(".$this->db->dbprefix('sales').".date),
                        Year(".$this->db->dbprefix('sales').".date)
                    ORDER BY
                        {$this->db->dbprefix('sales')}.date DESC
                )as montly_sale
            ");
            echo $this->datatables->generate();
        }
    }
    //-----------------------
    public function product_serial_report()
    {
        $this->bpas->checkPermissions('product_serial_report', TRUE);
        $this->data['users'] = $this->reports_model->getStaff();
        $this->data['warehouses'] = $this->site->getWarehouses();
        $this->data['billers'] = $this->site->getAllCompanies('biller');
        $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => site_url('reports'), 'page' => lang('reports')), array('link' => '#', 'page' => lang('product_serial_report')));
        $meta = array('page_title' => lang('product_serial_report'), 'bc' => $bc);
        $this->page_construct('reports/product_serial_report', $meta, $this->data);
    }
    
    public function getProductSerialReport ($pdf = null , $xls = null)
    {
        $this->bpas->checkPermissions('product_serial_report', TRUE);
        $serial_number = $this->input->get('serial_number') ? $this->input->get('serial_number') : NULL;
        $warehouse = $this->input->get('warehouse') ? $this->input->get('warehouse') : NULL;
        $status = $this->input->get('status') ? $this->input->get('status') : NULL;
        $product = $this->input->get('product') ? $this->input->get('product') : NULL;

        if ($xls) {
            $this->db->select("
                                products.code,
                                products.name,
                                product_serials.serial,
                                warehouses.name as warehouse,
                                IFNULL(".$this->db->dbprefix('product_serials').".cost,0) as cost,
                                IFNULL(".$this->db->dbprefix('product_serials').".price,0) as price,
                                product_serials.color,
                                product_serials.description,
                                IF(".$this->db->dbprefix('product_serials').".inactive = 1,'inactive','active') as status,
                                product_serials.product_id", FALSE)
                                ->from('product_serials')
                                ->join('products', 'products.id=product_serials.product_id', 'inner')
                                ->join('warehouses', 'warehouses.id=product_serials.warehouse_id', 'inner')
                        ->group_by('product_serials.id');
            if ($serial_number) {
                $this->db->where('product_serials.serial', $serial_number);
            }
            if ($warehouse) {
                $this->db->where('product_serials.warehouse_id', $warehouse);
            }
            if ($product) {
                $this->db->where('product_serials.product_id', $product);
            }
            if ($status) {
                if($status=='active'){
                    $status = 0;
                }else{
                    $status = 1;
                }
                $this->db->where('IFNULL('.$this->db->dbprefix("product_serials").'.inactive,0)', $status);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->db->where_in('product_serials.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            $q = $this->db->get();
            if ($q->num_rows() > 0) {
                foreach (($q->result()) as $row) {
                    $data[] = $row;
                }
            } else {
                $data = NULL;
            }
            if (!empty($data)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('product_serial_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product_code'));
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('product_name'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('serial_number'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('cost'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('price'));
                $this->excel->getActiveSheet()->SetCellValue('G1', lang('color'));
                $this->excel->getActiveSheet()->SetCellValue('H1', lang('description'));
                $this->excel->getActiveSheet()->SetCellValue('I1', lang('status'));
                $row = 2;
                foreach ($data as $data_row){
                    if ($this->Owner || $this->Admin || $this->session->userdata('show_cost')) {
                        $cost = $this->bpas->formatDecimal($data_row->cost);
                    }else{
                        $cost = '';
                    }
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $data_row->code);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $data_row->name);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $data_row->serial);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $data_row->warehouse);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $cost);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($data_row->price));
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $data_row->color);
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $data_row->description);
                    $this->excel->getActiveSheet()->SetCellValue('I' . $row, lang($data_row->status));
                    
                    $row++;
                }
                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(15);
                $filename = 'product_serial_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
            
        } else{  
            $this->load->library('datatables');
            $this->datatables->select("
                                    products.code,
                                    products.name,
                                    product_serials.serial,
                                    warehouses.name as warehouse,
                                    IFNULL(".$this->db->dbprefix('product_serials').".cost,0) as cost,
                                    IFNULL(".$this->db->dbprefix('product_serials').".price,0) as price,
                                    product_serials.color,
                                    product_serials.description,
                                    IF(".$this->db->dbprefix('product_serials').".inactive = 1,'inactive','active') as status,
                                    product_serials.product_id", FALSE)
                                    ->from('product_serials')
                                    ->join('products', 'products.id=product_serials.product_id', 'inner')
                                    ->join('warehouses', 'warehouses.id=product_serials.warehouse_id', 'inner')
                            ->group_by('product_serials.id');
            if ($serial_number) {
                $this->datatables->where('product_serials.serial', $serial_number);
            }
            if ($warehouse) {
                $this->datatables->where('product_serials.warehouse_id', $warehouse);
            }
            if ($product) {
                $this->datatables->where('product_serials.product_id', $product);
            }
            if ($status) {
                if($status=='active'){
                    $status = 0;
                }else{
                    $status = 1;
                }
                $this->datatables->where('IFNULL('.$this->db->dbprefix("product_serials").'.inactive,0)', $status);
            }
            if (!$this->Owner && !$this->Admin && $this->session->userdata('warehouse_id')) {
                $this->datatables->where_in('product_serials.warehouse_id', json_decode($this->session->userdata('warehouse_id')));
            }
            echo $this->datatables->generate();
            
        }
    }
    
    public function serial_by_product_report()
    {
        $this->bpas->checkPermissions('product_serial_report');
        $product_serials = $this->reports_model->getProductSerails($this->input->post());
        if(isset($_POST['xls']) || isset($_POST['pdf'])){
            if (!empty($product_serials)) {
                $this->load->library('excel');
                $this->excel->setActiveSheetIndex(0);
                $this->excel->getActiveSheet()->setTitle(lang('serial_by_product_report'));
                $this->excel->getActiveSheet()->SetCellValue('A1', lang('product')." (".lang('code').")");
                $this->excel->getActiveSheet()->SetCellValue('B1', lang('serial'));
                $this->excel->getActiveSheet()->SetCellValue('C1', lang('warehouse'));
                $this->excel->getActiveSheet()->SetCellValue('D1', lang('color'));
                $this->excel->getActiveSheet()->SetCellValue('E1', lang('description'));
                $this->excel->getActiveSheet()->SetCellValue('F1', lang('quantity'));
                if($this->Admin || $this->Owner || $this->GP['products-cost']){
                    $this->excel->getActiveSheet()->SetCellValue('G1', lang('cost'));
                }
                if($this->Admin || $this->Owner || $this->GP['products-price']){
                    $this->excel->getActiveSheet()->SetCellValue('H1', lang('price'));
                }
                $row = 1; 
                foreach($product_serials as $product_serial){
                    $row += 1;
                    if($product_code == $product_serial->product_code){
                        $product = '';
                    }else{
                        if($product_code != ''){
                            $row += 1;
                            
                            if($this->Admin || $this->Owner || ($this->GP['products-cost'] && $this->GP['products-price'])){
                                $this->excel->getActiveSheet()->getStyle("F" . ($row - 1) . ":H" . ($row - 1))->getBorders()
                                        ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                            }else if($this->GP['products-cost'] || $this->GP['products-price']){
                                $this->excel->getActiveSheet()->getStyle("F" . ($row - 1) . ":H" . ($row - 1))->getBorders()
                                        ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                            }else{
                                $this->excel->getActiveSheet()->getStyle("F" . ($row - 1) . ":F" . ($row - 1))->getBorders()
                                        ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                            }
                            
                            $this->excel->getActiveSheet()->SetCellValue('E' . ($row - 1), lang('total'));
                            $this->excel->getActiveSheet()->SetCellValue('F' . ($row - 1), $total_quantity);
                            if($this->Admin || $this->Owner || $this->GP['products-cost']){
                                $this->excel->getActiveSheet()->SetCellValue('G' . ($row - 1), $this->bpas->formatDecimal($total_cost));
                            }
                            if($this->Admin || $this->Owner || $this->GP['products-price']){
                                $this->excel->getActiveSheet()->SetCellValue('H' . ($row - 1), $this->bpas->formatDecimal($total_price));
                            }
                        }
                        $product = $product_serial->product_name.' ('.$product_serial->product_code.')';
                        $product_code = $product_serial->product_code;
                        $total_quantity = 0;
                        $total_cost = 0;
                        $total_price = 0;
                    }
                    
                    $quantity = 1;
                    if($product_serial->inactive == 1){
                        $quantity = 0;
                    }
                    
                    $this->excel->getActiveSheet()->SetCellValue('A' . $row, $product);
                    $this->excel->getActiveSheet()->SetCellValue('B' . $row, $product_serial->serial);
                    $this->excel->getActiveSheet()->SetCellValue('C' . $row, $product_serial->warehouse_name);
                    $this->excel->getActiveSheet()->SetCellValue('D' . $row, $product_serial->color);
                    $this->excel->getActiveSheet()->SetCellValue('E' . $row, $product_serial->description);
                    $this->excel->getActiveSheet()->SetCellValue('F' . $row, $quantity);
                    if($this->Admin || $this->Owner || $this->GP['products-cost']){
                        $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($product_serial->cost));
                    }
                    if($this->Admin || $this->Owner || $this->GP['products-price']){
                        $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($product_serial->price));
                    }
                    $total_cost += $product_serial->cost * $quantity;
                    $total_price += $product_serial->price * $quantity;
                    $total_quantity += $quantity;
                    $grand_cost += $product_serial->cost * $quantity;
                    $grand_price += $product_serial->price * $quantity;
                    $grand_quantity += $quantity;
                }
                
                $row += 1;      
                if($this->Admin || $this->Owner || ($this->GP['products-cost'] && $this->GP['products-price'])){
                    $this->excel->getActiveSheet()->getStyle("F" . ($row) . ":H" . ($row))->getBorders()
                            ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                }else if($this->GP['products-cost'] || $this->GP['products-price']){
                    $this->excel->getActiveSheet()->getStyle("F" . ($row) . ":H" . ($row))->getBorders()
                            ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                }else{
                    $this->excel->getActiveSheet()->getStyle("F" . ($row) . ":F" . ($row))->getBorders()
                            ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                }
                
                $this->excel->getActiveSheet()->SetCellValue('E' . ($row), lang('total'));
                $this->excel->getActiveSheet()->SetCellValue('F' . ($row), $total_quantity);
                if($this->Admin || $this->Owner || $this->GP['products-cost']){
                    $this->excel->getActiveSheet()->SetCellValue('G' . ($row), $this->bpas->formatDecimal($total_cost));
                }
                if($this->Admin || $this->Owner || $this->GP['products-price']){
                    $this->excel->getActiveSheet()->SetCellValue('H' . ($row), $this->bpas->formatDecimal($total_price));
                }
                
                
                
                $row += 1;
                if($this->Admin || $this->Owner || ($this->GP['products-cost'] && $this->GP['products-price'])){
                    $this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()
                            ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                }else if($this->GP['products-cost'] || $this->GP['products-price']){
                    $this->excel->getActiveSheet()->getStyle("F" . $row . ":H" . $row)->getBorders()
                            ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                }else{
                    $this->excel->getActiveSheet()->getStyle("F" . $row . ":F" . $row)->getBorders()
                            ->getTop()->setBorderStyle(PHPExcel_Style_Border::BORDER_MEDIUM);
                }


                $this->excel->getActiveSheet()->SetCellValue('E' . $row, lang('grand_total'));
                $this->excel->getActiveSheet()->SetCellValue('F' . $row, $this->bpas->formatDecimal($grand_quantity));
                if($this->Admin || $this->Owner || $this->GP['products-cost']){
                    $this->excel->getActiveSheet()->SetCellValue('G' . $row, $this->bpas->formatDecimal($grand_cost));
                }
                if($this->Admin || $this->Owner || $this->GP['products-price']){
                    $this->excel->getActiveSheet()->SetCellValue('H' . $row, $this->bpas->formatDecimal($grand_price));
                }

                $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
                $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
                $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(15);
                $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(15);
        
                $filename = 'serial_by_product_report_' . date('Y_m_d_H_i_s');
                $this->excel->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
                
                $this->load->helper('excel');
                create_excel($this->excel, $filename);
            }
            $this->session->set_flashdata('error', lang('nothing_found'));
            redirect($_SERVER["HTTP_REFERER"]);
        }else{
            $this->data['error'] = (validation_errors() ? validation_errors() : $this->session->flashdata('error'));
            $this->data['categories'] = $this->site->getAllCategories();
            $this->data['warehouses'] = $this->site->getWarehouses();
            $this->data['sel_warehouse'] = $this->input->post('warehouse') ? $this->site->getWarehouseByID($this->input->post('warehouse')) : NULL;
            $this->data['product_serials'] = $product_serials;
            $bc = array(array('link' => base_url(), 'page' => lang('home')), array('link' => '#', 'page' => lang('serial_by_product_report')));
            $meta = array('page_title' => lang('serial_by_product_report'), 'bc' => $bc);   
            $this->page_construct('reports/serial_by_product_report',$meta,$this->data);
        }
        
        
    }
}